use crate::Message;
use std::io::{Read, Write};

use wow_world_base::shared::account_data_type_vanilla_tbc::AccountDataType;

/// This is sent by the client after receiving [`SMSG_ACCOUNT_DATA_TIMES`](crate::vanilla::SMSG_ACCOUNT_DATA_TIMES). Client can also request a block through [`CMSG_REQUEST_ACCOUNT_DATA`](crate::vanilla::CMSG_REQUEST_ACCOUNT_DATA).
/// Auto generated from the original `wowm` in file [`wow_message_parser/wowm/world/login_logout/cmsg_update_account_data.wowm:16`](https://github.com/gtker/wow_messages/tree/main/wow_message_parser/wowm/world/login_logout/cmsg_update_account_data.wowm#L16):
/// ```text
/// cmsg CMSG_UPDATE_ACCOUNT_DATA = 0x020B {
///     (u32)AccountDataType data_type;
///     u8[-] compressed_data;
/// }
/// ```
#[derive(Debug, Clone, PartialEq, Eq, Hash, PartialOrd, Ord, Default)]
pub struct CMSG_UPDATE_ACCOUNT_DATA {
    /// Exact meaning unknown. Seems to be between 0 and 7. Block 6 is changed when changing `layout-cache.txt` inside the WTF folder.
    pub data_type: AccountDataType,
    pub compressed_data: Vec<u8>,
}

impl crate::private::Sealed for CMSG_UPDATE_ACCOUNT_DATA {}
impl CMSG_UPDATE_ACCOUNT_DATA {
    fn read_inner(mut r: &mut &[u8], body_size: u32) -> Result<Self, crate::errors::ParseErrorKind> {
        if !(8..=65543).contains(&body_size) {
            return Err(crate::errors::ParseErrorKind::InvalidSize);
        }

        // data_type: AccountDataType
        let data_type = (crate::util::read_u32_le(&mut r)? as u8).try_into()?;

        // compressed_data: u8[-]
        let compressed_data = {
            let compressed_data_decompressed_size = crate::util::read_u32_le(&mut r)?;

            let mut buf = Vec::with_capacity(compressed_data_decompressed_size as usize);
            let mut decoder = &mut flate2::read::ZlibDecoder::new(r);
            decoder.read_to_end(&mut buf).unwrap();
            let mut r = &buf[..];

            let mut current_size = {
                4 // data_type: AccountDataType
            };
            current_size += 4; // compressed_data_decompressed_size: u32
            let mut compressed_data = Vec::with_capacity(body_size as usize - current_size);
            while !r.is_empty() {
                compressed_data.push(crate::util::read_u8_le(&mut r)?);
            }
            compressed_data
        };

        Ok(Self {
            data_type,
            compressed_data,
        })
    }

}

impl crate::Message for CMSG_UPDATE_ACCOUNT_DATA {
    const OPCODE: u32 = 0x020b;

    #[cfg(feature = "print-testcase")]
    fn message_name(&self) -> &'static str {
        "CMSG_UPDATE_ACCOUNT_DATA"
    }

    fn size_without_header(&self) -> u32 {
        self.size() as u32
    }

    fn write_into_vec(&self, mut w: impl Write) -> Result<(), std::io::Error> {
        // data_type: AccountDataType
        w.write_all(&u32::from(self.data_type.as_int()).to_le_bytes())?;

        // compressed_data: u8[-]
        let decompressed_size: u32 = 1 * self.compressed_data.len() as u32;
        w.write_all(&decompressed_size.to_le_bytes())?;
        let mut encoder = flate2::write::ZlibEncoder::new(w, flate2::Compression::default());
        for i in self.compressed_data.iter() {
            encoder.write_all(&i.to_le_bytes())?;
        }

        Ok(())
    }

    fn read_body<S: crate::private::Sealed>(r: &mut &[u8], body_size: u32) -> Result<Self, crate::errors::ParseError> {
        Self::read_inner(r, body_size).map_err(|a| crate::errors::ParseError::new(523, "CMSG_UPDATE_ACCOUNT_DATA", body_size, a))
    }

}

#[cfg(feature = "vanilla")]
impl crate::vanilla::ClientMessage for CMSG_UPDATE_ACCOUNT_DATA {
    #[cfg(feature = "sync")]
    fn write_unencrypted_client<W: Write>(&self, mut w: W) -> Result<(), std::io::Error> {
        let mut v = Vec::with_capacity(1024);
        let mut s = &mut v;
        crate::util::vanilla_get_unencrypted_client(&mut s, Self::OPCODE as u16, 0)?;
        self.write_into_vec(&mut s)?;
        let size_len = 2;
        let size = v.len().saturating_sub(size_len);
        let s = size.to_le_bytes();
        v[0] = s[1];
        v[1] = s[0];
        w.write_all(&v)
    }

    #[cfg(all(feature = "sync", feature = "encryption"))]
    fn write_encrypted_client<W: Write>(
        &self,
        mut w: W,
        e: &mut wow_srp::vanilla_header::EncrypterHalf,
    ) -> Result<(), std::io::Error> {
        let mut v = Vec::with_capacity(1024);
        let mut s = &mut v;
        crate::util::vanilla_get_unencrypted_client(&mut s, Self::OPCODE as u16, 0)?;
        self.write_into_vec(&mut s)?;
        let size_len = 2;
        let size = v.len().saturating_sub(size_len) as u16;
        let header = e.encrypt_client_header(size, Self::OPCODE);
        for (i, e) in header.iter().enumerate() {
            v[i] = *e;
        }
        w.write_all(&v)
    }

    #[cfg(feature = "tokio")]
    fn tokio_write_unencrypted_client<'s, 'async_trait, W>(
        &'s self,
        mut w: W,
    ) -> std::pin::Pin<Box<dyn std::future::Future<Output = Result<(), std::io::Error>> + Send + 'async_trait>>
    where
        W: 'async_trait + tokio::io::AsyncWriteExt + Unpin + Send,
        's: 'async_trait,
        Self: Sync + 'async_trait,
     {
        Box::pin(async move {
            let mut v = Vec::with_capacity(1024);
            let mut s = &mut v;
            crate::util::vanilla_get_unencrypted_client(&mut s, Self::OPCODE as u16, 0)?;
            self.write_into_vec(&mut s)?;
            let size_len = 2;
            let size = v.len().saturating_sub(size_len);
            let s = size.to_le_bytes();
            v[0] = s[1];
            v[1] = s[0];
            w.write_all(&v).await
        })
    }

    #[cfg(all(feature = "tokio", feature = "encryption"))]
    fn tokio_write_encrypted_client<'s, 'e, 'async_trait, W>(
        &'s self,
        mut w: W,
        e: &'e mut wow_srp::vanilla_header::EncrypterHalf,
    ) -> std::pin::Pin<Box<dyn std::future::Future<Output = Result<(), std::io::Error>> + Send + 'async_trait>>
    where
        W: 'async_trait + tokio::io::AsyncWriteExt + Unpin + Send,
        's: 'async_trait,
        'e: 'async_trait,
        Self: Sync + 'async_trait,
     {
        Box::pin(async move {
            let mut v = Vec::with_capacity(1024);
            let mut s = &mut v;
            crate::util::vanilla_get_unencrypted_client(&mut s, Self::OPCODE as u16, 0)?;
            self.write_into_vec(&mut s)?;
            let size_len = 2;
            let size = v.len().saturating_sub(size_len) as u16;
            let header = e.encrypt_client_header(size, Self::OPCODE);
            for (i, e) in header.iter().enumerate() {
                v[i] = *e;
            }
            w.write_all(&v).await
        })
    }

    #[cfg(feature = "async-std")]
    fn astd_write_unencrypted_client<'s, 'async_trait, W>(
        &'s self,
        mut w: W,
    ) -> std::pin::Pin<Box<dyn std::future::Future<Output = Result<(), std::io::Error>> + Send + 'async_trait>>
    where
        W: 'async_trait + async_std::io::WriteExt + Unpin + Send,
        's: 'async_trait,
        Self: Sync + 'async_trait,
     {
        Box::pin(async move {
            let mut v = Vec::with_capacity(1024);
            let mut s = &mut v;
            crate::util::vanilla_get_unencrypted_client(&mut s, Self::OPCODE as u16, 0)?;
            self.write_into_vec(&mut s)?;
            let size_len = 2;
            let size = v.len().saturating_sub(size_len);
            let s = size.to_le_bytes();
            v[0] = s[1];
            v[1] = s[0];
            w.write_all(&v).await
        })
    }

    #[cfg(all(feature = "async-std", feature = "encryption"))]
    fn astd_write_encrypted_client<'s, 'e, 'async_trait, W>(
        &'s self,
        mut w: W,
        e: &'e mut wow_srp::vanilla_header::EncrypterHalf,
    ) -> std::pin::Pin<Box<dyn std::future::Future<Output = Result<(), std::io::Error>> + Send + 'async_trait>>
    where
        W: 'async_trait + async_std::io::WriteExt + Unpin + Send,
        's: 'async_trait,
        'e: 'async_trait,
        Self: Sync + 'async_trait,
     {
        Box::pin(async move {
            let mut v = Vec::with_capacity(1024);
            let mut s = &mut v;
            crate::util::vanilla_get_unencrypted_client(&mut s, Self::OPCODE as u16, 0)?;
            self.write_into_vec(&mut s)?;
            let size_len = 2;
            let size = v.len().saturating_sub(size_len) as u16;
            let header = e.encrypt_client_header(size, Self::OPCODE);
            for (i, e) in header.iter().enumerate() {
                v[i] = *e;
            }
            w.write_all(&v).await
        })
    }

}

#[cfg(feature = "tbc")]
impl crate::tbc::ClientMessage for CMSG_UPDATE_ACCOUNT_DATA {
    #[cfg(feature = "sync")]
    fn write_unencrypted_client<W: Write>(&self, mut w: W) -> Result<(), std::io::Error> {
        let mut v = Vec::with_capacity(1024);
        let mut s = &mut v;
        crate::util::tbc_get_unencrypted_client(&mut s, Self::OPCODE as u16, 0)?;
        self.write_into_vec(&mut s)?;
        let size_len = 2;
        let size = v.len().saturating_sub(size_len);
        let s = size.to_le_bytes();
        v[0] = s[1];
        v[1] = s[0];
        w.write_all(&v)
    }

    #[cfg(all(feature = "sync", feature = "encryption"))]
    fn write_encrypted_client<W: Write>(
        &self,
        mut w: W,
        e: &mut wow_srp::tbc_header::EncrypterHalf,
    ) -> Result<(), std::io::Error> {
        let mut v = Vec::with_capacity(1024);
        let mut s = &mut v;
        crate::util::tbc_get_unencrypted_client(&mut s, Self::OPCODE as u16, 0)?;
        self.write_into_vec(&mut s)?;
        let size_len = 2;
        let size = v.len().saturating_sub(size_len) as u16;
        let header = e.encrypt_client_header(size, Self::OPCODE);
        for (i, e) in header.iter().enumerate() {
            v[i] = *e;
        }
        w.write_all(&v)
    }

    #[cfg(feature = "tokio")]
    fn tokio_write_unencrypted_client<'s, 'async_trait, W>(
        &'s self,
        mut w: W,
    ) -> std::pin::Pin<Box<dyn std::future::Future<Output = Result<(), std::io::Error>> + Send + 'async_trait>>
    where
        W: 'async_trait + tokio::io::AsyncWriteExt + Unpin + Send,
        's: 'async_trait,
        Self: Sync + 'async_trait,
     {
        Box::pin(async move {
            let mut v = Vec::with_capacity(1024);
            let mut s = &mut v;
            crate::util::tbc_get_unencrypted_client(&mut s, Self::OPCODE as u16, 0)?;
            self.write_into_vec(&mut s)?;
            let size_len = 2;
            let size = v.len().saturating_sub(size_len);
            let s = size.to_le_bytes();
            v[0] = s[1];
            v[1] = s[0];
            w.write_all(&v).await
        })
    }

    #[cfg(all(feature = "tokio", feature = "encryption"))]
    fn tokio_write_encrypted_client<'s, 'e, 'async_trait, W>(
        &'s self,
        mut w: W,
        e: &'e mut wow_srp::tbc_header::EncrypterHalf,
    ) -> std::pin::Pin<Box<dyn std::future::Future<Output = Result<(), std::io::Error>> + Send + 'async_trait>>
    where
        W: 'async_trait + tokio::io::AsyncWriteExt + Unpin + Send,
        's: 'async_trait,
        'e: 'async_trait,
        Self: Sync + 'async_trait,
     {
        Box::pin(async move {
            let mut v = Vec::with_capacity(1024);
            let mut s = &mut v;
            crate::util::tbc_get_unencrypted_client(&mut s, Self::OPCODE as u16, 0)?;
            self.write_into_vec(&mut s)?;
            let size_len = 2;
            let size = v.len().saturating_sub(size_len) as u16;
            let header = e.encrypt_client_header(size, Self::OPCODE);
            for (i, e) in header.iter().enumerate() {
                v[i] = *e;
            }
            w.write_all(&v).await
        })
    }

    #[cfg(feature = "async-std")]
    fn astd_write_unencrypted_client<'s, 'async_trait, W>(
        &'s self,
        mut w: W,
    ) -> std::pin::Pin<Box<dyn std::future::Future<Output = Result<(), std::io::Error>> + Send + 'async_trait>>
    where
        W: 'async_trait + async_std::io::WriteExt + Unpin + Send,
        's: 'async_trait,
        Self: Sync + 'async_trait,
     {
        Box::pin(async move {
            let mut v = Vec::with_capacity(1024);
            let mut s = &mut v;
            crate::util::tbc_get_unencrypted_client(&mut s, Self::OPCODE as u16, 0)?;
            self.write_into_vec(&mut s)?;
            let size_len = 2;
            let size = v.len().saturating_sub(size_len);
            let s = size.to_le_bytes();
            v[0] = s[1];
            v[1] = s[0];
            w.write_all(&v).await
        })
    }

    #[cfg(all(feature = "async-std", feature = "encryption"))]
    fn astd_write_encrypted_client<'s, 'e, 'async_trait, W>(
        &'s self,
        mut w: W,
        e: &'e mut wow_srp::tbc_header::EncrypterHalf,
    ) -> std::pin::Pin<Box<dyn std::future::Future<Output = Result<(), std::io::Error>> + Send + 'async_trait>>
    where
        W: 'async_trait + async_std::io::WriteExt + Unpin + Send,
        's: 'async_trait,
        'e: 'async_trait,
        Self: Sync + 'async_trait,
     {
        Box::pin(async move {
            let mut v = Vec::with_capacity(1024);
            let mut s = &mut v;
            crate::util::tbc_get_unencrypted_client(&mut s, Self::OPCODE as u16, 0)?;
            self.write_into_vec(&mut s)?;
            let size_len = 2;
            let size = v.len().saturating_sub(size_len) as u16;
            let header = e.encrypt_client_header(size, Self::OPCODE);
            for (i, e) in header.iter().enumerate() {
                v[i] = *e;
            }
            w.write_all(&v).await
        })
    }

}

impl CMSG_UPDATE_ACCOUNT_DATA {
    pub(crate) fn size(&self) -> usize {
        4 // data_type: AccountDataType
        + crate::util::zlib_compressed_size(&self.compressed_data) + 4 // compressed_data: u8[-]
    }
}

#[cfg(all(feature = "vanilla", test))]
mod test_vanilla {
    #![allow(clippy::missing_const_for_fn)]
    use super::CMSG_UPDATE_ACCOUNT_DATA;
    use super::*;
    use super::super::*;
    use crate::vanilla::opcodes::ClientOpcodeMessage;
    use crate::vanilla::{ClientMessage, ServerMessage};

    const HEADER_SIZE: usize = 2 + 4;
    const RAW0: [u8; 14] = [ 0x00, 0x0C, 0x0B, 0x02, 0x00, 0x00, 0x06, 0x00, 0x00,
         0x00, 0x00, 0x00, 0x00, 0x00, ];

    pub(crate) fn expected0() -> CMSG_UPDATE_ACCOUNT_DATA {
        CMSG_UPDATE_ACCOUNT_DATA {
            data_type: AccountDataType::PerCharacterLayoutCache,
            compressed_data: vec![ ],
        }

    }

    // Generated from `wow_message_parser/wowm/world/login_logout/cmsg_update_account_data.wowm` line 40.
    #[cfg(feature = "sync")]
    #[cfg_attr(feature = "sync", test)]
    fn cmsg_update_account_data0() {
        let expected = expected0();
        let t = ClientOpcodeMessage::read_unencrypted(&mut std::io::Cursor::new(&RAW0)).unwrap();
        let t = match t {
            ClientOpcodeMessage::CMSG_UPDATE_ACCOUNT_DATA(t) => t,
            opcode => panic!("incorrect opcode. Expected CMSG_UPDATE_ACCOUNT_DATA, got {opcode:#?}"),
        };

        assert_eq!(t.as_ref(), &expected);
        let mut dest = Vec::with_capacity(RAW0.len());
        expected.write_unencrypted_client(&mut std::io::Cursor::new(&mut dest)).unwrap();

        let s = ClientOpcodeMessage::read_unencrypted(&mut std::io::Cursor::new(&dest)).unwrap();
        let s = match s {
            ClientOpcodeMessage::CMSG_UPDATE_ACCOUNT_DATA(s) => s,
            opcode => panic!("incorrect opcode. Expected CMSG_UPDATE_ACCOUNT_DATA, got {opcode:#?}", opcode = opcode),
        };

        assert_eq!(t, s);
    }

    // Generated from `wow_message_parser/wowm/world/login_logout/cmsg_update_account_data.wowm` line 40.
    #[cfg(feature = "tokio")]
    #[cfg_attr(feature = "tokio", tokio::test)]
    async fn tokio_cmsg_update_account_data0() {
        let expected = expected0();
        let t = ClientOpcodeMessage::tokio_read_unencrypted(&mut std::io::Cursor::new(&RAW0)).await.unwrap();
        let t = match t {
            ClientOpcodeMessage::CMSG_UPDATE_ACCOUNT_DATA(t) => t,
            opcode => panic!("incorrect opcode. Expected CMSG_UPDATE_ACCOUNT_DATA, got {opcode:#?}"),
        };

        assert_eq!(t.as_ref(), &expected);
        let mut dest = Vec::with_capacity(RAW0.len());
        expected.tokio_write_unencrypted_client(&mut std::io::Cursor::new(&mut dest)).await.unwrap();

        let s = ClientOpcodeMessage::tokio_read_unencrypted(&mut std::io::Cursor::new(&dest)).await.unwrap();
        let s = match s {
            ClientOpcodeMessage::CMSG_UPDATE_ACCOUNT_DATA(s) => s,
            opcode => panic!("incorrect opcode. Expected CMSG_UPDATE_ACCOUNT_DATA, got {opcode:#?}", opcode = opcode),
        };

        assert_eq!(t, s);
    }

    // Generated from `wow_message_parser/wowm/world/login_logout/cmsg_update_account_data.wowm` line 40.
    #[cfg(feature = "async-std")]
    #[cfg_attr(feature = "async-std", async_std::test)]
    async fn astd_cmsg_update_account_data0() {
        let expected = expected0();
        let t = ClientOpcodeMessage::astd_read_unencrypted(&mut async_std::io::Cursor::new(&RAW0)).await.unwrap();
        let t = match t {
            ClientOpcodeMessage::CMSG_UPDATE_ACCOUNT_DATA(t) => t,
            opcode => panic!("incorrect opcode. Expected CMSG_UPDATE_ACCOUNT_DATA, got {opcode:#?}"),
        };

        assert_eq!(t.as_ref(), &expected);
        let mut dest = Vec::with_capacity(RAW0.len());
        expected.astd_write_unencrypted_client(&mut async_std::io::Cursor::new(&mut dest)).await.unwrap();

        let s = ClientOpcodeMessage::astd_read_unencrypted(&mut async_std::io::Cursor::new(&dest)).await.unwrap();
        let s = match s {
            ClientOpcodeMessage::CMSG_UPDATE_ACCOUNT_DATA(s) => s,
            opcode => panic!("incorrect opcode. Expected CMSG_UPDATE_ACCOUNT_DATA, got {opcode:#?}", opcode = opcode),
        };

        assert_eq!(t, s);
    }

    const RAW1: [u8; 1186] = [ 0x04, 0xA0, 0x0B, 0x02, 0x00, 0x00, 0x07, 0x00, 0x00,
         0x00, 0x18, 0x14, 0x00, 0x00, 0x78, 0x01, 0xBD, 0x57, 0xDB, 0x96, 0xAB,
         0x28, 0x10, 0x7D, 0xE7, 0x2B, 0xFC, 0x04, 0xB5, 0x93, 0xB6, 0xF3, 0x48,
         0x14, 0x23, 0xD3, 0x44, 0xB2, 0x04, 0x3B, 0x27, 0xE7, 0x85, 0xFF, 0xFF,
         0x8B, 0x29, 0xAE, 0x82, 0x4A, 0x27, 0x0F, 0x33, 0x59, 0xDD, 0xAE, 0x68,
         0x5D, 0x36, 0x50, 0x54, 0x15, 0x9B, 0x1F, 0x32, 0x09, 0xCA, 0xC7, 0xA2,
         0x46, 0x08, 0x77, 0x1D, 0xE9, 0x7E, 0x96, 0x6F, 0x7E, 0x93, 0xA0, 0x51,
         0x97, 0x99, 0xB2, 0x4E, 0x4D, 0xA4, 0x9D, 0x66, 0x2A, 0xAF, 0x64, 0x94,
         0xAA, 0x1D, 0xF0, 0x38, 0x12, 0x56, 0xE0, 0x59, 0x72, 0x84, 0xDC, 0x97,
         0x40, 0x64, 0xEC, 0x10, 0xFA, 0xCB, 0x47, 0xE2, 0x25, 0x45, 0x5D, 0x9E,
         0x9A, 0xEA, 0x78, 0x04, 0x1B, 0xCE, 0xF8, 0x24, 0x90, 0xC0, 0x8F, 0xA2,
         0x3E, 0x1E, 0xFD, 0x83, 0x6E, 0x78, 0x92, 0x8F, 0xA2, 0x6A, 0x4A, 0xF3,
         0x80, 0x06, 0x4D, 0x98, 0x76, 0x46, 0x5D, 0xD5, 0x4D, 0x51, 0x22, 0x33,
         0x76, 0xF1, 0x79, 0x30, 0xA2, 0xCF, 0x03, 0xE2, 0x7D, 0x4F, 0x5B, 0x32,
         0x69, 0x49, 0x75, 0xAA, 0xE1, 0x07, 0x3D, 0x08, 0x63, 0x4E, 0xAB, 0x3F,
         0xEF, 0x03, 0x15, 0x37, 0x30, 0xD0, 0xA3, 0x54, 0xF5, 0x97, 0xFE, 0xF5,
         0x32, 0x45, 0xC7, 0x9E, 0x4F, 0xD7, 0x44, 0x45, 0xAE, 0x5C, 0x92, 0x20,
         0x01, 0x7F, 0x49, 0xFE, 0x48, 0xB5, 0x91, 0x8A, 0x87, 0x90, 0xC4, 0x7A,
         0x6A, 0xE0, 0x12, 0x5D, 0xF9, 0x08, 0x92, 0x49, 0xC5, 0x0B, 0xAA, 0x8E,
         0xA7, 0x20, 0x5F, 0xCD, 0xCA, 0x9B, 0x6F, 0x80, 0x7D, 0x24, 0xCD, 0x74,
         0x61, 0x41, 0xB0, 0x28, 0x1F, 0x4F, 0xF5, 0x0F, 0xA7, 0xA3, 0x59, 0xA5,
         0x5E, 0x07, 0x3C, 0x41, 0xC1, 0x08, 0xFE, 0x21, 0xFB, 0x1A, 0x2A, 0xE4,
         0xAE, 0x62, 0xE4, 0x12, 0xE2, 0x66, 0x55, 0xAB, 0x61, 0xAC, 0x4A, 0xCD,
         0x02, 0xA2, 0xA6, 0x63, 0xEA, 0x1E, 0x84, 0xFB, 0xEF, 0x10, 0x18, 0x1D,
         0xC5, 0x6E, 0xF4, 0x1B, 0x63, 0xA3, 0x4A, 0x2F, 0x23, 0x9F, 0x88, 0x95,
         0x95, 0x10, 0x12, 0xF1, 0x4D, 0x61, 0x27, 0xBE, 0x8E, 0xFA, 0x5F, 0xDB,
         0x33, 0xCE, 0x65, 0x61, 0x37, 0xB6, 0x84, 0xFD, 0xBF, 0x9E, 0xB1, 0x54,
         0x57, 0x2A, 0x5A, 0xB3, 0x0D, 0x66, 0x6F, 0xFC, 0xFE, 0xF8, 0xE8, 0xF8,
         0xBD, 0xAB, 0x9A, 0x13, 0xE4, 0x83, 0x79, 0xBC, 0xA3, 0x20, 0xAC, 0x57,
         0x03, 0x95, 0xC2, 0x4C, 0x49, 0x47, 0x4B, 0x0F, 0xE1, 0x50, 0x8D, 0x12,
         0xA0, 0x05, 0xD9, 0x55, 0xDF, 0x88, 0xCC, 0xBA, 0x6A, 0xDD, 0x2F, 0x9E,
         0x3A, 0x3D, 0xF3, 0xBE, 0x46, 0x9B, 0xF7, 0xEE, 0x27, 0x0A, 0x15, 0xC1,
         0x1E, 0x37, 0x86, 0x1F, 0x90, 0x2A, 0xB9, 0xD9, 0xAF, 0xCC, 0xF2, 0x78,
         0x03, 0x17, 0x92, 0x32, 0xF2, 0x04, 0x2E, 0xB5, 0xCA, 0xA3, 0xB5, 0x13,
         0xC1, 0x72, 0x9E, 0x88, 0xFA, 0x11, 0x2A, 0x8D, 0xEE, 0xA1, 0x29, 0x0E,
         0x8D, 0x8F, 0xED, 0xC6, 0x2C, 0x42, 0xCC, 0x1A, 0x9A, 0xB2, 0xCE, 0x2E,
         0x38, 0x86, 0xB4, 0x96, 0x11, 0xE6, 0x6A, 0x6B, 0x63, 0xDB, 0xF0, 0x9E,
         0x8B, 0x64, 0x30, 0x80, 0x25, 0x85, 0xF7, 0x3C, 0xB6, 0x0F, 0xBC, 0xEA,
         0x20, 0x12, 0xC3, 0x5E, 0x62, 0xB9, 0x58, 0xE6, 0x0D, 0xFE, 0xDC, 0xD4,
         0x05, 0xEB, 0x2A, 0xAD, 0x2A, 0xF3, 0xE8, 0xA4, 0x84, 0xF6, 0xC3, 0x98,
         0x0D, 0x69, 0x87, 0xAF, 0xF8, 0x62, 0xDB, 0x8B, 0x5E, 0x17, 0xD4, 0xC8,
         0xA2, 0x3B, 0xCF, 0x7D, 0x1F, 0xC6, 0xF4, 0x1A, 0x9D, 0x8E, 0x2B, 0xA7,
         0x05, 0x52, 0x2B, 0x13, 0xAF, 0x48, 0x65, 0x52, 0x31, 0xEF, 0x69, 0xD4,
         0x19, 0x5F, 0x1F, 0x06, 0x97, 0x57, 0x59, 0x90, 0x95, 0x5D, 0x06, 0x2D,
         0x4D, 0xBF, 0x2C, 0x58, 0x6A, 0x96, 0xC1, 0x0A, 0x7B, 0xE8, 0x53, 0xD4,
         0xC3, 0x95, 0x75, 0xD1, 0x7C, 0x16, 0x75, 0xD5, 0xB8, 0x80, 0x6E, 0x0C,
         0x5F, 0x00, 0xB4, 0x99, 0xE7, 0x11, 0x6D, 0x43, 0x31, 0x4D, 0xC5, 0xEE,
         0x51, 0x0C, 0x69, 0x4D, 0x5F, 0xC0, 0x0C, 0x4E, 0x2F, 0xC1, 0x06, 0xEB,
         0x0C, 0xB2, 0x9C, 0x70, 0x47, 0x4C, 0x57, 0x4D, 0xDB, 0x9A, 0x9D, 0xA0,
         0x1D, 0x42, 0x0C, 0x94, 0xB0, 0x4E, 0x28, 0x38, 0xA6, 0x75, 0x11, 0x87,
         0x84, 0x5A, 0x52, 0x63, 0x63, 0xC7, 0xE5, 0x00, 0x47, 0xFC, 0x8E, 0x25,
         0x9E, 0x27, 0xAC, 0x2E, 0x70, 0x7C, 0xE7, 0xA0, 0x16, 0x03, 0x13, 0x91,
         0x5F, 0x21, 0xCC, 0x28, 0x3B, 0x16, 0x14, 0xCE, 0x51, 0x45, 0x46, 0x7D,
         0xEE, 0x19, 0x2E, 0xB1, 0x37, 0x91, 0x33, 0xB4, 0xA6, 0x6F, 0xA5, 0x47,
         0xDB, 0x01, 0x80, 0xC3, 0x9D, 0xF2, 0x8E, 0xB6, 0xBB, 0x15, 0xB6, 0x2C,
         0x3B, 0x35, 0xD3, 0x11, 0xDE, 0x1B, 0x29, 0x58, 0x3D, 0xC9, 0x86, 0x95,
         0xDD, 0x53, 0xB8, 0x55, 0xAD, 0x64, 0xD3, 0x21, 0xE0, 0xAE, 0x1C, 0x9E,
         0x0E, 0x90, 0xD6, 0xCF, 0x73, 0xFC, 0xD4, 0xFE, 0x29, 0x7C, 0x48, 0xCD,
         0xE7, 0xC8, 0xC1, 0x34, 0x07, 0xDA, 0x63, 0x38, 0xB4, 0x3A, 0xC5, 0x78,
         0x8B, 0x99, 0xED, 0x31, 0xC9, 0xAE, 0xBA, 0x33, 0x7C, 0xE0, 0xC0, 0x26,
         0x6C, 0x33, 0xAD, 0x6B, 0xA0, 0x7B, 0x50, 0xE2, 0x55, 0x89, 0xCE, 0x17,
         0x65, 0xA9, 0x97, 0x1A, 0xC9, 0x0C, 0xF5, 0x60, 0x99, 0x5E, 0x55, 0x03,
         0xAD, 0x88, 0x95, 0x98, 0x31, 0x8A, 0x47, 0xE0, 0x37, 0x9A, 0x6E, 0x80,
         0xF3, 0xC7, 0x29, 0xF2, 0x1C, 0xF8, 0xD4, 0xD9, 0x1E, 0xAC, 0x59, 0x8A,
         0x1B, 0xAE, 0xC7, 0xAD, 0xE1, 0xB6, 0x3A, 0x0F, 0xA1, 0x43, 0x3B, 0x86,
         0xA5, 0x27, 0xA6, 0x29, 0x1C, 0x59, 0x58, 0x6A, 0x69, 0x18, 0xA9, 0x02,
         0xCA, 0xD5, 0x39, 0x56, 0x59, 0x57, 0xC0, 0x4C, 0xBE, 0x3E, 0xAC, 0xFC,
         0x8E, 0xA7, 0x91, 0x8E, 0x17, 0xBB, 0x22, 0xA7, 0x00, 0x92, 0x49, 0x80,
         0x1C, 0x29, 0xE9, 0x99, 0xA9, 0xE7, 0x39, 0x9A, 0xDB, 0xAA, 0x33, 0x17,
         0x22, 0x22, 0x98, 0x1E, 0xAD, 0xA7, 0x0C, 0xF8, 0x64, 0x44, 0xA7, 0x80,
         0x2E, 0x49, 0x46, 0x2E, 0x13, 0x9F, 0x03, 0xEF, 0xD2, 0x84, 0x38, 0x16,
         0xEF, 0xCD, 0xCA, 0x11, 0xCA, 0xCA, 0xCC, 0xC8, 0x53, 0x39, 0x27, 0xAC,
         0xF7, 0x84, 0x1F, 0x7B, 0x42, 0xCB, 0xB7, 0x57, 0xEE, 0x96, 0xB6, 0xAF,
         0x84, 0xD0, 0x86, 0xA1, 0x77, 0xAE, 0x84, 0xCD, 0x9E, 0xD0, 0xB0, 0xC6,
         0xB5, 0xE5, 0x69, 0xCF, 0xB2, 0x2A, 0x13, 0xA9, 0xB9, 0x56, 0xDC, 0xE9,
         0xD8, 0xF1, 0x7B, 0x51, 0x21, 0x41, 0xFF, 0xC2, 0x3E, 0xC3, 0x3E, 0xC2,
         0x85, 0x02, 0xF6, 0xDB, 0xFC, 0x01, 0xD7, 0x6C, 0xBF, 0x21, 0x76, 0x15,
         0xEA, 0xFC, 0x8B, 0x18, 0xF8, 0x1D, 0xCE, 0x65, 0x84, 0xAE, 0x44, 0x08,
         0x38, 0x84, 0xE1, 0xEE, 0x61, 0x38, 0xBC, 0xBE, 0x82, 0x98, 0x3B, 0x83,
         0xBF, 0x15, 0xD8, 0x3B, 0x88, 0xBD, 0x68, 0x20, 0x9F, 0xCC, 0x9E, 0x6A,
         0x5B, 0x52, 0x6B, 0xA8, 0xAC, 0xBD, 0xDD, 0xB8, 0x48, 0xFE, 0x7A, 0xD7,
         0x89, 0xE7, 0x5B, 0xBF, 0x36, 0x5F, 0x30, 0x33, 0xF3, 0x2D, 0xA3, 0xF9,
         0xAE, 0x29, 0xB3, 0x4F, 0xDD, 0x40, 0xD6, 0x12, 0x81, 0xA5, 0x39, 0x5E,
         0xE4, 0x29, 0x6F, 0xFC, 0x9D, 0x5A, 0xA4, 0x0D, 0x41, 0x33, 0x2A, 0x6F,
         0x9B, 0x6A, 0x52, 0x2F, 0x1F, 0x9F, 0x84, 0x34, 0x7A, 0xC7, 0x8D, 0x32,
         0xF5, 0xF5, 0x2D, 0xCE, 0xB2, 0x29, 0xEF, 0xE4, 0x46, 0x4B, 0x85, 0x8E,
         0x56, 0xC5, 0x74, 0xC9, 0x36, 0xA2, 0x58, 0xA2, 0xFB, 0x8D, 0xFB, 0x5E,
         0x68, 0x53, 0x24, 0x88, 0xF4, 0xE9, 0x92, 0x12, 0xA8, 0x54, 0x15, 0xF9,
         0x6C, 0x56, 0x93, 0xB8, 0x6D, 0xB4, 0x91, 0x67, 0x74, 0x6E, 0xBB, 0xE9,
         0x58, 0xD7, 0xD5, 0x59, 0xED, 0x74, 0xCB, 0xA1, 0xAA, 0x37, 0xD6, 0x09,
         0x37, 0xA7, 0xA4, 0x93, 0x2F, 0x27, 0xA3, 0x13, 0x84, 0x03, 0xC4, 0x64,
         0x45, 0x32, 0xC5, 0x54, 0xA5, 0xE7, 0x07, 0x35, 0x60, 0xF8, 0x67, 0xD0,
         0xA4, 0x8B, 0xDF, 0xF7, 0x4E, 0x6D, 0x76, 0x61, 0x42, 0x30, 0xF6, 0x11,
         0x82, 0xDA, 0x3A, 0x6F, 0x1A, 0xBE, 0x4F, 0x85, 0xB4, 0x27, 0xDB, 0x3E,
         0xFC, 0xB4, 0xEA, 0xA0, 0x62, 0xE2, 0x7A, 0xFB, 0x78, 0xAD, 0xDE, 0x80,
         0x6F, 0x6F, 0xEA, 0xCD, 0xC0, 0xFC, 0x52, 0xDF, 0xAB, 0x91, 0x0E, 0x6F,
         0x1B, 0x09, 0xAE, 0x14, 0xAF, 0xF4, 0xBC, 0xFF, 0x60, 0x4D, 0x9F, 0x6F,
         0x1B, 0x09, 0x98, 0xFB, 0x9B, 0xD6, 0xF4, 0xF5, 0xB6, 0x91, 0x4E, 0x6F,
         0x1B, 0x09, 0xC8, 0xCF, 0xFF, 0x1E, 0xBE, 0x7F, 0x01, 0x34, 0x99, 0x02,
         0x24, ];

    pub(crate) fn expected1() -> CMSG_UPDATE_ACCOUNT_DATA {
        CMSG_UPDATE_ACCOUNT_DATA {
            data_type: AccountDataType::PerCharacterChatCache,
            compressed_data: vec![ 0x56, 0x45, 0x52, 0x53, 0x49, 0x4F, 0x4E, 0x20,
                 0x32, 0x0A, 0x0A, 0x41, 0x44, 0x44, 0x45, 0x44, 0x56, 0x45, 0x52,
                 0x53, 0x49, 0x4F, 0x4E, 0x20, 0x32, 0x0A, 0x0A, 0x4F, 0x50, 0x54,
                 0x49, 0x4F, 0x4E, 0x5F, 0x47, 0x55, 0x49, 0x4C, 0x44, 0x5F, 0x52,
                 0x45, 0x43, 0x52, 0x55, 0x49, 0x54, 0x4D, 0x45, 0x4E, 0x54, 0x5F,
                 0x43, 0x48, 0x41, 0x4E, 0x4E, 0x45, 0x4C, 0x20, 0x41, 0x55, 0x54,
                 0x4F, 0x0A, 0x0A, 0x43, 0x48, 0x41, 0x4E, 0x4E, 0x45, 0x4C, 0x53,
                 0x0A, 0x45, 0x4E, 0x44, 0x0A, 0x0A, 0x5A, 0x4F, 0x4E, 0x45, 0x43,
                 0x48, 0x41, 0x4E, 0x4E, 0x45, 0x4C, 0x53, 0x20, 0x32, 0x30, 0x39,
                 0x37, 0x31, 0x35, 0x35, 0x0A, 0x0A, 0x43, 0x4F, 0x4C, 0x4F, 0x52,
                 0x53, 0x0A, 0x53, 0x41, 0x59, 0x20, 0x32, 0x35, 0x35, 0x20, 0x32,
                 0x35, 0x35, 0x20, 0x32, 0x35, 0x35, 0x0A, 0x50, 0x41, 0x52, 0x54,
                 0x59, 0x20, 0x31, 0x37, 0x30, 0x20, 0x31, 0x37, 0x30, 0x20, 0x32,
                 0x35, 0x35, 0x0A, 0x52, 0x41, 0x49, 0x44, 0x20, 0x32, 0x35, 0x35,
                 0x20, 0x31, 0x32, 0x37, 0x20, 0x30, 0x0A, 0x47, 0x55, 0x49, 0x4C,
                 0x44, 0x20, 0x36, 0x34, 0x20, 0x32, 0x35, 0x35, 0x20, 0x36, 0x34,
                 0x0A, 0x4F, 0x46, 0x46, 0x49, 0x43, 0x45, 0x52, 0x20, 0x36, 0x34,
                 0x20, 0x31, 0x39, 0x32, 0x20, 0x36, 0x34, 0x0A, 0x59, 0x45, 0x4C,
                 0x4C, 0x20, 0x32, 0x35, 0x35, 0x20, 0x36, 0x34, 0x20, 0x36, 0x34,
                 0x0A, 0x57, 0x48, 0x49, 0x53, 0x50, 0x45, 0x52, 0x20, 0x32, 0x35,
                 0x35, 0x20, 0x31, 0x32, 0x38, 0x20, 0x32, 0x35, 0x35, 0x0A, 0x57,
                 0x48, 0x49, 0x53, 0x50, 0x45, 0x52, 0x5F, 0x49, 0x4E, 0x46, 0x4F,
                 0x52, 0x4D, 0x20, 0x32, 0x35, 0x35, 0x20, 0x31, 0x32, 0x38, 0x20,
                 0x32, 0x35, 0x35, 0x0A, 0x45, 0x4D, 0x4F, 0x54, 0x45, 0x20, 0x32,
                 0x35, 0x35, 0x20, 0x31, 0x32, 0x38, 0x20, 0x36, 0x34, 0x0A, 0x54,
                 0x45, 0x58, 0x54, 0x5F, 0x45, 0x4D, 0x4F, 0x54, 0x45, 0x20, 0x32,
                 0x35, 0x35, 0x20, 0x31, 0x32, 0x38, 0x20, 0x36, 0x34, 0x0A, 0x53,
                 0x59, 0x53, 0x54, 0x45, 0x4D, 0x20, 0x32, 0x35, 0x35, 0x20, 0x32,
                 0x35, 0x35, 0x20, 0x30, 0x0A, 0x4D, 0x4F, 0x4E, 0x53, 0x54, 0x45,
                 0x52, 0x5F, 0x53, 0x41, 0x59, 0x20, 0x32, 0x35, 0x35, 0x20, 0x32,
                 0x35, 0x35, 0x20, 0x31, 0x35, 0x39, 0x0A, 0x4D, 0x4F, 0x4E, 0x53,
                 0x54, 0x45, 0x52, 0x5F, 0x59, 0x45, 0x4C, 0x4C, 0x20, 0x32, 0x35,
                 0x35, 0x20, 0x36, 0x34, 0x20, 0x36, 0x34, 0x0A, 0x4D, 0x4F, 0x4E,
                 0x53, 0x54, 0x45, 0x52, 0x5F, 0x45, 0x4D, 0x4F, 0x54, 0x45, 0x20,
                 0x32, 0x35, 0x35, 0x20, 0x31, 0x32, 0x38, 0x20, 0x36, 0x34, 0x0A,
                 0x43, 0x48, 0x41, 0x4E, 0x4E, 0x45, 0x4C, 0x20, 0x32, 0x35, 0x35,
                 0x20, 0x31, 0x39, 0x32, 0x20, 0x31, 0x39, 0x32, 0x0A, 0x43, 0x48,
                 0x41, 0x4E, 0x4E, 0x45, 0x4C, 0x5F, 0x4A, 0x4F, 0x49, 0x4E, 0x20,
                 0x31, 0x39, 0x32, 0x20, 0x31, 0x32, 0x38, 0x20, 0x31, 0x32, 0x38,
                 0x0A, 0x43, 0x48, 0x41, 0x4E, 0x4E, 0x45, 0x4C, 0x5F, 0x4C, 0x45,
                 0x41, 0x56, 0x45, 0x20, 0x31, 0x39, 0x32, 0x20, 0x31, 0x32, 0x38,
                 0x20, 0x31, 0x32, 0x38, 0x0A, 0x43, 0x48, 0x41, 0x4E, 0x4E, 0x45,
                 0x4C, 0x5F, 0x4C, 0x49, 0x53, 0x54, 0x20, 0x31, 0x39, 0x32, 0x20,
                 0x31, 0x32, 0x38, 0x20, 0x31, 0x32, 0x38, 0x0A, 0x43, 0x48, 0x41,
                 0x4E, 0x4E, 0x45, 0x4C, 0x5F, 0x4E, 0x4F, 0x54, 0x49, 0x43, 0x45,
                 0x20, 0x31, 0x39, 0x32, 0x20, 0x31, 0x39, 0x32, 0x20, 0x31, 0x39,
                 0x32, 0x0A, 0x43, 0x48, 0x41, 0x4E, 0x4E, 0x45, 0x4C, 0x5F, 0x4E,
                 0x4F, 0x54, 0x49, 0x43, 0x45, 0x5F, 0x55, 0x53, 0x45, 0x52, 0x20,
                 0x31, 0x39, 0x32, 0x20, 0x31, 0x39, 0x32, 0x20, 0x31, 0x39, 0x32,
                 0x0A, 0x41, 0x46, 0x4B, 0x20, 0x32, 0x35, 0x35, 0x20, 0x31, 0x32,
                 0x38, 0x20, 0x32, 0x35, 0x35, 0x0A, 0x44, 0x4E, 0x44, 0x20, 0x32,
                 0x35, 0x35, 0x20, 0x31, 0x32, 0x38, 0x20, 0x32, 0x35, 0x35, 0x0A,
                 0x49, 0x47, 0x4E, 0x4F, 0x52, 0x45, 0x44, 0x20, 0x32, 0x35, 0x35,
                 0x20, 0x30, 0x20, 0x30, 0x0A, 0x53, 0x4B, 0x49, 0x4C, 0x4C, 0x20,
                 0x38, 0x35, 0x20, 0x38, 0x35, 0x20, 0x32, 0x35, 0x35, 0x0A, 0x4C,
                 0x4F, 0x4F, 0x54, 0x20, 0x30, 0x20, 0x31, 0x37, 0x30, 0x20, 0x30,
                 0x0A, 0x43, 0x4F, 0x4D, 0x42, 0x41, 0x54, 0x5F, 0x4D, 0x49, 0x53,
                 0x43, 0x5F, 0x49, 0x4E, 0x46, 0x4F, 0x20, 0x31, 0x32, 0x38, 0x20,
                 0x31, 0x32, 0x38, 0x20, 0x32, 0x35, 0x35, 0x0A, 0x4D, 0x4F, 0x4E,
                 0x53, 0x54, 0x45, 0x52, 0x5F, 0x57, 0x48, 0x49, 0x53, 0x50, 0x45,
                 0x52, 0x20, 0x31, 0x37, 0x39, 0x20, 0x31, 0x37, 0x39, 0x20, 0x31,
                 0x37, 0x39, 0x0A, 0x43, 0x4F, 0x4D, 0x42, 0x41, 0x54, 0x5F, 0x53,
                 0x45, 0x4C, 0x46, 0x5F, 0x48, 0x49, 0x54, 0x53, 0x20, 0x32, 0x35,
                 0x35, 0x20, 0x32, 0x35, 0x35, 0x20, 0x32, 0x35, 0x35, 0x0A, 0x43,
                 0x4F, 0x4D, 0x42, 0x41, 0x54, 0x5F, 0x53, 0x45, 0x4C, 0x46, 0x5F,
                 0x4D, 0x49, 0x53, 0x53, 0x45, 0x53, 0x20, 0x32, 0x35, 0x35, 0x20,
                 0x32, 0x35, 0x35, 0x20, 0x32, 0x35, 0x35, 0x0A, 0x43, 0x4F, 0x4D,
                 0x42, 0x41, 0x54, 0x5F, 0x50, 0x45, 0x54, 0x5F, 0x48, 0x49, 0x54,
                 0x53, 0x20, 0x32, 0x35, 0x35, 0x20, 0x32, 0x35, 0x35, 0x20, 0x32,
                 0x35, 0x35, 0x0A, 0x43, 0x4F, 0x4D, 0x42, 0x41, 0x54, 0x5F, 0x50,
                 0x45, 0x54, 0x5F, 0x4D, 0x49, 0x53, 0x53, 0x45, 0x53, 0x20, 0x32,
                 0x35, 0x35, 0x20, 0x32, 0x35, 0x35, 0x20, 0x32, 0x35, 0x35, 0x0A,
                 0x43, 0x4F, 0x4D, 0x42, 0x41, 0x54, 0x5F, 0x50, 0x41, 0x52, 0x54,
                 0x59, 0x5F, 0x48, 0x49, 0x54, 0x53, 0x20, 0x32, 0x35, 0x35, 0x20,
                 0x32, 0x35, 0x35, 0x20, 0x32, 0x35, 0x35, 0x0A, 0x43, 0x4F, 0x4D,
                 0x42, 0x41, 0x54, 0x5F, 0x50, 0x41, 0x52, 0x54, 0x59, 0x5F, 0x4D,
                 0x49, 0x53, 0x53, 0x45, 0x53, 0x20, 0x32, 0x35, 0x35, 0x20, 0x32,
                 0x35, 0x35, 0x20, 0x32, 0x35, 0x35, 0x0A, 0x43, 0x4F, 0x4D, 0x42,
                 0x41, 0x54, 0x5F, 0x46, 0x52, 0x49, 0x45, 0x4E, 0x44, 0x4C, 0x59,
                 0x50, 0x4C, 0x41, 0x59, 0x45, 0x52, 0x5F, 0x48, 0x49, 0x54, 0x53,
                 0x20, 0x32, 0x35, 0x35, 0x20, 0x32, 0x35, 0x35, 0x20, 0x32, 0x35,
                 0x35, 0x0A, 0x43, 0x4F, 0x4D, 0x42, 0x41, 0x54, 0x5F, 0x46, 0x52,
                 0x49, 0x45, 0x4E, 0x44, 0x4C, 0x59, 0x50, 0x4C, 0x41, 0x59, 0x45,
                 0x52, 0x5F, 0x4D, 0x49, 0x53, 0x53, 0x45, 0x53, 0x20, 0x32, 0x35,
                 0x35, 0x20, 0x32, 0x35, 0x35, 0x20, 0x32, 0x35, 0x35, 0x0A, 0x43,
                 0x4F, 0x4D, 0x42, 0x41, 0x54, 0x5F, 0x48, 0x4F, 0x53, 0x54, 0x49,
                 0x4C, 0x45, 0x50, 0x4C, 0x41, 0x59, 0x45, 0x52, 0x5F, 0x48, 0x49,
                 0x54, 0x53, 0x20, 0x32, 0x35, 0x35, 0x20, 0x32, 0x35, 0x35, 0x20,
                 0x32, 0x35, 0x35, 0x0A, 0x43, 0x4F, 0x4D, 0x42, 0x41, 0x54, 0x5F,
                 0x48, 0x4F, 0x53, 0x54, 0x49, 0x4C, 0x45, 0x50, 0x4C, 0x41, 0x59,
                 0x45, 0x52, 0x5F, 0x4D, 0x49, 0x53, 0x53, 0x45, 0x53, 0x20, 0x32,
                 0x35, 0x35, 0x20, 0x32, 0x35, 0x35, 0x20, 0x32, 0x35, 0x35, 0x0A,
                 0x43, 0x4F, 0x4D, 0x42, 0x41, 0x54, 0x5F, 0x43, 0x52, 0x45, 0x41,
                 0x54, 0x55, 0x52, 0x45, 0x5F, 0x56, 0x53, 0x5F, 0x53, 0x45, 0x4C,
                 0x46, 0x5F, 0x48, 0x49, 0x54, 0x53, 0x20, 0x32, 0x35, 0x35, 0x20,
                 0x34, 0x37, 0x20, 0x34, 0x37, 0x0A, 0x43, 0x4F, 0x4D, 0x42, 0x41,
                 0x54, 0x5F, 0x43, 0x52, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5F,
                 0x56, 0x53, 0x5F, 0x53, 0x45, 0x4C, 0x46, 0x5F, 0x4D, 0x49, 0x53,
                 0x53, 0x45, 0x53, 0x20, 0x32, 0x35, 0x35, 0x20, 0x34, 0x37, 0x20,
                 0x34, 0x37, 0x0A, 0x43, 0x4F, 0x4D, 0x42, 0x41, 0x54, 0x5F, 0x43,
                 0x52, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5F, 0x56, 0x53, 0x5F,
                 0x50, 0x41, 0x52, 0x54, 0x59, 0x5F, 0x48, 0x49, 0x54, 0x53, 0x20,
                 0x32, 0x35, 0x35, 0x20, 0x32, 0x35, 0x35, 0x20, 0x32, 0x35, 0x35,
                 0x0A, 0x43, 0x4F, 0x4D, 0x42, 0x41, 0x54, 0x5F, 0x43, 0x52, 0x45,
                 0x41, 0x54, 0x55, 0x52, 0x45, 0x5F, 0x56, 0x53, 0x5F, 0x50, 0x41,
                 0x52, 0x54, 0x59, 0x5F, 0x4D, 0x49, 0x53, 0x53, 0x45, 0x53, 0x20,
                 0x32, 0x35, 0x35, 0x20, 0x32, 0x35, 0x35, 0x20, 0x32, 0x35, 0x35,
                 0x0A, 0x43, 0x4F, 0x4D, 0x42, 0x41, 0x54, 0x5F, 0x43, 0x52, 0x45,
                 0x41, 0x54, 0x55, 0x52, 0x45, 0x5F, 0x56, 0x53, 0x5F, 0x43, 0x52,
                 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5F, 0x48, 0x49, 0x54, 0x53,
                 0x20, 0x32, 0x35, 0x35, 0x20, 0x32, 0x35, 0x35, 0x20, 0x32, 0x35,
                 0x35, 0x0A, 0x43, 0x4F, 0x4D, 0x42, 0x41, 0x54, 0x5F, 0x43, 0x52,
                 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5F, 0x56, 0x53, 0x5F, 0x43,
                 0x52, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5F, 0x4D, 0x49, 0x53,
                 0x53, 0x45, 0x53, 0x20, 0x32, 0x35, 0x35, 0x20, 0x32, 0x35, 0x35,
                 0x20, 0x32, 0x35, 0x35, 0x0A, 0x43, 0x4F, 0x4D, 0x42, 0x41, 0x54,
                 0x5F, 0x46, 0x52, 0x49, 0x45, 0x4E, 0x44, 0x4C, 0x59, 0x5F, 0x44,
                 0x45, 0x41, 0x54, 0x48, 0x20, 0x32, 0x35, 0x35, 0x20, 0x32, 0x35,
                 0x35, 0x20, 0x32, 0x35, 0x35, 0x0A, 0x43, 0x4F, 0x4D, 0x42, 0x41,
                 0x54, 0x5F, 0x48, 0x4F, 0x53, 0x54, 0x49, 0x4C, 0x45, 0x5F, 0x44,
                 0x45, 0x41, 0x54, 0x48, 0x20, 0x32, 0x35, 0x35, 0x20, 0x32, 0x35,
                 0x35, 0x20, 0x32, 0x35, 0x35, 0x0A, 0x43, 0x4F, 0x4D, 0x42, 0x41,
                 0x54, 0x5F, 0x58, 0x50, 0x5F, 0x47, 0x41, 0x49, 0x4E, 0x20, 0x31,
                 0x31, 0x31, 0x20, 0x31, 0x31, 0x31, 0x20, 0x32, 0x35, 0x35, 0x0A,
                 0x53, 0x50, 0x45, 0x4C, 0x4C, 0x5F, 0x53, 0x45, 0x4C, 0x46, 0x5F,
                 0x44, 0x41, 0x4D, 0x41, 0x47, 0x45, 0x20, 0x32, 0x35, 0x35, 0x20,
                 0x32, 0x35, 0x35, 0x20, 0x30, 0x0A, 0x53, 0x50, 0x45, 0x4C, 0x4C,
                 0x5F, 0x53, 0x45, 0x4C, 0x46, 0x5F, 0x42, 0x55, 0x46, 0x46, 0x20,
                 0x32, 0x35, 0x35, 0x20, 0x32, 0x35, 0x35, 0x20, 0x30, 0x0A, 0x53,
                 0x50, 0x45, 0x4C, 0x4C, 0x5F, 0x50, 0x45, 0x54, 0x5F, 0x44, 0x41,
                 0x4D, 0x41, 0x47, 0x45, 0x20, 0x32, 0x35, 0x35, 0x20, 0x32, 0x35,
                 0x35, 0x20, 0x32, 0x35, 0x35, 0x0A, 0x53, 0x50, 0x45, 0x4C, 0x4C,
                 0x5F, 0x50, 0x45, 0x54, 0x5F, 0x42, 0x55, 0x46, 0x46, 0x20, 0x32,
                 0x35, 0x35, 0x20, 0x32, 0x35, 0x35, 0x20, 0x32, 0x35, 0x35, 0x0A,
                 0x53, 0x50, 0x45, 0x4C, 0x4C, 0x5F, 0x50, 0x41, 0x52, 0x54, 0x59,
                 0x5F, 0x44, 0x41, 0x4D, 0x41, 0x47, 0x45, 0x20, 0x32, 0x35, 0x35,
                 0x20, 0x32, 0x35, 0x35, 0x20, 0x32, 0x35, 0x35, 0x0A, 0x53, 0x50,
                 0x45, 0x4C, 0x4C, 0x5F, 0x50, 0x41, 0x52, 0x54, 0x59, 0x5F, 0x42,
                 0x55, 0x46, 0x46, 0x20, 0x32, 0x35, 0x35, 0x20, 0x32, 0x35, 0x35,
                 0x20, 0x32, 0x35, 0x35, 0x0A, 0x53, 0x50, 0x45, 0x4C, 0x4C, 0x5F,
                 0x46, 0x52, 0x49, 0x45, 0x4E, 0x44, 0x4C, 0x59, 0x50, 0x4C, 0x41,
                 0x59, 0x45, 0x52, 0x5F, 0x44, 0x41, 0x4D, 0x41, 0x47, 0x45, 0x20,
                 0x32, 0x35, 0x35, 0x20, 0x32, 0x35, 0x35, 0x20, 0x32, 0x35, 0x35,
                 0x0A, 0x53, 0x50, 0x45, 0x4C, 0x4C, 0x5F, 0x46, 0x52, 0x49, 0x45,
                 0x4E, 0x44, 0x4C, 0x59, 0x50, 0x4C, 0x41, 0x59, 0x45, 0x52, 0x5F,
                 0x42, 0x55, 0x46, 0x46, 0x20, 0x32, 0x35, 0x35, 0x20, 0x32, 0x35,
                 0x35, 0x20, 0x32, 0x35, 0x35, 0x0A, 0x53, 0x50, 0x45, 0x4C, 0x4C,
                 0x5F, 0x48, 0x4F, 0x53, 0x54, 0x49, 0x4C, 0x45, 0x50, 0x4C, 0x41,
                 0x59, 0x45, 0x52, 0x5F, 0x44, 0x41, 0x4D, 0x41, 0x47, 0x45, 0x20,
                 0x32, 0x35, 0x35, 0x20, 0x32, 0x35, 0x35, 0x20, 0x32, 0x35, 0x35,
                 0x0A, 0x53, 0x50, 0x45, 0x4C, 0x4C, 0x5F, 0x48, 0x4F, 0x53, 0x54,
                 0x49, 0x4C, 0x45, 0x50, 0x4C, 0x41, 0x59, 0x45, 0x52, 0x5F, 0x42,
                 0x55, 0x46, 0x46, 0x20, 0x32, 0x35, 0x35, 0x20, 0x32, 0x35, 0x35,
                 0x20, 0x32, 0x35, 0x35, 0x0A, 0x53, 0x50, 0x45, 0x4C, 0x4C, 0x5F,
                 0x43, 0x52, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5F, 0x56, 0x53,
                 0x5F, 0x53, 0x45, 0x4C, 0x46, 0x5F, 0x44, 0x41, 0x4D, 0x41, 0x47,
                 0x45, 0x20, 0x32, 0x30, 0x32, 0x20, 0x37, 0x36, 0x20, 0x32, 0x31,
                 0x37, 0x0A, 0x53, 0x50, 0x45, 0x4C, 0x4C, 0x5F, 0x43, 0x52, 0x45,
                 0x41, 0x54, 0x55, 0x52, 0x45, 0x5F, 0x56, 0x53, 0x5F, 0x53, 0x45,
                 0x4C, 0x46, 0x5F, 0x42, 0x55, 0x46, 0x46, 0x20, 0x32, 0x35, 0x35,
                 0x20, 0x32, 0x35, 0x35, 0x20, 0x32, 0x35, 0x35, 0x0A, 0x53, 0x50,
                 0x45, 0x4C, 0x4C, 0x5F, 0x43, 0x52, 0x45, 0x41, 0x54, 0x55, 0x52,
                 0x45, 0x5F, 0x56, 0x53, 0x5F, 0x50, 0x41, 0x52, 0x54, 0x59, 0x5F,
                 0x44, 0x41, 0x4D, 0x41, 0x47, 0x45, 0x20, 0x32, 0x35, 0x35, 0x20,
                 0x32, 0x35, 0x35, 0x20, 0x32, 0x35, 0x35, 0x0A, 0x53, 0x50, 0x45,
                 0x4C, 0x4C, 0x5F, 0x43, 0x52, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45,
                 0x5F, 0x56, 0x53, 0x5F, 0x50, 0x41, 0x52, 0x54, 0x59, 0x5F, 0x42,
                 0x55, 0x46, 0x46, 0x20, 0x32, 0x35, 0x35, 0x20, 0x32, 0x35, 0x35,
                 0x20, 0x32, 0x35, 0x35, 0x0A, 0x53, 0x50, 0x45, 0x4C, 0x4C, 0x5F,
                 0x43, 0x52, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5F, 0x56, 0x53,
                 0x5F, 0x43, 0x52, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5F, 0x44,
                 0x41, 0x4D, 0x41, 0x47, 0x45, 0x20, 0x32, 0x35, 0x35, 0x20, 0x32,
                 0x35, 0x35, 0x20, 0x32, 0x35, 0x35, 0x0A, 0x53, 0x50, 0x45, 0x4C,
                 0x4C, 0x5F, 0x43, 0x52, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5F,
                 0x56, 0x53, 0x5F, 0x43, 0x52, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45,
                 0x5F, 0x42, 0x55, 0x46, 0x46, 0x20, 0x32, 0x35, 0x35, 0x20, 0x32,
                 0x35, 0x35, 0x20, 0x32, 0x35, 0x35, 0x0A, 0x53, 0x50, 0x45, 0x4C,
                 0x4C, 0x5F, 0x54, 0x52, 0x41, 0x44, 0x45, 0x53, 0x4B, 0x49, 0x4C,
                 0x4C, 0x53, 0x20, 0x32, 0x35, 0x35, 0x20, 0x32, 0x35, 0x35, 0x20,
                 0x32, 0x35, 0x35, 0x0A, 0x53, 0x50, 0x45, 0x4C, 0x4C, 0x5F, 0x44,
                 0x41, 0x4D, 0x41, 0x47, 0x45, 0x53, 0x48, 0x49, 0x45, 0x4C, 0x44,
                 0x53, 0x5F, 0x4F, 0x4E, 0x5F, 0x53, 0x45, 0x4C, 0x46, 0x20, 0x32,
                 0x35, 0x35, 0x20, 0x32, 0x35, 0x35, 0x20, 0x32, 0x35, 0x35, 0x0A,
                 0x53, 0x50, 0x45, 0x4C, 0x4C, 0x5F, 0x44, 0x41, 0x4D, 0x41, 0x47,
                 0x45, 0x53, 0x48, 0x49, 0x45, 0x4C, 0x44, 0x53, 0x5F, 0x4F, 0x4E,
                 0x5F, 0x4F, 0x54, 0x48, 0x45, 0x52, 0x53, 0x20, 0x32, 0x35, 0x35,
                 0x20, 0x32, 0x35, 0x35, 0x20, 0x32, 0x35, 0x35, 0x0A, 0x53, 0x50,
                 0x45, 0x4C, 0x4C, 0x5F, 0x41, 0x55, 0x52, 0x41, 0x5F, 0x47, 0x4F,
                 0x4E, 0x45, 0x5F, 0x53, 0x45, 0x4C, 0x46, 0x20, 0x32, 0x35, 0x35,
                 0x20, 0x32, 0x35, 0x35, 0x20, 0x32, 0x35, 0x35, 0x0A, 0x53, 0x50,
                 0x45, 0x4C, 0x4C, 0x5F, 0x41, 0x55, 0x52, 0x41, 0x5F, 0x47, 0x4F,
                 0x4E, 0x45, 0x5F, 0x50, 0x41, 0x52, 0x54, 0x59, 0x20, 0x32, 0x35,
                 0x35, 0x20, 0x32, 0x35, 0x35, 0x20, 0x32, 0x35, 0x35, 0x0A, 0x53,
                 0x50, 0x45, 0x4C, 0x4C, 0x5F, 0x41, 0x55, 0x52, 0x41, 0x5F, 0x47,
                 0x4F, 0x4E, 0x45, 0x5F, 0x4F, 0x54, 0x48, 0x45, 0x52, 0x20, 0x32,
                 0x35, 0x35, 0x20, 0x32, 0x35, 0x35, 0x20, 0x32, 0x35, 0x35, 0x0A,
                 0x53, 0x50, 0x45, 0x4C, 0x4C, 0x5F, 0x49, 0x54, 0x45, 0x4D, 0x5F,
                 0x45, 0x4E, 0x43, 0x48, 0x41, 0x4E, 0x54, 0x4D, 0x45, 0x4E, 0x54,
                 0x53, 0x20, 0x32, 0x35, 0x35, 0x20, 0x32, 0x35, 0x35, 0x20, 0x32,
                 0x35, 0x35, 0x0A, 0x53, 0x50, 0x45, 0x4C, 0x4C, 0x5F, 0x42, 0x52,
                 0x45, 0x41, 0x4B, 0x5F, 0x41, 0x55, 0x52, 0x41, 0x20, 0x32, 0x35,
                 0x35, 0x20, 0x32, 0x35, 0x35, 0x20, 0x32, 0x35, 0x35, 0x0A, 0x53,
                 0x50, 0x45, 0x4C, 0x4C, 0x5F, 0x50, 0x45, 0x52, 0x49, 0x4F, 0x44,
                 0x49, 0x43, 0x5F, 0x53, 0x45, 0x4C, 0x46, 0x5F, 0x44, 0x41, 0x4D,
                 0x41, 0x47, 0x45, 0x20, 0x32, 0x35, 0x35, 0x20, 0x32, 0x35, 0x35,
                 0x20, 0x32, 0x35, 0x35, 0x0A, 0x53, 0x50, 0x45, 0x4C, 0x4C, 0x5F,
                 0x50, 0x45, 0x52, 0x49, 0x4F, 0x44, 0x49, 0x43, 0x5F, 0x53, 0x45,
                 0x4C, 0x46, 0x5F, 0x42, 0x55, 0x46, 0x46, 0x53, 0x20, 0x32, 0x35,
                 0x35, 0x20, 0x32, 0x35, 0x35, 0x20, 0x32, 0x35, 0x35, 0x0A, 0x53,
                 0x50, 0x45, 0x4C, 0x4C, 0x5F, 0x50, 0x45, 0x52, 0x49, 0x4F, 0x44,
                 0x49, 0x43, 0x5F, 0x50, 0x41, 0x52, 0x54, 0x59, 0x5F, 0x44, 0x41,
                 0x4D, 0x41, 0x47, 0x45, 0x20, 0x32, 0x35, 0x35, 0x20, 0x32, 0x35,
                 0x35, 0x20, 0x32, 0x35, 0x35, 0x0A, 0x53, 0x50, 0x45, 0x4C, 0x4C,
                 0x5F, 0x50, 0x45, 0x52, 0x49, 0x4F, 0x44, 0x49, 0x43, 0x5F, 0x50,
                 0x41, 0x52, 0x54, 0x59, 0x5F, 0x42, 0x55, 0x46, 0x46, 0x53, 0x20,
                 0x32, 0x35, 0x35, 0x20, 0x32, 0x35, 0x35, 0x20, 0x32, 0x35, 0x35,
                 0x0A, 0x53, 0x50, 0x45, 0x4C, 0x4C, 0x5F, 0x50, 0x45, 0x52, 0x49,
                 0x4F, 0x44, 0x49, 0x43, 0x5F, 0x46, 0x52, 0x49, 0x45, 0x4E, 0x44,
                 0x4C, 0x59, 0x50, 0x4C, 0x41, 0x59, 0x45, 0x52, 0x5F, 0x44, 0x41,
                 0x4D, 0x41, 0x47, 0x45, 0x20, 0x32, 0x35, 0x35, 0x20, 0x32, 0x35,
                 0x35, 0x20, 0x32, 0x35, 0x35, 0x0A, 0x53, 0x50, 0x45, 0x4C, 0x4C,
                 0x5F, 0x50, 0x45, 0x52, 0x49, 0x4F, 0x44, 0x49, 0x43, 0x5F, 0x46,
                 0x52, 0x49, 0x45, 0x4E, 0x44, 0x4C, 0x59, 0x50, 0x4C, 0x41, 0x59,
                 0x45, 0x52, 0x5F, 0x42, 0x55, 0x46, 0x46, 0x53, 0x20, 0x32, 0x35,
                 0x35, 0x20, 0x32, 0x35, 0x35, 0x20, 0x32, 0x35, 0x35, 0x0A, 0x53,
                 0x50, 0x45, 0x4C, 0x4C, 0x5F, 0x50, 0x45, 0x52, 0x49, 0x4F, 0x44,
                 0x49, 0x43, 0x5F, 0x48, 0x4F, 0x53, 0x54, 0x49, 0x4C, 0x45, 0x50,
                 0x4C, 0x41, 0x59, 0x45, 0x52, 0x5F, 0x44, 0x41, 0x4D, 0x41, 0x47,
                 0x45, 0x20, 0x32, 0x35, 0x35, 0x20, 0x32, 0x35, 0x35, 0x20, 0x32,
                 0x35, 0x35, 0x0A, 0x53, 0x50, 0x45, 0x4C, 0x4C, 0x5F, 0x50, 0x45,
                 0x52, 0x49, 0x4F, 0x44, 0x49, 0x43, 0x5F, 0x48, 0x4F, 0x53, 0x54,
                 0x49, 0x4C, 0x45, 0x50, 0x4C, 0x41, 0x59, 0x45, 0x52, 0x5F, 0x42,
                 0x55, 0x46, 0x46, 0x53, 0x20, 0x32, 0x35, 0x35, 0x20, 0x32, 0x35,
                 0x35, 0x20, 0x32, 0x35, 0x35, 0x0A, 0x53, 0x50, 0x45, 0x4C, 0x4C,
                 0x5F, 0x50, 0x45, 0x52, 0x49, 0x4F, 0x44, 0x49, 0x43, 0x5F, 0x43,
                 0x52, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5F, 0x44, 0x41, 0x4D,
                 0x41, 0x47, 0x45, 0x20, 0x32, 0x35, 0x35, 0x20, 0x32, 0x35, 0x35,
                 0x20, 0x32, 0x35, 0x35, 0x0A, 0x53, 0x50, 0x45, 0x4C, 0x4C, 0x5F,
                 0x50, 0x45, 0x52, 0x49, 0x4F, 0x44, 0x49, 0x43, 0x5F, 0x43, 0x52,
                 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5F, 0x42, 0x55, 0x46, 0x46,
                 0x53, 0x20, 0x32, 0x35, 0x35, 0x20, 0x32, 0x35, 0x35, 0x20, 0x32,
                 0x35, 0x35, 0x0A, 0x53, 0x50, 0x45, 0x4C, 0x4C, 0x5F, 0x46, 0x41,
                 0x49, 0x4C, 0x45, 0x44, 0x5F, 0x4C, 0x4F, 0x43, 0x41, 0x4C, 0x50,
                 0x4C, 0x41, 0x59, 0x45, 0x52, 0x20, 0x32, 0x35, 0x35, 0x20, 0x32,
                 0x35, 0x35, 0x20, 0x32, 0x35, 0x35, 0x0A, 0x43, 0x4F, 0x4D, 0x42,
                 0x41, 0x54, 0x5F, 0x48, 0x4F, 0x4E, 0x4F, 0x52, 0x5F, 0x47, 0x41,
                 0x49, 0x4E, 0x20, 0x32, 0x32, 0x34, 0x20, 0x32, 0x30, 0x32, 0x20,
                 0x31, 0x30, 0x0A, 0x42, 0x47, 0x5F, 0x53, 0x59, 0x53, 0x54, 0x45,
                 0x4D, 0x5F, 0x4E, 0x45, 0x55, 0x54, 0x52, 0x41, 0x4C, 0x20, 0x32,
                 0x35, 0x35, 0x20, 0x31, 0x32, 0x30, 0x20, 0x31, 0x30, 0x0A, 0x42,
                 0x47, 0x5F, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4D, 0x5F, 0x41, 0x4C,
                 0x4C, 0x49, 0x41, 0x4E, 0x43, 0x45, 0x20, 0x30, 0x20, 0x31, 0x37,
                 0x34, 0x20, 0x32, 0x33, 0x39, 0x0A, 0x42, 0x47, 0x5F, 0x53, 0x59,
                 0x53, 0x54, 0x45, 0x4D, 0x5F, 0x48, 0x4F, 0x52, 0x44, 0x45, 0x20,
                 0x32, 0x35, 0x35, 0x20, 0x30, 0x20, 0x30, 0x0A, 0x43, 0x4F, 0x4D,
                 0x42, 0x41, 0x54, 0x5F, 0x46, 0x41, 0x43, 0x54, 0x49, 0x4F, 0x4E,
                 0x5F, 0x43, 0x48, 0x41, 0x4E, 0x47, 0x45, 0x20, 0x31, 0x32, 0x38,
                 0x20, 0x31, 0x32, 0x38, 0x20, 0x32, 0x35, 0x35, 0x0A, 0x4D, 0x4F,
                 0x4E, 0x45, 0x59, 0x20, 0x32, 0x35, 0x35, 0x20, 0x32, 0x35, 0x35,
                 0x20, 0x30, 0x0A, 0x52, 0x41, 0x49, 0x44, 0x5F, 0x4C, 0x45, 0x41,
                 0x44, 0x45, 0x52, 0x20, 0x32, 0x35, 0x35, 0x20, 0x32, 0x31, 0x39,
                 0x20, 0x31, 0x38, 0x33, 0x0A, 0x52, 0x41, 0x49, 0x44, 0x5F, 0x57,
                 0x41, 0x52, 0x4E, 0x49, 0x4E, 0x47, 0x20, 0x32, 0x35, 0x35, 0x20,
                 0x32, 0x31, 0x39, 0x20, 0x31, 0x38, 0x33, 0x0A, 0x46, 0x4F, 0x52,
                 0x45, 0x49, 0x47, 0x4E, 0x5F, 0x54, 0x45, 0x4C, 0x4C, 0x20, 0x32,
                 0x35, 0x35, 0x20, 0x31, 0x32, 0x38, 0x20, 0x32, 0x35, 0x35, 0x0A,
                 0x52, 0x41, 0x49, 0x44, 0x5F, 0x42, 0x4F, 0x53, 0x53, 0x5F, 0x45,
                 0x4D, 0x4F, 0x54, 0x45, 0x20, 0x32, 0x35, 0x35, 0x20, 0x32, 0x31,
                 0x39, 0x20, 0x31, 0x38, 0x33, 0x0A, 0x46, 0x49, 0x4C, 0x54, 0x45,
                 0x52, 0x45, 0x44, 0x20, 0x32, 0x35, 0x35, 0x20, 0x30, 0x20, 0x30,
                 0x0A, 0x42, 0x41, 0x54, 0x54, 0x4C, 0x45, 0x47, 0x52, 0x4F, 0x55,
                 0x4E, 0x44, 0x20, 0x32, 0x35, 0x35, 0x20, 0x31, 0x32, 0x37, 0x20,
                 0x30, 0x0A, 0x42, 0x41, 0x54, 0x54, 0x4C, 0x45, 0x47, 0x52, 0x4F,
                 0x55, 0x4E, 0x44, 0x5F, 0x4C, 0x45, 0x41, 0x44, 0x45, 0x52, 0x20,
                 0x32, 0x35, 0x35, 0x20, 0x32, 0x31, 0x39, 0x20, 0x31, 0x38, 0x33,
                 0x0A, 0x43, 0x48, 0x41, 0x4E, 0x4E, 0x45, 0x4C, 0x31, 0x20, 0x32,
                 0x35, 0x35, 0x20, 0x31, 0x39, 0x32, 0x20, 0x31, 0x39, 0x32, 0x0A,
                 0x43, 0x48, 0x41, 0x4E, 0x4E, 0x45, 0x4C, 0x32, 0x20, 0x32, 0x35,
                 0x35, 0x20, 0x31, 0x39, 0x32, 0x20, 0x31, 0x39, 0x32, 0x0A, 0x43,
                 0x48, 0x41, 0x4E, 0x4E, 0x45, 0x4C, 0x33, 0x20, 0x32, 0x35, 0x35,
                 0x20, 0x31, 0x39, 0x32, 0x20, 0x31, 0x39, 0x32, 0x0A, 0x43, 0x48,
                 0x41, 0x4E, 0x4E, 0x45, 0x4C, 0x34, 0x20, 0x32, 0x35, 0x35, 0x20,
                 0x31, 0x39, 0x32, 0x20, 0x31, 0x39, 0x32, 0x0A, 0x43, 0x48, 0x41,
                 0x4E, 0x4E, 0x45, 0x4C, 0x35, 0x20, 0x32, 0x35, 0x35, 0x20, 0x31,
                 0x39, 0x32, 0x20, 0x31, 0x39, 0x32, 0x0A, 0x43, 0x48, 0x41, 0x4E,
                 0x4E, 0x45, 0x4C, 0x36, 0x20, 0x32, 0x35, 0x35, 0x20, 0x31, 0x39,
                 0x32, 0x20, 0x31, 0x39, 0x32, 0x0A, 0x43, 0x48, 0x41, 0x4E, 0x4E,
                 0x45, 0x4C, 0x37, 0x20, 0x32, 0x35, 0x35, 0x20, 0x31, 0x39, 0x32,
                 0x20, 0x31, 0x39, 0x32, 0x0A, 0x43, 0x48, 0x41, 0x4E, 0x4E, 0x45,
                 0x4C, 0x38, 0x20, 0x32, 0x35, 0x35, 0x20, 0x31, 0x39, 0x32, 0x20,
                 0x31, 0x39, 0x32, 0x0A, 0x43, 0x48, 0x41, 0x4E, 0x4E, 0x45, 0x4C,
                 0x39, 0x20, 0x32, 0x35, 0x35, 0x20, 0x31, 0x39, 0x32, 0x20, 0x31,
                 0x39, 0x32, 0x0A, 0x43, 0x48, 0x41, 0x4E, 0x4E, 0x45, 0x4C, 0x31,
                 0x30, 0x20, 0x32, 0x35, 0x35, 0x20, 0x31, 0x39, 0x32, 0x20, 0x31,
                 0x39, 0x32, 0x0A, 0x45, 0x4E, 0x44, 0x0A, 0x0A, 0x57, 0x49, 0x4E,
                 0x44, 0x4F, 0x57, 0x20, 0x31, 0x0A, 0x53, 0x49, 0x5A, 0x45, 0x20,
                 0x30, 0x0A, 0x43, 0x4F, 0x4C, 0x4F, 0x52, 0x20, 0x30, 0x20, 0x30,
                 0x20, 0x30, 0x20, 0x30, 0x0A, 0x4C, 0x4F, 0x43, 0x4B, 0x45, 0x44,
                 0x20, 0x31, 0x0A, 0x44, 0x4F, 0x43, 0x4B, 0x45, 0x44, 0x20, 0x31,
                 0x0A, 0x53, 0x48, 0x4F, 0x57, 0x4E, 0x20, 0x31, 0x0A, 0x0A, 0x4D,
                 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x53, 0x0A, 0x53, 0x59, 0x53,
                 0x54, 0x45, 0x4D, 0x0A, 0x53, 0x41, 0x59, 0x0A, 0x59, 0x45, 0x4C,
                 0x4C, 0x0A, 0x57, 0x48, 0x49, 0x53, 0x50, 0x45, 0x52, 0x0A, 0x50,
                 0x41, 0x52, 0x54, 0x59, 0x0A, 0x47, 0x55, 0x49, 0x4C, 0x44, 0x0A,
                 0x43, 0x52, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x0A, 0x43, 0x48,
                 0x41, 0x4E, 0x4E, 0x45, 0x4C, 0x0A, 0x53, 0x4B, 0x49, 0x4C, 0x4C,
                 0x0A, 0x4C, 0x4F, 0x4F, 0x54, 0x0A, 0x45, 0x4E, 0x44, 0x0A, 0x0A,
                 0x43, 0x48, 0x41, 0x4E, 0x4E, 0x45, 0x4C, 0x53, 0x0A, 0x45, 0x4E,
                 0x44, 0x0A, 0x0A, 0x5A, 0x4F, 0x4E, 0x45, 0x43, 0x48, 0x41, 0x4E,
                 0x4E, 0x45, 0x4C, 0x53, 0x20, 0x32, 0x30, 0x39, 0x37, 0x31, 0x35,
                 0x35, 0x0A, 0x0A, 0x45, 0x4E, 0x44, 0x0A, 0x0A, 0x57, 0x49, 0x4E,
                 0x44, 0x4F, 0x57, 0x20, 0x32, 0x0A, 0x53, 0x49, 0x5A, 0x45, 0x20,
                 0x30, 0x0A, 0x43, 0x4F, 0x4C, 0x4F, 0x52, 0x20, 0x30, 0x20, 0x30,
                 0x20, 0x30, 0x20, 0x30, 0x0A, 0x4C, 0x4F, 0x43, 0x4B, 0x45, 0x44,
                 0x20, 0x31, 0x0A, 0x44, 0x4F, 0x43, 0x4B, 0x45, 0x44, 0x20, 0x32,
                 0x0A, 0x53, 0x48, 0x4F, 0x57, 0x4E, 0x20, 0x30, 0x0A, 0x0A, 0x4D,
                 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x53, 0x0A, 0x43, 0x4F, 0x4D,
                 0x42, 0x41, 0x54, 0x5F, 0x4D, 0x49, 0x53, 0x43, 0x5F, 0x49, 0x4E,
                 0x46, 0x4F, 0x0A, 0x43, 0x4F, 0x4D, 0x42, 0x41, 0x54, 0x5F, 0x53,
                 0x45, 0x4C, 0x46, 0x5F, 0x48, 0x49, 0x54, 0x53, 0x0A, 0x43, 0x4F,
                 0x4D, 0x42, 0x41, 0x54, 0x5F, 0x53, 0x45, 0x4C, 0x46, 0x5F, 0x4D,
                 0x49, 0x53, 0x53, 0x45, 0x53, 0x0A, 0x43, 0x4F, 0x4D, 0x42, 0x41,
                 0x54, 0x5F, 0x50, 0x45, 0x54, 0x5F, 0x48, 0x49, 0x54, 0x53, 0x0A,
                 0x43, 0x4F, 0x4D, 0x42, 0x41, 0x54, 0x5F, 0x50, 0x45, 0x54, 0x5F,
                 0x4D, 0x49, 0x53, 0x53, 0x45, 0x53, 0x0A, 0x43, 0x4F, 0x4D, 0x42,
                 0x41, 0x54, 0x5F, 0x48, 0x4F, 0x53, 0x54, 0x49, 0x4C, 0x45, 0x50,
                 0x4C, 0x41, 0x59, 0x45, 0x52, 0x5F, 0x48, 0x49, 0x54, 0x53, 0x0A,
                 0x43, 0x4F, 0x4D, 0x42, 0x41, 0x54, 0x5F, 0x48, 0x4F, 0x53, 0x54,
                 0x49, 0x4C, 0x45, 0x50, 0x4C, 0x41, 0x59, 0x45, 0x52, 0x5F, 0x4D,
                 0x49, 0x53, 0x53, 0x45, 0x53, 0x0A, 0x43, 0x4F, 0x4D, 0x42, 0x41,
                 0x54, 0x5F, 0x43, 0x52, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5F,
                 0x56, 0x53, 0x5F, 0x53, 0x45, 0x4C, 0x46, 0x5F, 0x48, 0x49, 0x54,
                 0x53, 0x0A, 0x43, 0x4F, 0x4D, 0x42, 0x41, 0x54, 0x5F, 0x43, 0x52,
                 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5F, 0x56, 0x53, 0x5F, 0x53,
                 0x45, 0x4C, 0x46, 0x5F, 0x4D, 0x49, 0x53, 0x53, 0x45, 0x53, 0x0A,
                 0x43, 0x4F, 0x4D, 0x42, 0x41, 0x54, 0x5F, 0x46, 0x52, 0x49, 0x45,
                 0x4E, 0x44, 0x4C, 0x59, 0x5F, 0x44, 0x45, 0x41, 0x54, 0x48, 0x0A,
                 0x43, 0x4F, 0x4D, 0x42, 0x41, 0x54, 0x5F, 0x48, 0x4F, 0x53, 0x54,
                 0x49, 0x4C, 0x45, 0x5F, 0x44, 0x45, 0x41, 0x54, 0x48, 0x0A, 0x43,
                 0x4F, 0x4D, 0x42, 0x41, 0x54, 0x5F, 0x58, 0x50, 0x5F, 0x47, 0x41,
                 0x49, 0x4E, 0x0A, 0x53, 0x50, 0x45, 0x4C, 0x4C, 0x5F, 0x53, 0x45,
                 0x4C, 0x46, 0x5F, 0x44, 0x41, 0x4D, 0x41, 0x47, 0x45, 0x0A, 0x53,
                 0x50, 0x45, 0x4C, 0x4C, 0x5F, 0x53, 0x45, 0x4C, 0x46, 0x5F, 0x42,
                 0x55, 0x46, 0x46, 0x0A, 0x53, 0x50, 0x45, 0x4C, 0x4C, 0x5F, 0x50,
                 0x45, 0x54, 0x5F, 0x44, 0x41, 0x4D, 0x41, 0x47, 0x45, 0x0A, 0x53,
                 0x50, 0x45, 0x4C, 0x4C, 0x5F, 0x50, 0x45, 0x54, 0x5F, 0x42, 0x55,
                 0x46, 0x46, 0x0A, 0x53, 0x50, 0x45, 0x4C, 0x4C, 0x5F, 0x48, 0x4F,
                 0x53, 0x54, 0x49, 0x4C, 0x45, 0x50, 0x4C, 0x41, 0x59, 0x45, 0x52,
                 0x5F, 0x44, 0x41, 0x4D, 0x41, 0x47, 0x45, 0x0A, 0x53, 0x50, 0x45,
                 0x4C, 0x4C, 0x5F, 0x48, 0x4F, 0x53, 0x54, 0x49, 0x4C, 0x45, 0x50,
                 0x4C, 0x41, 0x59, 0x45, 0x52, 0x5F, 0x42, 0x55, 0x46, 0x46, 0x0A,
                 0x53, 0x50, 0x45, 0x4C, 0x4C, 0x5F, 0x43, 0x52, 0x45, 0x41, 0x54,
                 0x55, 0x52, 0x45, 0x5F, 0x56, 0x53, 0x5F, 0x53, 0x45, 0x4C, 0x46,
                 0x5F, 0x44, 0x41, 0x4D, 0x41, 0x47, 0x45, 0x0A, 0x53, 0x50, 0x45,
                 0x4C, 0x4C, 0x5F, 0x43, 0x52, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45,
                 0x5F, 0x56, 0x53, 0x5F, 0x53, 0x45, 0x4C, 0x46, 0x5F, 0x42, 0x55,
                 0x46, 0x46, 0x0A, 0x53, 0x50, 0x45, 0x4C, 0x4C, 0x5F, 0x54, 0x52,
                 0x41, 0x44, 0x45, 0x53, 0x4B, 0x49, 0x4C, 0x4C, 0x53, 0x0A, 0x53,
                 0x50, 0x45, 0x4C, 0x4C, 0x5F, 0x44, 0x41, 0x4D, 0x41, 0x47, 0x45,
                 0x53, 0x48, 0x49, 0x45, 0x4C, 0x44, 0x53, 0x5F, 0x4F, 0x4E, 0x5F,
                 0x53, 0x45, 0x4C, 0x46, 0x0A, 0x53, 0x50, 0x45, 0x4C, 0x4C, 0x5F,
                 0x41, 0x55, 0x52, 0x41, 0x5F, 0x47, 0x4F, 0x4E, 0x45, 0x5F, 0x53,
                 0x45, 0x4C, 0x46, 0x0A, 0x53, 0x50, 0x45, 0x4C, 0x4C, 0x5F, 0x49,
                 0x54, 0x45, 0x4D, 0x5F, 0x45, 0x4E, 0x43, 0x48, 0x41, 0x4E, 0x54,
                 0x4D, 0x45, 0x4E, 0x54, 0x53, 0x0A, 0x53, 0x50, 0x45, 0x4C, 0x4C,
                 0x5F, 0x42, 0x52, 0x45, 0x41, 0x4B, 0x5F, 0x41, 0x55, 0x52, 0x41,
                 0x0A, 0x53, 0x50, 0x45, 0x4C, 0x4C, 0x5F, 0x50, 0x45, 0x52, 0x49,
                 0x4F, 0x44, 0x49, 0x43, 0x5F, 0x53, 0x45, 0x4C, 0x46, 0x5F, 0x44,
                 0x41, 0x4D, 0x41, 0x47, 0x45, 0x0A, 0x53, 0x50, 0x45, 0x4C, 0x4C,
                 0x5F, 0x50, 0x45, 0x52, 0x49, 0x4F, 0x44, 0x49, 0x43, 0x5F, 0x53,
                 0x45, 0x4C, 0x46, 0x5F, 0x42, 0x55, 0x46, 0x46, 0x53, 0x0A, 0x53,
                 0x50, 0x45, 0x4C, 0x4C, 0x5F, 0x50, 0x45, 0x52, 0x49, 0x4F, 0x44,
                 0x49, 0x43, 0x5F, 0x48, 0x4F, 0x53, 0x54, 0x49, 0x4C, 0x45, 0x50,
                 0x4C, 0x41, 0x59, 0x45, 0x52, 0x5F, 0x44, 0x41, 0x4D, 0x41, 0x47,
                 0x45, 0x0A, 0x53, 0x50, 0x45, 0x4C, 0x4C, 0x5F, 0x50, 0x45, 0x52,
                 0x49, 0x4F, 0x44, 0x49, 0x43, 0x5F, 0x48, 0x4F, 0x53, 0x54, 0x49,
                 0x4C, 0x45, 0x50, 0x4C, 0x41, 0x59, 0x45, 0x52, 0x5F, 0x42, 0x55,
                 0x46, 0x46, 0x53, 0x0A, 0x53, 0x50, 0x45, 0x4C, 0x4C, 0x5F, 0x50,
                 0x45, 0x52, 0x49, 0x4F, 0x44, 0x49, 0x43, 0x5F, 0x43, 0x52, 0x45,
                 0x41, 0x54, 0x55, 0x52, 0x45, 0x5F, 0x44, 0x41, 0x4D, 0x41, 0x47,
                 0x45, 0x0A, 0x53, 0x50, 0x45, 0x4C, 0x4C, 0x5F, 0x50, 0x45, 0x52,
                 0x49, 0x4F, 0x44, 0x49, 0x43, 0x5F, 0x43, 0x52, 0x45, 0x41, 0x54,
                 0x55, 0x52, 0x45, 0x5F, 0x42, 0x55, 0x46, 0x46, 0x53, 0x0A, 0x43,
                 0x4F, 0x4D, 0x42, 0x41, 0x54, 0x5F, 0x48, 0x4F, 0x4E, 0x4F, 0x52,
                 0x5F, 0x47, 0x41, 0x49, 0x4E, 0x0A, 0x43, 0x4F, 0x4D, 0x42, 0x41,
                 0x54, 0x5F, 0x46, 0x41, 0x43, 0x54, 0x49, 0x4F, 0x4E, 0x5F, 0x43,
                 0x48, 0x41, 0x4E, 0x47, 0x45, 0x0A, 0x4D, 0x4F, 0x4E, 0x45, 0x59,
                 0x0A, 0x45, 0x4E, 0x44, 0x0A, 0x0A, 0x43, 0x48, 0x41, 0x4E, 0x4E,
                 0x45, 0x4C, 0x53, 0x0A, 0x45, 0x4E, 0x44, 0x0A, 0x0A, 0x5A, 0x4F,
                 0x4E, 0x45, 0x43, 0x48, 0x41, 0x4E, 0x4E, 0x45, 0x4C, 0x53, 0x20,
                 0x30, 0x0A, 0x0A, 0x45, 0x4E, 0x44, 0x0A, 0x0A, 0x57, 0x49, 0x4E,
                 0x44, 0x4F, 0x57, 0x20, 0x33, 0x0A, 0x53, 0x49, 0x5A, 0x45, 0x20,
                 0x30, 0x0A, 0x43, 0x4F, 0x4C, 0x4F, 0x52, 0x20, 0x30, 0x20, 0x30,
                 0x20, 0x30, 0x20, 0x30, 0x0A, 0x4C, 0x4F, 0x43, 0x4B, 0x45, 0x44,
                 0x20, 0x31, 0x0A, 0x44, 0x4F, 0x43, 0x4B, 0x45, 0x44, 0x20, 0x30,
                 0x0A, 0x53, 0x48, 0x4F, 0x57, 0x4E, 0x20, 0x30, 0x0A, 0x0A, 0x4D,
                 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x53, 0x0A, 0x45, 0x4E, 0x44,
                 0x0A, 0x0A, 0x43, 0x48, 0x41, 0x4E, 0x4E, 0x45, 0x4C, 0x53, 0x0A,
                 0x45, 0x4E, 0x44, 0x0A, 0x0A, 0x5A, 0x4F, 0x4E, 0x45, 0x43, 0x48,
                 0x41, 0x4E, 0x4E, 0x45, 0x4C, 0x53, 0x20, 0x30, 0x0A, 0x0A, 0x45,
                 0x4E, 0x44, 0x0A, 0x0A, 0x57, 0x49, 0x4E, 0x44, 0x4F, 0x57, 0x20,
                 0x34, 0x0A, 0x53, 0x49, 0x5A, 0x45, 0x20, 0x30, 0x0A, 0x43, 0x4F,
                 0x4C, 0x4F, 0x52, 0x20, 0x30, 0x20, 0x30, 0x20, 0x30, 0x20, 0x30,
                 0x0A, 0x4C, 0x4F, 0x43, 0x4B, 0x45, 0x44, 0x20, 0x31, 0x0A, 0x44,
                 0x4F, 0x43, 0x4B, 0x45, 0x44, 0x20, 0x30, 0x0A, 0x53, 0x48, 0x4F,
                 0x57, 0x4E, 0x20, 0x30, 0x0A, 0x0A, 0x4D, 0x45, 0x53, 0x53, 0x41,
                 0x47, 0x45, 0x53, 0x0A, 0x45, 0x4E, 0x44, 0x0A, 0x0A, 0x43, 0x48,
                 0x41, 0x4E, 0x4E, 0x45, 0x4C, 0x53, 0x0A, 0x45, 0x4E, 0x44, 0x0A,
                 0x0A, 0x5A, 0x4F, 0x4E, 0x45, 0x43, 0x48, 0x41, 0x4E, 0x4E, 0x45,
                 0x4C, 0x53, 0x20, 0x30, 0x0A, 0x0A, 0x45, 0x4E, 0x44, 0x0A, 0x0A,
                 0x57, 0x49, 0x4E, 0x44, 0x4F, 0x57, 0x20, 0x35, 0x0A, 0x53, 0x49,
                 0x5A, 0x45, 0x20, 0x30, 0x0A, 0x43, 0x4F, 0x4C, 0x4F, 0x52, 0x20,
                 0x30, 0x20, 0x30, 0x20, 0x30, 0x20, 0x30, 0x0A, 0x4C, 0x4F, 0x43,
                 0x4B, 0x45, 0x44, 0x20, 0x31, 0x0A, 0x44, 0x4F, 0x43, 0x4B, 0x45,
                 0x44, 0x20, 0x30, 0x0A, 0x53, 0x48, 0x4F, 0x57, 0x4E, 0x20, 0x30,
                 0x0A, 0x0A, 0x4D, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x53, 0x0A,
                 0x45, 0x4E, 0x44, 0x0A, 0x0A, 0x43, 0x48, 0x41, 0x4E, 0x4E, 0x45,
                 0x4C, 0x53, 0x0A, 0x45, 0x4E, 0x44, 0x0A, 0x0A, 0x5A, 0x4F, 0x4E,
                 0x45, 0x43, 0x48, 0x41, 0x4E, 0x4E, 0x45, 0x4C, 0x53, 0x20, 0x30,
                 0x0A, 0x0A, 0x45, 0x4E, 0x44, 0x0A, 0x0A, 0x57, 0x49, 0x4E, 0x44,
                 0x4F, 0x57, 0x20, 0x36, 0x0A, 0x53, 0x49, 0x5A, 0x45, 0x20, 0x30,
                 0x0A, 0x43, 0x4F, 0x4C, 0x4F, 0x52, 0x20, 0x30, 0x20, 0x30, 0x20,
                 0x30, 0x20, 0x30, 0x0A, 0x4C, 0x4F, 0x43, 0x4B, 0x45, 0x44, 0x20,
                 0x31, 0x0A, 0x44, 0x4F, 0x43, 0x4B, 0x45, 0x44, 0x20, 0x30, 0x0A,
                 0x53, 0x48, 0x4F, 0x57, 0x4E, 0x20, 0x30, 0x0A, 0x0A, 0x4D, 0x45,
                 0x53, 0x53, 0x41, 0x47, 0x45, 0x53, 0x0A, 0x45, 0x4E, 0x44, 0x0A,
                 0x0A, 0x43, 0x48, 0x41, 0x4E, 0x4E, 0x45, 0x4C, 0x53, 0x0A, 0x45,
                 0x4E, 0x44, 0x0A, 0x0A, 0x5A, 0x4F, 0x4E, 0x45, 0x43, 0x48, 0x41,
                 0x4E, 0x4E, 0x45, 0x4C, 0x53, 0x20, 0x30, 0x0A, 0x0A, 0x45, 0x4E,
                 0x44, 0x0A, 0x0A, 0x57, 0x49, 0x4E, 0x44, 0x4F, 0x57, 0x20, 0x37,
                 0x0A, 0x53, 0x49, 0x5A, 0x45, 0x20, 0x30, 0x0A, 0x43, 0x4F, 0x4C,
                 0x4F, 0x52, 0x20, 0x30, 0x20, 0x30, 0x20, 0x30, 0x20, 0x30, 0x0A,
                 0x4C, 0x4F, 0x43, 0x4B, 0x45, 0x44, 0x20, 0x31, 0x0A, 0x44, 0x4F,
                 0x43, 0x4B, 0x45, 0x44, 0x20, 0x30, 0x0A, 0x53, 0x48, 0x4F, 0x57,
                 0x4E, 0x20, 0x30, 0x0A, 0x0A, 0x4D, 0x45, 0x53, 0x53, 0x41, 0x47,
                 0x45, 0x53, 0x0A, 0x45, 0x4E, 0x44, 0x0A, 0x0A, 0x43, 0x48, 0x41,
                 0x4E, 0x4E, 0x45, 0x4C, 0x53, 0x0A, 0x45, 0x4E, 0x44, 0x0A, 0x0A,
                 0x5A, 0x4F, 0x4E, 0x45, 0x43, 0x48, 0x41, 0x4E, 0x4E, 0x45, 0x4C,
                 0x53, 0x20, 0x30, 0x0A, 0x0A, 0x45, 0x4E, 0x44, 0x0A, 0x0A, 0x57,
                 0x49, 0x4E, 0x44, 0x4F, 0x57, 0x20, 0x38, 0x0A, 0x53, 0x49, 0x5A,
                 0x45, 0x20, 0x30, 0x0A, 0x43, 0x4F, 0x4C, 0x4F, 0x52, 0x20, 0x30,
                 0x20, 0x30, 0x20, 0x30, 0x20, 0x30, 0x0A, 0x4C, 0x4F, 0x43, 0x4B,
                 0x45, 0x44, 0x20, 0x31, 0x0A, 0x44, 0x4F, 0x43, 0x4B, 0x45, 0x44,
                 0x20, 0x30, 0x0A, 0x53, 0x48, 0x4F, 0x57, 0x4E, 0x20, 0x30, 0x0A,
                 0x0A, 0x4D, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x53, 0x0A, 0x45,
                 0x4E, 0x44, 0x0A, 0x0A, 0x43, 0x48, 0x41, 0x4E, 0x4E, 0x45, 0x4C,
                 0x53, 0x0A, 0x45, 0x4E, 0x44, 0x0A, 0x0A, 0x5A, 0x4F, 0x4E, 0x45,
                 0x43, 0x48, 0x41, 0x4E, 0x4E, 0x45, 0x4C, 0x53, 0x20, 0x30, 0x0A,
                 0x0A, 0x45, 0x4E, 0x44, 0x0A, 0x0A, 0x57, 0x49, 0x4E, 0x44, 0x4F,
                 0x57, 0x20, 0x39, 0x0A, 0x53, 0x49, 0x5A, 0x45, 0x20, 0x30, 0x0A,
                 0x43, 0x4F, 0x4C, 0x4F, 0x52, 0x20, 0x30, 0x20, 0x30, 0x20, 0x30,
                 0x20, 0x30, 0x0A, 0x4C, 0x4F, 0x43, 0x4B, 0x45, 0x44, 0x20, 0x31,
                 0x0A, 0x44, 0x4F, 0x43, 0x4B, 0x45, 0x44, 0x20, 0x30, 0x0A, 0x53,
                 0x48, 0x4F, 0x57, 0x4E, 0x20, 0x30, 0x0A, 0x0A, 0x4D, 0x45, 0x53,
                 0x53, 0x41, 0x47, 0x45, 0x53, 0x0A, 0x45, 0x4E, 0x44, 0x0A, 0x0A,
                 0x43, 0x48, 0x41, 0x4E, 0x4E, 0x45, 0x4C, 0x53, 0x0A, 0x45, 0x4E,
                 0x44, 0x0A, 0x0A, 0x5A, 0x4F, 0x4E, 0x45, 0x43, 0x48, 0x41, 0x4E,
                 0x4E, 0x45, 0x4C, 0x53, 0x20, 0x30, 0x0A, 0x0A, 0x45, 0x4E, 0x44,
                 0x0A, 0x0A, 0x57, 0x49, 0x4E, 0x44, 0x4F, 0x57, 0x20, 0x31, 0x30,
                 0x0A, 0x53, 0x49, 0x5A, 0x45, 0x20, 0x30, 0x0A, 0x43, 0x4F, 0x4C,
                 0x4F, 0x52, 0x20, 0x30, 0x20, 0x30, 0x20, 0x30, 0x20, 0x30, 0x0A,
                 0x4C, 0x4F, 0x43, 0x4B, 0x45, 0x44, 0x20, 0x31, 0x0A, 0x44, 0x4F,
                 0x43, 0x4B, 0x45, 0x44, 0x20, 0x30, 0x0A, 0x53, 0x48, 0x4F, 0x57,
                 0x4E, 0x20, 0x30, 0x0A, 0x0A, 0x4D, 0x45, 0x53, 0x53, 0x41, 0x47,
                 0x45, 0x53, 0x0A, 0x45, 0x4E, 0x44, 0x0A, 0x0A, 0x43, 0x48, 0x41,
                 0x4E, 0x4E, 0x45, 0x4C, 0x53, 0x0A, 0x45, 0x4E, 0x44, 0x0A, 0x0A,
                 0x5A, 0x4F, 0x4E, 0x45, 0x43, 0x48, 0x41, 0x4E, 0x4E, 0x45, 0x4C,
                 0x53, 0x20, 0x30, 0x0A, 0x0A, 0x45, 0x4E, 0x44, 0x0A, 0x0A, ],
        }

    }

    // Generated from `wow_message_parser/wowm/world/login_logout/cmsg_update_account_data.wowm` line 52.
    #[cfg(feature = "sync")]
    #[cfg_attr(feature = "sync", test)]
    fn cmsg_update_account_data1() {
        let expected = expected1();
        let t = ClientOpcodeMessage::read_unencrypted(&mut std::io::Cursor::new(&RAW1)).unwrap();
        let t = match t {
            ClientOpcodeMessage::CMSG_UPDATE_ACCOUNT_DATA(t) => t,
            opcode => panic!("incorrect opcode. Expected CMSG_UPDATE_ACCOUNT_DATA, got {opcode:#?}"),
        };

        assert_eq!(t.as_ref(), &expected);
        let mut dest = Vec::with_capacity(RAW1.len());
        expected.write_unencrypted_client(&mut std::io::Cursor::new(&mut dest)).unwrap();

        let s = ClientOpcodeMessage::read_unencrypted(&mut std::io::Cursor::new(&dest)).unwrap();
        let s = match s {
            ClientOpcodeMessage::CMSG_UPDATE_ACCOUNT_DATA(s) => s,
            opcode => panic!("incorrect opcode. Expected CMSG_UPDATE_ACCOUNT_DATA, got {opcode:#?}", opcode = opcode),
        };

        assert_eq!(t, s);
    }

    // Generated from `wow_message_parser/wowm/world/login_logout/cmsg_update_account_data.wowm` line 52.
    #[cfg(feature = "tokio")]
    #[cfg_attr(feature = "tokio", tokio::test)]
    async fn tokio_cmsg_update_account_data1() {
        let expected = expected1();
        let t = ClientOpcodeMessage::tokio_read_unencrypted(&mut std::io::Cursor::new(&RAW1)).await.unwrap();
        let t = match t {
            ClientOpcodeMessage::CMSG_UPDATE_ACCOUNT_DATA(t) => t,
            opcode => panic!("incorrect opcode. Expected CMSG_UPDATE_ACCOUNT_DATA, got {opcode:#?}"),
        };

        assert_eq!(t.as_ref(), &expected);
        let mut dest = Vec::with_capacity(RAW1.len());
        expected.tokio_write_unencrypted_client(&mut std::io::Cursor::new(&mut dest)).await.unwrap();

        let s = ClientOpcodeMessage::tokio_read_unencrypted(&mut std::io::Cursor::new(&dest)).await.unwrap();
        let s = match s {
            ClientOpcodeMessage::CMSG_UPDATE_ACCOUNT_DATA(s) => s,
            opcode => panic!("incorrect opcode. Expected CMSG_UPDATE_ACCOUNT_DATA, got {opcode:#?}", opcode = opcode),
        };

        assert_eq!(t, s);
    }

    // Generated from `wow_message_parser/wowm/world/login_logout/cmsg_update_account_data.wowm` line 52.
    #[cfg(feature = "async-std")]
    #[cfg_attr(feature = "async-std", async_std::test)]
    async fn astd_cmsg_update_account_data1() {
        let expected = expected1();
        let t = ClientOpcodeMessage::astd_read_unencrypted(&mut async_std::io::Cursor::new(&RAW1)).await.unwrap();
        let t = match t {
            ClientOpcodeMessage::CMSG_UPDATE_ACCOUNT_DATA(t) => t,
            opcode => panic!("incorrect opcode. Expected CMSG_UPDATE_ACCOUNT_DATA, got {opcode:#?}"),
        };

        assert_eq!(t.as_ref(), &expected);
        let mut dest = Vec::with_capacity(RAW1.len());
        expected.astd_write_unencrypted_client(&mut async_std::io::Cursor::new(&mut dest)).await.unwrap();

        let s = ClientOpcodeMessage::astd_read_unencrypted(&mut async_std::io::Cursor::new(&dest)).await.unwrap();
        let s = match s {
            ClientOpcodeMessage::CMSG_UPDATE_ACCOUNT_DATA(s) => s,
            opcode => panic!("incorrect opcode. Expected CMSG_UPDATE_ACCOUNT_DATA, got {opcode:#?}", opcode = opcode),
        };

        assert_eq!(t, s);
    }

}

#[cfg(all(feature = "tbc", test))]
mod test_tbc {
    #![allow(clippy::missing_const_for_fn)]
    use super::CMSG_UPDATE_ACCOUNT_DATA;
    use super::*;
    use super::super::*;
    use crate::tbc::opcodes::ClientOpcodeMessage;
    use crate::tbc::{ClientMessage, ServerMessage};

    const HEADER_SIZE: usize = 2 + 4;
    const RAW0: [u8; 14] = [ 0x00, 0x0C, 0x0B, 0x02, 0x00, 0x00, 0x06, 0x00, 0x00,
         0x00, 0x00, 0x00, 0x00, 0x00, ];

    pub(crate) fn expected0() -> CMSG_UPDATE_ACCOUNT_DATA {
        CMSG_UPDATE_ACCOUNT_DATA {
            data_type: AccountDataType::PerCharacterLayoutCache,
            compressed_data: vec![ ],
        }

    }

    // Generated from `wow_message_parser/wowm/world/login_logout/cmsg_update_account_data.wowm` line 40.
    #[cfg(feature = "sync")]
    #[cfg_attr(feature = "sync", test)]
    fn cmsg_update_account_data0() {
        let expected = expected0();
        let t = ClientOpcodeMessage::read_unencrypted(&mut std::io::Cursor::new(&RAW0)).unwrap();
        let t = match t {
            ClientOpcodeMessage::CMSG_UPDATE_ACCOUNT_DATA(t) => t,
            opcode => panic!("incorrect opcode. Expected CMSG_UPDATE_ACCOUNT_DATA, got {opcode:#?}"),
        };

        assert_eq!(t.as_ref(), &expected);
        let mut dest = Vec::with_capacity(RAW0.len());
        expected.write_unencrypted_client(&mut std::io::Cursor::new(&mut dest)).unwrap();

        let s = ClientOpcodeMessage::read_unencrypted(&mut std::io::Cursor::new(&dest)).unwrap();
        let s = match s {
            ClientOpcodeMessage::CMSG_UPDATE_ACCOUNT_DATA(s) => s,
            opcode => panic!("incorrect opcode. Expected CMSG_UPDATE_ACCOUNT_DATA, got {opcode:#?}", opcode = opcode),
        };

        assert_eq!(t, s);
    }

    // Generated from `wow_message_parser/wowm/world/login_logout/cmsg_update_account_data.wowm` line 40.
    #[cfg(feature = "tokio")]
    #[cfg_attr(feature = "tokio", tokio::test)]
    async fn tokio_cmsg_update_account_data0() {
        let expected = expected0();
        let t = ClientOpcodeMessage::tokio_read_unencrypted(&mut std::io::Cursor::new(&RAW0)).await.unwrap();
        let t = match t {
            ClientOpcodeMessage::CMSG_UPDATE_ACCOUNT_DATA(t) => t,
            opcode => panic!("incorrect opcode. Expected CMSG_UPDATE_ACCOUNT_DATA, got {opcode:#?}"),
        };

        assert_eq!(t.as_ref(), &expected);
        let mut dest = Vec::with_capacity(RAW0.len());
        expected.tokio_write_unencrypted_client(&mut std::io::Cursor::new(&mut dest)).await.unwrap();

        let s = ClientOpcodeMessage::tokio_read_unencrypted(&mut std::io::Cursor::new(&dest)).await.unwrap();
        let s = match s {
            ClientOpcodeMessage::CMSG_UPDATE_ACCOUNT_DATA(s) => s,
            opcode => panic!("incorrect opcode. Expected CMSG_UPDATE_ACCOUNT_DATA, got {opcode:#?}", opcode = opcode),
        };

        assert_eq!(t, s);
    }

    // Generated from `wow_message_parser/wowm/world/login_logout/cmsg_update_account_data.wowm` line 40.
    #[cfg(feature = "async-std")]
    #[cfg_attr(feature = "async-std", async_std::test)]
    async fn astd_cmsg_update_account_data0() {
        let expected = expected0();
        let t = ClientOpcodeMessage::astd_read_unencrypted(&mut async_std::io::Cursor::new(&RAW0)).await.unwrap();
        let t = match t {
            ClientOpcodeMessage::CMSG_UPDATE_ACCOUNT_DATA(t) => t,
            opcode => panic!("incorrect opcode. Expected CMSG_UPDATE_ACCOUNT_DATA, got {opcode:#?}"),
        };

        assert_eq!(t.as_ref(), &expected);
        let mut dest = Vec::with_capacity(RAW0.len());
        expected.astd_write_unencrypted_client(&mut async_std::io::Cursor::new(&mut dest)).await.unwrap();

        let s = ClientOpcodeMessage::astd_read_unencrypted(&mut async_std::io::Cursor::new(&dest)).await.unwrap();
        let s = match s {
            ClientOpcodeMessage::CMSG_UPDATE_ACCOUNT_DATA(s) => s,
            opcode => panic!("incorrect opcode. Expected CMSG_UPDATE_ACCOUNT_DATA, got {opcode:#?}", opcode = opcode),
        };

        assert_eq!(t, s);
    }

    const RAW1: [u8; 1186] = [ 0x04, 0xA0, 0x0B, 0x02, 0x00, 0x00, 0x07, 0x00, 0x00,
         0x00, 0x18, 0x14, 0x00, 0x00, 0x78, 0x01, 0xBD, 0x57, 0xDB, 0x96, 0xAB,
         0x28, 0x10, 0x7D, 0xE7, 0x2B, 0xFC, 0x04, 0xB5, 0x93, 0xB6, 0xF3, 0x48,
         0x14, 0x23, 0xD3, 0x44, 0xB2, 0x04, 0x3B, 0x27, 0xE7, 0x85, 0xFF, 0xFF,
         0x8B, 0x29, 0xAE, 0x82, 0x4A, 0x27, 0x0F, 0x33, 0x59, 0xDD, 0xAE, 0x68,
         0x5D, 0x36, 0x50, 0x54, 0x15, 0x9B, 0x1F, 0x32, 0x09, 0xCA, 0xC7, 0xA2,
         0x46, 0x08, 0x77, 0x1D, 0xE9, 0x7E, 0x96, 0x6F, 0x7E, 0x93, 0xA0, 0x51,
         0x97, 0x99, 0xB2, 0x4E, 0x4D, 0xA4, 0x9D, 0x66, 0x2A, 0xAF, 0x64, 0x94,
         0xAA, 0x1D, 0xF0, 0x38, 0x12, 0x56, 0xE0, 0x59, 0x72, 0x84, 0xDC, 0x97,
         0x40, 0x64, 0xEC, 0x10, 0xFA, 0xCB, 0x47, 0xE2, 0x25, 0x45, 0x5D, 0x9E,
         0x9A, 0xEA, 0x78, 0x04, 0x1B, 0xCE, 0xF8, 0x24, 0x90, 0xC0, 0x8F, 0xA2,
         0x3E, 0x1E, 0xFD, 0x83, 0x6E, 0x78, 0x92, 0x8F, 0xA2, 0x6A, 0x4A, 0xF3,
         0x80, 0x06, 0x4D, 0x98, 0x76, 0x46, 0x5D, 0xD5, 0x4D, 0x51, 0x22, 0x33,
         0x76, 0xF1, 0x79, 0x30, 0xA2, 0xCF, 0x03, 0xE2, 0x7D, 0x4F, 0x5B, 0x32,
         0x69, 0x49, 0x75, 0xAA, 0xE1, 0x07, 0x3D, 0x08, 0x63, 0x4E, 0xAB, 0x3F,
         0xEF, 0x03, 0x15, 0x37, 0x30, 0xD0, 0xA3, 0x54, 0xF5, 0x97, 0xFE, 0xF5,
         0x32, 0x45, 0xC7, 0x9E, 0x4F, 0xD7, 0x44, 0x45, 0xAE, 0x5C, 0x92, 0x20,
         0x01, 0x7F, 0x49, 0xFE, 0x48, 0xB5, 0x91, 0x8A, 0x87, 0x90, 0xC4, 0x7A,
         0x6A, 0xE0, 0x12, 0x5D, 0xF9, 0x08, 0x92, 0x49, 0xC5, 0x0B, 0xAA, 0x8E,
         0xA7, 0x20, 0x5F, 0xCD, 0xCA, 0x9B, 0x6F, 0x80, 0x7D, 0x24, 0xCD, 0x74,
         0x61, 0x41, 0xB0, 0x28, 0x1F, 0x4F, 0xF5, 0x0F, 0xA7, 0xA3, 0x59, 0xA5,
         0x5E, 0x07, 0x3C, 0x41, 0xC1, 0x08, 0xFE, 0x21, 0xFB, 0x1A, 0x2A, 0xE4,
         0xAE, 0x62, 0xE4, 0x12, 0xE2, 0x66, 0x55, 0xAB, 0x61, 0xAC, 0x4A, 0xCD,
         0x02, 0xA2, 0xA6, 0x63, 0xEA, 0x1E, 0x84, 0xFB, 0xEF, 0x10, 0x18, 0x1D,
         0xC5, 0x6E, 0xF4, 0x1B, 0x63, 0xA3, 0x4A, 0x2F, 0x23, 0x9F, 0x88, 0x95,
         0x95, 0x10, 0x12, 0xF1, 0x4D, 0x61, 0x27, 0xBE, 0x8E, 0xFA, 0x5F, 0xDB,
         0x33, 0xCE, 0x65, 0x61, 0x37, 0xB6, 0x84, 0xFD, 0xBF, 0x9E, 0xB1, 0x54,
         0x57, 0x2A, 0x5A, 0xB3, 0x0D, 0x66, 0x6F, 0xFC, 0xFE, 0xF8, 0xE8, 0xF8,
         0xBD, 0xAB, 0x9A, 0x13, 0xE4, 0x83, 0x79, 0xBC, 0xA3, 0x20, 0xAC, 0x57,
         0x03, 0x95, 0xC2, 0x4C, 0x49, 0x47, 0x4B, 0x0F, 0xE1, 0x50, 0x8D, 0x12,
         0xA0, 0x05, 0xD9, 0x55, 0xDF, 0x88, 0xCC, 0xBA, 0x6A, 0xDD, 0x2F, 0x9E,
         0x3A, 0x3D, 0xF3, 0xBE, 0x46, 0x9B, 0xF7, 0xEE, 0x27, 0x0A, 0x15, 0xC1,
         0x1E, 0x37, 0x86, 0x1F, 0x90, 0x2A, 0xB9, 0xD9, 0xAF, 0xCC, 0xF2, 0x78,
         0x03, 0x17, 0x92, 0x32, 0xF2, 0x04, 0x2E, 0xB5, 0xCA, 0xA3, 0xB5, 0x13,
         0xC1, 0x72, 0x9E, 0x88, 0xFA, 0x11, 0x2A, 0x8D, 0xEE, 0xA1, 0x29, 0x0E,
         0x8D, 0x8F, 0xED, 0xC6, 0x2C, 0x42, 0xCC, 0x1A, 0x9A, 0xB2, 0xCE, 0x2E,
         0x38, 0x86, 0xB4, 0x96, 0x11, 0xE6, 0x6A, 0x6B, 0x63, 0xDB, 0xF0, 0x9E,
         0x8B, 0x64, 0x30, 0x80, 0x25, 0x85, 0xF7, 0x3C, 0xB6, 0x0F, 0xBC, 0xEA,
         0x20, 0x12, 0xC3, 0x5E, 0x62, 0xB9, 0x58, 0xE6, 0x0D, 0xFE, 0xDC, 0xD4,
         0x05, 0xEB, 0x2A, 0xAD, 0x2A, 0xF3, 0xE8, 0xA4, 0x84, 0xF6, 0xC3, 0x98,
         0x0D, 0x69, 0x87, 0xAF, 0xF8, 0x62, 0xDB, 0x8B, 0x5E, 0x17, 0xD4, 0xC8,
         0xA2, 0x3B, 0xCF, 0x7D, 0x1F, 0xC6, 0xF4, 0x1A, 0x9D, 0x8E, 0x2B, 0xA7,
         0x05, 0x52, 0x2B, 0x13, 0xAF, 0x48, 0x65, 0x52, 0x31, 0xEF, 0x69, 0xD4,
         0x19, 0x5F, 0x1F, 0x06, 0x97, 0x57, 0x59, 0x90, 0x95, 0x5D, 0x06, 0x2D,
         0x4D, 0xBF, 0x2C, 0x58, 0x6A, 0x96, 0xC1, 0x0A, 0x7B, 0xE8, 0x53, 0xD4,
         0xC3, 0x95, 0x75, 0xD1, 0x7C, 0x16, 0x75, 0xD5, 0xB8, 0x80, 0x6E, 0x0C,
         0x5F, 0x00, 0xB4, 0x99, 0xE7, 0x11, 0x6D, 0x43, 0x31, 0x4D, 0xC5, 0xEE,
         0x51, 0x0C, 0x69, 0x4D, 0x5F, 0xC0, 0x0C, 0x4E, 0x2F, 0xC1, 0x06, 0xEB,
         0x0C, 0xB2, 0x9C, 0x70, 0x47, 0x4C, 0x57, 0x4D, 0xDB, 0x9A, 0x9D, 0xA0,
         0x1D, 0x42, 0x0C, 0x94, 0xB0, 0x4E, 0x28, 0x38, 0xA6, 0x75, 0x11, 0x87,
         0x84, 0x5A, 0x52, 0x63, 0x63, 0xC7, 0xE5, 0x00, 0x47, 0xFC, 0x8E, 0x25,
         0x9E, 0x27, 0xAC, 0x2E, 0x70, 0x7C, 0xE7, 0xA0, 0x16, 0x03, 0x13, 0x91,
         0x5F, 0x21, 0xCC, 0x28, 0x3B, 0x16, 0x14, 0xCE, 0x51, 0x45, 0x46, 0x7D,
         0xEE, 0x19, 0x2E, 0xB1, 0x37, 0x91, 0x33, 0xB4, 0xA6, 0x6F, 0xA5, 0x47,
         0xDB, 0x01, 0x80, 0xC3, 0x9D, 0xF2, 0x8E, 0xB6, 0xBB, 0x15, 0xB6, 0x2C,
         0x3B, 0x35, 0xD3, 0x11, 0xDE, 0x1B, 0x29, 0x58, 0x3D, 0xC9, 0x86, 0x95,
         0xDD, 0x53, 0xB8, 0x55, 0xAD, 0x64, 0xD3, 0x21, 0xE0, 0xAE, 0x1C, 0x9E,
         0x0E, 0x90, 0xD6, 0xCF, 0x73, 0xFC, 0xD4, 0xFE, 0x29, 0x7C, 0x48, 0xCD,
         0xE7, 0xC8, 0xC1, 0x34, 0x07, 0xDA, 0x63, 0x38, 0xB4, 0x3A, 0xC5, 0x78,
         0x8B, 0x99, 0xED, 0x31, 0xC9, 0xAE, 0xBA, 0x33, 0x7C, 0xE0, 0xC0, 0x26,
         0x6C, 0x33, 0xAD, 0x6B, 0xA0, 0x7B, 0x50, 0xE2, 0x55, 0x89, 0xCE, 0x17,
         0x65, 0xA9, 0x97, 0x1A, 0xC9, 0x0C, 0xF5, 0x60, 0x99, 0x5E, 0x55, 0x03,
         0xAD, 0x88, 0x95, 0x98, 0x31, 0x8A, 0x47, 0xE0, 0x37, 0x9A, 0x6E, 0x80,
         0xF3, 0xC7, 0x29, 0xF2, 0x1C, 0xF8, 0xD4, 0xD9, 0x1E, 0xAC, 0x59, 0x8A,
         0x1B, 0xAE, 0xC7, 0xAD, 0xE1, 0xB6, 0x3A, 0x0F, 0xA1, 0x43, 0x3B, 0x86,
         0xA5, 0x27, 0xA6, 0x29, 0x1C, 0x59, 0x58, 0x6A, 0x69, 0x18, 0xA9, 0x02,
         0xCA, 0xD5, 0x39, 0x56, 0x59, 0x57, 0xC0, 0x4C, 0xBE, 0x3E, 0xAC, 0xFC,
         0x8E, 0xA7, 0x91, 0x8E, 0x17, 0xBB, 0x22, 0xA7, 0x00, 0x92, 0x49, 0x80,
         0x1C, 0x29, 0xE9, 0x99, 0xA9, 0xE7, 0x39, 0x9A, 0xDB, 0xAA, 0x33, 0x17,
         0x22, 0x22, 0x98, 0x1E, 0xAD, 0xA7, 0x0C, 0xF8, 0x64, 0x44, 0xA7, 0x80,
         0x2E, 0x49, 0x46, 0x2E, 0x13, 0x9F, 0x03, 0xEF, 0xD2, 0x84, 0x38, 0x16,
         0xEF, 0xCD, 0xCA, 0x11, 0xCA, 0xCA, 0xCC, 0xC8, 0x53, 0x39, 0x27, 0xAC,
         0xF7, 0x84, 0x1F, 0x7B, 0x42, 0xCB, 0xB7, 0x57, 0xEE, 0x96, 0xB6, 0xAF,
         0x84, 0xD0, 0x86, 0xA1, 0x77, 0xAE, 0x84, 0xCD, 0x9E, 0xD0, 0xB0, 0xC6,
         0xB5, 0xE5, 0x69, 0xCF, 0xB2, 0x2A, 0x13, 0xA9, 0xB9, 0x56, 0xDC, 0xE9,
         0xD8, 0xF1, 0x7B, 0x51, 0x21, 0x41, 0xFF, 0xC2, 0x3E, 0xC3, 0x3E, 0xC2,
         0x85, 0x02, 0xF6, 0xDB, 0xFC, 0x01, 0xD7, 0x6C, 0xBF, 0x21, 0x76, 0x15,
         0xEA, 0xFC, 0x8B, 0x18, 0xF8, 0x1D, 0xCE, 0x65, 0x84, 0xAE, 0x44, 0x08,
         0x38, 0x84, 0xE1, 0xEE, 0x61, 0x38, 0xBC, 0xBE, 0x82, 0x98, 0x3B, 0x83,
         0xBF, 0x15, 0xD8, 0x3B, 0x88, 0xBD, 0x68, 0x20, 0x9F, 0xCC, 0x9E, 0x6A,
         0x5B, 0x52, 0x6B, 0xA8, 0xAC, 0xBD, 0xDD, 0xB8, 0x48, 0xFE, 0x7A, 0xD7,
         0x89, 0xE7, 0x5B, 0xBF, 0x36, 0x5F, 0x30, 0x33, 0xF3, 0x2D, 0xA3, 0xF9,
         0xAE, 0x29, 0xB3, 0x4F, 0xDD, 0x40, 0xD6, 0x12, 0x81, 0xA5, 0x39, 0x5E,
         0xE4, 0x29, 0x6F, 0xFC, 0x9D, 0x5A, 0xA4, 0x0D, 0x41, 0x33, 0x2A, 0x6F,
         0x9B, 0x6A, 0x52, 0x2F, 0x1F, 0x9F, 0x84, 0x34, 0x7A, 0xC7, 0x8D, 0x32,
         0xF5, 0xF5, 0x2D, 0xCE, 0xB2, 0x29, 0xEF, 0xE4, 0x46, 0x4B, 0x85, 0x8E,
         0x56, 0xC5, 0x74, 0xC9, 0x36, 0xA2, 0x58, 0xA2, 0xFB, 0x8D, 0xFB, 0x5E,
         0x68, 0x53, 0x24, 0x88, 0xF4, 0xE9, 0x92, 0x12, 0xA8, 0x54, 0x15, 0xF9,
         0x6C, 0x56, 0x93, 0xB8, 0x6D, 0xB4, 0x91, 0x67, 0x74, 0x6E, 0xBB, 0xE9,
         0x58, 0xD7, 0xD5, 0x59, 0xED, 0x74, 0xCB, 0xA1, 0xAA, 0x37, 0xD6, 0x09,
         0x37, 0xA7, 0xA4, 0x93, 0x2F, 0x27, 0xA3, 0x13, 0x84, 0x03, 0xC4, 0x64,
         0x45, 0x32, 0xC5, 0x54, 0xA5, 0xE7, 0x07, 0x35, 0x60, 0xF8, 0x67, 0xD0,
         0xA4, 0x8B, 0xDF, 0xF7, 0x4E, 0x6D, 0x76, 0x61, 0x42, 0x30, 0xF6, 0x11,
         0x82, 0xDA, 0x3A, 0x6F, 0x1A, 0xBE, 0x4F, 0x85, 0xB4, 0x27, 0xDB, 0x3E,
         0xFC, 0xB4, 0xEA, 0xA0, 0x62, 0xE2, 0x7A, 0xFB, 0x78, 0xAD, 0xDE, 0x80,
         0x6F, 0x6F, 0xEA, 0xCD, 0xC0, 0xFC, 0x52, 0xDF, 0xAB, 0x91, 0x0E, 0x6F,
         0x1B, 0x09, 0xAE, 0x14, 0xAF, 0xF4, 0xBC, 0xFF, 0x60, 0x4D, 0x9F, 0x6F,
         0x1B, 0x09, 0x98, 0xFB, 0x9B, 0xD6, 0xF4, 0xF5, 0xB6, 0x91, 0x4E, 0x6F,
         0x1B, 0x09, 0xC8, 0xCF, 0xFF, 0x1E, 0xBE, 0x7F, 0x01, 0x34, 0x99, 0x02,
         0x24, ];

    pub(crate) fn expected1() -> CMSG_UPDATE_ACCOUNT_DATA {
        CMSG_UPDATE_ACCOUNT_DATA {
            data_type: AccountDataType::PerCharacterChatCache,
            compressed_data: vec![ 0x56, 0x45, 0x52, 0x53, 0x49, 0x4F, 0x4E, 0x20,
                 0x32, 0x0A, 0x0A, 0x41, 0x44, 0x44, 0x45, 0x44, 0x56, 0x45, 0x52,
                 0x53, 0x49, 0x4F, 0x4E, 0x20, 0x32, 0x0A, 0x0A, 0x4F, 0x50, 0x54,
                 0x49, 0x4F, 0x4E, 0x5F, 0x47, 0x55, 0x49, 0x4C, 0x44, 0x5F, 0x52,
                 0x45, 0x43, 0x52, 0x55, 0x49, 0x54, 0x4D, 0x45, 0x4E, 0x54, 0x5F,
                 0x43, 0x48, 0x41, 0x4E, 0x4E, 0x45, 0x4C, 0x20, 0x41, 0x55, 0x54,
                 0x4F, 0x0A, 0x0A, 0x43, 0x48, 0x41, 0x4E, 0x4E, 0x45, 0x4C, 0x53,
                 0x0A, 0x45, 0x4E, 0x44, 0x0A, 0x0A, 0x5A, 0x4F, 0x4E, 0x45, 0x43,
                 0x48, 0x41, 0x4E, 0x4E, 0x45, 0x4C, 0x53, 0x20, 0x32, 0x30, 0x39,
                 0x37, 0x31, 0x35, 0x35, 0x0A, 0x0A, 0x43, 0x4F, 0x4C, 0x4F, 0x52,
                 0x53, 0x0A, 0x53, 0x41, 0x59, 0x20, 0x32, 0x35, 0x35, 0x20, 0x32,
                 0x35, 0x35, 0x20, 0x32, 0x35, 0x35, 0x0A, 0x50, 0x41, 0x52, 0x54,
                 0x59, 0x20, 0x31, 0x37, 0x30, 0x20, 0x31, 0x37, 0x30, 0x20, 0x32,
                 0x35, 0x35, 0x0A, 0x52, 0x41, 0x49, 0x44, 0x20, 0x32, 0x35, 0x35,
                 0x20, 0x31, 0x32, 0x37, 0x20, 0x30, 0x0A, 0x47, 0x55, 0x49, 0x4C,
                 0x44, 0x20, 0x36, 0x34, 0x20, 0x32, 0x35, 0x35, 0x20, 0x36, 0x34,
                 0x0A, 0x4F, 0x46, 0x46, 0x49, 0x43, 0x45, 0x52, 0x20, 0x36, 0x34,
                 0x20, 0x31, 0x39, 0x32, 0x20, 0x36, 0x34, 0x0A, 0x59, 0x45, 0x4C,
                 0x4C, 0x20, 0x32, 0x35, 0x35, 0x20, 0x36, 0x34, 0x20, 0x36, 0x34,
                 0x0A, 0x57, 0x48, 0x49, 0x53, 0x50, 0x45, 0x52, 0x20, 0x32, 0x35,
                 0x35, 0x20, 0x31, 0x32, 0x38, 0x20, 0x32, 0x35, 0x35, 0x0A, 0x57,
                 0x48, 0x49, 0x53, 0x50, 0x45, 0x52, 0x5F, 0x49, 0x4E, 0x46, 0x4F,
                 0x52, 0x4D, 0x20, 0x32, 0x35, 0x35, 0x20, 0x31, 0x32, 0x38, 0x20,
                 0x32, 0x35, 0x35, 0x0A, 0x45, 0x4D, 0x4F, 0x54, 0x45, 0x20, 0x32,
                 0x35, 0x35, 0x20, 0x31, 0x32, 0x38, 0x20, 0x36, 0x34, 0x0A, 0x54,
                 0x45, 0x58, 0x54, 0x5F, 0x45, 0x4D, 0x4F, 0x54, 0x45, 0x20, 0x32,
                 0x35, 0x35, 0x20, 0x31, 0x32, 0x38, 0x20, 0x36, 0x34, 0x0A, 0x53,
                 0x59, 0x53, 0x54, 0x45, 0x4D, 0x20, 0x32, 0x35, 0x35, 0x20, 0x32,
                 0x35, 0x35, 0x20, 0x30, 0x0A, 0x4D, 0x4F, 0x4E, 0x53, 0x54, 0x45,
                 0x52, 0x5F, 0x53, 0x41, 0x59, 0x20, 0x32, 0x35, 0x35, 0x20, 0x32,
                 0x35, 0x35, 0x20, 0x31, 0x35, 0x39, 0x0A, 0x4D, 0x4F, 0x4E, 0x53,
                 0x54, 0x45, 0x52, 0x5F, 0x59, 0x45, 0x4C, 0x4C, 0x20, 0x32, 0x35,
                 0x35, 0x20, 0x36, 0x34, 0x20, 0x36, 0x34, 0x0A, 0x4D, 0x4F, 0x4E,
                 0x53, 0x54, 0x45, 0x52, 0x5F, 0x45, 0x4D, 0x4F, 0x54, 0x45, 0x20,
                 0x32, 0x35, 0x35, 0x20, 0x31, 0x32, 0x38, 0x20, 0x36, 0x34, 0x0A,
                 0x43, 0x48, 0x41, 0x4E, 0x4E, 0x45, 0x4C, 0x20, 0x32, 0x35, 0x35,
                 0x20, 0x31, 0x39, 0x32, 0x20, 0x31, 0x39, 0x32, 0x0A, 0x43, 0x48,
                 0x41, 0x4E, 0x4E, 0x45, 0x4C, 0x5F, 0x4A, 0x4F, 0x49, 0x4E, 0x20,
                 0x31, 0x39, 0x32, 0x20, 0x31, 0x32, 0x38, 0x20, 0x31, 0x32, 0x38,
                 0x0A, 0x43, 0x48, 0x41, 0x4E, 0x4E, 0x45, 0x4C, 0x5F, 0x4C, 0x45,
                 0x41, 0x56, 0x45, 0x20, 0x31, 0x39, 0x32, 0x20, 0x31, 0x32, 0x38,
                 0x20, 0x31, 0x32, 0x38, 0x0A, 0x43, 0x48, 0x41, 0x4E, 0x4E, 0x45,
                 0x4C, 0x5F, 0x4C, 0x49, 0x53, 0x54, 0x20, 0x31, 0x39, 0x32, 0x20,
                 0x31, 0x32, 0x38, 0x20, 0x31, 0x32, 0x38, 0x0A, 0x43, 0x48, 0x41,
                 0x4E, 0x4E, 0x45, 0x4C, 0x5F, 0x4E, 0x4F, 0x54, 0x49, 0x43, 0x45,
                 0x20, 0x31, 0x39, 0x32, 0x20, 0x31, 0x39, 0x32, 0x20, 0x31, 0x39,
                 0x32, 0x0A, 0x43, 0x48, 0x41, 0x4E, 0x4E, 0x45, 0x4C, 0x5F, 0x4E,
                 0x4F, 0x54, 0x49, 0x43, 0x45, 0x5F, 0x55, 0x53, 0x45, 0x52, 0x20,
                 0x31, 0x39, 0x32, 0x20, 0x31, 0x39, 0x32, 0x20, 0x31, 0x39, 0x32,
                 0x0A, 0x41, 0x46, 0x4B, 0x20, 0x32, 0x35, 0x35, 0x20, 0x31, 0x32,
                 0x38, 0x20, 0x32, 0x35, 0x35, 0x0A, 0x44, 0x4E, 0x44, 0x20, 0x32,
                 0x35, 0x35, 0x20, 0x31, 0x32, 0x38, 0x20, 0x32, 0x35, 0x35, 0x0A,
                 0x49, 0x47, 0x4E, 0x4F, 0x52, 0x45, 0x44, 0x20, 0x32, 0x35, 0x35,
                 0x20, 0x30, 0x20, 0x30, 0x0A, 0x53, 0x4B, 0x49, 0x4C, 0x4C, 0x20,
                 0x38, 0x35, 0x20, 0x38, 0x35, 0x20, 0x32, 0x35, 0x35, 0x0A, 0x4C,
                 0x4F, 0x4F, 0x54, 0x20, 0x30, 0x20, 0x31, 0x37, 0x30, 0x20, 0x30,
                 0x0A, 0x43, 0x4F, 0x4D, 0x42, 0x41, 0x54, 0x5F, 0x4D, 0x49, 0x53,
                 0x43, 0x5F, 0x49, 0x4E, 0x46, 0x4F, 0x20, 0x31, 0x32, 0x38, 0x20,
                 0x31, 0x32, 0x38, 0x20, 0x32, 0x35, 0x35, 0x0A, 0x4D, 0x4F, 0x4E,
                 0x53, 0x54, 0x45, 0x52, 0x5F, 0x57, 0x48, 0x49, 0x53, 0x50, 0x45,
                 0x52, 0x20, 0x31, 0x37, 0x39, 0x20, 0x31, 0x37, 0x39, 0x20, 0x31,
                 0x37, 0x39, 0x0A, 0x43, 0x4F, 0x4D, 0x42, 0x41, 0x54, 0x5F, 0x53,
                 0x45, 0x4C, 0x46, 0x5F, 0x48, 0x49, 0x54, 0x53, 0x20, 0x32, 0x35,
                 0x35, 0x20, 0x32, 0x35, 0x35, 0x20, 0x32, 0x35, 0x35, 0x0A, 0x43,
                 0x4F, 0x4D, 0x42, 0x41, 0x54, 0x5F, 0x53, 0x45, 0x4C, 0x46, 0x5F,
                 0x4D, 0x49, 0x53, 0x53, 0x45, 0x53, 0x20, 0x32, 0x35, 0x35, 0x20,
                 0x32, 0x35, 0x35, 0x20, 0x32, 0x35, 0x35, 0x0A, 0x43, 0x4F, 0x4D,
                 0x42, 0x41, 0x54, 0x5F, 0x50, 0x45, 0x54, 0x5F, 0x48, 0x49, 0x54,
                 0x53, 0x20, 0x32, 0x35, 0x35, 0x20, 0x32, 0x35, 0x35, 0x20, 0x32,
                 0x35, 0x35, 0x0A, 0x43, 0x4F, 0x4D, 0x42, 0x41, 0x54, 0x5F, 0x50,
                 0x45, 0x54, 0x5F, 0x4D, 0x49, 0x53, 0x53, 0x45, 0x53, 0x20, 0x32,
                 0x35, 0x35, 0x20, 0x32, 0x35, 0x35, 0x20, 0x32, 0x35, 0x35, 0x0A,
                 0x43, 0x4F, 0x4D, 0x42, 0x41, 0x54, 0x5F, 0x50, 0x41, 0x52, 0x54,
                 0x59, 0x5F, 0x48, 0x49, 0x54, 0x53, 0x20, 0x32, 0x35, 0x35, 0x20,
                 0x32, 0x35, 0x35, 0x20, 0x32, 0x35, 0x35, 0x0A, 0x43, 0x4F, 0x4D,
                 0x42, 0x41, 0x54, 0x5F, 0x50, 0x41, 0x52, 0x54, 0x59, 0x5F, 0x4D,
                 0x49, 0x53, 0x53, 0x45, 0x53, 0x20, 0x32, 0x35, 0x35, 0x20, 0x32,
                 0x35, 0x35, 0x20, 0x32, 0x35, 0x35, 0x0A, 0x43, 0x4F, 0x4D, 0x42,
                 0x41, 0x54, 0x5F, 0x46, 0x52, 0x49, 0x45, 0x4E, 0x44, 0x4C, 0x59,
                 0x50, 0x4C, 0x41, 0x59, 0x45, 0x52, 0x5F, 0x48, 0x49, 0x54, 0x53,
                 0x20, 0x32, 0x35, 0x35, 0x20, 0x32, 0x35, 0x35, 0x20, 0x32, 0x35,
                 0x35, 0x0A, 0x43, 0x4F, 0x4D, 0x42, 0x41, 0x54, 0x5F, 0x46, 0x52,
                 0x49, 0x45, 0x4E, 0x44, 0x4C, 0x59, 0x50, 0x4C, 0x41, 0x59, 0x45,
                 0x52, 0x5F, 0x4D, 0x49, 0x53, 0x53, 0x45, 0x53, 0x20, 0x32, 0x35,
                 0x35, 0x20, 0x32, 0x35, 0x35, 0x20, 0x32, 0x35, 0x35, 0x0A, 0x43,
                 0x4F, 0x4D, 0x42, 0x41, 0x54, 0x5F, 0x48, 0x4F, 0x53, 0x54, 0x49,
                 0x4C, 0x45, 0x50, 0x4C, 0x41, 0x59, 0x45, 0x52, 0x5F, 0x48, 0x49,
                 0x54, 0x53, 0x20, 0x32, 0x35, 0x35, 0x20, 0x32, 0x35, 0x35, 0x20,
                 0x32, 0x35, 0x35, 0x0A, 0x43, 0x4F, 0x4D, 0x42, 0x41, 0x54, 0x5F,
                 0x48, 0x4F, 0x53, 0x54, 0x49, 0x4C, 0x45, 0x50, 0x4C, 0x41, 0x59,
                 0x45, 0x52, 0x5F, 0x4D, 0x49, 0x53, 0x53, 0x45, 0x53, 0x20, 0x32,
                 0x35, 0x35, 0x20, 0x32, 0x35, 0x35, 0x20, 0x32, 0x35, 0x35, 0x0A,
                 0x43, 0x4F, 0x4D, 0x42, 0x41, 0x54, 0x5F, 0x43, 0x52, 0x45, 0x41,
                 0x54, 0x55, 0x52, 0x45, 0x5F, 0x56, 0x53, 0x5F, 0x53, 0x45, 0x4C,
                 0x46, 0x5F, 0x48, 0x49, 0x54, 0x53, 0x20, 0x32, 0x35, 0x35, 0x20,
                 0x34, 0x37, 0x20, 0x34, 0x37, 0x0A, 0x43, 0x4F, 0x4D, 0x42, 0x41,
                 0x54, 0x5F, 0x43, 0x52, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5F,
                 0x56, 0x53, 0x5F, 0x53, 0x45, 0x4C, 0x46, 0x5F, 0x4D, 0x49, 0x53,
                 0x53, 0x45, 0x53, 0x20, 0x32, 0x35, 0x35, 0x20, 0x34, 0x37, 0x20,
                 0x34, 0x37, 0x0A, 0x43, 0x4F, 0x4D, 0x42, 0x41, 0x54, 0x5F, 0x43,
                 0x52, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5F, 0x56, 0x53, 0x5F,
                 0x50, 0x41, 0x52, 0x54, 0x59, 0x5F, 0x48, 0x49, 0x54, 0x53, 0x20,
                 0x32, 0x35, 0x35, 0x20, 0x32, 0x35, 0x35, 0x20, 0x32, 0x35, 0x35,
                 0x0A, 0x43, 0x4F, 0x4D, 0x42, 0x41, 0x54, 0x5F, 0x43, 0x52, 0x45,
                 0x41, 0x54, 0x55, 0x52, 0x45, 0x5F, 0x56, 0x53, 0x5F, 0x50, 0x41,
                 0x52, 0x54, 0x59, 0x5F, 0x4D, 0x49, 0x53, 0x53, 0x45, 0x53, 0x20,
                 0x32, 0x35, 0x35, 0x20, 0x32, 0x35, 0x35, 0x20, 0x32, 0x35, 0x35,
                 0x0A, 0x43, 0x4F, 0x4D, 0x42, 0x41, 0x54, 0x5F, 0x43, 0x52, 0x45,
                 0x41, 0x54, 0x55, 0x52, 0x45, 0x5F, 0x56, 0x53, 0x5F, 0x43, 0x52,
                 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5F, 0x48, 0x49, 0x54, 0x53,
                 0x20, 0x32, 0x35, 0x35, 0x20, 0x32, 0x35, 0x35, 0x20, 0x32, 0x35,
                 0x35, 0x0A, 0x43, 0x4F, 0x4D, 0x42, 0x41, 0x54, 0x5F, 0x43, 0x52,
                 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5F, 0x56, 0x53, 0x5F, 0x43,
                 0x52, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5F, 0x4D, 0x49, 0x53,
                 0x53, 0x45, 0x53, 0x20, 0x32, 0x35, 0x35, 0x20, 0x32, 0x35, 0x35,
                 0x20, 0x32, 0x35, 0x35, 0x0A, 0x43, 0x4F, 0x4D, 0x42, 0x41, 0x54,
                 0x5F, 0x46, 0x52, 0x49, 0x45, 0x4E, 0x44, 0x4C, 0x59, 0x5F, 0x44,
                 0x45, 0x41, 0x54, 0x48, 0x20, 0x32, 0x35, 0x35, 0x20, 0x32, 0x35,
                 0x35, 0x20, 0x32, 0x35, 0x35, 0x0A, 0x43, 0x4F, 0x4D, 0x42, 0x41,
                 0x54, 0x5F, 0x48, 0x4F, 0x53, 0x54, 0x49, 0x4C, 0x45, 0x5F, 0x44,
                 0x45, 0x41, 0x54, 0x48, 0x20, 0x32, 0x35, 0x35, 0x20, 0x32, 0x35,
                 0x35, 0x20, 0x32, 0x35, 0x35, 0x0A, 0x43, 0x4F, 0x4D, 0x42, 0x41,
                 0x54, 0x5F, 0x58, 0x50, 0x5F, 0x47, 0x41, 0x49, 0x4E, 0x20, 0x31,
                 0x31, 0x31, 0x20, 0x31, 0x31, 0x31, 0x20, 0x32, 0x35, 0x35, 0x0A,
                 0x53, 0x50, 0x45, 0x4C, 0x4C, 0x5F, 0x53, 0x45, 0x4C, 0x46, 0x5F,
                 0x44, 0x41, 0x4D, 0x41, 0x47, 0x45, 0x20, 0x32, 0x35, 0x35, 0x20,
                 0x32, 0x35, 0x35, 0x20, 0x30, 0x0A, 0x53, 0x50, 0x45, 0x4C, 0x4C,
                 0x5F, 0x53, 0x45, 0x4C, 0x46, 0x5F, 0x42, 0x55, 0x46, 0x46, 0x20,
                 0x32, 0x35, 0x35, 0x20, 0x32, 0x35, 0x35, 0x20, 0x30, 0x0A, 0x53,
                 0x50, 0x45, 0x4C, 0x4C, 0x5F, 0x50, 0x45, 0x54, 0x5F, 0x44, 0x41,
                 0x4D, 0x41, 0x47, 0x45, 0x20, 0x32, 0x35, 0x35, 0x20, 0x32, 0x35,
                 0x35, 0x20, 0x32, 0x35, 0x35, 0x0A, 0x53, 0x50, 0x45, 0x4C, 0x4C,
                 0x5F, 0x50, 0x45, 0x54, 0x5F, 0x42, 0x55, 0x46, 0x46, 0x20, 0x32,
                 0x35, 0x35, 0x20, 0x32, 0x35, 0x35, 0x20, 0x32, 0x35, 0x35, 0x0A,
                 0x53, 0x50, 0x45, 0x4C, 0x4C, 0x5F, 0x50, 0x41, 0x52, 0x54, 0x59,
                 0x5F, 0x44, 0x41, 0x4D, 0x41, 0x47, 0x45, 0x20, 0x32, 0x35, 0x35,
                 0x20, 0x32, 0x35, 0x35, 0x20, 0x32, 0x35, 0x35, 0x0A, 0x53, 0x50,
                 0x45, 0x4C, 0x4C, 0x5F, 0x50, 0x41, 0x52, 0x54, 0x59, 0x5F, 0x42,
                 0x55, 0x46, 0x46, 0x20, 0x32, 0x35, 0x35, 0x20, 0x32, 0x35, 0x35,
                 0x20, 0x32, 0x35, 0x35, 0x0A, 0x53, 0x50, 0x45, 0x4C, 0x4C, 0x5F,
                 0x46, 0x52, 0x49, 0x45, 0x4E, 0x44, 0x4C, 0x59, 0x50, 0x4C, 0x41,
                 0x59, 0x45, 0x52, 0x5F, 0x44, 0x41, 0x4D, 0x41, 0x47, 0x45, 0x20,
                 0x32, 0x35, 0x35, 0x20, 0x32, 0x35, 0x35, 0x20, 0x32, 0x35, 0x35,
                 0x0A, 0x53, 0x50, 0x45, 0x4C, 0x4C, 0x5F, 0x46, 0x52, 0x49, 0x45,
                 0x4E, 0x44, 0x4C, 0x59, 0x50, 0x4C, 0x41, 0x59, 0x45, 0x52, 0x5F,
                 0x42, 0x55, 0x46, 0x46, 0x20, 0x32, 0x35, 0x35, 0x20, 0x32, 0x35,
                 0x35, 0x20, 0x32, 0x35, 0x35, 0x0A, 0x53, 0x50, 0x45, 0x4C, 0x4C,
                 0x5F, 0x48, 0x4F, 0x53, 0x54, 0x49, 0x4C, 0x45, 0x50, 0x4C, 0x41,
                 0x59, 0x45, 0x52, 0x5F, 0x44, 0x41, 0x4D, 0x41, 0x47, 0x45, 0x20,
                 0x32, 0x35, 0x35, 0x20, 0x32, 0x35, 0x35, 0x20, 0x32, 0x35, 0x35,
                 0x0A, 0x53, 0x50, 0x45, 0x4C, 0x4C, 0x5F, 0x48, 0x4F, 0x53, 0x54,
                 0x49, 0x4C, 0x45, 0x50, 0x4C, 0x41, 0x59, 0x45, 0x52, 0x5F, 0x42,
                 0x55, 0x46, 0x46, 0x20, 0x32, 0x35, 0x35, 0x20, 0x32, 0x35, 0x35,
                 0x20, 0x32, 0x35, 0x35, 0x0A, 0x53, 0x50, 0x45, 0x4C, 0x4C, 0x5F,
                 0x43, 0x52, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5F, 0x56, 0x53,
                 0x5F, 0x53, 0x45, 0x4C, 0x46, 0x5F, 0x44, 0x41, 0x4D, 0x41, 0x47,
                 0x45, 0x20, 0x32, 0x30, 0x32, 0x20, 0x37, 0x36, 0x20, 0x32, 0x31,
                 0x37, 0x0A, 0x53, 0x50, 0x45, 0x4C, 0x4C, 0x5F, 0x43, 0x52, 0x45,
                 0x41, 0x54, 0x55, 0x52, 0x45, 0x5F, 0x56, 0x53, 0x5F, 0x53, 0x45,
                 0x4C, 0x46, 0x5F, 0x42, 0x55, 0x46, 0x46, 0x20, 0x32, 0x35, 0x35,
                 0x20, 0x32, 0x35, 0x35, 0x20, 0x32, 0x35, 0x35, 0x0A, 0x53, 0x50,
                 0x45, 0x4C, 0x4C, 0x5F, 0x43, 0x52, 0x45, 0x41, 0x54, 0x55, 0x52,
                 0x45, 0x5F, 0x56, 0x53, 0x5F, 0x50, 0x41, 0x52, 0x54, 0x59, 0x5F,
                 0x44, 0x41, 0x4D, 0x41, 0x47, 0x45, 0x20, 0x32, 0x35, 0x35, 0x20,
                 0x32, 0x35, 0x35, 0x20, 0x32, 0x35, 0x35, 0x0A, 0x53, 0x50, 0x45,
                 0x4C, 0x4C, 0x5F, 0x43, 0x52, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45,
                 0x5F, 0x56, 0x53, 0x5F, 0x50, 0x41, 0x52, 0x54, 0x59, 0x5F, 0x42,
                 0x55, 0x46, 0x46, 0x20, 0x32, 0x35, 0x35, 0x20, 0x32, 0x35, 0x35,
                 0x20, 0x32, 0x35, 0x35, 0x0A, 0x53, 0x50, 0x45, 0x4C, 0x4C, 0x5F,
                 0x43, 0x52, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5F, 0x56, 0x53,
                 0x5F, 0x43, 0x52, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5F, 0x44,
                 0x41, 0x4D, 0x41, 0x47, 0x45, 0x20, 0x32, 0x35, 0x35, 0x20, 0x32,
                 0x35, 0x35, 0x20, 0x32, 0x35, 0x35, 0x0A, 0x53, 0x50, 0x45, 0x4C,
                 0x4C, 0x5F, 0x43, 0x52, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5F,
                 0x56, 0x53, 0x5F, 0x43, 0x52, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45,
                 0x5F, 0x42, 0x55, 0x46, 0x46, 0x20, 0x32, 0x35, 0x35, 0x20, 0x32,
                 0x35, 0x35, 0x20, 0x32, 0x35, 0x35, 0x0A, 0x53, 0x50, 0x45, 0x4C,
                 0x4C, 0x5F, 0x54, 0x52, 0x41, 0x44, 0x45, 0x53, 0x4B, 0x49, 0x4C,
                 0x4C, 0x53, 0x20, 0x32, 0x35, 0x35, 0x20, 0x32, 0x35, 0x35, 0x20,
                 0x32, 0x35, 0x35, 0x0A, 0x53, 0x50, 0x45, 0x4C, 0x4C, 0x5F, 0x44,
                 0x41, 0x4D, 0x41, 0x47, 0x45, 0x53, 0x48, 0x49, 0x45, 0x4C, 0x44,
                 0x53, 0x5F, 0x4F, 0x4E, 0x5F, 0x53, 0x45, 0x4C, 0x46, 0x20, 0x32,
                 0x35, 0x35, 0x20, 0x32, 0x35, 0x35, 0x20, 0x32, 0x35, 0x35, 0x0A,
                 0x53, 0x50, 0x45, 0x4C, 0x4C, 0x5F, 0x44, 0x41, 0x4D, 0x41, 0x47,
                 0x45, 0x53, 0x48, 0x49, 0x45, 0x4C, 0x44, 0x53, 0x5F, 0x4F, 0x4E,
                 0x5F, 0x4F, 0x54, 0x48, 0x45, 0x52, 0x53, 0x20, 0x32, 0x35, 0x35,
                 0x20, 0x32, 0x35, 0x35, 0x20, 0x32, 0x35, 0x35, 0x0A, 0x53, 0x50,
                 0x45, 0x4C, 0x4C, 0x5F, 0x41, 0x55, 0x52, 0x41, 0x5F, 0x47, 0x4F,
                 0x4E, 0x45, 0x5F, 0x53, 0x45, 0x4C, 0x46, 0x20, 0x32, 0x35, 0x35,
                 0x20, 0x32, 0x35, 0x35, 0x20, 0x32, 0x35, 0x35, 0x0A, 0x53, 0x50,
                 0x45, 0x4C, 0x4C, 0x5F, 0x41, 0x55, 0x52, 0x41, 0x5F, 0x47, 0x4F,
                 0x4E, 0x45, 0x5F, 0x50, 0x41, 0x52, 0x54, 0x59, 0x20, 0x32, 0x35,
                 0x35, 0x20, 0x32, 0x35, 0x35, 0x20, 0x32, 0x35, 0x35, 0x0A, 0x53,
                 0x50, 0x45, 0x4C, 0x4C, 0x5F, 0x41, 0x55, 0x52, 0x41, 0x5F, 0x47,
                 0x4F, 0x4E, 0x45, 0x5F, 0x4F, 0x54, 0x48, 0x45, 0x52, 0x20, 0x32,
                 0x35, 0x35, 0x20, 0x32, 0x35, 0x35, 0x20, 0x32, 0x35, 0x35, 0x0A,
                 0x53, 0x50, 0x45, 0x4C, 0x4C, 0x5F, 0x49, 0x54, 0x45, 0x4D, 0x5F,
                 0x45, 0x4E, 0x43, 0x48, 0x41, 0x4E, 0x54, 0x4D, 0x45, 0x4E, 0x54,
                 0x53, 0x20, 0x32, 0x35, 0x35, 0x20, 0x32, 0x35, 0x35, 0x20, 0x32,
                 0x35, 0x35, 0x0A, 0x53, 0x50, 0x45, 0x4C, 0x4C, 0x5F, 0x42, 0x52,
                 0x45, 0x41, 0x4B, 0x5F, 0x41, 0x55, 0x52, 0x41, 0x20, 0x32, 0x35,
                 0x35, 0x20, 0x32, 0x35, 0x35, 0x20, 0x32, 0x35, 0x35, 0x0A, 0x53,
                 0x50, 0x45, 0x4C, 0x4C, 0x5F, 0x50, 0x45, 0x52, 0x49, 0x4F, 0x44,
                 0x49, 0x43, 0x5F, 0x53, 0x45, 0x4C, 0x46, 0x5F, 0x44, 0x41, 0x4D,
                 0x41, 0x47, 0x45, 0x20, 0x32, 0x35, 0x35, 0x20, 0x32, 0x35, 0x35,
                 0x20, 0x32, 0x35, 0x35, 0x0A, 0x53, 0x50, 0x45, 0x4C, 0x4C, 0x5F,
                 0x50, 0x45, 0x52, 0x49, 0x4F, 0x44, 0x49, 0x43, 0x5F, 0x53, 0x45,
                 0x4C, 0x46, 0x5F, 0x42, 0x55, 0x46, 0x46, 0x53, 0x20, 0x32, 0x35,
                 0x35, 0x20, 0x32, 0x35, 0x35, 0x20, 0x32, 0x35, 0x35, 0x0A, 0x53,
                 0x50, 0x45, 0x4C, 0x4C, 0x5F, 0x50, 0x45, 0x52, 0x49, 0x4F, 0x44,
                 0x49, 0x43, 0x5F, 0x50, 0x41, 0x52, 0x54, 0x59, 0x5F, 0x44, 0x41,
                 0x4D, 0x41, 0x47, 0x45, 0x20, 0x32, 0x35, 0x35, 0x20, 0x32, 0x35,
                 0x35, 0x20, 0x32, 0x35, 0x35, 0x0A, 0x53, 0x50, 0x45, 0x4C, 0x4C,
                 0x5F, 0x50, 0x45, 0x52, 0x49, 0x4F, 0x44, 0x49, 0x43, 0x5F, 0x50,
                 0x41, 0x52, 0x54, 0x59, 0x5F, 0x42, 0x55, 0x46, 0x46, 0x53, 0x20,
                 0x32, 0x35, 0x35, 0x20, 0x32, 0x35, 0x35, 0x20, 0x32, 0x35, 0x35,
                 0x0A, 0x53, 0x50, 0x45, 0x4C, 0x4C, 0x5F, 0x50, 0x45, 0x52, 0x49,
                 0x4F, 0x44, 0x49, 0x43, 0x5F, 0x46, 0x52, 0x49, 0x45, 0x4E, 0x44,
                 0x4C, 0x59, 0x50, 0x4C, 0x41, 0x59, 0x45, 0x52, 0x5F, 0x44, 0x41,
                 0x4D, 0x41, 0x47, 0x45, 0x20, 0x32, 0x35, 0x35, 0x20, 0x32, 0x35,
                 0x35, 0x20, 0x32, 0x35, 0x35, 0x0A, 0x53, 0x50, 0x45, 0x4C, 0x4C,
                 0x5F, 0x50, 0x45, 0x52, 0x49, 0x4F, 0x44, 0x49, 0x43, 0x5F, 0x46,
                 0x52, 0x49, 0x45, 0x4E, 0x44, 0x4C, 0x59, 0x50, 0x4C, 0x41, 0x59,
                 0x45, 0x52, 0x5F, 0x42, 0x55, 0x46, 0x46, 0x53, 0x20, 0x32, 0x35,
                 0x35, 0x20, 0x32, 0x35, 0x35, 0x20, 0x32, 0x35, 0x35, 0x0A, 0x53,
                 0x50, 0x45, 0x4C, 0x4C, 0x5F, 0x50, 0x45, 0x52, 0x49, 0x4F, 0x44,
                 0x49, 0x43, 0x5F, 0x48, 0x4F, 0x53, 0x54, 0x49, 0x4C, 0x45, 0x50,
                 0x4C, 0x41, 0x59, 0x45, 0x52, 0x5F, 0x44, 0x41, 0x4D, 0x41, 0x47,
                 0x45, 0x20, 0x32, 0x35, 0x35, 0x20, 0x32, 0x35, 0x35, 0x20, 0x32,
                 0x35, 0x35, 0x0A, 0x53, 0x50, 0x45, 0x4C, 0x4C, 0x5F, 0x50, 0x45,
                 0x52, 0x49, 0x4F, 0x44, 0x49, 0x43, 0x5F, 0x48, 0x4F, 0x53, 0x54,
                 0x49, 0x4C, 0x45, 0x50, 0x4C, 0x41, 0x59, 0x45, 0x52, 0x5F, 0x42,
                 0x55, 0x46, 0x46, 0x53, 0x20, 0x32, 0x35, 0x35, 0x20, 0x32, 0x35,
                 0x35, 0x20, 0x32, 0x35, 0x35, 0x0A, 0x53, 0x50, 0x45, 0x4C, 0x4C,
                 0x5F, 0x50, 0x45, 0x52, 0x49, 0x4F, 0x44, 0x49, 0x43, 0x5F, 0x43,
                 0x52, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5F, 0x44, 0x41, 0x4D,
                 0x41, 0x47, 0x45, 0x20, 0x32, 0x35, 0x35, 0x20, 0x32, 0x35, 0x35,
                 0x20, 0x32, 0x35, 0x35, 0x0A, 0x53, 0x50, 0x45, 0x4C, 0x4C, 0x5F,
                 0x50, 0x45, 0x52, 0x49, 0x4F, 0x44, 0x49, 0x43, 0x5F, 0x43, 0x52,
                 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5F, 0x42, 0x55, 0x46, 0x46,
                 0x53, 0x20, 0x32, 0x35, 0x35, 0x20, 0x32, 0x35, 0x35, 0x20, 0x32,
                 0x35, 0x35, 0x0A, 0x53, 0x50, 0x45, 0x4C, 0x4C, 0x5F, 0x46, 0x41,
                 0x49, 0x4C, 0x45, 0x44, 0x5F, 0x4C, 0x4F, 0x43, 0x41, 0x4C, 0x50,
                 0x4C, 0x41, 0x59, 0x45, 0x52, 0x20, 0x32, 0x35, 0x35, 0x20, 0x32,
                 0x35, 0x35, 0x20, 0x32, 0x35, 0x35, 0x0A, 0x43, 0x4F, 0x4D, 0x42,
                 0x41, 0x54, 0x5F, 0x48, 0x4F, 0x4E, 0x4F, 0x52, 0x5F, 0x47, 0x41,
                 0x49, 0x4E, 0x20, 0x32, 0x32, 0x34, 0x20, 0x32, 0x30, 0x32, 0x20,
                 0x31, 0x30, 0x0A, 0x42, 0x47, 0x5F, 0x53, 0x59, 0x53, 0x54, 0x45,
                 0x4D, 0x5F, 0x4E, 0x45, 0x55, 0x54, 0x52, 0x41, 0x4C, 0x20, 0x32,
                 0x35, 0x35, 0x20, 0x31, 0x32, 0x30, 0x20, 0x31, 0x30, 0x0A, 0x42,
                 0x47, 0x5F, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4D, 0x5F, 0x41, 0x4C,
                 0x4C, 0x49, 0x41, 0x4E, 0x43, 0x45, 0x20, 0x30, 0x20, 0x31, 0x37,
                 0x34, 0x20, 0x32, 0x33, 0x39, 0x0A, 0x42, 0x47, 0x5F, 0x53, 0x59,
                 0x53, 0x54, 0x45, 0x4D, 0x5F, 0x48, 0x4F, 0x52, 0x44, 0x45, 0x20,
                 0x32, 0x35, 0x35, 0x20, 0x30, 0x20, 0x30, 0x0A, 0x43, 0x4F, 0x4D,
                 0x42, 0x41, 0x54, 0x5F, 0x46, 0x41, 0x43, 0x54, 0x49, 0x4F, 0x4E,
                 0x5F, 0x43, 0x48, 0x41, 0x4E, 0x47, 0x45, 0x20, 0x31, 0x32, 0x38,
                 0x20, 0x31, 0x32, 0x38, 0x20, 0x32, 0x35, 0x35, 0x0A, 0x4D, 0x4F,
                 0x4E, 0x45, 0x59, 0x20, 0x32, 0x35, 0x35, 0x20, 0x32, 0x35, 0x35,
                 0x20, 0x30, 0x0A, 0x52, 0x41, 0x49, 0x44, 0x5F, 0x4C, 0x45, 0x41,
                 0x44, 0x45, 0x52, 0x20, 0x32, 0x35, 0x35, 0x20, 0x32, 0x31, 0x39,
                 0x20, 0x31, 0x38, 0x33, 0x0A, 0x52, 0x41, 0x49, 0x44, 0x5F, 0x57,
                 0x41, 0x52, 0x4E, 0x49, 0x4E, 0x47, 0x20, 0x32, 0x35, 0x35, 0x20,
                 0x32, 0x31, 0x39, 0x20, 0x31, 0x38, 0x33, 0x0A, 0x46, 0x4F, 0x52,
                 0x45, 0x49, 0x47, 0x4E, 0x5F, 0x54, 0x45, 0x4C, 0x4C, 0x20, 0x32,
                 0x35, 0x35, 0x20, 0x31, 0x32, 0x38, 0x20, 0x32, 0x35, 0x35, 0x0A,
                 0x52, 0x41, 0x49, 0x44, 0x5F, 0x42, 0x4F, 0x53, 0x53, 0x5F, 0x45,
                 0x4D, 0x4F, 0x54, 0x45, 0x20, 0x32, 0x35, 0x35, 0x20, 0x32, 0x31,
                 0x39, 0x20, 0x31, 0x38, 0x33, 0x0A, 0x46, 0x49, 0x4C, 0x54, 0x45,
                 0x52, 0x45, 0x44, 0x20, 0x32, 0x35, 0x35, 0x20, 0x30, 0x20, 0x30,
                 0x0A, 0x42, 0x41, 0x54, 0x54, 0x4C, 0x45, 0x47, 0x52, 0x4F, 0x55,
                 0x4E, 0x44, 0x20, 0x32, 0x35, 0x35, 0x20, 0x31, 0x32, 0x37, 0x20,
                 0x30, 0x0A, 0x42, 0x41, 0x54, 0x54, 0x4C, 0x45, 0x47, 0x52, 0x4F,
                 0x55, 0x4E, 0x44, 0x5F, 0x4C, 0x45, 0x41, 0x44, 0x45, 0x52, 0x20,
                 0x32, 0x35, 0x35, 0x20, 0x32, 0x31, 0x39, 0x20, 0x31, 0x38, 0x33,
                 0x0A, 0x43, 0x48, 0x41, 0x4E, 0x4E, 0x45, 0x4C, 0x31, 0x20, 0x32,
                 0x35, 0x35, 0x20, 0x31, 0x39, 0x32, 0x20, 0x31, 0x39, 0x32, 0x0A,
                 0x43, 0x48, 0x41, 0x4E, 0x4E, 0x45, 0x4C, 0x32, 0x20, 0x32, 0x35,
                 0x35, 0x20, 0x31, 0x39, 0x32, 0x20, 0x31, 0x39, 0x32, 0x0A, 0x43,
                 0x48, 0x41, 0x4E, 0x4E, 0x45, 0x4C, 0x33, 0x20, 0x32, 0x35, 0x35,
                 0x20, 0x31, 0x39, 0x32, 0x20, 0x31, 0x39, 0x32, 0x0A, 0x43, 0x48,
                 0x41, 0x4E, 0x4E, 0x45, 0x4C, 0x34, 0x20, 0x32, 0x35, 0x35, 0x20,
                 0x31, 0x39, 0x32, 0x20, 0x31, 0x39, 0x32, 0x0A, 0x43, 0x48, 0x41,
                 0x4E, 0x4E, 0x45, 0x4C, 0x35, 0x20, 0x32, 0x35, 0x35, 0x20, 0x31,
                 0x39, 0x32, 0x20, 0x31, 0x39, 0x32, 0x0A, 0x43, 0x48, 0x41, 0x4E,
                 0x4E, 0x45, 0x4C, 0x36, 0x20, 0x32, 0x35, 0x35, 0x20, 0x31, 0x39,
                 0x32, 0x20, 0x31, 0x39, 0x32, 0x0A, 0x43, 0x48, 0x41, 0x4E, 0x4E,
                 0x45, 0x4C, 0x37, 0x20, 0x32, 0x35, 0x35, 0x20, 0x31, 0x39, 0x32,
                 0x20, 0x31, 0x39, 0x32, 0x0A, 0x43, 0x48, 0x41, 0x4E, 0x4E, 0x45,
                 0x4C, 0x38, 0x20, 0x32, 0x35, 0x35, 0x20, 0x31, 0x39, 0x32, 0x20,
                 0x31, 0x39, 0x32, 0x0A, 0x43, 0x48, 0x41, 0x4E, 0x4E, 0x45, 0x4C,
                 0x39, 0x20, 0x32, 0x35, 0x35, 0x20, 0x31, 0x39, 0x32, 0x20, 0x31,
                 0x39, 0x32, 0x0A, 0x43, 0x48, 0x41, 0x4E, 0x4E, 0x45, 0x4C, 0x31,
                 0x30, 0x20, 0x32, 0x35, 0x35, 0x20, 0x31, 0x39, 0x32, 0x20, 0x31,
                 0x39, 0x32, 0x0A, 0x45, 0x4E, 0x44, 0x0A, 0x0A, 0x57, 0x49, 0x4E,
                 0x44, 0x4F, 0x57, 0x20, 0x31, 0x0A, 0x53, 0x49, 0x5A, 0x45, 0x20,
                 0x30, 0x0A, 0x43, 0x4F, 0x4C, 0x4F, 0x52, 0x20, 0x30, 0x20, 0x30,
                 0x20, 0x30, 0x20, 0x30, 0x0A, 0x4C, 0x4F, 0x43, 0x4B, 0x45, 0x44,
                 0x20, 0x31, 0x0A, 0x44, 0x4F, 0x43, 0x4B, 0x45, 0x44, 0x20, 0x31,
                 0x0A, 0x53, 0x48, 0x4F, 0x57, 0x4E, 0x20, 0x31, 0x0A, 0x0A, 0x4D,
                 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x53, 0x0A, 0x53, 0x59, 0x53,
                 0x54, 0x45, 0x4D, 0x0A, 0x53, 0x41, 0x59, 0x0A, 0x59, 0x45, 0x4C,
                 0x4C, 0x0A, 0x57, 0x48, 0x49, 0x53, 0x50, 0x45, 0x52, 0x0A, 0x50,
                 0x41, 0x52, 0x54, 0x59, 0x0A, 0x47, 0x55, 0x49, 0x4C, 0x44, 0x0A,
                 0x43, 0x52, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x0A, 0x43, 0x48,
                 0x41, 0x4E, 0x4E, 0x45, 0x4C, 0x0A, 0x53, 0x4B, 0x49, 0x4C, 0x4C,
                 0x0A, 0x4C, 0x4F, 0x4F, 0x54, 0x0A, 0x45, 0x4E, 0x44, 0x0A, 0x0A,
                 0x43, 0x48, 0x41, 0x4E, 0x4E, 0x45, 0x4C, 0x53, 0x0A, 0x45, 0x4E,
                 0x44, 0x0A, 0x0A, 0x5A, 0x4F, 0x4E, 0x45, 0x43, 0x48, 0x41, 0x4E,
                 0x4E, 0x45, 0x4C, 0x53, 0x20, 0x32, 0x30, 0x39, 0x37, 0x31, 0x35,
                 0x35, 0x0A, 0x0A, 0x45, 0x4E, 0x44, 0x0A, 0x0A, 0x57, 0x49, 0x4E,
                 0x44, 0x4F, 0x57, 0x20, 0x32, 0x0A, 0x53, 0x49, 0x5A, 0x45, 0x20,
                 0x30, 0x0A, 0x43, 0x4F, 0x4C, 0x4F, 0x52, 0x20, 0x30, 0x20, 0x30,
                 0x20, 0x30, 0x20, 0x30, 0x0A, 0x4C, 0x4F, 0x43, 0x4B, 0x45, 0x44,
                 0x20, 0x31, 0x0A, 0x44, 0x4F, 0x43, 0x4B, 0x45, 0x44, 0x20, 0x32,
                 0x0A, 0x53, 0x48, 0x4F, 0x57, 0x4E, 0x20, 0x30, 0x0A, 0x0A, 0x4D,
                 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x53, 0x0A, 0x43, 0x4F, 0x4D,
                 0x42, 0x41, 0x54, 0x5F, 0x4D, 0x49, 0x53, 0x43, 0x5F, 0x49, 0x4E,
                 0x46, 0x4F, 0x0A, 0x43, 0x4F, 0x4D, 0x42, 0x41, 0x54, 0x5F, 0x53,
                 0x45, 0x4C, 0x46, 0x5F, 0x48, 0x49, 0x54, 0x53, 0x0A, 0x43, 0x4F,
                 0x4D, 0x42, 0x41, 0x54, 0x5F, 0x53, 0x45, 0x4C, 0x46, 0x5F, 0x4D,
                 0x49, 0x53, 0x53, 0x45, 0x53, 0x0A, 0x43, 0x4F, 0x4D, 0x42, 0x41,
                 0x54, 0x5F, 0x50, 0x45, 0x54, 0x5F, 0x48, 0x49, 0x54, 0x53, 0x0A,
                 0x43, 0x4F, 0x4D, 0x42, 0x41, 0x54, 0x5F, 0x50, 0x45, 0x54, 0x5F,
                 0x4D, 0x49, 0x53, 0x53, 0x45, 0x53, 0x0A, 0x43, 0x4F, 0x4D, 0x42,
                 0x41, 0x54, 0x5F, 0x48, 0x4F, 0x53, 0x54, 0x49, 0x4C, 0x45, 0x50,
                 0x4C, 0x41, 0x59, 0x45, 0x52, 0x5F, 0x48, 0x49, 0x54, 0x53, 0x0A,
                 0x43, 0x4F, 0x4D, 0x42, 0x41, 0x54, 0x5F, 0x48, 0x4F, 0x53, 0x54,
                 0x49, 0x4C, 0x45, 0x50, 0x4C, 0x41, 0x59, 0x45, 0x52, 0x5F, 0x4D,
                 0x49, 0x53, 0x53, 0x45, 0x53, 0x0A, 0x43, 0x4F, 0x4D, 0x42, 0x41,
                 0x54, 0x5F, 0x43, 0x52, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5F,
                 0x56, 0x53, 0x5F, 0x53, 0x45, 0x4C, 0x46, 0x5F, 0x48, 0x49, 0x54,
                 0x53, 0x0A, 0x43, 0x4F, 0x4D, 0x42, 0x41, 0x54, 0x5F, 0x43, 0x52,
                 0x45, 0x41, 0x54, 0x55, 0x52, 0x45, 0x5F, 0x56, 0x53, 0x5F, 0x53,
                 0x45, 0x4C, 0x46, 0x5F, 0x4D, 0x49, 0x53, 0x53, 0x45, 0x53, 0x0A,
                 0x43, 0x4F, 0x4D, 0x42, 0x41, 0x54, 0x5F, 0x46, 0x52, 0x49, 0x45,
                 0x4E, 0x44, 0x4C, 0x59, 0x5F, 0x44, 0x45, 0x41, 0x54, 0x48, 0x0A,
                 0x43, 0x4F, 0x4D, 0x42, 0x41, 0x54, 0x5F, 0x48, 0x4F, 0x53, 0x54,
                 0x49, 0x4C, 0x45, 0x5F, 0x44, 0x45, 0x41, 0x54, 0x48, 0x0A, 0x43,
                 0x4F, 0x4D, 0x42, 0x41, 0x54, 0x5F, 0x58, 0x50, 0x5F, 0x47, 0x41,
                 0x49, 0x4E, 0x0A, 0x53, 0x50, 0x45, 0x4C, 0x4C, 0x5F, 0x53, 0x45,
                 0x4C, 0x46, 0x5F, 0x44, 0x41, 0x4D, 0x41, 0x47, 0x45, 0x0A, 0x53,
                 0x50, 0x45, 0x4C, 0x4C, 0x5F, 0x53, 0x45, 0x4C, 0x46, 0x5F, 0x42,
                 0x55, 0x46, 0x46, 0x0A, 0x53, 0x50, 0x45, 0x4C, 0x4C, 0x5F, 0x50,
                 0x45, 0x54, 0x5F, 0x44, 0x41, 0x4D, 0x41, 0x47, 0x45, 0x0A, 0x53,
                 0x50, 0x45, 0x4C, 0x4C, 0x5F, 0x50, 0x45, 0x54, 0x5F, 0x42, 0x55,
                 0x46, 0x46, 0x0A, 0x53, 0x50, 0x45, 0x4C, 0x4C, 0x5F, 0x48, 0x4F,
                 0x53, 0x54, 0x49, 0x4C, 0x45, 0x50, 0x4C, 0x41, 0x59, 0x45, 0x52,
                 0x5F, 0x44, 0x41, 0x4D, 0x41, 0x47, 0x45, 0x0A, 0x53, 0x50, 0x45,
                 0x4C, 0x4C, 0x5F, 0x48, 0x4F, 0x53, 0x54, 0x49, 0x4C, 0x45, 0x50,
                 0x4C, 0x41, 0x59, 0x45, 0x52, 0x5F, 0x42, 0x55, 0x46, 0x46, 0x0A,
                 0x53, 0x50, 0x45, 0x4C, 0x4C, 0x5F, 0x43, 0x52, 0x45, 0x41, 0x54,
                 0x55, 0x52, 0x45, 0x5F, 0x56, 0x53, 0x5F, 0x53, 0x45, 0x4C, 0x46,
                 0x5F, 0x44, 0x41, 0x4D, 0x41, 0x47, 0x45, 0x0A, 0x53, 0x50, 0x45,
                 0x4C, 0x4C, 0x5F, 0x43, 0x52, 0x45, 0x41, 0x54, 0x55, 0x52, 0x45,
                 0x5F, 0x56, 0x53, 0x5F, 0x53, 0x45, 0x4C, 0x46, 0x5F, 0x42, 0x55,
                 0x46, 0x46, 0x0A, 0x53, 0x50, 0x45, 0x4C, 0x4C, 0x5F, 0x54, 0x52,
                 0x41, 0x44, 0x45, 0x53, 0x4B, 0x49, 0x4C, 0x4C, 0x53, 0x0A, 0x53,
                 0x50, 0x45, 0x4C, 0x4C, 0x5F, 0x44, 0x41, 0x4D, 0x41, 0x47, 0x45,
                 0x53, 0x48, 0x49, 0x45, 0x4C, 0x44, 0x53, 0x5F, 0x4F, 0x4E, 0x5F,
                 0x53, 0x45, 0x4C, 0x46, 0x0A, 0x53, 0x50, 0x45, 0x4C, 0x4C, 0x5F,
                 0x41, 0x55, 0x52, 0x41, 0x5F, 0x47, 0x4F, 0x4E, 0x45, 0x5F, 0x53,
                 0x45, 0x4C, 0x46, 0x0A, 0x53, 0x50, 0x45, 0x4C, 0x4C, 0x5F, 0x49,
                 0x54, 0x45, 0x4D, 0x5F, 0x45, 0x4E, 0x43, 0x48, 0x41, 0x4E, 0x54,
                 0x4D, 0x45, 0x4E, 0x54, 0x53, 0x0A, 0x53, 0x50, 0x45, 0x4C, 0x4C,
                 0x5F, 0x42, 0x52, 0x45, 0x41, 0x4B, 0x5F, 0x41, 0x55, 0x52, 0x41,
                 0x0A, 0x53, 0x50, 0x45, 0x4C, 0x4C, 0x5F, 0x50, 0x45, 0x52, 0x49,
                 0x4F, 0x44, 0x49, 0x43, 0x5F, 0x53, 0x45, 0x4C, 0x46, 0x5F, 0x44,
                 0x41, 0x4D, 0x41, 0x47, 0x45, 0x0A, 0x53, 0x50, 0x45, 0x4C, 0x4C,
                 0x5F, 0x50, 0x45, 0x52, 0x49, 0x4F, 0x44, 0x49, 0x43, 0x5F, 0x53,
                 0x45, 0x4C, 0x46, 0x5F, 0x42, 0x55, 0x46, 0x46, 0x53, 0x0A, 0x53,
                 0x50, 0x45, 0x4C, 0x4C, 0x5F, 0x50, 0x45, 0x52, 0x49, 0x4F, 0x44,
                 0x49, 0x43, 0x5F, 0x48, 0x4F, 0x53, 0x54, 0x49, 0x4C, 0x45, 0x50,
                 0x4C, 0x41, 0x59, 0x45, 0x52, 0x5F, 0x44, 0x41, 0x4D, 0x41, 0x47,
                 0x45, 0x0A, 0x53, 0x50, 0x45, 0x4C, 0x4C, 0x5F, 0x50, 0x45, 0x52,
                 0x49, 0x4F, 0x44, 0x49, 0x43, 0x5F, 0x48, 0x4F, 0x53, 0x54, 0x49,
                 0x4C, 0x45, 0x50, 0x4C, 0x41, 0x59, 0x45, 0x52, 0x5F, 0x42, 0x55,
                 0x46, 0x46, 0x53, 0x0A, 0x53, 0x50, 0x45, 0x4C, 0x4C, 0x5F, 0x50,
                 0x45, 0x52, 0x49, 0x4F, 0x44, 0x49, 0x43, 0x5F, 0x43, 0x52, 0x45,
                 0x41, 0x54, 0x55, 0x52, 0x45, 0x5F, 0x44, 0x41, 0x4D, 0x41, 0x47,
                 0x45, 0x0A, 0x53, 0x50, 0x45, 0x4C, 0x4C, 0x5F, 0x50, 0x45, 0x52,
                 0x49, 0x4F, 0x44, 0x49, 0x43, 0x5F, 0x43, 0x52, 0x45, 0x41, 0x54,
                 0x55, 0x52, 0x45, 0x5F, 0x42, 0x55, 0x46, 0x46, 0x53, 0x0A, 0x43,
                 0x4F, 0x4D, 0x42, 0x41, 0x54, 0x5F, 0x48, 0x4F, 0x4E, 0x4F, 0x52,
                 0x5F, 0x47, 0x41, 0x49, 0x4E, 0x0A, 0x43, 0x4F, 0x4D, 0x42, 0x41,
                 0x54, 0x5F, 0x46, 0x41, 0x43, 0x54, 0x49, 0x4F, 0x4E, 0x5F, 0x43,
                 0x48, 0x41, 0x4E, 0x47, 0x45, 0x0A, 0x4D, 0x4F, 0x4E, 0x45, 0x59,
                 0x0A, 0x45, 0x4E, 0x44, 0x0A, 0x0A, 0x43, 0x48, 0x41, 0x4E, 0x4E,
                 0x45, 0x4C, 0x53, 0x0A, 0x45, 0x4E, 0x44, 0x0A, 0x0A, 0x5A, 0x4F,
                 0x4E, 0x45, 0x43, 0x48, 0x41, 0x4E, 0x4E, 0x45, 0x4C, 0x53, 0x20,
                 0x30, 0x0A, 0x0A, 0x45, 0x4E, 0x44, 0x0A, 0x0A, 0x57, 0x49, 0x4E,
                 0x44, 0x4F, 0x57, 0x20, 0x33, 0x0A, 0x53, 0x49, 0x5A, 0x45, 0x20,
                 0x30, 0x0A, 0x43, 0x4F, 0x4C, 0x4F, 0x52, 0x20, 0x30, 0x20, 0x30,
                 0x20, 0x30, 0x20, 0x30, 0x0A, 0x4C, 0x4F, 0x43, 0x4B, 0x45, 0x44,
                 0x20, 0x31, 0x0A, 0x44, 0x4F, 0x43, 0x4B, 0x45, 0x44, 0x20, 0x30,
                 0x0A, 0x53, 0x48, 0x4F, 0x57, 0x4E, 0x20, 0x30, 0x0A, 0x0A, 0x4D,
                 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x53, 0x0A, 0x45, 0x4E, 0x44,
                 0x0A, 0x0A, 0x43, 0x48, 0x41, 0x4E, 0x4E, 0x45, 0x4C, 0x53, 0x0A,
                 0x45, 0x4E, 0x44, 0x0A, 0x0A, 0x5A, 0x4F, 0x4E, 0x45, 0x43, 0x48,
                 0x41, 0x4E, 0x4E, 0x45, 0x4C, 0x53, 0x20, 0x30, 0x0A, 0x0A, 0x45,
                 0x4E, 0x44, 0x0A, 0x0A, 0x57, 0x49, 0x4E, 0x44, 0x4F, 0x57, 0x20,
                 0x34, 0x0A, 0x53, 0x49, 0x5A, 0x45, 0x20, 0x30, 0x0A, 0x43, 0x4F,
                 0x4C, 0x4F, 0x52, 0x20, 0x30, 0x20, 0x30, 0x20, 0x30, 0x20, 0x30,
                 0x0A, 0x4C, 0x4F, 0x43, 0x4B, 0x45, 0x44, 0x20, 0x31, 0x0A, 0x44,
                 0x4F, 0x43, 0x4B, 0x45, 0x44, 0x20, 0x30, 0x0A, 0x53, 0x48, 0x4F,
                 0x57, 0x4E, 0x20, 0x30, 0x0A, 0x0A, 0x4D, 0x45, 0x53, 0x53, 0x41,
                 0x47, 0x45, 0x53, 0x0A, 0x45, 0x4E, 0x44, 0x0A, 0x0A, 0x43, 0x48,
                 0x41, 0x4E, 0x4E, 0x45, 0x4C, 0x53, 0x0A, 0x45, 0x4E, 0x44, 0x0A,
                 0x0A, 0x5A, 0x4F, 0x4E, 0x45, 0x43, 0x48, 0x41, 0x4E, 0x4E, 0x45,
                 0x4C, 0x53, 0x20, 0x30, 0x0A, 0x0A, 0x45, 0x4E, 0x44, 0x0A, 0x0A,
                 0x57, 0x49, 0x4E, 0x44, 0x4F, 0x57, 0x20, 0x35, 0x0A, 0x53, 0x49,
                 0x5A, 0x45, 0x20, 0x30, 0x0A, 0x43, 0x4F, 0x4C, 0x4F, 0x52, 0x20,
                 0x30, 0x20, 0x30, 0x20, 0x30, 0x20, 0x30, 0x0A, 0x4C, 0x4F, 0x43,
                 0x4B, 0x45, 0x44, 0x20, 0x31, 0x0A, 0x44, 0x4F, 0x43, 0x4B, 0x45,
                 0x44, 0x20, 0x30, 0x0A, 0x53, 0x48, 0x4F, 0x57, 0x4E, 0x20, 0x30,
                 0x0A, 0x0A, 0x4D, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x53, 0x0A,
                 0x45, 0x4E, 0x44, 0x0A, 0x0A, 0x43, 0x48, 0x41, 0x4E, 0x4E, 0x45,
                 0x4C, 0x53, 0x0A, 0x45, 0x4E, 0x44, 0x0A, 0x0A, 0x5A, 0x4F, 0x4E,
                 0x45, 0x43, 0x48, 0x41, 0x4E, 0x4E, 0x45, 0x4C, 0x53, 0x20, 0x30,
                 0x0A, 0x0A, 0x45, 0x4E, 0x44, 0x0A, 0x0A, 0x57, 0x49, 0x4E, 0x44,
                 0x4F, 0x57, 0x20, 0x36, 0x0A, 0x53, 0x49, 0x5A, 0x45, 0x20, 0x30,
                 0x0A, 0x43, 0x4F, 0x4C, 0x4F, 0x52, 0x20, 0x30, 0x20, 0x30, 0x20,
                 0x30, 0x20, 0x30, 0x0A, 0x4C, 0x4F, 0x43, 0x4B, 0x45, 0x44, 0x20,
                 0x31, 0x0A, 0x44, 0x4F, 0x43, 0x4B, 0x45, 0x44, 0x20, 0x30, 0x0A,
                 0x53, 0x48, 0x4F, 0x57, 0x4E, 0x20, 0x30, 0x0A, 0x0A, 0x4D, 0x45,
                 0x53, 0x53, 0x41, 0x47, 0x45, 0x53, 0x0A, 0x45, 0x4E, 0x44, 0x0A,
                 0x0A, 0x43, 0x48, 0x41, 0x4E, 0x4E, 0x45, 0x4C, 0x53, 0x0A, 0x45,
                 0x4E, 0x44, 0x0A, 0x0A, 0x5A, 0x4F, 0x4E, 0x45, 0x43, 0x48, 0x41,
                 0x4E, 0x4E, 0x45, 0x4C, 0x53, 0x20, 0x30, 0x0A, 0x0A, 0x45, 0x4E,
                 0x44, 0x0A, 0x0A, 0x57, 0x49, 0x4E, 0x44, 0x4F, 0x57, 0x20, 0x37,
                 0x0A, 0x53, 0x49, 0x5A, 0x45, 0x20, 0x30, 0x0A, 0x43, 0x4F, 0x4C,
                 0x4F, 0x52, 0x20, 0x30, 0x20, 0x30, 0x20, 0x30, 0x20, 0x30, 0x0A,
                 0x4C, 0x4F, 0x43, 0x4B, 0x45, 0x44, 0x20, 0x31, 0x0A, 0x44, 0x4F,
                 0x43, 0x4B, 0x45, 0x44, 0x20, 0x30, 0x0A, 0x53, 0x48, 0x4F, 0x57,
                 0x4E, 0x20, 0x30, 0x0A, 0x0A, 0x4D, 0x45, 0x53, 0x53, 0x41, 0x47,
                 0x45, 0x53, 0x0A, 0x45, 0x4E, 0x44, 0x0A, 0x0A, 0x43, 0x48, 0x41,
                 0x4E, 0x4E, 0x45, 0x4C, 0x53, 0x0A, 0x45, 0x4E, 0x44, 0x0A, 0x0A,
                 0x5A, 0x4F, 0x4E, 0x45, 0x43, 0x48, 0x41, 0x4E, 0x4E, 0x45, 0x4C,
                 0x53, 0x20, 0x30, 0x0A, 0x0A, 0x45, 0x4E, 0x44, 0x0A, 0x0A, 0x57,
                 0x49, 0x4E, 0x44, 0x4F, 0x57, 0x20, 0x38, 0x0A, 0x53, 0x49, 0x5A,
                 0x45, 0x20, 0x30, 0x0A, 0x43, 0x4F, 0x4C, 0x4F, 0x52, 0x20, 0x30,
                 0x20, 0x30, 0x20, 0x30, 0x20, 0x30, 0x0A, 0x4C, 0x4F, 0x43, 0x4B,
                 0x45, 0x44, 0x20, 0x31, 0x0A, 0x44, 0x4F, 0x43, 0x4B, 0x45, 0x44,
                 0x20, 0x30, 0x0A, 0x53, 0x48, 0x4F, 0x57, 0x4E, 0x20, 0x30, 0x0A,
                 0x0A, 0x4D, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x53, 0x0A, 0x45,
                 0x4E, 0x44, 0x0A, 0x0A, 0x43, 0x48, 0x41, 0x4E, 0x4E, 0x45, 0x4C,
                 0x53, 0x0A, 0x45, 0x4E, 0x44, 0x0A, 0x0A, 0x5A, 0x4F, 0x4E, 0x45,
                 0x43, 0x48, 0x41, 0x4E, 0x4E, 0x45, 0x4C, 0x53, 0x20, 0x30, 0x0A,
                 0x0A, 0x45, 0x4E, 0x44, 0x0A, 0x0A, 0x57, 0x49, 0x4E, 0x44, 0x4F,
                 0x57, 0x20, 0x39, 0x0A, 0x53, 0x49, 0x5A, 0x45, 0x20, 0x30, 0x0A,
                 0x43, 0x4F, 0x4C, 0x4F, 0x52, 0x20, 0x30, 0x20, 0x30, 0x20, 0x30,
                 0x20, 0x30, 0x0A, 0x4C, 0x4F, 0x43, 0x4B, 0x45, 0x44, 0x20, 0x31,
                 0x0A, 0x44, 0x4F, 0x43, 0x4B, 0x45, 0x44, 0x20, 0x30, 0x0A, 0x53,
                 0x48, 0x4F, 0x57, 0x4E, 0x20, 0x30, 0x0A, 0x0A, 0x4D, 0x45, 0x53,
                 0x53, 0x41, 0x47, 0x45, 0x53, 0x0A, 0x45, 0x4E, 0x44, 0x0A, 0x0A,
                 0x43, 0x48, 0x41, 0x4E, 0x4E, 0x45, 0x4C, 0x53, 0x0A, 0x45, 0x4E,
                 0x44, 0x0A, 0x0A, 0x5A, 0x4F, 0x4E, 0x45, 0x43, 0x48, 0x41, 0x4E,
                 0x4E, 0x45, 0x4C, 0x53, 0x20, 0x30, 0x0A, 0x0A, 0x45, 0x4E, 0x44,
                 0x0A, 0x0A, 0x57, 0x49, 0x4E, 0x44, 0x4F, 0x57, 0x20, 0x31, 0x30,
                 0x0A, 0x53, 0x49, 0x5A, 0x45, 0x20, 0x30, 0x0A, 0x43, 0x4F, 0x4C,
                 0x4F, 0x52, 0x20, 0x30, 0x20, 0x30, 0x20, 0x30, 0x20, 0x30, 0x0A,
                 0x4C, 0x4F, 0x43, 0x4B, 0x45, 0x44, 0x20, 0x31, 0x0A, 0x44, 0x4F,
                 0x43, 0x4B, 0x45, 0x44, 0x20, 0x30, 0x0A, 0x53, 0x48, 0x4F, 0x57,
                 0x4E, 0x20, 0x30, 0x0A, 0x0A, 0x4D, 0x45, 0x53, 0x53, 0x41, 0x47,
                 0x45, 0x53, 0x0A, 0x45, 0x4E, 0x44, 0x0A, 0x0A, 0x43, 0x48, 0x41,
                 0x4E, 0x4E, 0x45, 0x4C, 0x53, 0x0A, 0x45, 0x4E, 0x44, 0x0A, 0x0A,
                 0x5A, 0x4F, 0x4E, 0x45, 0x43, 0x48, 0x41, 0x4E, 0x4E, 0x45, 0x4C,
                 0x53, 0x20, 0x30, 0x0A, 0x0A, 0x45, 0x4E, 0x44, 0x0A, 0x0A, ],
        }

    }

    // Generated from `wow_message_parser/wowm/world/login_logout/cmsg_update_account_data.wowm` line 52.
    #[cfg(feature = "sync")]
    #[cfg_attr(feature = "sync", test)]
    fn cmsg_update_account_data1() {
        let expected = expected1();
        let t = ClientOpcodeMessage::read_unencrypted(&mut std::io::Cursor::new(&RAW1)).unwrap();
        let t = match t {
            ClientOpcodeMessage::CMSG_UPDATE_ACCOUNT_DATA(t) => t,
            opcode => panic!("incorrect opcode. Expected CMSG_UPDATE_ACCOUNT_DATA, got {opcode:#?}"),
        };

        assert_eq!(t.as_ref(), &expected);
        let mut dest = Vec::with_capacity(RAW1.len());
        expected.write_unencrypted_client(&mut std::io::Cursor::new(&mut dest)).unwrap();

        let s = ClientOpcodeMessage::read_unencrypted(&mut std::io::Cursor::new(&dest)).unwrap();
        let s = match s {
            ClientOpcodeMessage::CMSG_UPDATE_ACCOUNT_DATA(s) => s,
            opcode => panic!("incorrect opcode. Expected CMSG_UPDATE_ACCOUNT_DATA, got {opcode:#?}", opcode = opcode),
        };

        assert_eq!(t, s);
    }

    // Generated from `wow_message_parser/wowm/world/login_logout/cmsg_update_account_data.wowm` line 52.
    #[cfg(feature = "tokio")]
    #[cfg_attr(feature = "tokio", tokio::test)]
    async fn tokio_cmsg_update_account_data1() {
        let expected = expected1();
        let t = ClientOpcodeMessage::tokio_read_unencrypted(&mut std::io::Cursor::new(&RAW1)).await.unwrap();
        let t = match t {
            ClientOpcodeMessage::CMSG_UPDATE_ACCOUNT_DATA(t) => t,
            opcode => panic!("incorrect opcode. Expected CMSG_UPDATE_ACCOUNT_DATA, got {opcode:#?}"),
        };

        assert_eq!(t.as_ref(), &expected);
        let mut dest = Vec::with_capacity(RAW1.len());
        expected.tokio_write_unencrypted_client(&mut std::io::Cursor::new(&mut dest)).await.unwrap();

        let s = ClientOpcodeMessage::tokio_read_unencrypted(&mut std::io::Cursor::new(&dest)).await.unwrap();
        let s = match s {
            ClientOpcodeMessage::CMSG_UPDATE_ACCOUNT_DATA(s) => s,
            opcode => panic!("incorrect opcode. Expected CMSG_UPDATE_ACCOUNT_DATA, got {opcode:#?}", opcode = opcode),
        };

        assert_eq!(t, s);
    }

    // Generated from `wow_message_parser/wowm/world/login_logout/cmsg_update_account_data.wowm` line 52.
    #[cfg(feature = "async-std")]
    #[cfg_attr(feature = "async-std", async_std::test)]
    async fn astd_cmsg_update_account_data1() {
        let expected = expected1();
        let t = ClientOpcodeMessage::astd_read_unencrypted(&mut async_std::io::Cursor::new(&RAW1)).await.unwrap();
        let t = match t {
            ClientOpcodeMessage::CMSG_UPDATE_ACCOUNT_DATA(t) => t,
            opcode => panic!("incorrect opcode. Expected CMSG_UPDATE_ACCOUNT_DATA, got {opcode:#?}"),
        };

        assert_eq!(t.as_ref(), &expected);
        let mut dest = Vec::with_capacity(RAW1.len());
        expected.astd_write_unencrypted_client(&mut async_std::io::Cursor::new(&mut dest)).await.unwrap();

        let s = ClientOpcodeMessage::astd_read_unencrypted(&mut async_std::io::Cursor::new(&dest)).await.unwrap();
        let s = match s {
            ClientOpcodeMessage::CMSG_UPDATE_ACCOUNT_DATA(s) => s,
            opcode => panic!("incorrect opcode. Expected CMSG_UPDATE_ACCOUNT_DATA, got {opcode:#?}", opcode = opcode),
        };

        assert_eq!(t, s);
    }

}

