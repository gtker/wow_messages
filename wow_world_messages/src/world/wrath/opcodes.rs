use crate::wrath::{ServerMessage, ClientMessage};
#[cfg(feature = "encryption")]
use wow_srp::wrath_header::{ClientEncrypterHalf, ClientDecrypterHalf, ServerEncrypterHalf, ServerDecrypterHalf};
use std::io::{Read, Write};

use crate::wrath::MovementInfo;
use crate::errors::ParseErrorKind;
use crate::wrath::opcode_to_name;
use super::*;

#[derive(Debug, Clone, PartialEq)]
pub enum ClientOpcodeMessage {
    MSG_MOVE_START_FORWARD(Box<MSG_MOVE_START_FORWARD>),
    MSG_MOVE_START_BACKWARD(Box<MSG_MOVE_START_BACKWARD>),
    MSG_MOVE_STOP(Box<MSG_MOVE_STOP>),
    MSG_MOVE_START_STRAFE_LEFT(Box<MSG_MOVE_START_STRAFE_LEFT>),
    MSG_MOVE_START_STRAFE_RIGHT(Box<MSG_MOVE_START_STRAFE_RIGHT>),
    MSG_MOVE_STOP_STRAFE(Box<MSG_MOVE_STOP_STRAFE>),
    MSG_MOVE_JUMP(Box<MSG_MOVE_JUMP>),
    MSG_MOVE_START_TURN_LEFT(Box<MSG_MOVE_START_TURN_LEFT>),
    MSG_MOVE_START_TURN_RIGHT(Box<MSG_MOVE_START_TURN_RIGHT>),
    MSG_MOVE_STOP_TURN(Box<MSG_MOVE_STOP_TURN>),
    MSG_MOVE_START_PITCH_UP(Box<MSG_MOVE_START_PITCH_UP>),
    MSG_MOVE_START_PITCH_DOWN(Box<MSG_MOVE_START_PITCH_DOWN>),
    MSG_MOVE_STOP_PITCH(Box<MSG_MOVE_STOP_PITCH>),
    MSG_MOVE_SET_RUN_MODE(Box<MSG_MOVE_SET_RUN_MODE>),
    MSG_MOVE_SET_WALK_MODE(Box<MSG_MOVE_SET_WALK_MODE>),
    MSG_MOVE_FALL_LAND(Box<MSG_MOVE_FALL_LAND>),
    MSG_MOVE_START_SWIM(Box<MSG_MOVE_START_SWIM>),
    MSG_MOVE_STOP_SWIM(Box<MSG_MOVE_STOP_SWIM>),
    MSG_MOVE_SET_FACING(Box<MSG_MOVE_SET_FACING>),
    MSG_MOVE_SET_PITCH(Box<MSG_MOVE_SET_PITCH>),
    MSG_MOVE_WORLDPORT_ACK,
    MSG_MOVE_HEARTBEAT(Box<MSG_MOVE_HEARTBEAT>),
    MSG_MOVE_HOVER(Box<MSG_MOVE_HOVER>),
    MSG_PETITION_DECLINE(MSG_PETITION_DECLINE),
    MSG_TABARDVENDOR_ACTIVATE(MSG_TABARDVENDOR_ACTIVATE),
    MSG_QUEST_PUSH_RESULT(Box<MSG_QUEST_PUSH_RESULT>),
    MSG_MOVE_WATER_WALK(Box<MSG_MOVE_WATER_WALK>),
    MSG_PETITION_RENAME(Box<MSG_PETITION_RENAME>),
    MSG_MOVE_START_ASCEND(Box<MSG_MOVE_START_ASCEND>),
    MSG_MOVE_STOP_ASCEND(Box<MSG_MOVE_STOP_ASCEND>),
    MSG_MOVE_SET_FLIGHT_BACK_SPEED(Box<MSG_MOVE_SET_FLIGHT_BACK_SPEED>),
    MSG_MOVE_START_DESCEND(Box<MSG_MOVE_START_DESCEND>),
    CMSG_CALENDAR_GET_NUM_PENDING,
    CMSG_BOOTME,
    CMSG_DBLOOKUP(Box<CMSG_DBLOOKUP>),
    CMSG_WORLD_TELEPORT(Box<CMSG_WORLD_TELEPORT>),
    CMSG_TELEPORT_TO_UNIT(Box<CMSG_TELEPORT_TO_UNIT>),
    CMSG_CHAR_CREATE(Box<CMSG_CHAR_CREATE>),
    CMSG_CHAR_ENUM,
    CMSG_CHAR_DELETE(CMSG_CHAR_DELETE),
    CMSG_PLAYER_LOGIN(CMSG_PLAYER_LOGIN),
    CMSG_PLAYER_LOGOUT,
    CMSG_LOGOUT_REQUEST,
    CMSG_LOGOUT_CANCEL,
    CMSG_NAME_QUERY(CMSG_NAME_QUERY),
    CMSG_PET_NAME_QUERY(Box<CMSG_PET_NAME_QUERY>),
    CMSG_GUILD_QUERY(CMSG_GUILD_QUERY),
    CMSG_ITEM_QUERY_SINGLE(CMSG_ITEM_QUERY_SINGLE),
    CMSG_PAGE_TEXT_QUERY(Box<CMSG_PAGE_TEXT_QUERY>),
    CMSG_QUEST_QUERY(CMSG_QUEST_QUERY),
    CMSG_GAMEOBJECT_QUERY(Box<CMSG_GAMEOBJECT_QUERY>),
    CMSG_CREATURE_QUERY(Box<CMSG_CREATURE_QUERY>),
    CMSG_WHO(Box<CMSG_WHO>),
    CMSG_WHOIS(Box<CMSG_WHOIS>),
    CMSG_CONTACT_LIST(CMSG_CONTACT_LIST),
    CMSG_ADD_FRIEND(Box<CMSG_ADD_FRIEND>),
    CMSG_DEL_FRIEND(CMSG_DEL_FRIEND),
    CMSG_SET_CONTACT_NOTES(Box<CMSG_SET_CONTACT_NOTES>),
    CMSG_ADD_IGNORE(Box<CMSG_ADD_IGNORE>),
    CMSG_DEL_IGNORE(CMSG_DEL_IGNORE),
    CMSG_GROUP_INVITE(Box<CMSG_GROUP_INVITE>),
    CMSG_GROUP_CANCEL,
    CMSG_GROUP_ACCEPT,
    CMSG_GROUP_DECLINE,
    CMSG_GROUP_UNINVITE(Box<CMSG_GROUP_UNINVITE>),
    CMSG_GROUP_UNINVITE_GUID(Box<CMSG_GROUP_UNINVITE_GUID>),
    CMSG_GROUP_SET_LEADER(CMSG_GROUP_SET_LEADER),
    CMSG_LOOT_METHOD(Box<CMSG_LOOT_METHOD>),
    CMSG_GROUP_DISBAND,
    CMSG_GUILD_CREATE(Box<CMSG_GUILD_CREATE>),
    CMSG_GUILD_INVITE(Box<CMSG_GUILD_INVITE>),
    CMSG_GUILD_ACCEPT,
    CMSG_GUILD_DECLINE,
    CMSG_GUILD_INFO,
    CMSG_GUILD_ROSTER,
    CMSG_GUILD_PROMOTE(Box<CMSG_GUILD_PROMOTE>),
    CMSG_GUILD_DEMOTE(Box<CMSG_GUILD_DEMOTE>),
    CMSG_GUILD_LEAVE,
    CMSG_GUILD_REMOVE(Box<CMSG_GUILD_REMOVE>),
    CMSG_GUILD_DISBAND,
    CMSG_GUILD_LEADER(Box<CMSG_GUILD_LEADER>),
    CMSG_GUILD_MOTD(Box<CMSG_GUILD_MOTD>),
    CMSG_MESSAGECHAT(Box<CMSG_MESSAGECHAT>),
    CMSG_JOIN_CHANNEL(Box<CMSG_JOIN_CHANNEL>),
    CMSG_LEAVE_CHANNEL(Box<CMSG_LEAVE_CHANNEL>),
    CMSG_CHANNEL_LIST(Box<CMSG_CHANNEL_LIST>),
    CMSG_CHANNEL_PASSWORD(Box<CMSG_CHANNEL_PASSWORD>),
    CMSG_CHANNEL_SET_OWNER(Box<CMSG_CHANNEL_SET_OWNER>),
    CMSG_CHANNEL_OWNER(Box<CMSG_CHANNEL_OWNER>),
    CMSG_CHANNEL_MODERATOR(Box<CMSG_CHANNEL_MODERATOR>),
    CMSG_CHANNEL_UNMODERATOR(Box<CMSG_CHANNEL_UNMODERATOR>),
    CMSG_CHANNEL_MUTE(Box<CMSG_CHANNEL_MUTE>),
    CMSG_CHANNEL_UNMUTE(Box<CMSG_CHANNEL_UNMUTE>),
    CMSG_CHANNEL_INVITE(Box<CMSG_CHANNEL_INVITE>),
    CMSG_CHANNEL_KICK(Box<CMSG_CHANNEL_KICK>),
    CMSG_CHANNEL_BAN(Box<CMSG_CHANNEL_BAN>),
    CMSG_CHANNEL_UNBAN(Box<CMSG_CHANNEL_UNBAN>),
    CMSG_CHANNEL_ANNOUNCEMENTS(Box<CMSG_CHANNEL_ANNOUNCEMENTS>),
    CMSG_CHANNEL_MODERATE(Box<CMSG_CHANNEL_MODERATE>),
    CMSG_USE_ITEM(Box<CMSG_USE_ITEM>),
    CMSG_OPEN_ITEM(CMSG_OPEN_ITEM),
    CMSG_READ_ITEM(CMSG_READ_ITEM),
    CMSG_GAMEOBJ_USE(CMSG_GAMEOBJ_USE),
    CMSG_AREATRIGGER(CMSG_AREATRIGGER),
    MSG_MOVE_TELEPORT(Box<MSG_MOVE_TELEPORT_Server>),
    MSG_MOVE_TELEPORT_ACK(Box<MSG_MOVE_TELEPORT_ACK_Client>),
    CMSG_MOVE_SET_RAW_POSITION(Box<CMSG_MOVE_SET_RAW_POSITION>),
    CMSG_FORCE_RUN_SPEED_CHANGE_ACK(Box<CMSG_FORCE_RUN_SPEED_CHANGE_ACK>),
    CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACK(Box<CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACK>),
    CMSG_FORCE_SWIM_SPEED_CHANGE_ACK(Box<CMSG_FORCE_SWIM_SPEED_CHANGE_ACK>),
    CMSG_FORCE_MOVE_ROOT_ACK(Box<CMSG_FORCE_MOVE_ROOT_ACK>),
    CMSG_FORCE_MOVE_UNROOT_ACK(Box<CMSG_FORCE_MOVE_UNROOT_ACK>),
    CMSG_MOVE_KNOCK_BACK_ACK(Box<CMSG_MOVE_KNOCK_BACK_ACK>),
    CMSG_MOVE_HOVER_ACK(Box<CMSG_MOVE_HOVER_ACK>),
    CMSG_NEXT_CINEMATIC_CAMERA,
    CMSG_COMPLETE_CINEMATIC,
    CMSG_TUTORIAL_FLAG(CMSG_TUTORIAL_FLAG),
    CMSG_TUTORIAL_CLEAR,
    CMSG_TUTORIAL_RESET,
    CMSG_STANDSTATECHANGE(CMSG_STANDSTATECHANGE),
    CMSG_EMOTE(CMSG_EMOTE),
    CMSG_TEXT_EMOTE(Box<CMSG_TEXT_EMOTE>),
    CMSG_AUTOSTORE_LOOT_ITEM(CMSG_AUTOSTORE_LOOT_ITEM),
    CMSG_AUTOEQUIP_ITEM(CMSG_AUTOEQUIP_ITEM),
    CMSG_AUTOSTORE_BAG_ITEM(CMSG_AUTOSTORE_BAG_ITEM),
    CMSG_SWAP_ITEM(CMSG_SWAP_ITEM),
    CMSG_SWAP_INV_ITEM(CMSG_SWAP_INV_ITEM),
    CMSG_SPLIT_ITEM(CMSG_SPLIT_ITEM),
    CMSG_AUTOEQUIP_ITEM_SLOT(Box<CMSG_AUTOEQUIP_ITEM_SLOT>),
    CMSG_DESTROYITEM(CMSG_DESTROYITEM),
    CMSG_INSPECT(CMSG_INSPECT),
    CMSG_INITIATE_TRADE(CMSG_INITIATE_TRADE),
    CMSG_BEGIN_TRADE,
    CMSG_BUSY_TRADE,
    CMSG_IGNORE_TRADE,
    CMSG_ACCEPT_TRADE(CMSG_ACCEPT_TRADE),
    CMSG_UNACCEPT_TRADE,
    CMSG_CANCEL_TRADE,
    CMSG_SET_TRADE_ITEM(CMSG_SET_TRADE_ITEM),
    CMSG_CLEAR_TRADE_ITEM(CMSG_CLEAR_TRADE_ITEM),
    CMSG_SET_TRADE_GOLD(CMSG_SET_TRADE_GOLD),
    CMSG_SET_FACTION_ATWAR(CMSG_SET_FACTION_ATWAR),
    CMSG_SET_ACTION_BUTTON(CMSG_SET_ACTION_BUTTON),
    CMSG_CAST_SPELL(Box<CMSG_CAST_SPELL>),
    CMSG_CANCEL_CAST(CMSG_CANCEL_CAST),
    CMSG_CANCEL_AURA(CMSG_CANCEL_AURA),
    CMSG_CANCEL_CHANNELLING(CMSG_CANCEL_CHANNELLING),
    CMSG_SET_SELECTION(CMSG_SET_SELECTION),
    CMSG_DELETEEQUIPMENT_SET(CMSG_DELETEEQUIPMENT_SET),
    CMSG_INSTANCE_LOCK_RESPONSE(CMSG_INSTANCE_LOCK_RESPONSE),
    CMSG_ATTACKSWING(CMSG_ATTACKSWING),
    CMSG_ATTACKSTOP,
    CMSG_REPOP_REQUEST,
    CMSG_RESURRECT_RESPONSE(Box<CMSG_RESURRECT_RESPONSE>),
    CMSG_LOOT(CMSG_LOOT),
    CMSG_LOOT_MONEY,
    CMSG_LOOT_RELEASE(CMSG_LOOT_RELEASE),
    CMSG_DUEL_ACCEPTED(CMSG_DUEL_ACCEPTED),
    CMSG_DUEL_CANCELLED(CMSG_DUEL_CANCELLED),
    CMSG_MOUNTSPECIAL_ANIM,
    CMSG_PET_SET_ACTION(Box<CMSG_PET_SET_ACTION>),
    CMSG_PET_ACTION(Box<CMSG_PET_ACTION>),
    CMSG_PET_ABANDON(CMSG_PET_ABANDON),
    CMSG_PET_RENAME(Box<CMSG_PET_RENAME>),
    CMSG_GOSSIP_HELLO(CMSG_GOSSIP_HELLO),
    CMSG_GOSSIP_SELECT_OPTION(Box<CMSG_GOSSIP_SELECT_OPTION>),
    CMSG_NPC_TEXT_QUERY(Box<CMSG_NPC_TEXT_QUERY>),
    CMSG_QUESTGIVER_STATUS_QUERY(CMSG_QUESTGIVER_STATUS_QUERY),
    CMSG_QUESTGIVER_HELLO(CMSG_QUESTGIVER_HELLO),
    CMSG_QUESTGIVER_QUERY_QUEST(Box<CMSG_QUESTGIVER_QUERY_QUEST>),
    CMSG_QUESTGIVER_QUEST_AUTOLAUNCH,
    CMSG_QUESTGIVER_ACCEPT_QUEST(Box<CMSG_QUESTGIVER_ACCEPT_QUEST>),
    CMSG_QUESTGIVER_COMPLETE_QUEST(Box<CMSG_QUESTGIVER_COMPLETE_QUEST>),
    CMSG_QUESTGIVER_REQUEST_REWARD(Box<CMSG_QUESTGIVER_REQUEST_REWARD>),
    CMSG_QUESTGIVER_CHOOSE_REWARD(Box<CMSG_QUESTGIVER_CHOOSE_REWARD>),
    CMSG_QUESTGIVER_CANCEL,
    CMSG_QUESTLOG_SWAP_QUEST(CMSG_QUESTLOG_SWAP_QUEST),
    CMSG_QUESTLOG_REMOVE_QUEST(CMSG_QUESTLOG_REMOVE_QUEST),
    CMSG_QUEST_CONFIRM_ACCEPT(CMSG_QUEST_CONFIRM_ACCEPT),
    CMSG_PUSHQUESTTOPARTY(CMSG_PUSHQUESTTOPARTY),
    CMSG_LIST_INVENTORY(CMSG_LIST_INVENTORY),
    CMSG_SELL_ITEM(Box<CMSG_SELL_ITEM>),
    CMSG_BUY_ITEM(Box<CMSG_BUY_ITEM>),
    CMSG_BUY_ITEM_IN_SLOT(Box<CMSG_BUY_ITEM_IN_SLOT>),
    CMSG_TAXINODE_STATUS_QUERY(CMSG_TAXINODE_STATUS_QUERY),
    CMSG_TAXIQUERYAVAILABLENODES(CMSG_TAXIQUERYAVAILABLENODES),
    CMSG_ACTIVATETAXI(Box<CMSG_ACTIVATETAXI>),
    CMSG_TRAINER_LIST(CMSG_TRAINER_LIST),
    CMSG_TRAINER_BUY_SPELL(Box<CMSG_TRAINER_BUY_SPELL>),
    CMSG_BINDER_ACTIVATE(CMSG_BINDER_ACTIVATE),
    CMSG_BANKER_ACTIVATE(CMSG_BANKER_ACTIVATE),
    CMSG_BUY_BANK_SLOT(CMSG_BUY_BANK_SLOT),
    CMSG_PETITION_SHOWLIST(CMSG_PETITION_SHOWLIST),
    CMSG_PETITION_BUY(Box<CMSG_PETITION_BUY>),
    CMSG_PETITION_SHOW_SIGNATURES(CMSG_PETITION_SHOW_SIGNATURES),
    CMSG_PETITION_SIGN(Box<CMSG_PETITION_SIGN>),
    CMSG_OFFER_PETITION(Box<CMSG_OFFER_PETITION>),
    CMSG_TURN_IN_PETITION(CMSG_TURN_IN_PETITION),
    CMSG_PETITION_QUERY(Box<CMSG_PETITION_QUERY>),
    CMSG_BUG(Box<CMSG_BUG>),
    CMSG_PLAYED_TIME(CMSG_PLAYED_TIME),
    CMSG_QUERY_TIME,
    CMSG_RECLAIM_CORPSE(CMSG_RECLAIM_CORPSE),
    CMSG_WRAP_ITEM(CMSG_WRAP_ITEM),
    MSG_MINIMAP_PING(MSG_MINIMAP_PING_Client),
    CMSG_PING(CMSG_PING),
    CMSG_SETSHEATHED(CMSG_SETSHEATHED),
    CMSG_QUEST_POI_QUERY(Box<CMSG_QUEST_POI_QUERY>),
    CMSG_AUTH_SESSION(Box<CMSG_AUTH_SESSION>),
    CMSG_PET_CAST_SPELL(Box<CMSG_PET_CAST_SPELL>),
    MSG_SAVE_GUILD_EMBLEM(Box<MSG_SAVE_GUILD_EMBLEM_Client>),
    CMSG_ZONEUPDATE(CMSG_ZONEUPDATE),
    MSG_RANDOM_ROLL(MSG_RANDOM_ROLL_Client),
    CMSG_UNLEARN_SKILL(CMSG_UNLEARN_SKILL),
    CMSG_GMTICKET_CREATE(Box<CMSG_GMTICKET_CREATE>),
    CMSG_GMTICKET_UPDATETEXT(Box<CMSG_GMTICKET_UPDATETEXT>),
    CMSG_REQUEST_ACCOUNT_DATA(CMSG_REQUEST_ACCOUNT_DATA),
    CMSG_UPDATE_ACCOUNT_DATA(Box<CMSG_UPDATE_ACCOUNT_DATA>),
    CMSG_GMTICKET_GETTICKET,
    CMSG_UNLEARN_TALENTS,
    MSG_CORPSE_QUERY,
    CMSG_GMTICKET_DELETETICKET,
    CMSG_GMTICKET_SYSTEMSTATUS,
    CMSG_SPIRIT_HEALER_ACTIVATE(CMSG_SPIRIT_HEALER_ACTIVATE),
    CMSG_CHAT_IGNORED(Box<CMSG_CHAT_IGNORED>),
    CMSG_GUILD_RANK(Box<CMSG_GUILD_RANK>),
    CMSG_GUILD_ADD_RANK(Box<CMSG_GUILD_ADD_RANK>),
    CMSG_GUILD_DEL_RANK,
    CMSG_GUILD_SET_PUBLIC_NOTE(Box<CMSG_GUILD_SET_PUBLIC_NOTE>),
    CMSG_GUILD_SET_OFFICER_NOTE(Box<CMSG_GUILD_SET_OFFICER_NOTE>),
    CMSG_SEND_MAIL(Box<CMSG_SEND_MAIL>),
    CMSG_GET_MAIL_LIST(CMSG_GET_MAIL_LIST),
    CMSG_BATTLEFIELD_LIST(CMSG_BATTLEFIELD_LIST),
    CMSG_ITEM_TEXT_QUERY(CMSG_ITEM_TEXT_QUERY),
    CMSG_MAIL_TAKE_MONEY(Box<CMSG_MAIL_TAKE_MONEY>),
    CMSG_MAIL_TAKE_ITEM(Box<CMSG_MAIL_TAKE_ITEM>),
    CMSG_MAIL_MARK_AS_READ(Box<CMSG_MAIL_MARK_AS_READ>),
    CMSG_MAIL_RETURN_TO_SENDER(Box<CMSG_MAIL_RETURN_TO_SENDER>),
    CMSG_MAIL_DELETE(Box<CMSG_MAIL_DELETE>),
    CMSG_MAIL_CREATE_TEXT_ITEM(Box<CMSG_MAIL_CREATE_TEXT_ITEM>),
    CMSG_LEARN_TALENT(CMSG_LEARN_TALENT),
    CMSG_TOGGLE_PVP(CMSG_TOGGLE_PVP),
    MSG_AUCTION_HELLO(MSG_AUCTION_HELLO_Client),
    CMSG_AUCTION_SELL_ITEM(Box<CMSG_AUCTION_SELL_ITEM>),
    CMSG_AUCTION_REMOVE_ITEM(Box<CMSG_AUCTION_REMOVE_ITEM>),
    CMSG_AUCTION_LIST_ITEMS(Box<CMSG_AUCTION_LIST_ITEMS>),
    CMSG_AUCTION_LIST_OWNER_ITEMS(Box<CMSG_AUCTION_LIST_OWNER_ITEMS>),
    CMSG_AUCTION_PLACE_BID(Box<CMSG_AUCTION_PLACE_BID>),
    CMSG_AUCTION_LIST_BIDDER_ITEMS(Box<CMSG_AUCTION_LIST_BIDDER_ITEMS>),
    CMSG_SET_AMMO(CMSG_SET_AMMO),
    CMSG_SET_ACTIVE_MOVER(CMSG_SET_ACTIVE_MOVER),
    CMSG_PET_CANCEL_AURA(Box<CMSG_PET_CANCEL_AURA>),
    CMSG_CANCEL_AUTO_REPEAT_SPELL,
    MSG_LIST_STABLED_PETS(MSG_LIST_STABLED_PETS_Client),
    CMSG_STABLE_PET(CMSG_STABLE_PET),
    CMSG_UNSTABLE_PET(Box<CMSG_UNSTABLE_PET>),
    CMSG_BUY_STABLE_SLOT(CMSG_BUY_STABLE_SLOT),
    CMSG_STABLE_SWAP_PET(Box<CMSG_STABLE_SWAP_PET>),
    CMSG_REQUEST_PET_INFO,
    CMSG_FAR_SIGHT(CMSG_FAR_SIGHT),
    CMSG_GROUP_CHANGE_SUB_GROUP(Box<CMSG_GROUP_CHANGE_SUB_GROUP>),
    CMSG_REQUEST_PARTY_MEMBER_STATS(CMSG_REQUEST_PARTY_MEMBER_STATS),
    CMSG_GROUP_SWAP_SUB_GROUP(Box<CMSG_GROUP_SWAP_SUB_GROUP>),
    CMSG_AUTOSTORE_BANK_ITEM(CMSG_AUTOSTORE_BANK_ITEM),
    CMSG_AUTOBANK_ITEM(CMSG_AUTOBANK_ITEM),
    MSG_QUERY_NEXT_MAIL_TIME,
    CMSG_GROUP_RAID_CONVERT,
    CMSG_GROUP_ASSISTANT_LEADER(Box<CMSG_GROUP_ASSISTANT_LEADER>),
    CMSG_BUYBACK_ITEM(Box<CMSG_BUYBACK_ITEM>),
    CMSG_SET_SAVED_INSTANCE_EXTEND(CMSG_SET_SAVED_INSTANCE_EXTEND),
    CMSG_LFG_GET_STATUS,
    CMSG_GMTICKETSYSTEM_TOGGLE,
    CMSG_CANCEL_GROWTH_AURA,
    CMSG_LOOT_ROLL(Box<CMSG_LOOT_ROLL>),
    CMSG_LOOT_MASTER_GIVE(Box<CMSG_LOOT_MASTER_GIVE>),
    CMSG_REPAIR_ITEM(Box<CMSG_REPAIR_ITEM>),
    MSG_TALENT_WIPE_CONFIRM(MSG_TALENT_WIPE_CONFIRM_Client),
    CMSG_SUMMON_RESPONSE(Box<CMSG_SUMMON_RESPONSE>),
    CMSG_SELF_RES,
    CMSG_TOGGLE_HELM,
    CMSG_TOGGLE_CLOAK,
    CMSG_SET_ACTIONBAR_TOGGLES(CMSG_SET_ACTIONBAR_TOGGLES),
    CMSG_ITEM_NAME_QUERY(Box<CMSG_ITEM_NAME_QUERY>),
    CMSG_CHAR_RENAME(Box<CMSG_CHAR_RENAME>),
    CMSG_MOVE_SPLINE_DONE(Box<CMSG_MOVE_SPLINE_DONE>),
    CMSG_MOVE_FALL_RESET(Box<CMSG_MOVE_FALL_RESET>),
    CMSG_REQUEST_RAID_INFO,
    CMSG_MOVE_TIME_SKIPPED(Box<CMSG_MOVE_TIME_SKIPPED>),
    CMSG_MOVE_FEATHER_FALL_ACK(Box<CMSG_MOVE_FEATHER_FALL_ACK>),
    CMSG_MOVE_WATER_WALK_ACK(Box<CMSG_MOVE_WATER_WALK_ACK>),
    CMSG_MOVE_NOT_ACTIVE_MOVER(Box<CMSG_MOVE_NOT_ACTIVE_MOVER>),
    CMSG_BATTLEFIELD_STATUS,
    CMSG_BATTLEFIELD_PORT(Box<CMSG_BATTLEFIELD_PORT>),
    MSG_INSPECT_HONOR_STATS(MSG_INSPECT_HONOR_STATS_Client),
    CMSG_BATTLEMASTER_HELLO(CMSG_BATTLEMASTER_HELLO),
    CMSG_FORCE_WALK_SPEED_CHANGE_ACK(Box<CMSG_FORCE_WALK_SPEED_CHANGE_ACK>),
    CMSG_FORCE_SWIM_BACK_SPEED_CHANGE_ACK(Box<CMSG_FORCE_SWIM_BACK_SPEED_CHANGE_ACK>),
    CMSG_FORCE_TURN_RATE_CHANGE_ACK(Box<CMSG_FORCE_TURN_RATE_CHANGE_ACK>),
    MSG_PVP_LOG_DATA,
    CMSG_LEAVE_BATTLEFIELD(CMSG_LEAVE_BATTLEFIELD),
    CMSG_AREA_SPIRIT_HEALER_QUERY(CMSG_AREA_SPIRIT_HEALER_QUERY),
    CMSG_AREA_SPIRIT_HEALER_QUEUE(CMSG_AREA_SPIRIT_HEALER_QUEUE),
    CMSG_WARDEN_DATA(Box<CMSG_WARDEN_DATA>),
    MSG_BATTLEGROUND_PLAYER_POSITIONS,
    CMSG_PET_STOP_ATTACK(CMSG_PET_STOP_ATTACK),
    CMSG_BATTLEMASTER_JOIN(Box<CMSG_BATTLEMASTER_JOIN>),
    CMSG_PET_UNLEARN(CMSG_PET_UNLEARN),
    CMSG_PET_SPELL_AUTOCAST(Box<CMSG_PET_SPELL_AUTOCAST>),
    CMSG_GUILD_INFO_TEXT(Box<CMSG_GUILD_INFO_TEXT>),
    CMSG_ACTIVATETAXIEXPRESS(Box<CMSG_ACTIVATETAXIEXPRESS>),
    CMSG_SET_FACTION_INACTIVE(CMSG_SET_FACTION_INACTIVE),
    CMSG_SET_WATCHED_FACTION(CMSG_SET_WATCHED_FACTION),
    CMSG_RESET_INSTANCES,
    MSG_RAID_TARGET_UPDATE(Box<MSG_RAID_TARGET_UPDATE_Client>),
    MSG_RAID_READY_CHECK(MSG_RAID_READY_CHECK_Client),
    MSG_SET_DUNGEON_DIFFICULTY(MSG_SET_DUNGEON_DIFFICULTY_Client),
    CMSG_GMSURVEY_SUBMIT(Box<CMSG_GMSURVEY_SUBMIT>),
    CMSG_MOVE_SET_CAN_TRANSITION_BETWEEN_SWIM_AND_FLY_ACK(Box<CMSG_MOVE_SET_CAN_TRANSITION_BETWEEN_SWIM_AND_FLY_ACK>),
    CMSG_MOVE_SET_CAN_FLY_ACK(Box<CMSG_MOVE_SET_CAN_FLY_ACK>),
    CMSG_MOVE_SET_FLY(Box<CMSG_MOVE_SET_FLY>),
    CMSG_SOCKET_GEMS(Box<CMSG_SOCKET_GEMS>),
    CMSG_ARENA_TEAM_ROSTER(CMSG_ARENA_TEAM_ROSTER),
    CMSG_ARENA_TEAM_INVITE(Box<CMSG_ARENA_TEAM_INVITE>),
    CMSG_ARENA_TEAM_ACCEPT,
    CMSG_ARENA_TEAM_DECLINE,
    CMSG_ARENA_TEAM_LEAVE(CMSG_ARENA_TEAM_LEAVE),
    CMSG_ARENA_TEAM_REMOVE(Box<CMSG_ARENA_TEAM_REMOVE>),
    CMSG_ARENA_TEAM_DISBAND(CMSG_ARENA_TEAM_DISBAND),
    CMSG_ARENA_TEAM_LEADER(Box<CMSG_ARENA_TEAM_LEADER>),
    CMSG_BATTLEMASTER_JOIN_ARENA(Box<CMSG_BATTLEMASTER_JOIN_ARENA>),
    CMSG_LFG_JOIN(Box<CMSG_LFG_JOIN>),
    CMSG_LFG_LEAVE,
    CMSG_SEARCH_LFG_JOIN(CMSG_SEARCH_LFG_JOIN),
    CMSG_SEARCH_LFG_LEAVE(CMSG_SEARCH_LFG_LEAVE),
    CMSG_LFG_PROPOSAL_RESULT(CMSG_LFG_PROPOSAL_RESULT),
    CMSG_SET_LFG_COMMENT(Box<CMSG_SET_LFG_COMMENT>),
    CMSG_LFG_SET_ROLES(CMSG_LFG_SET_ROLES),
    CMSG_LFG_SET_BOOT_VOTE(CMSG_LFG_SET_BOOT_VOTE),
    CMSG_LFD_PLAYER_LOCK_INFO_REQUEST,
    CMSG_LFG_TELEPORT(CMSG_LFG_TELEPORT),
    CMSG_LFD_PARTY_LOCK_INFO_REQUEST,
    CMSG_SET_TITLE(CMSG_SET_TITLE),
    CMSG_CANCEL_MOUNT_AURA,
    MSG_INSPECT_ARENA_TEAMS(MSG_INSPECT_ARENA_TEAMS_Client),
    CMSG_CANCEL_TEMP_ENCHANTMENT(CMSG_CANCEL_TEMP_ENCHANTMENT),
    CMSG_FORCE_FLIGHT_SPEED_CHANGE_ACK(Box<CMSG_FORCE_FLIGHT_SPEED_CHANGE_ACK>),
    CMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE_ACK(Box<CMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE_ACK>),
    CMSG_SET_TAXI_BENCHMARK_MODE(CMSG_SET_TAXI_BENCHMARK_MODE),
    CMSG_REALM_SPLIT(CMSG_REALM_SPLIT),
    CMSG_MOVE_CHNG_TRANSPORT(Box<CMSG_MOVE_CHNG_TRANSPORT>),
    MSG_PARTY_ASSIGNMENT(Box<MSG_PARTY_ASSIGNMENT_Client>),
    CMSG_TIME_SYNC_RESP(CMSG_TIME_SYNC_RESP),
    MSG_RAID_READY_CHECK_CONFIRM(MSG_RAID_READY_CHECK_CONFIRM_Client),
    CMSG_VOICE_SESSION_ENABLE(CMSG_VOICE_SESSION_ENABLE),
    CMSG_COMMENTATOR_ENABLE(CMSG_COMMENTATOR_ENABLE),
    MSG_RAID_READY_CHECK_FINISHED,
    CMSG_COMPLAIN(Box<CMSG_COMPLAIN>),
    CMSG_CHANNEL_DISPLAY_LIST(Box<CMSG_CHANNEL_DISPLAY_LIST>),
    CMSG_SET_ACTIVE_VOICE_CHANNEL(Box<CMSG_SET_ACTIVE_VOICE_CHANNEL>),
    CMSG_GET_CHANNEL_MEMBER_COUNT(Box<CMSG_GET_CHANNEL_MEMBER_COUNT>),
    CMSG_CHANNEL_VOICE_ON,
    CMSG_REPORT_PVP_AFK(CMSG_REPORT_PVP_AFK),
    CMSG_GUILD_BANKER_ACTIVATE(Box<CMSG_GUILD_BANKER_ACTIVATE>),
    CMSG_GUILD_BANK_QUERY_TAB(Box<CMSG_GUILD_BANK_QUERY_TAB>),
    CMSG_GUILD_BANK_SWAP_ITEMS(Box<CMSG_GUILD_BANK_SWAP_ITEMS>),
    CMSG_GUILD_BANK_BUY_TAB(Box<CMSG_GUILD_BANK_BUY_TAB>),
    CMSG_GUILD_BANK_UPDATE_TAB(Box<CMSG_GUILD_BANK_UPDATE_TAB>),
    CMSG_GUILD_BANK_DEPOSIT_MONEY(Box<CMSG_GUILD_BANK_DEPOSIT_MONEY>),
    CMSG_GUILD_BANK_WITHDRAW_MONEY(Box<CMSG_GUILD_BANK_WITHDRAW_MONEY>),
    MSG_GUILD_BANK_LOG_QUERY(MSG_GUILD_BANK_LOG_QUERY_Client),
    CMSG_SET_CHANNEL_WATCH(Box<CMSG_SET_CHANNEL_WATCH>),
    CMSG_CLEAR_CHANNEL_WATCH(Box<CMSG_CLEAR_CHANNEL_WATCH>),
    CMSG_SPELLCLICK(CMSG_SPELLCLICK),
    MSG_GUILD_PERMISSIONS,
    MSG_GUILD_BANK_MONEY_WITHDRAWN,
    MSG_GUILD_EVENT_LOG_QUERY,
    CMSG_GET_MIRRORIMAGE_DATA(CMSG_GET_MIRRORIMAGE_DATA),
    CMSG_KEEP_ALIVE,
    CMSG_OPT_OUT_OF_LOOT(CMSG_OPT_OUT_OF_LOOT),
    MSG_QUERY_GUILD_BANK_TEXT(MSG_QUERY_GUILD_BANK_TEXT_Client),
    CMSG_SET_GUILD_BANK_TEXT(Box<CMSG_SET_GUILD_BANK_TEXT>),
    CMSG_GRANT_LEVEL(CMSG_GRANT_LEVEL),
    CMSG_TOTEM_DESTROYED(CMSG_TOTEM_DESTROYED),
    CMSG_QUESTGIVER_STATUS_MULTIPLE_QUERY,
    CMSG_SET_PLAYER_DECLINED_NAMES(Box<CMSG_SET_PLAYER_DECLINED_NAMES>),
    CMSG_ACCEPT_LEVEL_GRANT(CMSG_ACCEPT_LEVEL_GRANT),
    CMSG_ALTER_APPEARANCE(Box<CMSG_ALTER_APPEARANCE>),
    CMSG_CALENDAR_GET_CALENDAR,
    CMSG_CALENDAR_GET_EVENT(CMSG_CALENDAR_GET_EVENT),
    CMSG_CALENDAR_GUILD_FILTER(Box<CMSG_CALENDAR_GUILD_FILTER>),
    CMSG_CALENDAR_ARENA_TEAM(CMSG_CALENDAR_ARENA_TEAM),
    CMSG_CALENDAR_ADD_EVENT(Box<CMSG_CALENDAR_ADD_EVENT>),
    CMSG_CALENDAR_UPDATE_EVENT(Box<CMSG_CALENDAR_UPDATE_EVENT>),
    CMSG_CALENDAR_REMOVE_EVENT(Box<CMSG_CALENDAR_REMOVE_EVENT>),
    CMSG_CALENDAR_COPY_EVENT(Box<CMSG_CALENDAR_COPY_EVENT>),
    CMSG_CALENDAR_EVENT_INVITE(Box<CMSG_CALENDAR_EVENT_INVITE>),
    CMSG_CALENDAR_EVENT_RSVP(Box<CMSG_CALENDAR_EVENT_RSVP>),
    CMSG_CALENDAR_EVENT_REMOVE_INVITE(Box<CMSG_CALENDAR_EVENT_REMOVE_INVITE>),
    CMSG_CALENDAR_EVENT_STATUS(Box<CMSG_CALENDAR_EVENT_STATUS>),
    CMSG_CALENDAR_EVENT_MODERATOR_STATUS(Box<CMSG_CALENDAR_EVENT_MODERATOR_STATUS>),
    CMSG_CALENDAR_COMPLAIN(Box<CMSG_CALENDAR_COMPLAIN>),
    CMSG_UPDATE_MISSILE_TRAJECTORY(Box<CMSG_UPDATE_MISSILE_TRAJECTORY>),
    CMSG_COMPLETE_MOVIE,
    CMSG_QUERY_INSPECT_ACHIEVEMENTS(CMSG_QUERY_INSPECT_ACHIEVEMENTS),
    CMSG_DISMISS_CONTROLLED_VEHICLE,
    CMSG_CHAR_CUSTOMIZE(Box<CMSG_CHAR_CUSTOMIZE>),
    CMSG_REQUEST_VEHICLE_EXIT,
    CMSG_REQUEST_VEHICLE_PREV_SEAT,
    CMSG_REQUEST_VEHICLE_NEXT_SEAT,
    CMSG_REQUEST_VEHICLE_SWITCH_SEAT(Box<CMSG_REQUEST_VEHICLE_SWITCH_SEAT>),
    CMSG_PET_LEARN_TALENT(Box<CMSG_PET_LEARN_TALENT>),
    CMSG_GAMEOBJ_REPORT_USE(CMSG_GAMEOBJ_REPORT_USE),
    CMSG_REMOVE_GLYPH(CMSG_REMOVE_GLYPH),
    CMSG_DISMISS_CRITTER(CMSG_DISMISS_CRITTER),
    CMSG_AUCTION_LIST_PENDING_SALES(CMSG_AUCTION_LIST_PENDING_SALES),
    CMSG_ENABLETAXI(CMSG_ENABLETAXI),
    CMSG_CHANGE_SEATS_ON_CONTROLLED_VEHICLE(Box<CMSG_CHANGE_SEATS_ON_CONTROLLED_VEHICLE>),
    CMSG_HEARTH_AND_RESURRECT,
    CMSG_PLAYER_VEHICLE_ENTER(CMSG_PLAYER_VEHICLE_ENTER),
    CMSG_CONTROLLER_EJECT_PASSENGER(CMSG_CONTROLLER_EJECT_PASSENGER),
    CMSG_ITEM_REFUND_INFO(CMSG_ITEM_REFUND_INFO),
    CMSG_ITEM_REFUND(CMSG_ITEM_REFUND),
    CMSG_CORPSE_MAP_POSITION_QUERY(CMSG_CORPSE_MAP_POSITION_QUERY),
    CMSG_CALENDAR_EVENT_SIGNUP(Box<CMSG_CALENDAR_EVENT_SIGNUP>),
    CMSG_EQUIPMENT_SET_SAVE(Box<CMSG_EQUIPMENT_SET_SAVE>),
    CMSG_UPDATE_PROJECTILE_POSITION(Box<CMSG_UPDATE_PROJECTILE_POSITION>),
    CMSG_LEARN_PREVIEW_TALENTS(Box<CMSG_LEARN_PREVIEW_TALENTS>),
    CMSG_LEARN_PREVIEW_TALENTS_PET(Box<CMSG_LEARN_PREVIEW_TALENTS_PET>),
    CMSG_MOVE_GRAVITY_DISABLE_ACK(Box<CMSG_MOVE_GRAVITY_DISABLE_ACK>),
    CMSG_MOVE_GRAVITY_ENABLE_ACK(Box<CMSG_MOVE_GRAVITY_ENABLE_ACK>),
    CMSG_EQUIPMENT_SET_USE(Box<CMSG_EQUIPMENT_SET_USE>),
    CMSG_CHAR_FACTION_CHANGE(Box<CMSG_CHAR_FACTION_CHANGE>),
    CMSG_BATTLEFIELD_MGR_ENTRY_INVITE_RESPONSE(CMSG_BATTLEFIELD_MGR_ENTRY_INVITE_RESPONSE),
    CMSG_BATTLEFIELD_MGR_QUEUE_INVITE_RESPONSE(CMSG_BATTLEFIELD_MGR_QUEUE_INVITE_RESPONSE),
    CMSG_BATTLEFIELD_MGR_EXIT_REQUEST(CMSG_BATTLEFIELD_MGR_EXIT_REQUEST),
    MSG_SET_RAID_DIFFICULTY(MSG_SET_RAID_DIFFICULTY_Client),
    CMSG_GMRESPONSE_RESOLVE,
    CMSG_WORLD_STATE_UI_TIMER_UPDATE,
    CMSG_CHAR_RACE_CHANGE(Box<CMSG_CHAR_RACE_CHANGE>),
    CMSG_READY_FOR_ACCOUNT_DATA_TIMES,
    CMSG_QUERY_QUESTS_COMPLETED,
    CMSG_GM_REPORT_LAG(Box<CMSG_GM_REPORT_LAG>),
    CMSG_MOVE_SET_COLLISION_HGT_ACK(Box<CMSG_MOVE_SET_COLLISION_HGT_ACK>),
}

impl ClientOpcodeMessage {
    fn read_opcodes(opcode: u32, body_size: u32, mut r: &[u8]) -> Result<Self, crate::errors::ExpectedOpcodeError> {
        match opcode {
            0x00B5 => Ok(Self::MSG_MOVE_START_FORWARD(Box::new(<MSG_MOVE_START_FORWARD as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x00B6 => Ok(Self::MSG_MOVE_START_BACKWARD(Box::new(<MSG_MOVE_START_BACKWARD as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x00B7 => Ok(Self::MSG_MOVE_STOP(Box::new(<MSG_MOVE_STOP as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x00B8 => Ok(Self::MSG_MOVE_START_STRAFE_LEFT(Box::new(<MSG_MOVE_START_STRAFE_LEFT as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x00B9 => Ok(Self::MSG_MOVE_START_STRAFE_RIGHT(Box::new(<MSG_MOVE_START_STRAFE_RIGHT as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x00BA => Ok(Self::MSG_MOVE_STOP_STRAFE(Box::new(<MSG_MOVE_STOP_STRAFE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x00BB => Ok(Self::MSG_MOVE_JUMP(Box::new(<MSG_MOVE_JUMP as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x00BC => Ok(Self::MSG_MOVE_START_TURN_LEFT(Box::new(<MSG_MOVE_START_TURN_LEFT as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x00BD => Ok(Self::MSG_MOVE_START_TURN_RIGHT(Box::new(<MSG_MOVE_START_TURN_RIGHT as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x00BE => Ok(Self::MSG_MOVE_STOP_TURN(Box::new(<MSG_MOVE_STOP_TURN as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x00BF => Ok(Self::MSG_MOVE_START_PITCH_UP(Box::new(<MSG_MOVE_START_PITCH_UP as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x00C0 => Ok(Self::MSG_MOVE_START_PITCH_DOWN(Box::new(<MSG_MOVE_START_PITCH_DOWN as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x00C1 => Ok(Self::MSG_MOVE_STOP_PITCH(Box::new(<MSG_MOVE_STOP_PITCH as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x00C2 => Ok(Self::MSG_MOVE_SET_RUN_MODE(Box::new(<MSG_MOVE_SET_RUN_MODE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x00C3 => Ok(Self::MSG_MOVE_SET_WALK_MODE(Box::new(<MSG_MOVE_SET_WALK_MODE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x00C9 => Ok(Self::MSG_MOVE_FALL_LAND(Box::new(<MSG_MOVE_FALL_LAND as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x00CA => Ok(Self::MSG_MOVE_START_SWIM(Box::new(<MSG_MOVE_START_SWIM as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x00CB => Ok(Self::MSG_MOVE_STOP_SWIM(Box::new(<MSG_MOVE_STOP_SWIM as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x00DA => Ok(Self::MSG_MOVE_SET_FACING(Box::new(<MSG_MOVE_SET_FACING as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x00DB => Ok(Self::MSG_MOVE_SET_PITCH(Box::new(<MSG_MOVE_SET_PITCH as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x00DC => crate::util::assert_empty(body_size, opcode, "MSG_MOVE_WORLDPORT_ACK").map(|_| Self::MSG_MOVE_WORLDPORT_ACK),
            0x00EE => Ok(Self::MSG_MOVE_HEARTBEAT(Box::new(<MSG_MOVE_HEARTBEAT as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x00F7 => Ok(Self::MSG_MOVE_HOVER(Box::new(<MSG_MOVE_HOVER as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x01C2 => Ok(Self::MSG_PETITION_DECLINE(<MSG_PETITION_DECLINE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x01F2 => Ok(Self::MSG_TABARDVENDOR_ACTIVATE(<MSG_TABARDVENDOR_ACTIVATE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x0276 => Ok(Self::MSG_QUEST_PUSH_RESULT(Box::new(<MSG_QUEST_PUSH_RESULT as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x02B1 => Ok(Self::MSG_MOVE_WATER_WALK(Box::new(<MSG_MOVE_WATER_WALK as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x02C1 => Ok(Self::MSG_PETITION_RENAME(Box::new(<MSG_PETITION_RENAME as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0359 => Ok(Self::MSG_MOVE_START_ASCEND(Box::new(<MSG_MOVE_START_ASCEND as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x035A => Ok(Self::MSG_MOVE_STOP_ASCEND(Box::new(<MSG_MOVE_STOP_ASCEND as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0380 => Ok(Self::MSG_MOVE_SET_FLIGHT_BACK_SPEED(Box::new(<MSG_MOVE_SET_FLIGHT_BACK_SPEED as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x03A7 => Ok(Self::MSG_MOVE_START_DESCEND(Box::new(<MSG_MOVE_START_DESCEND as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0447 => crate::util::assert_empty(body_size, opcode, "CMSG_CALENDAR_GET_NUM_PENDING").map(|_| Self::CMSG_CALENDAR_GET_NUM_PENDING),
            0x0001 => crate::util::assert_empty(body_size, opcode, "CMSG_BOOTME").map(|_| Self::CMSG_BOOTME),
            0x0002 => Ok(Self::CMSG_DBLOOKUP(Box::new(<CMSG_DBLOOKUP as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0008 => Ok(Self::CMSG_WORLD_TELEPORT(Box::new(<CMSG_WORLD_TELEPORT as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0009 => Ok(Self::CMSG_TELEPORT_TO_UNIT(Box::new(<CMSG_TELEPORT_TO_UNIT as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0036 => Ok(Self::CMSG_CHAR_CREATE(Box::new(<CMSG_CHAR_CREATE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0037 => crate::util::assert_empty(body_size, opcode, "CMSG_CHAR_ENUM").map(|_| Self::CMSG_CHAR_ENUM),
            0x0038 => Ok(Self::CMSG_CHAR_DELETE(<CMSG_CHAR_DELETE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x003D => Ok(Self::CMSG_PLAYER_LOGIN(<CMSG_PLAYER_LOGIN as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x004A => crate::util::assert_empty(body_size, opcode, "CMSG_PLAYER_LOGOUT").map(|_| Self::CMSG_PLAYER_LOGOUT),
            0x004B => crate::util::assert_empty(body_size, opcode, "CMSG_LOGOUT_REQUEST").map(|_| Self::CMSG_LOGOUT_REQUEST),
            0x004E => crate::util::assert_empty(body_size, opcode, "CMSG_LOGOUT_CANCEL").map(|_| Self::CMSG_LOGOUT_CANCEL),
            0x0050 => Ok(Self::CMSG_NAME_QUERY(<CMSG_NAME_QUERY as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x0052 => Ok(Self::CMSG_PET_NAME_QUERY(Box::new(<CMSG_PET_NAME_QUERY as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0054 => Ok(Self::CMSG_GUILD_QUERY(<CMSG_GUILD_QUERY as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x0056 => Ok(Self::CMSG_ITEM_QUERY_SINGLE(<CMSG_ITEM_QUERY_SINGLE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x005A => Ok(Self::CMSG_PAGE_TEXT_QUERY(Box::new(<CMSG_PAGE_TEXT_QUERY as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x005C => Ok(Self::CMSG_QUEST_QUERY(<CMSG_QUEST_QUERY as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x005E => Ok(Self::CMSG_GAMEOBJECT_QUERY(Box::new(<CMSG_GAMEOBJECT_QUERY as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0060 => Ok(Self::CMSG_CREATURE_QUERY(Box::new(<CMSG_CREATURE_QUERY as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0062 => Ok(Self::CMSG_WHO(Box::new(<CMSG_WHO as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0064 => Ok(Self::CMSG_WHOIS(Box::new(<CMSG_WHOIS as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0066 => Ok(Self::CMSG_CONTACT_LIST(<CMSG_CONTACT_LIST as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x0069 => Ok(Self::CMSG_ADD_FRIEND(Box::new(<CMSG_ADD_FRIEND as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x006A => Ok(Self::CMSG_DEL_FRIEND(<CMSG_DEL_FRIEND as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x006B => Ok(Self::CMSG_SET_CONTACT_NOTES(Box::new(<CMSG_SET_CONTACT_NOTES as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x006C => Ok(Self::CMSG_ADD_IGNORE(Box::new(<CMSG_ADD_IGNORE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x006D => Ok(Self::CMSG_DEL_IGNORE(<CMSG_DEL_IGNORE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x006E => Ok(Self::CMSG_GROUP_INVITE(Box::new(<CMSG_GROUP_INVITE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0070 => crate::util::assert_empty(body_size, opcode, "CMSG_GROUP_CANCEL").map(|_| Self::CMSG_GROUP_CANCEL),
            0x0072 => crate::util::assert_empty(body_size, opcode, "CMSG_GROUP_ACCEPT").map(|_| Self::CMSG_GROUP_ACCEPT),
            0x0073 => crate::util::assert_empty(body_size, opcode, "CMSG_GROUP_DECLINE").map(|_| Self::CMSG_GROUP_DECLINE),
            0x0075 => Ok(Self::CMSG_GROUP_UNINVITE(Box::new(<CMSG_GROUP_UNINVITE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0076 => Ok(Self::CMSG_GROUP_UNINVITE_GUID(Box::new(<CMSG_GROUP_UNINVITE_GUID as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0078 => Ok(Self::CMSG_GROUP_SET_LEADER(<CMSG_GROUP_SET_LEADER as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x007A => Ok(Self::CMSG_LOOT_METHOD(Box::new(<CMSG_LOOT_METHOD as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x007B => crate::util::assert_empty(body_size, opcode, "CMSG_GROUP_DISBAND").map(|_| Self::CMSG_GROUP_DISBAND),
            0x0081 => Ok(Self::CMSG_GUILD_CREATE(Box::new(<CMSG_GUILD_CREATE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0082 => Ok(Self::CMSG_GUILD_INVITE(Box::new(<CMSG_GUILD_INVITE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0084 => crate::util::assert_empty(body_size, opcode, "CMSG_GUILD_ACCEPT").map(|_| Self::CMSG_GUILD_ACCEPT),
            0x0085 => crate::util::assert_empty(body_size, opcode, "CMSG_GUILD_DECLINE").map(|_| Self::CMSG_GUILD_DECLINE),
            0x0087 => crate::util::assert_empty(body_size, opcode, "CMSG_GUILD_INFO").map(|_| Self::CMSG_GUILD_INFO),
            0x0089 => crate::util::assert_empty(body_size, opcode, "CMSG_GUILD_ROSTER").map(|_| Self::CMSG_GUILD_ROSTER),
            0x008B => Ok(Self::CMSG_GUILD_PROMOTE(Box::new(<CMSG_GUILD_PROMOTE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x008C => Ok(Self::CMSG_GUILD_DEMOTE(Box::new(<CMSG_GUILD_DEMOTE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x008D => crate::util::assert_empty(body_size, opcode, "CMSG_GUILD_LEAVE").map(|_| Self::CMSG_GUILD_LEAVE),
            0x008E => Ok(Self::CMSG_GUILD_REMOVE(Box::new(<CMSG_GUILD_REMOVE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x008F => crate::util::assert_empty(body_size, opcode, "CMSG_GUILD_DISBAND").map(|_| Self::CMSG_GUILD_DISBAND),
            0x0090 => Ok(Self::CMSG_GUILD_LEADER(Box::new(<CMSG_GUILD_LEADER as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0091 => Ok(Self::CMSG_GUILD_MOTD(Box::new(<CMSG_GUILD_MOTD as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0095 => Ok(Self::CMSG_MESSAGECHAT(Box::new(<CMSG_MESSAGECHAT as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0097 => Ok(Self::CMSG_JOIN_CHANNEL(Box::new(<CMSG_JOIN_CHANNEL as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0098 => Ok(Self::CMSG_LEAVE_CHANNEL(Box::new(<CMSG_LEAVE_CHANNEL as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x009A => Ok(Self::CMSG_CHANNEL_LIST(Box::new(<CMSG_CHANNEL_LIST as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x009C => Ok(Self::CMSG_CHANNEL_PASSWORD(Box::new(<CMSG_CHANNEL_PASSWORD as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x009D => Ok(Self::CMSG_CHANNEL_SET_OWNER(Box::new(<CMSG_CHANNEL_SET_OWNER as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x009E => Ok(Self::CMSG_CHANNEL_OWNER(Box::new(<CMSG_CHANNEL_OWNER as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x009F => Ok(Self::CMSG_CHANNEL_MODERATOR(Box::new(<CMSG_CHANNEL_MODERATOR as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x00A0 => Ok(Self::CMSG_CHANNEL_UNMODERATOR(Box::new(<CMSG_CHANNEL_UNMODERATOR as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x00A1 => Ok(Self::CMSG_CHANNEL_MUTE(Box::new(<CMSG_CHANNEL_MUTE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x00A2 => Ok(Self::CMSG_CHANNEL_UNMUTE(Box::new(<CMSG_CHANNEL_UNMUTE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x00A3 => Ok(Self::CMSG_CHANNEL_INVITE(Box::new(<CMSG_CHANNEL_INVITE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x00A4 => Ok(Self::CMSG_CHANNEL_KICK(Box::new(<CMSG_CHANNEL_KICK as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x00A5 => Ok(Self::CMSG_CHANNEL_BAN(Box::new(<CMSG_CHANNEL_BAN as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x00A6 => Ok(Self::CMSG_CHANNEL_UNBAN(Box::new(<CMSG_CHANNEL_UNBAN as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x00A7 => Ok(Self::CMSG_CHANNEL_ANNOUNCEMENTS(Box::new(<CMSG_CHANNEL_ANNOUNCEMENTS as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x00A8 => Ok(Self::CMSG_CHANNEL_MODERATE(Box::new(<CMSG_CHANNEL_MODERATE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x00AB => Ok(Self::CMSG_USE_ITEM(Box::new(<CMSG_USE_ITEM as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x00AC => Ok(Self::CMSG_OPEN_ITEM(<CMSG_OPEN_ITEM as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x00AD => Ok(Self::CMSG_READ_ITEM(<CMSG_READ_ITEM as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x00B1 => Ok(Self::CMSG_GAMEOBJ_USE(<CMSG_GAMEOBJ_USE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x00B4 => Ok(Self::CMSG_AREATRIGGER(<CMSG_AREATRIGGER as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x00C5 => Ok(Self::MSG_MOVE_TELEPORT(Box::new(<MSG_MOVE_TELEPORT_Server as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x00C7 => Ok(Self::MSG_MOVE_TELEPORT_ACK(Box::new(<MSG_MOVE_TELEPORT_ACK_Client as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x00E1 => Ok(Self::CMSG_MOVE_SET_RAW_POSITION(Box::new(<CMSG_MOVE_SET_RAW_POSITION as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x00E3 => Ok(Self::CMSG_FORCE_RUN_SPEED_CHANGE_ACK(Box::new(<CMSG_FORCE_RUN_SPEED_CHANGE_ACK as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x00E5 => Ok(Self::CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACK(Box::new(<CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACK as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x00E7 => Ok(Self::CMSG_FORCE_SWIM_SPEED_CHANGE_ACK(Box::new(<CMSG_FORCE_SWIM_SPEED_CHANGE_ACK as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x00E9 => Ok(Self::CMSG_FORCE_MOVE_ROOT_ACK(Box::new(<CMSG_FORCE_MOVE_ROOT_ACK as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x00EB => Ok(Self::CMSG_FORCE_MOVE_UNROOT_ACK(Box::new(<CMSG_FORCE_MOVE_UNROOT_ACK as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x00F0 => Ok(Self::CMSG_MOVE_KNOCK_BACK_ACK(Box::new(<CMSG_MOVE_KNOCK_BACK_ACK as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x00F6 => Ok(Self::CMSG_MOVE_HOVER_ACK(Box::new(<CMSG_MOVE_HOVER_ACK as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x00FB => crate::util::assert_empty(body_size, opcode, "CMSG_NEXT_CINEMATIC_CAMERA").map(|_| Self::CMSG_NEXT_CINEMATIC_CAMERA),
            0x00FC => crate::util::assert_empty(body_size, opcode, "CMSG_COMPLETE_CINEMATIC").map(|_| Self::CMSG_COMPLETE_CINEMATIC),
            0x00FE => Ok(Self::CMSG_TUTORIAL_FLAG(<CMSG_TUTORIAL_FLAG as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x00FF => crate::util::assert_empty(body_size, opcode, "CMSG_TUTORIAL_CLEAR").map(|_| Self::CMSG_TUTORIAL_CLEAR),
            0x0100 => crate::util::assert_empty(body_size, opcode, "CMSG_TUTORIAL_RESET").map(|_| Self::CMSG_TUTORIAL_RESET),
            0x0101 => Ok(Self::CMSG_STANDSTATECHANGE(<CMSG_STANDSTATECHANGE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x0102 => Ok(Self::CMSG_EMOTE(<CMSG_EMOTE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x0104 => Ok(Self::CMSG_TEXT_EMOTE(Box::new(<CMSG_TEXT_EMOTE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0108 => Ok(Self::CMSG_AUTOSTORE_LOOT_ITEM(<CMSG_AUTOSTORE_LOOT_ITEM as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x010A => Ok(Self::CMSG_AUTOEQUIP_ITEM(<CMSG_AUTOEQUIP_ITEM as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x010B => Ok(Self::CMSG_AUTOSTORE_BAG_ITEM(<CMSG_AUTOSTORE_BAG_ITEM as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x010C => Ok(Self::CMSG_SWAP_ITEM(<CMSG_SWAP_ITEM as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x010D => Ok(Self::CMSG_SWAP_INV_ITEM(<CMSG_SWAP_INV_ITEM as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x010E => Ok(Self::CMSG_SPLIT_ITEM(<CMSG_SPLIT_ITEM as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x010F => Ok(Self::CMSG_AUTOEQUIP_ITEM_SLOT(Box::new(<CMSG_AUTOEQUIP_ITEM_SLOT as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0111 => Ok(Self::CMSG_DESTROYITEM(<CMSG_DESTROYITEM as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x0114 => Ok(Self::CMSG_INSPECT(<CMSG_INSPECT as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x0116 => Ok(Self::CMSG_INITIATE_TRADE(<CMSG_INITIATE_TRADE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x0117 => crate::util::assert_empty(body_size, opcode, "CMSG_BEGIN_TRADE").map(|_| Self::CMSG_BEGIN_TRADE),
            0x0118 => crate::util::assert_empty(body_size, opcode, "CMSG_BUSY_TRADE").map(|_| Self::CMSG_BUSY_TRADE),
            0x0119 => crate::util::assert_empty(body_size, opcode, "CMSG_IGNORE_TRADE").map(|_| Self::CMSG_IGNORE_TRADE),
            0x011A => Ok(Self::CMSG_ACCEPT_TRADE(<CMSG_ACCEPT_TRADE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x011B => crate::util::assert_empty(body_size, opcode, "CMSG_UNACCEPT_TRADE").map(|_| Self::CMSG_UNACCEPT_TRADE),
            0x011C => crate::util::assert_empty(body_size, opcode, "CMSG_CANCEL_TRADE").map(|_| Self::CMSG_CANCEL_TRADE),
            0x011D => Ok(Self::CMSG_SET_TRADE_ITEM(<CMSG_SET_TRADE_ITEM as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x011E => Ok(Self::CMSG_CLEAR_TRADE_ITEM(<CMSG_CLEAR_TRADE_ITEM as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x011F => Ok(Self::CMSG_SET_TRADE_GOLD(<CMSG_SET_TRADE_GOLD as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x0125 => Ok(Self::CMSG_SET_FACTION_ATWAR(<CMSG_SET_FACTION_ATWAR as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x0128 => Ok(Self::CMSG_SET_ACTION_BUTTON(<CMSG_SET_ACTION_BUTTON as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x012E => Ok(Self::CMSG_CAST_SPELL(Box::new(<CMSG_CAST_SPELL as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x012F => Ok(Self::CMSG_CANCEL_CAST(<CMSG_CANCEL_CAST as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x0136 => Ok(Self::CMSG_CANCEL_AURA(<CMSG_CANCEL_AURA as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x013B => Ok(Self::CMSG_CANCEL_CHANNELLING(<CMSG_CANCEL_CHANNELLING as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x013D => Ok(Self::CMSG_SET_SELECTION(<CMSG_SET_SELECTION as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x013E => Ok(Self::CMSG_DELETEEQUIPMENT_SET(<CMSG_DELETEEQUIPMENT_SET as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x013F => Ok(Self::CMSG_INSTANCE_LOCK_RESPONSE(<CMSG_INSTANCE_LOCK_RESPONSE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x0141 => Ok(Self::CMSG_ATTACKSWING(<CMSG_ATTACKSWING as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x0142 => crate::util::assert_empty(body_size, opcode, "CMSG_ATTACKSTOP").map(|_| Self::CMSG_ATTACKSTOP),
            0x015A => crate::util::assert_empty(body_size, opcode, "CMSG_REPOP_REQUEST").map(|_| Self::CMSG_REPOP_REQUEST),
            0x015C => Ok(Self::CMSG_RESURRECT_RESPONSE(Box::new(<CMSG_RESURRECT_RESPONSE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x015D => Ok(Self::CMSG_LOOT(<CMSG_LOOT as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x015E => crate::util::assert_empty(body_size, opcode, "CMSG_LOOT_MONEY").map(|_| Self::CMSG_LOOT_MONEY),
            0x015F => Ok(Self::CMSG_LOOT_RELEASE(<CMSG_LOOT_RELEASE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x016C => Ok(Self::CMSG_DUEL_ACCEPTED(<CMSG_DUEL_ACCEPTED as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x016D => Ok(Self::CMSG_DUEL_CANCELLED(<CMSG_DUEL_CANCELLED as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x0171 => crate::util::assert_empty(body_size, opcode, "CMSG_MOUNTSPECIAL_ANIM").map(|_| Self::CMSG_MOUNTSPECIAL_ANIM),
            0x0174 => Ok(Self::CMSG_PET_SET_ACTION(Box::new(<CMSG_PET_SET_ACTION as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0175 => Ok(Self::CMSG_PET_ACTION(Box::new(<CMSG_PET_ACTION as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0176 => Ok(Self::CMSG_PET_ABANDON(<CMSG_PET_ABANDON as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x0177 => Ok(Self::CMSG_PET_RENAME(Box::new(<CMSG_PET_RENAME as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x017B => Ok(Self::CMSG_GOSSIP_HELLO(<CMSG_GOSSIP_HELLO as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x017C => Ok(Self::CMSG_GOSSIP_SELECT_OPTION(Box::new(<CMSG_GOSSIP_SELECT_OPTION as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x017F => Ok(Self::CMSG_NPC_TEXT_QUERY(Box::new(<CMSG_NPC_TEXT_QUERY as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0182 => Ok(Self::CMSG_QUESTGIVER_STATUS_QUERY(<CMSG_QUESTGIVER_STATUS_QUERY as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x0184 => Ok(Self::CMSG_QUESTGIVER_HELLO(<CMSG_QUESTGIVER_HELLO as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x0186 => Ok(Self::CMSG_QUESTGIVER_QUERY_QUEST(Box::new(<CMSG_QUESTGIVER_QUERY_QUEST as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0187 => crate::util::assert_empty(body_size, opcode, "CMSG_QUESTGIVER_QUEST_AUTOLAUNCH").map(|_| Self::CMSG_QUESTGIVER_QUEST_AUTOLAUNCH),
            0x0189 => Ok(Self::CMSG_QUESTGIVER_ACCEPT_QUEST(Box::new(<CMSG_QUESTGIVER_ACCEPT_QUEST as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x018A => Ok(Self::CMSG_QUESTGIVER_COMPLETE_QUEST(Box::new(<CMSG_QUESTGIVER_COMPLETE_QUEST as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x018C => Ok(Self::CMSG_QUESTGIVER_REQUEST_REWARD(Box::new(<CMSG_QUESTGIVER_REQUEST_REWARD as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x018E => Ok(Self::CMSG_QUESTGIVER_CHOOSE_REWARD(Box::new(<CMSG_QUESTGIVER_CHOOSE_REWARD as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0190 => crate::util::assert_empty(body_size, opcode, "CMSG_QUESTGIVER_CANCEL").map(|_| Self::CMSG_QUESTGIVER_CANCEL),
            0x0193 => Ok(Self::CMSG_QUESTLOG_SWAP_QUEST(<CMSG_QUESTLOG_SWAP_QUEST as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x0194 => Ok(Self::CMSG_QUESTLOG_REMOVE_QUEST(<CMSG_QUESTLOG_REMOVE_QUEST as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x019B => Ok(Self::CMSG_QUEST_CONFIRM_ACCEPT(<CMSG_QUEST_CONFIRM_ACCEPT as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x019D => Ok(Self::CMSG_PUSHQUESTTOPARTY(<CMSG_PUSHQUESTTOPARTY as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x019E => Ok(Self::CMSG_LIST_INVENTORY(<CMSG_LIST_INVENTORY as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x01A0 => Ok(Self::CMSG_SELL_ITEM(Box::new(<CMSG_SELL_ITEM as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x01A2 => Ok(Self::CMSG_BUY_ITEM(Box::new(<CMSG_BUY_ITEM as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x01A3 => Ok(Self::CMSG_BUY_ITEM_IN_SLOT(Box::new(<CMSG_BUY_ITEM_IN_SLOT as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x01AA => Ok(Self::CMSG_TAXINODE_STATUS_QUERY(<CMSG_TAXINODE_STATUS_QUERY as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x01AC => Ok(Self::CMSG_TAXIQUERYAVAILABLENODES(<CMSG_TAXIQUERYAVAILABLENODES as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x01AD => Ok(Self::CMSG_ACTIVATETAXI(Box::new(<CMSG_ACTIVATETAXI as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x01B0 => Ok(Self::CMSG_TRAINER_LIST(<CMSG_TRAINER_LIST as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x01B2 => Ok(Self::CMSG_TRAINER_BUY_SPELL(Box::new(<CMSG_TRAINER_BUY_SPELL as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x01B5 => Ok(Self::CMSG_BINDER_ACTIVATE(<CMSG_BINDER_ACTIVATE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x01B7 => Ok(Self::CMSG_BANKER_ACTIVATE(<CMSG_BANKER_ACTIVATE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x01B9 => Ok(Self::CMSG_BUY_BANK_SLOT(<CMSG_BUY_BANK_SLOT as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x01BB => Ok(Self::CMSG_PETITION_SHOWLIST(<CMSG_PETITION_SHOWLIST as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x01BD => Ok(Self::CMSG_PETITION_BUY(Box::new(<CMSG_PETITION_BUY as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x01BE => Ok(Self::CMSG_PETITION_SHOW_SIGNATURES(<CMSG_PETITION_SHOW_SIGNATURES as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x01C0 => Ok(Self::CMSG_PETITION_SIGN(Box::new(<CMSG_PETITION_SIGN as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x01C3 => Ok(Self::CMSG_OFFER_PETITION(Box::new(<CMSG_OFFER_PETITION as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x01C4 => Ok(Self::CMSG_TURN_IN_PETITION(<CMSG_TURN_IN_PETITION as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x01C6 => Ok(Self::CMSG_PETITION_QUERY(Box::new(<CMSG_PETITION_QUERY as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x01CA => Ok(Self::CMSG_BUG(Box::new(<CMSG_BUG as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x01CC => Ok(Self::CMSG_PLAYED_TIME(<CMSG_PLAYED_TIME as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x01CE => crate::util::assert_empty(body_size, opcode, "CMSG_QUERY_TIME").map(|_| Self::CMSG_QUERY_TIME),
            0x01D2 => Ok(Self::CMSG_RECLAIM_CORPSE(<CMSG_RECLAIM_CORPSE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x01D3 => Ok(Self::CMSG_WRAP_ITEM(<CMSG_WRAP_ITEM as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x01D5 => Ok(Self::MSG_MINIMAP_PING(<MSG_MINIMAP_PING_Client as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x01DC => Ok(Self::CMSG_PING(<CMSG_PING as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x01E0 => Ok(Self::CMSG_SETSHEATHED(<CMSG_SETSHEATHED as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x01E3 => Ok(Self::CMSG_QUEST_POI_QUERY(Box::new(<CMSG_QUEST_POI_QUERY as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x01ED => Ok(Self::CMSG_AUTH_SESSION(Box::new(<CMSG_AUTH_SESSION as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x01F0 => Ok(Self::CMSG_PET_CAST_SPELL(Box::new(<CMSG_PET_CAST_SPELL as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x01F1 => Ok(Self::MSG_SAVE_GUILD_EMBLEM(Box::new(<MSG_SAVE_GUILD_EMBLEM_Client as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x01F4 => Ok(Self::CMSG_ZONEUPDATE(<CMSG_ZONEUPDATE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x01FB => Ok(Self::MSG_RANDOM_ROLL(<MSG_RANDOM_ROLL_Client as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x0202 => Ok(Self::CMSG_UNLEARN_SKILL(<CMSG_UNLEARN_SKILL as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x0205 => Ok(Self::CMSG_GMTICKET_CREATE(Box::new(<CMSG_GMTICKET_CREATE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0207 => Ok(Self::CMSG_GMTICKET_UPDATETEXT(Box::new(<CMSG_GMTICKET_UPDATETEXT as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x020A => Ok(Self::CMSG_REQUEST_ACCOUNT_DATA(<CMSG_REQUEST_ACCOUNT_DATA as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x020B => Ok(Self::CMSG_UPDATE_ACCOUNT_DATA(Box::new(<CMSG_UPDATE_ACCOUNT_DATA as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0211 => crate::util::assert_empty(body_size, opcode, "CMSG_GMTICKET_GETTICKET").map(|_| Self::CMSG_GMTICKET_GETTICKET),
            0x0213 => crate::util::assert_empty(body_size, opcode, "CMSG_UNLEARN_TALENTS").map(|_| Self::CMSG_UNLEARN_TALENTS),
            0x0216 => crate::util::assert_empty(body_size, opcode, "MSG_CORPSE_QUERY_Client").map(|_| Self::MSG_CORPSE_QUERY),
            0x0217 => crate::util::assert_empty(body_size, opcode, "CMSG_GMTICKET_DELETETICKET").map(|_| Self::CMSG_GMTICKET_DELETETICKET),
            0x021A => crate::util::assert_empty(body_size, opcode, "CMSG_GMTICKET_SYSTEMSTATUS").map(|_| Self::CMSG_GMTICKET_SYSTEMSTATUS),
            0x021C => Ok(Self::CMSG_SPIRIT_HEALER_ACTIVATE(<CMSG_SPIRIT_HEALER_ACTIVATE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x0225 => Ok(Self::CMSG_CHAT_IGNORED(Box::new(<CMSG_CHAT_IGNORED as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0231 => Ok(Self::CMSG_GUILD_RANK(Box::new(<CMSG_GUILD_RANK as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0232 => Ok(Self::CMSG_GUILD_ADD_RANK(Box::new(<CMSG_GUILD_ADD_RANK as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0233 => crate::util::assert_empty(body_size, opcode, "CMSG_GUILD_DEL_RANK").map(|_| Self::CMSG_GUILD_DEL_RANK),
            0x0234 => Ok(Self::CMSG_GUILD_SET_PUBLIC_NOTE(Box::new(<CMSG_GUILD_SET_PUBLIC_NOTE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0235 => Ok(Self::CMSG_GUILD_SET_OFFICER_NOTE(Box::new(<CMSG_GUILD_SET_OFFICER_NOTE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0238 => Ok(Self::CMSG_SEND_MAIL(Box::new(<CMSG_SEND_MAIL as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x023A => Ok(Self::CMSG_GET_MAIL_LIST(<CMSG_GET_MAIL_LIST as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x023C => Ok(Self::CMSG_BATTLEFIELD_LIST(<CMSG_BATTLEFIELD_LIST as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x0243 => Ok(Self::CMSG_ITEM_TEXT_QUERY(<CMSG_ITEM_TEXT_QUERY as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x0245 => Ok(Self::CMSG_MAIL_TAKE_MONEY(Box::new(<CMSG_MAIL_TAKE_MONEY as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0246 => Ok(Self::CMSG_MAIL_TAKE_ITEM(Box::new(<CMSG_MAIL_TAKE_ITEM as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0247 => Ok(Self::CMSG_MAIL_MARK_AS_READ(Box::new(<CMSG_MAIL_MARK_AS_READ as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0248 => Ok(Self::CMSG_MAIL_RETURN_TO_SENDER(Box::new(<CMSG_MAIL_RETURN_TO_SENDER as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0249 => Ok(Self::CMSG_MAIL_DELETE(Box::new(<CMSG_MAIL_DELETE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x024A => Ok(Self::CMSG_MAIL_CREATE_TEXT_ITEM(Box::new(<CMSG_MAIL_CREATE_TEXT_ITEM as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0251 => Ok(Self::CMSG_LEARN_TALENT(<CMSG_LEARN_TALENT as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x0253 => Ok(Self::CMSG_TOGGLE_PVP(<CMSG_TOGGLE_PVP as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x0255 => Ok(Self::MSG_AUCTION_HELLO(<MSG_AUCTION_HELLO_Client as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x0256 => Ok(Self::CMSG_AUCTION_SELL_ITEM(Box::new(<CMSG_AUCTION_SELL_ITEM as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0257 => Ok(Self::CMSG_AUCTION_REMOVE_ITEM(Box::new(<CMSG_AUCTION_REMOVE_ITEM as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0258 => Ok(Self::CMSG_AUCTION_LIST_ITEMS(Box::new(<CMSG_AUCTION_LIST_ITEMS as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0259 => Ok(Self::CMSG_AUCTION_LIST_OWNER_ITEMS(Box::new(<CMSG_AUCTION_LIST_OWNER_ITEMS as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x025A => Ok(Self::CMSG_AUCTION_PLACE_BID(Box::new(<CMSG_AUCTION_PLACE_BID as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0264 => Ok(Self::CMSG_AUCTION_LIST_BIDDER_ITEMS(Box::new(<CMSG_AUCTION_LIST_BIDDER_ITEMS as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0268 => Ok(Self::CMSG_SET_AMMO(<CMSG_SET_AMMO as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x026A => Ok(Self::CMSG_SET_ACTIVE_MOVER(<CMSG_SET_ACTIVE_MOVER as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x026B => Ok(Self::CMSG_PET_CANCEL_AURA(Box::new(<CMSG_PET_CANCEL_AURA as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x026D => crate::util::assert_empty(body_size, opcode, "CMSG_CANCEL_AUTO_REPEAT_SPELL").map(|_| Self::CMSG_CANCEL_AUTO_REPEAT_SPELL),
            0x026F => Ok(Self::MSG_LIST_STABLED_PETS(<MSG_LIST_STABLED_PETS_Client as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x0270 => Ok(Self::CMSG_STABLE_PET(<CMSG_STABLE_PET as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x0271 => Ok(Self::CMSG_UNSTABLE_PET(Box::new(<CMSG_UNSTABLE_PET as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0272 => Ok(Self::CMSG_BUY_STABLE_SLOT(<CMSG_BUY_STABLE_SLOT as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x0275 => Ok(Self::CMSG_STABLE_SWAP_PET(Box::new(<CMSG_STABLE_SWAP_PET as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0279 => crate::util::assert_empty(body_size, opcode, "CMSG_REQUEST_PET_INFO").map(|_| Self::CMSG_REQUEST_PET_INFO),
            0x027A => Ok(Self::CMSG_FAR_SIGHT(<CMSG_FAR_SIGHT as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x027E => Ok(Self::CMSG_GROUP_CHANGE_SUB_GROUP(Box::new(<CMSG_GROUP_CHANGE_SUB_GROUP as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x027F => Ok(Self::CMSG_REQUEST_PARTY_MEMBER_STATS(<CMSG_REQUEST_PARTY_MEMBER_STATS as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x0280 => Ok(Self::CMSG_GROUP_SWAP_SUB_GROUP(Box::new(<CMSG_GROUP_SWAP_SUB_GROUP as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0282 => Ok(Self::CMSG_AUTOSTORE_BANK_ITEM(<CMSG_AUTOSTORE_BANK_ITEM as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x0283 => Ok(Self::CMSG_AUTOBANK_ITEM(<CMSG_AUTOBANK_ITEM as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x0284 => crate::util::assert_empty(body_size, opcode, "MSG_QUERY_NEXT_MAIL_TIME_Client").map(|_| Self::MSG_QUERY_NEXT_MAIL_TIME),
            0x028E => crate::util::assert_empty(body_size, opcode, "CMSG_GROUP_RAID_CONVERT").map(|_| Self::CMSG_GROUP_RAID_CONVERT),
            0x028F => Ok(Self::CMSG_GROUP_ASSISTANT_LEADER(Box::new(<CMSG_GROUP_ASSISTANT_LEADER as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0290 => Ok(Self::CMSG_BUYBACK_ITEM(Box::new(<CMSG_BUYBACK_ITEM as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0292 => Ok(Self::CMSG_SET_SAVED_INSTANCE_EXTEND(<CMSG_SET_SAVED_INSTANCE_EXTEND as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x0296 => crate::util::assert_empty(body_size, opcode, "CMSG_LFG_GET_STATUS").map(|_| Self::CMSG_LFG_GET_STATUS),
            0x029A => crate::util::assert_empty(body_size, opcode, "CMSG_GMTICKETSYSTEM_TOGGLE").map(|_| Self::CMSG_GMTICKETSYSTEM_TOGGLE),
            0x029B => crate::util::assert_empty(body_size, opcode, "CMSG_CANCEL_GROWTH_AURA").map(|_| Self::CMSG_CANCEL_GROWTH_AURA),
            0x02A0 => Ok(Self::CMSG_LOOT_ROLL(Box::new(<CMSG_LOOT_ROLL as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x02A3 => Ok(Self::CMSG_LOOT_MASTER_GIVE(Box::new(<CMSG_LOOT_MASTER_GIVE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x02A8 => Ok(Self::CMSG_REPAIR_ITEM(Box::new(<CMSG_REPAIR_ITEM as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x02AA => Ok(Self::MSG_TALENT_WIPE_CONFIRM(<MSG_TALENT_WIPE_CONFIRM_Client as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x02AC => Ok(Self::CMSG_SUMMON_RESPONSE(Box::new(<CMSG_SUMMON_RESPONSE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x02B3 => crate::util::assert_empty(body_size, opcode, "CMSG_SELF_RES").map(|_| Self::CMSG_SELF_RES),
            0x02B9 => crate::util::assert_empty(body_size, opcode, "CMSG_TOGGLE_HELM").map(|_| Self::CMSG_TOGGLE_HELM),
            0x02BA => crate::util::assert_empty(body_size, opcode, "CMSG_TOGGLE_CLOAK").map(|_| Self::CMSG_TOGGLE_CLOAK),
            0x02BF => Ok(Self::CMSG_SET_ACTIONBAR_TOGGLES(<CMSG_SET_ACTIONBAR_TOGGLES as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x02C4 => Ok(Self::CMSG_ITEM_NAME_QUERY(Box::new(<CMSG_ITEM_NAME_QUERY as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x02C7 => Ok(Self::CMSG_CHAR_RENAME(Box::new(<CMSG_CHAR_RENAME as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x02C9 => Ok(Self::CMSG_MOVE_SPLINE_DONE(Box::new(<CMSG_MOVE_SPLINE_DONE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x02CA => Ok(Self::CMSG_MOVE_FALL_RESET(Box::new(<CMSG_MOVE_FALL_RESET as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x02CD => crate::util::assert_empty(body_size, opcode, "CMSG_REQUEST_RAID_INFO").map(|_| Self::CMSG_REQUEST_RAID_INFO),
            0x02CE => Ok(Self::CMSG_MOVE_TIME_SKIPPED(Box::new(<CMSG_MOVE_TIME_SKIPPED as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x02CF => Ok(Self::CMSG_MOVE_FEATHER_FALL_ACK(Box::new(<CMSG_MOVE_FEATHER_FALL_ACK as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x02D0 => Ok(Self::CMSG_MOVE_WATER_WALK_ACK(Box::new(<CMSG_MOVE_WATER_WALK_ACK as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x02D1 => Ok(Self::CMSG_MOVE_NOT_ACTIVE_MOVER(Box::new(<CMSG_MOVE_NOT_ACTIVE_MOVER as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x02D3 => crate::util::assert_empty(body_size, opcode, "CMSG_BATTLEFIELD_STATUS").map(|_| Self::CMSG_BATTLEFIELD_STATUS),
            0x02D5 => Ok(Self::CMSG_BATTLEFIELD_PORT(Box::new(<CMSG_BATTLEFIELD_PORT as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x02D6 => Ok(Self::MSG_INSPECT_HONOR_STATS(<MSG_INSPECT_HONOR_STATS_Client as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x02D7 => Ok(Self::CMSG_BATTLEMASTER_HELLO(<CMSG_BATTLEMASTER_HELLO as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x02DB => Ok(Self::CMSG_FORCE_WALK_SPEED_CHANGE_ACK(Box::new(<CMSG_FORCE_WALK_SPEED_CHANGE_ACK as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x02DD => Ok(Self::CMSG_FORCE_SWIM_BACK_SPEED_CHANGE_ACK(Box::new(<CMSG_FORCE_SWIM_BACK_SPEED_CHANGE_ACK as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x02DF => Ok(Self::CMSG_FORCE_TURN_RATE_CHANGE_ACK(Box::new(<CMSG_FORCE_TURN_RATE_CHANGE_ACK as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x02E0 => crate::util::assert_empty(body_size, opcode, "MSG_PVP_LOG_DATA_Client").map(|_| Self::MSG_PVP_LOG_DATA),
            0x02E1 => Ok(Self::CMSG_LEAVE_BATTLEFIELD(<CMSG_LEAVE_BATTLEFIELD as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x02E2 => Ok(Self::CMSG_AREA_SPIRIT_HEALER_QUERY(<CMSG_AREA_SPIRIT_HEALER_QUERY as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x02E3 => Ok(Self::CMSG_AREA_SPIRIT_HEALER_QUEUE(<CMSG_AREA_SPIRIT_HEALER_QUEUE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x02E7 => Ok(Self::CMSG_WARDEN_DATA(Box::new(<CMSG_WARDEN_DATA as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x02E9 => crate::util::assert_empty(body_size, opcode, "MSG_BATTLEGROUND_PLAYER_POSITIONS_Client").map(|_| Self::MSG_BATTLEGROUND_PLAYER_POSITIONS),
            0x02EA => Ok(Self::CMSG_PET_STOP_ATTACK(<CMSG_PET_STOP_ATTACK as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x02EE => Ok(Self::CMSG_BATTLEMASTER_JOIN(Box::new(<CMSG_BATTLEMASTER_JOIN as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x02F0 => Ok(Self::CMSG_PET_UNLEARN(<CMSG_PET_UNLEARN as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x02F3 => Ok(Self::CMSG_PET_SPELL_AUTOCAST(Box::new(<CMSG_PET_SPELL_AUTOCAST as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x02FC => Ok(Self::CMSG_GUILD_INFO_TEXT(Box::new(<CMSG_GUILD_INFO_TEXT as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0312 => Ok(Self::CMSG_ACTIVATETAXIEXPRESS(Box::new(<CMSG_ACTIVATETAXIEXPRESS as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0317 => Ok(Self::CMSG_SET_FACTION_INACTIVE(<CMSG_SET_FACTION_INACTIVE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x0318 => Ok(Self::CMSG_SET_WATCHED_FACTION(<CMSG_SET_WATCHED_FACTION as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x031D => crate::util::assert_empty(body_size, opcode, "CMSG_RESET_INSTANCES").map(|_| Self::CMSG_RESET_INSTANCES),
            0x0321 => Ok(Self::MSG_RAID_TARGET_UPDATE(Box::new(<MSG_RAID_TARGET_UPDATE_Client as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0322 => Ok(Self::MSG_RAID_READY_CHECK(<MSG_RAID_READY_CHECK_Client as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x0329 => Ok(Self::MSG_SET_DUNGEON_DIFFICULTY(<MSG_SET_DUNGEON_DIFFICULTY_Client as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x032A => Ok(Self::CMSG_GMSURVEY_SUBMIT(Box::new(<CMSG_GMSURVEY_SUBMIT as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0340 => Ok(Self::CMSG_MOVE_SET_CAN_TRANSITION_BETWEEN_SWIM_AND_FLY_ACK(Box::new(<CMSG_MOVE_SET_CAN_TRANSITION_BETWEEN_SWIM_AND_FLY_ACK as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0345 => Ok(Self::CMSG_MOVE_SET_CAN_FLY_ACK(Box::new(<CMSG_MOVE_SET_CAN_FLY_ACK as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0346 => Ok(Self::CMSG_MOVE_SET_FLY(Box::new(<CMSG_MOVE_SET_FLY as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0347 => Ok(Self::CMSG_SOCKET_GEMS(Box::new(<CMSG_SOCKET_GEMS as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x034D => Ok(Self::CMSG_ARENA_TEAM_ROSTER(<CMSG_ARENA_TEAM_ROSTER as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x034F => Ok(Self::CMSG_ARENA_TEAM_INVITE(Box::new(<CMSG_ARENA_TEAM_INVITE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0351 => crate::util::assert_empty(body_size, opcode, "CMSG_ARENA_TEAM_ACCEPT").map(|_| Self::CMSG_ARENA_TEAM_ACCEPT),
            0x0352 => crate::util::assert_empty(body_size, opcode, "CMSG_ARENA_TEAM_DECLINE").map(|_| Self::CMSG_ARENA_TEAM_DECLINE),
            0x0353 => Ok(Self::CMSG_ARENA_TEAM_LEAVE(<CMSG_ARENA_TEAM_LEAVE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x0354 => Ok(Self::CMSG_ARENA_TEAM_REMOVE(Box::new(<CMSG_ARENA_TEAM_REMOVE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0355 => Ok(Self::CMSG_ARENA_TEAM_DISBAND(<CMSG_ARENA_TEAM_DISBAND as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x0356 => Ok(Self::CMSG_ARENA_TEAM_LEADER(Box::new(<CMSG_ARENA_TEAM_LEADER as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0358 => Ok(Self::CMSG_BATTLEMASTER_JOIN_ARENA(Box::new(<CMSG_BATTLEMASTER_JOIN_ARENA as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x035C => Ok(Self::CMSG_LFG_JOIN(Box::new(<CMSG_LFG_JOIN as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x035D => crate::util::assert_empty(body_size, opcode, "CMSG_LFG_LEAVE").map(|_| Self::CMSG_LFG_LEAVE),
            0x035E => Ok(Self::CMSG_SEARCH_LFG_JOIN(<CMSG_SEARCH_LFG_JOIN as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x035F => Ok(Self::CMSG_SEARCH_LFG_LEAVE(<CMSG_SEARCH_LFG_LEAVE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x0362 => Ok(Self::CMSG_LFG_PROPOSAL_RESULT(<CMSG_LFG_PROPOSAL_RESULT as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x0366 => Ok(Self::CMSG_SET_LFG_COMMENT(Box::new(<CMSG_SET_LFG_COMMENT as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x036A => Ok(Self::CMSG_LFG_SET_ROLES(<CMSG_LFG_SET_ROLES as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x036C => Ok(Self::CMSG_LFG_SET_BOOT_VOTE(<CMSG_LFG_SET_BOOT_VOTE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x036E => crate::util::assert_empty(body_size, opcode, "CMSG_LFD_PLAYER_LOCK_INFO_REQUEST").map(|_| Self::CMSG_LFD_PLAYER_LOCK_INFO_REQUEST),
            0x0370 => Ok(Self::CMSG_LFG_TELEPORT(<CMSG_LFG_TELEPORT as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x0371 => crate::util::assert_empty(body_size, opcode, "CMSG_LFD_PARTY_LOCK_INFO_REQUEST").map(|_| Self::CMSG_LFD_PARTY_LOCK_INFO_REQUEST),
            0x0374 => Ok(Self::CMSG_SET_TITLE(<CMSG_SET_TITLE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x0375 => crate::util::assert_empty(body_size, opcode, "CMSG_CANCEL_MOUNT_AURA").map(|_| Self::CMSG_CANCEL_MOUNT_AURA),
            0x0377 => Ok(Self::MSG_INSPECT_ARENA_TEAMS(<MSG_INSPECT_ARENA_TEAMS_Client as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x0379 => Ok(Self::CMSG_CANCEL_TEMP_ENCHANTMENT(<CMSG_CANCEL_TEMP_ENCHANTMENT as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x0382 => Ok(Self::CMSG_FORCE_FLIGHT_SPEED_CHANGE_ACK(Box::new(<CMSG_FORCE_FLIGHT_SPEED_CHANGE_ACK as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0384 => Ok(Self::CMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE_ACK(Box::new(<CMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE_ACK as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0389 => Ok(Self::CMSG_SET_TAXI_BENCHMARK_MODE(<CMSG_SET_TAXI_BENCHMARK_MODE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x038C => Ok(Self::CMSG_REALM_SPLIT(<CMSG_REALM_SPLIT as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x038D => Ok(Self::CMSG_MOVE_CHNG_TRANSPORT(Box::new(<CMSG_MOVE_CHNG_TRANSPORT as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x038E => Ok(Self::MSG_PARTY_ASSIGNMENT(Box::new(<MSG_PARTY_ASSIGNMENT_Client as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0391 => Ok(Self::CMSG_TIME_SYNC_RESP(<CMSG_TIME_SYNC_RESP as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x03AE => Ok(Self::MSG_RAID_READY_CHECK_CONFIRM(<MSG_RAID_READY_CHECK_CONFIRM_Client as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x03AF => Ok(Self::CMSG_VOICE_SESSION_ENABLE(<CMSG_VOICE_SESSION_ENABLE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x03B5 => Ok(Self::CMSG_COMMENTATOR_ENABLE(<CMSG_COMMENTATOR_ENABLE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x03C6 => crate::util::assert_empty(body_size, opcode, "MSG_RAID_READY_CHECK_FINISHED_Client").map(|_| Self::MSG_RAID_READY_CHECK_FINISHED),
            0x03C7 => Ok(Self::CMSG_COMPLAIN(Box::new(<CMSG_COMPLAIN as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x03D2 => Ok(Self::CMSG_CHANNEL_DISPLAY_LIST(Box::new(<CMSG_CHANNEL_DISPLAY_LIST as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x03D3 => Ok(Self::CMSG_SET_ACTIVE_VOICE_CHANNEL(Box::new(<CMSG_SET_ACTIVE_VOICE_CHANNEL as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x03D4 => Ok(Self::CMSG_GET_CHANNEL_MEMBER_COUNT(Box::new(<CMSG_GET_CHANNEL_MEMBER_COUNT as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x03D6 => crate::util::assert_empty(body_size, opcode, "CMSG_CHANNEL_VOICE_ON").map(|_| Self::CMSG_CHANNEL_VOICE_ON),
            0x03E4 => Ok(Self::CMSG_REPORT_PVP_AFK(<CMSG_REPORT_PVP_AFK as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x03E6 => Ok(Self::CMSG_GUILD_BANKER_ACTIVATE(Box::new(<CMSG_GUILD_BANKER_ACTIVATE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x03E7 => Ok(Self::CMSG_GUILD_BANK_QUERY_TAB(Box::new(<CMSG_GUILD_BANK_QUERY_TAB as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x03E9 => Ok(Self::CMSG_GUILD_BANK_SWAP_ITEMS(Box::new(<CMSG_GUILD_BANK_SWAP_ITEMS as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x03EA => Ok(Self::CMSG_GUILD_BANK_BUY_TAB(Box::new(<CMSG_GUILD_BANK_BUY_TAB as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x03EB => Ok(Self::CMSG_GUILD_BANK_UPDATE_TAB(Box::new(<CMSG_GUILD_BANK_UPDATE_TAB as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x03EC => Ok(Self::CMSG_GUILD_BANK_DEPOSIT_MONEY(Box::new(<CMSG_GUILD_BANK_DEPOSIT_MONEY as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x03ED => Ok(Self::CMSG_GUILD_BANK_WITHDRAW_MONEY(Box::new(<CMSG_GUILD_BANK_WITHDRAW_MONEY as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x03EE => Ok(Self::MSG_GUILD_BANK_LOG_QUERY(<MSG_GUILD_BANK_LOG_QUERY_Client as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x03EF => Ok(Self::CMSG_SET_CHANNEL_WATCH(Box::new(<CMSG_SET_CHANNEL_WATCH as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x03F3 => Ok(Self::CMSG_CLEAR_CHANNEL_WATCH(Box::new(<CMSG_CLEAR_CHANNEL_WATCH as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x03F8 => Ok(Self::CMSG_SPELLCLICK(<CMSG_SPELLCLICK as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x03FD => crate::util::assert_empty(body_size, opcode, "MSG_GUILD_PERMISSIONS_Client").map(|_| Self::MSG_GUILD_PERMISSIONS),
            0x03FE => crate::util::assert_empty(body_size, opcode, "MSG_GUILD_BANK_MONEY_WITHDRAWN_Client").map(|_| Self::MSG_GUILD_BANK_MONEY_WITHDRAWN),
            0x03FF => crate::util::assert_empty(body_size, opcode, "MSG_GUILD_EVENT_LOG_QUERY_Client").map(|_| Self::MSG_GUILD_EVENT_LOG_QUERY),
            0x0401 => Ok(Self::CMSG_GET_MIRRORIMAGE_DATA(<CMSG_GET_MIRRORIMAGE_DATA as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x0407 => crate::util::assert_empty(body_size, opcode, "CMSG_KEEP_ALIVE").map(|_| Self::CMSG_KEEP_ALIVE),
            0x0409 => Ok(Self::CMSG_OPT_OUT_OF_LOOT(<CMSG_OPT_OUT_OF_LOOT as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x040A => Ok(Self::MSG_QUERY_GUILD_BANK_TEXT(<MSG_QUERY_GUILD_BANK_TEXT_Client as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x040B => Ok(Self::CMSG_SET_GUILD_BANK_TEXT(Box::new(<CMSG_SET_GUILD_BANK_TEXT as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x040D => Ok(Self::CMSG_GRANT_LEVEL(<CMSG_GRANT_LEVEL as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x0414 => Ok(Self::CMSG_TOTEM_DESTROYED(<CMSG_TOTEM_DESTROYED as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x0417 => crate::util::assert_empty(body_size, opcode, "CMSG_QUESTGIVER_STATUS_MULTIPLE_QUERY").map(|_| Self::CMSG_QUESTGIVER_STATUS_MULTIPLE_QUERY),
            0x0419 => Ok(Self::CMSG_SET_PLAYER_DECLINED_NAMES(Box::new(<CMSG_SET_PLAYER_DECLINED_NAMES as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0420 => Ok(Self::CMSG_ACCEPT_LEVEL_GRANT(<CMSG_ACCEPT_LEVEL_GRANT as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x0426 => Ok(Self::CMSG_ALTER_APPEARANCE(Box::new(<CMSG_ALTER_APPEARANCE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0429 => crate::util::assert_empty(body_size, opcode, "CMSG_CALENDAR_GET_CALENDAR").map(|_| Self::CMSG_CALENDAR_GET_CALENDAR),
            0x042A => Ok(Self::CMSG_CALENDAR_GET_EVENT(<CMSG_CALENDAR_GET_EVENT as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x042B => Ok(Self::CMSG_CALENDAR_GUILD_FILTER(Box::new(<CMSG_CALENDAR_GUILD_FILTER as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x042C => Ok(Self::CMSG_CALENDAR_ARENA_TEAM(<CMSG_CALENDAR_ARENA_TEAM as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x042D => Ok(Self::CMSG_CALENDAR_ADD_EVENT(Box::new(<CMSG_CALENDAR_ADD_EVENT as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x042E => Ok(Self::CMSG_CALENDAR_UPDATE_EVENT(Box::new(<CMSG_CALENDAR_UPDATE_EVENT as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x042F => Ok(Self::CMSG_CALENDAR_REMOVE_EVENT(Box::new(<CMSG_CALENDAR_REMOVE_EVENT as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0430 => Ok(Self::CMSG_CALENDAR_COPY_EVENT(Box::new(<CMSG_CALENDAR_COPY_EVENT as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0431 => Ok(Self::CMSG_CALENDAR_EVENT_INVITE(Box::new(<CMSG_CALENDAR_EVENT_INVITE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0432 => Ok(Self::CMSG_CALENDAR_EVENT_RSVP(Box::new(<CMSG_CALENDAR_EVENT_RSVP as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0433 => Ok(Self::CMSG_CALENDAR_EVENT_REMOVE_INVITE(Box::new(<CMSG_CALENDAR_EVENT_REMOVE_INVITE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0434 => Ok(Self::CMSG_CALENDAR_EVENT_STATUS(Box::new(<CMSG_CALENDAR_EVENT_STATUS as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0435 => Ok(Self::CMSG_CALENDAR_EVENT_MODERATOR_STATUS(Box::new(<CMSG_CALENDAR_EVENT_MODERATOR_STATUS as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0446 => Ok(Self::CMSG_CALENDAR_COMPLAIN(Box::new(<CMSG_CALENDAR_COMPLAIN as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0462 => Ok(Self::CMSG_UPDATE_MISSILE_TRAJECTORY(Box::new(<CMSG_UPDATE_MISSILE_TRAJECTORY as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0465 => crate::util::assert_empty(body_size, opcode, "CMSG_COMPLETE_MOVIE").map(|_| Self::CMSG_COMPLETE_MOVIE),
            0x046B => Ok(Self::CMSG_QUERY_INSPECT_ACHIEVEMENTS(<CMSG_QUERY_INSPECT_ACHIEVEMENTS as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x046D => crate::util::assert_empty(body_size, opcode, "CMSG_DISMISS_CONTROLLED_VEHICLE").map(|_| Self::CMSG_DISMISS_CONTROLLED_VEHICLE),
            0x0473 => Ok(Self::CMSG_CHAR_CUSTOMIZE(Box::new(<CMSG_CHAR_CUSTOMIZE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0476 => crate::util::assert_empty(body_size, opcode, "CMSG_REQUEST_VEHICLE_EXIT").map(|_| Self::CMSG_REQUEST_VEHICLE_EXIT),
            0x0477 => crate::util::assert_empty(body_size, opcode, "CMSG_REQUEST_VEHICLE_PREV_SEAT").map(|_| Self::CMSG_REQUEST_VEHICLE_PREV_SEAT),
            0x0478 => crate::util::assert_empty(body_size, opcode, "CMSG_REQUEST_VEHICLE_NEXT_SEAT").map(|_| Self::CMSG_REQUEST_VEHICLE_NEXT_SEAT),
            0x0479 => Ok(Self::CMSG_REQUEST_VEHICLE_SWITCH_SEAT(Box::new(<CMSG_REQUEST_VEHICLE_SWITCH_SEAT as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x047A => Ok(Self::CMSG_PET_LEARN_TALENT(Box::new(<CMSG_PET_LEARN_TALENT as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0481 => Ok(Self::CMSG_GAMEOBJ_REPORT_USE(<CMSG_GAMEOBJ_REPORT_USE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x048A => Ok(Self::CMSG_REMOVE_GLYPH(<CMSG_REMOVE_GLYPH as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x048D => Ok(Self::CMSG_DISMISS_CRITTER(<CMSG_DISMISS_CRITTER as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x048F => Ok(Self::CMSG_AUCTION_LIST_PENDING_SALES(<CMSG_AUCTION_LIST_PENDING_SALES as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x0493 => Ok(Self::CMSG_ENABLETAXI(<CMSG_ENABLETAXI as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x049B => Ok(Self::CMSG_CHANGE_SEATS_ON_CONTROLLED_VEHICLE(Box::new(<CMSG_CHANGE_SEATS_ON_CONTROLLED_VEHICLE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x049C => crate::util::assert_empty(body_size, opcode, "CMSG_HEARTH_AND_RESURRECT").map(|_| Self::CMSG_HEARTH_AND_RESURRECT),
            0x04A8 => Ok(Self::CMSG_PLAYER_VEHICLE_ENTER(<CMSG_PLAYER_VEHICLE_ENTER as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x04A9 => Ok(Self::CMSG_CONTROLLER_EJECT_PASSENGER(<CMSG_CONTROLLER_EJECT_PASSENGER as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x04B3 => Ok(Self::CMSG_ITEM_REFUND_INFO(<CMSG_ITEM_REFUND_INFO as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x04B4 => Ok(Self::CMSG_ITEM_REFUND(<CMSG_ITEM_REFUND as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x04B6 => Ok(Self::CMSG_CORPSE_MAP_POSITION_QUERY(<CMSG_CORPSE_MAP_POSITION_QUERY as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x04BA => Ok(Self::CMSG_CALENDAR_EVENT_SIGNUP(Box::new(<CMSG_CALENDAR_EVENT_SIGNUP as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x04BD => Ok(Self::CMSG_EQUIPMENT_SET_SAVE(Box::new(<CMSG_EQUIPMENT_SET_SAVE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x04BE => Ok(Self::CMSG_UPDATE_PROJECTILE_POSITION(Box::new(<CMSG_UPDATE_PROJECTILE_POSITION as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x04C1 => Ok(Self::CMSG_LEARN_PREVIEW_TALENTS(Box::new(<CMSG_LEARN_PREVIEW_TALENTS as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x04C2 => Ok(Self::CMSG_LEARN_PREVIEW_TALENTS_PET(Box::new(<CMSG_LEARN_PREVIEW_TALENTS_PET as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x04CF => Ok(Self::CMSG_MOVE_GRAVITY_DISABLE_ACK(Box::new(<CMSG_MOVE_GRAVITY_DISABLE_ACK as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x04D1 => Ok(Self::CMSG_MOVE_GRAVITY_ENABLE_ACK(Box::new(<CMSG_MOVE_GRAVITY_ENABLE_ACK as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x04D5 => Ok(Self::CMSG_EQUIPMENT_SET_USE(Box::new(<CMSG_EQUIPMENT_SET_USE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x04D9 => Ok(Self::CMSG_CHAR_FACTION_CHANGE(Box::new(<CMSG_CHAR_FACTION_CHANGE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x04DF => Ok(Self::CMSG_BATTLEFIELD_MGR_ENTRY_INVITE_RESPONSE(<CMSG_BATTLEFIELD_MGR_ENTRY_INVITE_RESPONSE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x04E2 => Ok(Self::CMSG_BATTLEFIELD_MGR_QUEUE_INVITE_RESPONSE(<CMSG_BATTLEFIELD_MGR_QUEUE_INVITE_RESPONSE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x04E7 => Ok(Self::CMSG_BATTLEFIELD_MGR_EXIT_REQUEST(<CMSG_BATTLEFIELD_MGR_EXIT_REQUEST as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x04EB => Ok(Self::MSG_SET_RAID_DIFFICULTY(<MSG_SET_RAID_DIFFICULTY_Client as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x04F0 => crate::util::assert_empty(body_size, opcode, "CMSG_GMRESPONSE_RESOLVE").map(|_| Self::CMSG_GMRESPONSE_RESOLVE),
            0x04F6 => crate::util::assert_empty(body_size, opcode, "CMSG_WORLD_STATE_UI_TIMER_UPDATE").map(|_| Self::CMSG_WORLD_STATE_UI_TIMER_UPDATE),
            0x04F8 => Ok(Self::CMSG_CHAR_RACE_CHANGE(Box::new(<CMSG_CHAR_RACE_CHANGE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x04FF => crate::util::assert_empty(body_size, opcode, "CMSG_READY_FOR_ACCOUNT_DATA_TIMES").map(|_| Self::CMSG_READY_FOR_ACCOUNT_DATA_TIMES),
            0x0500 => crate::util::assert_empty(body_size, opcode, "CMSG_QUERY_QUESTS_COMPLETED").map(|_| Self::CMSG_QUERY_QUESTS_COMPLETED),
            0x0502 => Ok(Self::CMSG_GM_REPORT_LAG(Box::new(<CMSG_GM_REPORT_LAG as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0517 => Ok(Self::CMSG_MOVE_SET_COLLISION_HGT_ACK(Box::new(<CMSG_MOVE_SET_COLLISION_HGT_ACK as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            _ => Err(crate::errors::ExpectedOpcodeError::Opcode{ opcode, name: opcode_to_name(opcode), size: body_size }),
        }
    }

    #[cfg(feature = "sync")]
    pub fn read_unencrypted<R: std::io::Read>(mut r: R) -> Result<Self, crate::errors::ExpectedOpcodeError> {
        let size = (crate::util::read_u16_be(&mut r)?.saturating_sub(4)) as u32;
        let opcode = crate::util::read_u32_le(&mut r)?;

        let mut buf = vec![0; size as usize];
        r.read_exact(&mut buf)?;
        Self::read_opcodes(opcode, size, &buf)
    }
    #[cfg(all(feature = "sync", feature = "encryption"))]
    pub fn read_encrypted<R: std::io::Read>(mut r: R, d: &mut ServerDecrypterHalf) -> Result<Self, crate::errors::ExpectedOpcodeError> {
        let mut header = [0_u8; 6];
        r.read_exact(&mut header)?;
        let header = d.decrypt_client_header(header);
        let opcode = header.opcode;
        let body_size = (header.size.saturating_sub(4)) as u32;

        let mut buf = vec![0; body_size as usize];
        r.read_exact(&mut buf)?;
        Self::read_opcodes(opcode, body_size, &buf)
    }

    #[cfg(feature = "tokio")]
    pub async fn tokio_read_unencrypted<R: tokio::io::AsyncReadExt + Unpin + Send>(mut r: R) -> Result<Self, crate::errors::ExpectedOpcodeError> {
        let size = (crate::util::tokio_read_u16_be(&mut r).await?.saturating_sub(4)) as u32;
        let opcode = crate::util::tokio_read_u32_le(&mut r).await?;

        let mut buf = vec![0; size as usize];
        r.read_exact(&mut buf).await?;
        Self::read_opcodes(opcode, size, &buf)
    }
    #[cfg(all(feature = "tokio", feature = "encryption"))]
    pub async fn tokio_read_encrypted<R: tokio::io::AsyncReadExt + Unpin + Send>(mut r: R, d: &mut ServerDecrypterHalf) -> Result<Self, crate::errors::ExpectedOpcodeError> {
        let mut header = [0_u8; 6];
        r.read_exact(&mut header).await?;
        let header = d.decrypt_client_header(header);
        let opcode = header.opcode;
        let body_size = (header.size.saturating_sub(4)) as u32;

        let mut buf = vec![0; body_size as usize];
        r.read_exact(&mut buf).await?;
        Self::read_opcodes(opcode, body_size, &buf)
    }

    #[cfg(feature = "async-std")]
    pub async fn astd_read_unencrypted<R: async_std::io::ReadExt + Unpin + Send>(mut r: R) -> Result<Self, crate::errors::ExpectedOpcodeError> {
        let size = (crate::util::astd_read_u16_be(&mut r).await?.saturating_sub(4)) as u32;
        let opcode = crate::util::astd_read_u32_le(&mut r).await?;

        let mut buf = vec![0; size as usize];
        r.read_exact(&mut buf).await?;
        Self::read_opcodes(opcode, size, &buf)
    }
    #[cfg(all(feature = "async-std", feature = "encryption"))]
    pub async fn astd_read_encrypted<R: async_std::io::ReadExt + Unpin + Send>(mut r: R, d: &mut ServerDecrypterHalf) -> Result<Self, crate::errors::ExpectedOpcodeError> {
        let mut header = [0_u8; 6];
        r.read_exact(&mut header).await?;
        let header = d.decrypt_client_header(header);
        let opcode = header.opcode;
        let body_size = (header.size.saturating_sub(4)) as u32;

        let mut buf = vec![0; body_size as usize];
        r.read_exact(&mut buf).await?;
        Self::read_opcodes(opcode, body_size, &buf)
    }

    #[cfg(all(feature = "sync", feature = "encryption"))]
    pub fn write_encrypted_client<W: std::io::Write>(&self, mut w: W, e: &mut ClientEncrypterHalf) -> Result<(), std::io::Error> {
        match self {
            Self::MSG_MOVE_START_FORWARD(c) => c.write_encrypted_client(w, e),
            Self::MSG_MOVE_START_BACKWARD(c) => c.write_encrypted_client(w, e),
            Self::MSG_MOVE_STOP(c) => c.write_encrypted_client(w, e),
            Self::MSG_MOVE_START_STRAFE_LEFT(c) => c.write_encrypted_client(w, e),
            Self::MSG_MOVE_START_STRAFE_RIGHT(c) => c.write_encrypted_client(w, e),
            Self::MSG_MOVE_STOP_STRAFE(c) => c.write_encrypted_client(w, e),
            Self::MSG_MOVE_JUMP(c) => c.write_encrypted_client(w, e),
            Self::MSG_MOVE_START_TURN_LEFT(c) => c.write_encrypted_client(w, e),
            Self::MSG_MOVE_START_TURN_RIGHT(c) => c.write_encrypted_client(w, e),
            Self::MSG_MOVE_STOP_TURN(c) => c.write_encrypted_client(w, e),
            Self::MSG_MOVE_START_PITCH_UP(c) => c.write_encrypted_client(w, e),
            Self::MSG_MOVE_START_PITCH_DOWN(c) => c.write_encrypted_client(w, e),
            Self::MSG_MOVE_STOP_PITCH(c) => c.write_encrypted_client(w, e),
            Self::MSG_MOVE_SET_RUN_MODE(c) => c.write_encrypted_client(w, e),
            Self::MSG_MOVE_SET_WALK_MODE(c) => c.write_encrypted_client(w, e),
            Self::MSG_MOVE_FALL_LAND(c) => c.write_encrypted_client(w, e),
            Self::MSG_MOVE_START_SWIM(c) => c.write_encrypted_client(w, e),
            Self::MSG_MOVE_STOP_SWIM(c) => c.write_encrypted_client(w, e),
            Self::MSG_MOVE_SET_FACING(c) => c.write_encrypted_client(w, e),
            Self::MSG_MOVE_SET_PITCH(c) => c.write_encrypted_client(w, e),
            Self::MSG_MOVE_WORLDPORT_ACK => MSG_MOVE_WORLDPORT_ACK{}.write_encrypted_client(w, e),
            Self::MSG_MOVE_HEARTBEAT(c) => c.write_encrypted_client(w, e),
            Self::MSG_MOVE_HOVER(c) => c.write_encrypted_client(w, e),
            Self::MSG_PETITION_DECLINE(c) => c.write_encrypted_client(w, e),
            Self::MSG_TABARDVENDOR_ACTIVATE(c) => c.write_encrypted_client(w, e),
            Self::MSG_QUEST_PUSH_RESULT(c) => c.write_encrypted_client(w, e),
            Self::MSG_MOVE_WATER_WALK(c) => c.write_encrypted_client(w, e),
            Self::MSG_PETITION_RENAME(c) => c.write_encrypted_client(w, e),
            Self::MSG_MOVE_START_ASCEND(c) => c.write_encrypted_client(w, e),
            Self::MSG_MOVE_STOP_ASCEND(c) => c.write_encrypted_client(w, e),
            Self::MSG_MOVE_SET_FLIGHT_BACK_SPEED(c) => c.write_encrypted_client(w, e),
            Self::MSG_MOVE_START_DESCEND(c) => c.write_encrypted_client(w, e),
            Self::CMSG_CALENDAR_GET_NUM_PENDING => CMSG_CALENDAR_GET_NUM_PENDING{}.write_encrypted_client(w, e),
            Self::CMSG_BOOTME => CMSG_BOOTME{}.write_encrypted_client(w, e),
            Self::CMSG_DBLOOKUP(c) => c.write_encrypted_client(w, e),
            Self::CMSG_WORLD_TELEPORT(c) => c.write_encrypted_client(w, e),
            Self::CMSG_TELEPORT_TO_UNIT(c) => c.write_encrypted_client(w, e),
            Self::CMSG_CHAR_CREATE(c) => c.write_encrypted_client(w, e),
            Self::CMSG_CHAR_ENUM => CMSG_CHAR_ENUM{}.write_encrypted_client(w, e),
            Self::CMSG_CHAR_DELETE(c) => c.write_encrypted_client(w, e),
            Self::CMSG_PLAYER_LOGIN(c) => c.write_encrypted_client(w, e),
            Self::CMSG_PLAYER_LOGOUT => CMSG_PLAYER_LOGOUT{}.write_encrypted_client(w, e),
            Self::CMSG_LOGOUT_REQUEST => CMSG_LOGOUT_REQUEST{}.write_encrypted_client(w, e),
            Self::CMSG_LOGOUT_CANCEL => CMSG_LOGOUT_CANCEL{}.write_encrypted_client(w, e),
            Self::CMSG_NAME_QUERY(c) => c.write_encrypted_client(w, e),
            Self::CMSG_PET_NAME_QUERY(c) => c.write_encrypted_client(w, e),
            Self::CMSG_GUILD_QUERY(c) => c.write_encrypted_client(w, e),
            Self::CMSG_ITEM_QUERY_SINGLE(c) => c.write_encrypted_client(w, e),
            Self::CMSG_PAGE_TEXT_QUERY(c) => c.write_encrypted_client(w, e),
            Self::CMSG_QUEST_QUERY(c) => c.write_encrypted_client(w, e),
            Self::CMSG_GAMEOBJECT_QUERY(c) => c.write_encrypted_client(w, e),
            Self::CMSG_CREATURE_QUERY(c) => c.write_encrypted_client(w, e),
            Self::CMSG_WHO(c) => c.write_encrypted_client(w, e),
            Self::CMSG_WHOIS(c) => c.write_encrypted_client(w, e),
            Self::CMSG_CONTACT_LIST(c) => c.write_encrypted_client(w, e),
            Self::CMSG_ADD_FRIEND(c) => c.write_encrypted_client(w, e),
            Self::CMSG_DEL_FRIEND(c) => c.write_encrypted_client(w, e),
            Self::CMSG_SET_CONTACT_NOTES(c) => c.write_encrypted_client(w, e),
            Self::CMSG_ADD_IGNORE(c) => c.write_encrypted_client(w, e),
            Self::CMSG_DEL_IGNORE(c) => c.write_encrypted_client(w, e),
            Self::CMSG_GROUP_INVITE(c) => c.write_encrypted_client(w, e),
            Self::CMSG_GROUP_CANCEL => CMSG_GROUP_CANCEL{}.write_encrypted_client(w, e),
            Self::CMSG_GROUP_ACCEPT => CMSG_GROUP_ACCEPT{}.write_encrypted_client(w, e),
            Self::CMSG_GROUP_DECLINE => CMSG_GROUP_DECLINE{}.write_encrypted_client(w, e),
            Self::CMSG_GROUP_UNINVITE(c) => c.write_encrypted_client(w, e),
            Self::CMSG_GROUP_UNINVITE_GUID(c) => c.write_encrypted_client(w, e),
            Self::CMSG_GROUP_SET_LEADER(c) => c.write_encrypted_client(w, e),
            Self::CMSG_LOOT_METHOD(c) => c.write_encrypted_client(w, e),
            Self::CMSG_GROUP_DISBAND => CMSG_GROUP_DISBAND{}.write_encrypted_client(w, e),
            Self::CMSG_GUILD_CREATE(c) => c.write_encrypted_client(w, e),
            Self::CMSG_GUILD_INVITE(c) => c.write_encrypted_client(w, e),
            Self::CMSG_GUILD_ACCEPT => CMSG_GUILD_ACCEPT{}.write_encrypted_client(w, e),
            Self::CMSG_GUILD_DECLINE => CMSG_GUILD_DECLINE{}.write_encrypted_client(w, e),
            Self::CMSG_GUILD_INFO => CMSG_GUILD_INFO{}.write_encrypted_client(w, e),
            Self::CMSG_GUILD_ROSTER => CMSG_GUILD_ROSTER{}.write_encrypted_client(w, e),
            Self::CMSG_GUILD_PROMOTE(c) => c.write_encrypted_client(w, e),
            Self::CMSG_GUILD_DEMOTE(c) => c.write_encrypted_client(w, e),
            Self::CMSG_GUILD_LEAVE => CMSG_GUILD_LEAVE{}.write_encrypted_client(w, e),
            Self::CMSG_GUILD_REMOVE(c) => c.write_encrypted_client(w, e),
            Self::CMSG_GUILD_DISBAND => CMSG_GUILD_DISBAND{}.write_encrypted_client(w, e),
            Self::CMSG_GUILD_LEADER(c) => c.write_encrypted_client(w, e),
            Self::CMSG_GUILD_MOTD(c) => c.write_encrypted_client(w, e),
            Self::CMSG_MESSAGECHAT(c) => c.write_encrypted_client(w, e),
            Self::CMSG_JOIN_CHANNEL(c) => c.write_encrypted_client(w, e),
            Self::CMSG_LEAVE_CHANNEL(c) => c.write_encrypted_client(w, e),
            Self::CMSG_CHANNEL_LIST(c) => c.write_encrypted_client(w, e),
            Self::CMSG_CHANNEL_PASSWORD(c) => c.write_encrypted_client(w, e),
            Self::CMSG_CHANNEL_SET_OWNER(c) => c.write_encrypted_client(w, e),
            Self::CMSG_CHANNEL_OWNER(c) => c.write_encrypted_client(w, e),
            Self::CMSG_CHANNEL_MODERATOR(c) => c.write_encrypted_client(w, e),
            Self::CMSG_CHANNEL_UNMODERATOR(c) => c.write_encrypted_client(w, e),
            Self::CMSG_CHANNEL_MUTE(c) => c.write_encrypted_client(w, e),
            Self::CMSG_CHANNEL_UNMUTE(c) => c.write_encrypted_client(w, e),
            Self::CMSG_CHANNEL_INVITE(c) => c.write_encrypted_client(w, e),
            Self::CMSG_CHANNEL_KICK(c) => c.write_encrypted_client(w, e),
            Self::CMSG_CHANNEL_BAN(c) => c.write_encrypted_client(w, e),
            Self::CMSG_CHANNEL_UNBAN(c) => c.write_encrypted_client(w, e),
            Self::CMSG_CHANNEL_ANNOUNCEMENTS(c) => c.write_encrypted_client(w, e),
            Self::CMSG_CHANNEL_MODERATE(c) => c.write_encrypted_client(w, e),
            Self::CMSG_USE_ITEM(c) => c.write_encrypted_client(w, e),
            Self::CMSG_OPEN_ITEM(c) => c.write_encrypted_client(w, e),
            Self::CMSG_READ_ITEM(c) => c.write_encrypted_client(w, e),
            Self::CMSG_GAMEOBJ_USE(c) => c.write_encrypted_client(w, e),
            Self::CMSG_AREATRIGGER(c) => c.write_encrypted_client(w, e),
            Self::MSG_MOVE_TELEPORT(c) => c.write_encrypted_client(w, e),
            Self::MSG_MOVE_TELEPORT_ACK(c) => c.write_encrypted_client(w, e),
            Self::CMSG_MOVE_SET_RAW_POSITION(c) => c.write_encrypted_client(w, e),
            Self::CMSG_FORCE_RUN_SPEED_CHANGE_ACK(c) => c.write_encrypted_client(w, e),
            Self::CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACK(c) => c.write_encrypted_client(w, e),
            Self::CMSG_FORCE_SWIM_SPEED_CHANGE_ACK(c) => c.write_encrypted_client(w, e),
            Self::CMSG_FORCE_MOVE_ROOT_ACK(c) => c.write_encrypted_client(w, e),
            Self::CMSG_FORCE_MOVE_UNROOT_ACK(c) => c.write_encrypted_client(w, e),
            Self::CMSG_MOVE_KNOCK_BACK_ACK(c) => c.write_encrypted_client(w, e),
            Self::CMSG_MOVE_HOVER_ACK(c) => c.write_encrypted_client(w, e),
            Self::CMSG_NEXT_CINEMATIC_CAMERA => CMSG_NEXT_CINEMATIC_CAMERA{}.write_encrypted_client(w, e),
            Self::CMSG_COMPLETE_CINEMATIC => CMSG_COMPLETE_CINEMATIC{}.write_encrypted_client(w, e),
            Self::CMSG_TUTORIAL_FLAG(c) => c.write_encrypted_client(w, e),
            Self::CMSG_TUTORIAL_CLEAR => CMSG_TUTORIAL_CLEAR{}.write_encrypted_client(w, e),
            Self::CMSG_TUTORIAL_RESET => CMSG_TUTORIAL_RESET{}.write_encrypted_client(w, e),
            Self::CMSG_STANDSTATECHANGE(c) => c.write_encrypted_client(w, e),
            Self::CMSG_EMOTE(c) => c.write_encrypted_client(w, e),
            Self::CMSG_TEXT_EMOTE(c) => c.write_encrypted_client(w, e),
            Self::CMSG_AUTOSTORE_LOOT_ITEM(c) => c.write_encrypted_client(w, e),
            Self::CMSG_AUTOEQUIP_ITEM(c) => c.write_encrypted_client(w, e),
            Self::CMSG_AUTOSTORE_BAG_ITEM(c) => c.write_encrypted_client(w, e),
            Self::CMSG_SWAP_ITEM(c) => c.write_encrypted_client(w, e),
            Self::CMSG_SWAP_INV_ITEM(c) => c.write_encrypted_client(w, e),
            Self::CMSG_SPLIT_ITEM(c) => c.write_encrypted_client(w, e),
            Self::CMSG_AUTOEQUIP_ITEM_SLOT(c) => c.write_encrypted_client(w, e),
            Self::CMSG_DESTROYITEM(c) => c.write_encrypted_client(w, e),
            Self::CMSG_INSPECT(c) => c.write_encrypted_client(w, e),
            Self::CMSG_INITIATE_TRADE(c) => c.write_encrypted_client(w, e),
            Self::CMSG_BEGIN_TRADE => CMSG_BEGIN_TRADE{}.write_encrypted_client(w, e),
            Self::CMSG_BUSY_TRADE => CMSG_BUSY_TRADE{}.write_encrypted_client(w, e),
            Self::CMSG_IGNORE_TRADE => CMSG_IGNORE_TRADE{}.write_encrypted_client(w, e),
            Self::CMSG_ACCEPT_TRADE(c) => c.write_encrypted_client(w, e),
            Self::CMSG_UNACCEPT_TRADE => CMSG_UNACCEPT_TRADE{}.write_encrypted_client(w, e),
            Self::CMSG_CANCEL_TRADE => CMSG_CANCEL_TRADE{}.write_encrypted_client(w, e),
            Self::CMSG_SET_TRADE_ITEM(c) => c.write_encrypted_client(w, e),
            Self::CMSG_CLEAR_TRADE_ITEM(c) => c.write_encrypted_client(w, e),
            Self::CMSG_SET_TRADE_GOLD(c) => c.write_encrypted_client(w, e),
            Self::CMSG_SET_FACTION_ATWAR(c) => c.write_encrypted_client(w, e),
            Self::CMSG_SET_ACTION_BUTTON(c) => c.write_encrypted_client(w, e),
            Self::CMSG_CAST_SPELL(c) => c.write_encrypted_client(w, e),
            Self::CMSG_CANCEL_CAST(c) => c.write_encrypted_client(w, e),
            Self::CMSG_CANCEL_AURA(c) => c.write_encrypted_client(w, e),
            Self::CMSG_CANCEL_CHANNELLING(c) => c.write_encrypted_client(w, e),
            Self::CMSG_SET_SELECTION(c) => c.write_encrypted_client(w, e),
            Self::CMSG_DELETEEQUIPMENT_SET(c) => c.write_encrypted_client(w, e),
            Self::CMSG_INSTANCE_LOCK_RESPONSE(c) => c.write_encrypted_client(w, e),
            Self::CMSG_ATTACKSWING(c) => c.write_encrypted_client(w, e),
            Self::CMSG_ATTACKSTOP => CMSG_ATTACKSTOP{}.write_encrypted_client(w, e),
            Self::CMSG_REPOP_REQUEST => CMSG_REPOP_REQUEST{}.write_encrypted_client(w, e),
            Self::CMSG_RESURRECT_RESPONSE(c) => c.write_encrypted_client(w, e),
            Self::CMSG_LOOT(c) => c.write_encrypted_client(w, e),
            Self::CMSG_LOOT_MONEY => CMSG_LOOT_MONEY{}.write_encrypted_client(w, e),
            Self::CMSG_LOOT_RELEASE(c) => c.write_encrypted_client(w, e),
            Self::CMSG_DUEL_ACCEPTED(c) => c.write_encrypted_client(w, e),
            Self::CMSG_DUEL_CANCELLED(c) => c.write_encrypted_client(w, e),
            Self::CMSG_MOUNTSPECIAL_ANIM => CMSG_MOUNTSPECIAL_ANIM{}.write_encrypted_client(w, e),
            Self::CMSG_PET_SET_ACTION(c) => c.write_encrypted_client(w, e),
            Self::CMSG_PET_ACTION(c) => c.write_encrypted_client(w, e),
            Self::CMSG_PET_ABANDON(c) => c.write_encrypted_client(w, e),
            Self::CMSG_PET_RENAME(c) => c.write_encrypted_client(w, e),
            Self::CMSG_GOSSIP_HELLO(c) => c.write_encrypted_client(w, e),
            Self::CMSG_GOSSIP_SELECT_OPTION(c) => c.write_encrypted_client(w, e),
            Self::CMSG_NPC_TEXT_QUERY(c) => c.write_encrypted_client(w, e),
            Self::CMSG_QUESTGIVER_STATUS_QUERY(c) => c.write_encrypted_client(w, e),
            Self::CMSG_QUESTGIVER_HELLO(c) => c.write_encrypted_client(w, e),
            Self::CMSG_QUESTGIVER_QUERY_QUEST(c) => c.write_encrypted_client(w, e),
            Self::CMSG_QUESTGIVER_QUEST_AUTOLAUNCH => CMSG_QUESTGIVER_QUEST_AUTOLAUNCH{}.write_encrypted_client(w, e),
            Self::CMSG_QUESTGIVER_ACCEPT_QUEST(c) => c.write_encrypted_client(w, e),
            Self::CMSG_QUESTGIVER_COMPLETE_QUEST(c) => c.write_encrypted_client(w, e),
            Self::CMSG_QUESTGIVER_REQUEST_REWARD(c) => c.write_encrypted_client(w, e),
            Self::CMSG_QUESTGIVER_CHOOSE_REWARD(c) => c.write_encrypted_client(w, e),
            Self::CMSG_QUESTGIVER_CANCEL => CMSG_QUESTGIVER_CANCEL{}.write_encrypted_client(w, e),
            Self::CMSG_QUESTLOG_SWAP_QUEST(c) => c.write_encrypted_client(w, e),
            Self::CMSG_QUESTLOG_REMOVE_QUEST(c) => c.write_encrypted_client(w, e),
            Self::CMSG_QUEST_CONFIRM_ACCEPT(c) => c.write_encrypted_client(w, e),
            Self::CMSG_PUSHQUESTTOPARTY(c) => c.write_encrypted_client(w, e),
            Self::CMSG_LIST_INVENTORY(c) => c.write_encrypted_client(w, e),
            Self::CMSG_SELL_ITEM(c) => c.write_encrypted_client(w, e),
            Self::CMSG_BUY_ITEM(c) => c.write_encrypted_client(w, e),
            Self::CMSG_BUY_ITEM_IN_SLOT(c) => c.write_encrypted_client(w, e),
            Self::CMSG_TAXINODE_STATUS_QUERY(c) => c.write_encrypted_client(w, e),
            Self::CMSG_TAXIQUERYAVAILABLENODES(c) => c.write_encrypted_client(w, e),
            Self::CMSG_ACTIVATETAXI(c) => c.write_encrypted_client(w, e),
            Self::CMSG_TRAINER_LIST(c) => c.write_encrypted_client(w, e),
            Self::CMSG_TRAINER_BUY_SPELL(c) => c.write_encrypted_client(w, e),
            Self::CMSG_BINDER_ACTIVATE(c) => c.write_encrypted_client(w, e),
            Self::CMSG_BANKER_ACTIVATE(c) => c.write_encrypted_client(w, e),
            Self::CMSG_BUY_BANK_SLOT(c) => c.write_encrypted_client(w, e),
            Self::CMSG_PETITION_SHOWLIST(c) => c.write_encrypted_client(w, e),
            Self::CMSG_PETITION_BUY(c) => c.write_encrypted_client(w, e),
            Self::CMSG_PETITION_SHOW_SIGNATURES(c) => c.write_encrypted_client(w, e),
            Self::CMSG_PETITION_SIGN(c) => c.write_encrypted_client(w, e),
            Self::CMSG_OFFER_PETITION(c) => c.write_encrypted_client(w, e),
            Self::CMSG_TURN_IN_PETITION(c) => c.write_encrypted_client(w, e),
            Self::CMSG_PETITION_QUERY(c) => c.write_encrypted_client(w, e),
            Self::CMSG_BUG(c) => c.write_encrypted_client(w, e),
            Self::CMSG_PLAYED_TIME(c) => c.write_encrypted_client(w, e),
            Self::CMSG_QUERY_TIME => CMSG_QUERY_TIME{}.write_encrypted_client(w, e),
            Self::CMSG_RECLAIM_CORPSE(c) => c.write_encrypted_client(w, e),
            Self::CMSG_WRAP_ITEM(c) => c.write_encrypted_client(w, e),
            Self::MSG_MINIMAP_PING(c) => c.write_encrypted_client(w, e),
            Self::CMSG_PING(c) => c.write_encrypted_client(w, e),
            Self::CMSG_SETSHEATHED(c) => c.write_encrypted_client(w, e),
            Self::CMSG_QUEST_POI_QUERY(c) => c.write_encrypted_client(w, e),
            Self::CMSG_AUTH_SESSION(c) => c.write_encrypted_client(w, e),
            Self::CMSG_PET_CAST_SPELL(c) => c.write_encrypted_client(w, e),
            Self::MSG_SAVE_GUILD_EMBLEM(c) => c.write_encrypted_client(w, e),
            Self::CMSG_ZONEUPDATE(c) => c.write_encrypted_client(w, e),
            Self::MSG_RANDOM_ROLL(c) => c.write_encrypted_client(w, e),
            Self::CMSG_UNLEARN_SKILL(c) => c.write_encrypted_client(w, e),
            Self::CMSG_GMTICKET_CREATE(c) => c.write_encrypted_client(w, e),
            Self::CMSG_GMTICKET_UPDATETEXT(c) => c.write_encrypted_client(w, e),
            Self::CMSG_REQUEST_ACCOUNT_DATA(c) => c.write_encrypted_client(w, e),
            Self::CMSG_UPDATE_ACCOUNT_DATA(c) => c.write_encrypted_client(w, e),
            Self::CMSG_GMTICKET_GETTICKET => CMSG_GMTICKET_GETTICKET{}.write_encrypted_client(w, e),
            Self::CMSG_UNLEARN_TALENTS => CMSG_UNLEARN_TALENTS{}.write_encrypted_client(w, e),
            Self::MSG_CORPSE_QUERY => MSG_CORPSE_QUERY_Client{}.write_encrypted_client(w, e),
            Self::CMSG_GMTICKET_DELETETICKET => CMSG_GMTICKET_DELETETICKET{}.write_encrypted_client(w, e),
            Self::CMSG_GMTICKET_SYSTEMSTATUS => CMSG_GMTICKET_SYSTEMSTATUS{}.write_encrypted_client(w, e),
            Self::CMSG_SPIRIT_HEALER_ACTIVATE(c) => c.write_encrypted_client(w, e),
            Self::CMSG_CHAT_IGNORED(c) => c.write_encrypted_client(w, e),
            Self::CMSG_GUILD_RANK(c) => c.write_encrypted_client(w, e),
            Self::CMSG_GUILD_ADD_RANK(c) => c.write_encrypted_client(w, e),
            Self::CMSG_GUILD_DEL_RANK => CMSG_GUILD_DEL_RANK{}.write_encrypted_client(w, e),
            Self::CMSG_GUILD_SET_PUBLIC_NOTE(c) => c.write_encrypted_client(w, e),
            Self::CMSG_GUILD_SET_OFFICER_NOTE(c) => c.write_encrypted_client(w, e),
            Self::CMSG_SEND_MAIL(c) => c.write_encrypted_client(w, e),
            Self::CMSG_GET_MAIL_LIST(c) => c.write_encrypted_client(w, e),
            Self::CMSG_BATTLEFIELD_LIST(c) => c.write_encrypted_client(w, e),
            Self::CMSG_ITEM_TEXT_QUERY(c) => c.write_encrypted_client(w, e),
            Self::CMSG_MAIL_TAKE_MONEY(c) => c.write_encrypted_client(w, e),
            Self::CMSG_MAIL_TAKE_ITEM(c) => c.write_encrypted_client(w, e),
            Self::CMSG_MAIL_MARK_AS_READ(c) => c.write_encrypted_client(w, e),
            Self::CMSG_MAIL_RETURN_TO_SENDER(c) => c.write_encrypted_client(w, e),
            Self::CMSG_MAIL_DELETE(c) => c.write_encrypted_client(w, e),
            Self::CMSG_MAIL_CREATE_TEXT_ITEM(c) => c.write_encrypted_client(w, e),
            Self::CMSG_LEARN_TALENT(c) => c.write_encrypted_client(w, e),
            Self::CMSG_TOGGLE_PVP(c) => c.write_encrypted_client(w, e),
            Self::MSG_AUCTION_HELLO(c) => c.write_encrypted_client(w, e),
            Self::CMSG_AUCTION_SELL_ITEM(c) => c.write_encrypted_client(w, e),
            Self::CMSG_AUCTION_REMOVE_ITEM(c) => c.write_encrypted_client(w, e),
            Self::CMSG_AUCTION_LIST_ITEMS(c) => c.write_encrypted_client(w, e),
            Self::CMSG_AUCTION_LIST_OWNER_ITEMS(c) => c.write_encrypted_client(w, e),
            Self::CMSG_AUCTION_PLACE_BID(c) => c.write_encrypted_client(w, e),
            Self::CMSG_AUCTION_LIST_BIDDER_ITEMS(c) => c.write_encrypted_client(w, e),
            Self::CMSG_SET_AMMO(c) => c.write_encrypted_client(w, e),
            Self::CMSG_SET_ACTIVE_MOVER(c) => c.write_encrypted_client(w, e),
            Self::CMSG_PET_CANCEL_AURA(c) => c.write_encrypted_client(w, e),
            Self::CMSG_CANCEL_AUTO_REPEAT_SPELL => CMSG_CANCEL_AUTO_REPEAT_SPELL{}.write_encrypted_client(w, e),
            Self::MSG_LIST_STABLED_PETS(c) => c.write_encrypted_client(w, e),
            Self::CMSG_STABLE_PET(c) => c.write_encrypted_client(w, e),
            Self::CMSG_UNSTABLE_PET(c) => c.write_encrypted_client(w, e),
            Self::CMSG_BUY_STABLE_SLOT(c) => c.write_encrypted_client(w, e),
            Self::CMSG_STABLE_SWAP_PET(c) => c.write_encrypted_client(w, e),
            Self::CMSG_REQUEST_PET_INFO => CMSG_REQUEST_PET_INFO{}.write_encrypted_client(w, e),
            Self::CMSG_FAR_SIGHT(c) => c.write_encrypted_client(w, e),
            Self::CMSG_GROUP_CHANGE_SUB_GROUP(c) => c.write_encrypted_client(w, e),
            Self::CMSG_REQUEST_PARTY_MEMBER_STATS(c) => c.write_encrypted_client(w, e),
            Self::CMSG_GROUP_SWAP_SUB_GROUP(c) => c.write_encrypted_client(w, e),
            Self::CMSG_AUTOSTORE_BANK_ITEM(c) => c.write_encrypted_client(w, e),
            Self::CMSG_AUTOBANK_ITEM(c) => c.write_encrypted_client(w, e),
            Self::MSG_QUERY_NEXT_MAIL_TIME => MSG_QUERY_NEXT_MAIL_TIME_Client{}.write_encrypted_client(w, e),
            Self::CMSG_GROUP_RAID_CONVERT => CMSG_GROUP_RAID_CONVERT{}.write_encrypted_client(w, e),
            Self::CMSG_GROUP_ASSISTANT_LEADER(c) => c.write_encrypted_client(w, e),
            Self::CMSG_BUYBACK_ITEM(c) => c.write_encrypted_client(w, e),
            Self::CMSG_SET_SAVED_INSTANCE_EXTEND(c) => c.write_encrypted_client(w, e),
            Self::CMSG_LFG_GET_STATUS => CMSG_LFG_GET_STATUS{}.write_encrypted_client(w, e),
            Self::CMSG_GMTICKETSYSTEM_TOGGLE => CMSG_GMTICKETSYSTEM_TOGGLE{}.write_encrypted_client(w, e),
            Self::CMSG_CANCEL_GROWTH_AURA => CMSG_CANCEL_GROWTH_AURA{}.write_encrypted_client(w, e),
            Self::CMSG_LOOT_ROLL(c) => c.write_encrypted_client(w, e),
            Self::CMSG_LOOT_MASTER_GIVE(c) => c.write_encrypted_client(w, e),
            Self::CMSG_REPAIR_ITEM(c) => c.write_encrypted_client(w, e),
            Self::MSG_TALENT_WIPE_CONFIRM(c) => c.write_encrypted_client(w, e),
            Self::CMSG_SUMMON_RESPONSE(c) => c.write_encrypted_client(w, e),
            Self::CMSG_SELF_RES => CMSG_SELF_RES{}.write_encrypted_client(w, e),
            Self::CMSG_TOGGLE_HELM => CMSG_TOGGLE_HELM{}.write_encrypted_client(w, e),
            Self::CMSG_TOGGLE_CLOAK => CMSG_TOGGLE_CLOAK{}.write_encrypted_client(w, e),
            Self::CMSG_SET_ACTIONBAR_TOGGLES(c) => c.write_encrypted_client(w, e),
            Self::CMSG_ITEM_NAME_QUERY(c) => c.write_encrypted_client(w, e),
            Self::CMSG_CHAR_RENAME(c) => c.write_encrypted_client(w, e),
            Self::CMSG_MOVE_SPLINE_DONE(c) => c.write_encrypted_client(w, e),
            Self::CMSG_MOVE_FALL_RESET(c) => c.write_encrypted_client(w, e),
            Self::CMSG_REQUEST_RAID_INFO => CMSG_REQUEST_RAID_INFO{}.write_encrypted_client(w, e),
            Self::CMSG_MOVE_TIME_SKIPPED(c) => c.write_encrypted_client(w, e),
            Self::CMSG_MOVE_FEATHER_FALL_ACK(c) => c.write_encrypted_client(w, e),
            Self::CMSG_MOVE_WATER_WALK_ACK(c) => c.write_encrypted_client(w, e),
            Self::CMSG_MOVE_NOT_ACTIVE_MOVER(c) => c.write_encrypted_client(w, e),
            Self::CMSG_BATTLEFIELD_STATUS => CMSG_BATTLEFIELD_STATUS{}.write_encrypted_client(w, e),
            Self::CMSG_BATTLEFIELD_PORT(c) => c.write_encrypted_client(w, e),
            Self::MSG_INSPECT_HONOR_STATS(c) => c.write_encrypted_client(w, e),
            Self::CMSG_BATTLEMASTER_HELLO(c) => c.write_encrypted_client(w, e),
            Self::CMSG_FORCE_WALK_SPEED_CHANGE_ACK(c) => c.write_encrypted_client(w, e),
            Self::CMSG_FORCE_SWIM_BACK_SPEED_CHANGE_ACK(c) => c.write_encrypted_client(w, e),
            Self::CMSG_FORCE_TURN_RATE_CHANGE_ACK(c) => c.write_encrypted_client(w, e),
            Self::MSG_PVP_LOG_DATA => MSG_PVP_LOG_DATA_Client{}.write_encrypted_client(w, e),
            Self::CMSG_LEAVE_BATTLEFIELD(c) => c.write_encrypted_client(w, e),
            Self::CMSG_AREA_SPIRIT_HEALER_QUERY(c) => c.write_encrypted_client(w, e),
            Self::CMSG_AREA_SPIRIT_HEALER_QUEUE(c) => c.write_encrypted_client(w, e),
            Self::CMSG_WARDEN_DATA(c) => c.write_encrypted_client(w, e),
            Self::MSG_BATTLEGROUND_PLAYER_POSITIONS => MSG_BATTLEGROUND_PLAYER_POSITIONS_Client{}.write_encrypted_client(w, e),
            Self::CMSG_PET_STOP_ATTACK(c) => c.write_encrypted_client(w, e),
            Self::CMSG_BATTLEMASTER_JOIN(c) => c.write_encrypted_client(w, e),
            Self::CMSG_PET_UNLEARN(c) => c.write_encrypted_client(w, e),
            Self::CMSG_PET_SPELL_AUTOCAST(c) => c.write_encrypted_client(w, e),
            Self::CMSG_GUILD_INFO_TEXT(c) => c.write_encrypted_client(w, e),
            Self::CMSG_ACTIVATETAXIEXPRESS(c) => c.write_encrypted_client(w, e),
            Self::CMSG_SET_FACTION_INACTIVE(c) => c.write_encrypted_client(w, e),
            Self::CMSG_SET_WATCHED_FACTION(c) => c.write_encrypted_client(w, e),
            Self::CMSG_RESET_INSTANCES => CMSG_RESET_INSTANCES{}.write_encrypted_client(w, e),
            Self::MSG_RAID_TARGET_UPDATE(c) => c.write_encrypted_client(w, e),
            Self::MSG_RAID_READY_CHECK(c) => c.write_encrypted_client(w, e),
            Self::MSG_SET_DUNGEON_DIFFICULTY(c) => c.write_encrypted_client(w, e),
            Self::CMSG_GMSURVEY_SUBMIT(c) => c.write_encrypted_client(w, e),
            Self::CMSG_MOVE_SET_CAN_TRANSITION_BETWEEN_SWIM_AND_FLY_ACK(c) => c.write_encrypted_client(w, e),
            Self::CMSG_MOVE_SET_CAN_FLY_ACK(c) => c.write_encrypted_client(w, e),
            Self::CMSG_MOVE_SET_FLY(c) => c.write_encrypted_client(w, e),
            Self::CMSG_SOCKET_GEMS(c) => c.write_encrypted_client(w, e),
            Self::CMSG_ARENA_TEAM_ROSTER(c) => c.write_encrypted_client(w, e),
            Self::CMSG_ARENA_TEAM_INVITE(c) => c.write_encrypted_client(w, e),
            Self::CMSG_ARENA_TEAM_ACCEPT => CMSG_ARENA_TEAM_ACCEPT{}.write_encrypted_client(w, e),
            Self::CMSG_ARENA_TEAM_DECLINE => CMSG_ARENA_TEAM_DECLINE{}.write_encrypted_client(w, e),
            Self::CMSG_ARENA_TEAM_LEAVE(c) => c.write_encrypted_client(w, e),
            Self::CMSG_ARENA_TEAM_REMOVE(c) => c.write_encrypted_client(w, e),
            Self::CMSG_ARENA_TEAM_DISBAND(c) => c.write_encrypted_client(w, e),
            Self::CMSG_ARENA_TEAM_LEADER(c) => c.write_encrypted_client(w, e),
            Self::CMSG_BATTLEMASTER_JOIN_ARENA(c) => c.write_encrypted_client(w, e),
            Self::CMSG_LFG_JOIN(c) => c.write_encrypted_client(w, e),
            Self::CMSG_LFG_LEAVE => CMSG_LFG_LEAVE{}.write_encrypted_client(w, e),
            Self::CMSG_SEARCH_LFG_JOIN(c) => c.write_encrypted_client(w, e),
            Self::CMSG_SEARCH_LFG_LEAVE(c) => c.write_encrypted_client(w, e),
            Self::CMSG_LFG_PROPOSAL_RESULT(c) => c.write_encrypted_client(w, e),
            Self::CMSG_SET_LFG_COMMENT(c) => c.write_encrypted_client(w, e),
            Self::CMSG_LFG_SET_ROLES(c) => c.write_encrypted_client(w, e),
            Self::CMSG_LFG_SET_BOOT_VOTE(c) => c.write_encrypted_client(w, e),
            Self::CMSG_LFD_PLAYER_LOCK_INFO_REQUEST => CMSG_LFD_PLAYER_LOCK_INFO_REQUEST{}.write_encrypted_client(w, e),
            Self::CMSG_LFG_TELEPORT(c) => c.write_encrypted_client(w, e),
            Self::CMSG_LFD_PARTY_LOCK_INFO_REQUEST => CMSG_LFD_PARTY_LOCK_INFO_REQUEST{}.write_encrypted_client(w, e),
            Self::CMSG_SET_TITLE(c) => c.write_encrypted_client(w, e),
            Self::CMSG_CANCEL_MOUNT_AURA => CMSG_CANCEL_MOUNT_AURA{}.write_encrypted_client(w, e),
            Self::MSG_INSPECT_ARENA_TEAMS(c) => c.write_encrypted_client(w, e),
            Self::CMSG_CANCEL_TEMP_ENCHANTMENT(c) => c.write_encrypted_client(w, e),
            Self::CMSG_FORCE_FLIGHT_SPEED_CHANGE_ACK(c) => c.write_encrypted_client(w, e),
            Self::CMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE_ACK(c) => c.write_encrypted_client(w, e),
            Self::CMSG_SET_TAXI_BENCHMARK_MODE(c) => c.write_encrypted_client(w, e),
            Self::CMSG_REALM_SPLIT(c) => c.write_encrypted_client(w, e),
            Self::CMSG_MOVE_CHNG_TRANSPORT(c) => c.write_encrypted_client(w, e),
            Self::MSG_PARTY_ASSIGNMENT(c) => c.write_encrypted_client(w, e),
            Self::CMSG_TIME_SYNC_RESP(c) => c.write_encrypted_client(w, e),
            Self::MSG_RAID_READY_CHECK_CONFIRM(c) => c.write_encrypted_client(w, e),
            Self::CMSG_VOICE_SESSION_ENABLE(c) => c.write_encrypted_client(w, e),
            Self::CMSG_COMMENTATOR_ENABLE(c) => c.write_encrypted_client(w, e),
            Self::MSG_RAID_READY_CHECK_FINISHED => MSG_RAID_READY_CHECK_FINISHED_Client{}.write_encrypted_client(w, e),
            Self::CMSG_COMPLAIN(c) => c.write_encrypted_client(w, e),
            Self::CMSG_CHANNEL_DISPLAY_LIST(c) => c.write_encrypted_client(w, e),
            Self::CMSG_SET_ACTIVE_VOICE_CHANNEL(c) => c.write_encrypted_client(w, e),
            Self::CMSG_GET_CHANNEL_MEMBER_COUNT(c) => c.write_encrypted_client(w, e),
            Self::CMSG_CHANNEL_VOICE_ON => CMSG_CHANNEL_VOICE_ON{}.write_encrypted_client(w, e),
            Self::CMSG_REPORT_PVP_AFK(c) => c.write_encrypted_client(w, e),
            Self::CMSG_GUILD_BANKER_ACTIVATE(c) => c.write_encrypted_client(w, e),
            Self::CMSG_GUILD_BANK_QUERY_TAB(c) => c.write_encrypted_client(w, e),
            Self::CMSG_GUILD_BANK_SWAP_ITEMS(c) => c.write_encrypted_client(w, e),
            Self::CMSG_GUILD_BANK_BUY_TAB(c) => c.write_encrypted_client(w, e),
            Self::CMSG_GUILD_BANK_UPDATE_TAB(c) => c.write_encrypted_client(w, e),
            Self::CMSG_GUILD_BANK_DEPOSIT_MONEY(c) => c.write_encrypted_client(w, e),
            Self::CMSG_GUILD_BANK_WITHDRAW_MONEY(c) => c.write_encrypted_client(w, e),
            Self::MSG_GUILD_BANK_LOG_QUERY(c) => c.write_encrypted_client(w, e),
            Self::CMSG_SET_CHANNEL_WATCH(c) => c.write_encrypted_client(w, e),
            Self::CMSG_CLEAR_CHANNEL_WATCH(c) => c.write_encrypted_client(w, e),
            Self::CMSG_SPELLCLICK(c) => c.write_encrypted_client(w, e),
            Self::MSG_GUILD_PERMISSIONS => MSG_GUILD_PERMISSIONS_Client{}.write_encrypted_client(w, e),
            Self::MSG_GUILD_BANK_MONEY_WITHDRAWN => MSG_GUILD_BANK_MONEY_WITHDRAWN_Client{}.write_encrypted_client(w, e),
            Self::MSG_GUILD_EVENT_LOG_QUERY => MSG_GUILD_EVENT_LOG_QUERY_Client{}.write_encrypted_client(w, e),
            Self::CMSG_GET_MIRRORIMAGE_DATA(c) => c.write_encrypted_client(w, e),
            Self::CMSG_KEEP_ALIVE => CMSG_KEEP_ALIVE{}.write_encrypted_client(w, e),
            Self::CMSG_OPT_OUT_OF_LOOT(c) => c.write_encrypted_client(w, e),
            Self::MSG_QUERY_GUILD_BANK_TEXT(c) => c.write_encrypted_client(w, e),
            Self::CMSG_SET_GUILD_BANK_TEXT(c) => c.write_encrypted_client(w, e),
            Self::CMSG_GRANT_LEVEL(c) => c.write_encrypted_client(w, e),
            Self::CMSG_TOTEM_DESTROYED(c) => c.write_encrypted_client(w, e),
            Self::CMSG_QUESTGIVER_STATUS_MULTIPLE_QUERY => CMSG_QUESTGIVER_STATUS_MULTIPLE_QUERY{}.write_encrypted_client(w, e),
            Self::CMSG_SET_PLAYER_DECLINED_NAMES(c) => c.write_encrypted_client(w, e),
            Self::CMSG_ACCEPT_LEVEL_GRANT(c) => c.write_encrypted_client(w, e),
            Self::CMSG_ALTER_APPEARANCE(c) => c.write_encrypted_client(w, e),
            Self::CMSG_CALENDAR_GET_CALENDAR => CMSG_CALENDAR_GET_CALENDAR{}.write_encrypted_client(w, e),
            Self::CMSG_CALENDAR_GET_EVENT(c) => c.write_encrypted_client(w, e),
            Self::CMSG_CALENDAR_GUILD_FILTER(c) => c.write_encrypted_client(w, e),
            Self::CMSG_CALENDAR_ARENA_TEAM(c) => c.write_encrypted_client(w, e),
            Self::CMSG_CALENDAR_ADD_EVENT(c) => c.write_encrypted_client(w, e),
            Self::CMSG_CALENDAR_UPDATE_EVENT(c) => c.write_encrypted_client(w, e),
            Self::CMSG_CALENDAR_REMOVE_EVENT(c) => c.write_encrypted_client(w, e),
            Self::CMSG_CALENDAR_COPY_EVENT(c) => c.write_encrypted_client(w, e),
            Self::CMSG_CALENDAR_EVENT_INVITE(c) => c.write_encrypted_client(w, e),
            Self::CMSG_CALENDAR_EVENT_RSVP(c) => c.write_encrypted_client(w, e),
            Self::CMSG_CALENDAR_EVENT_REMOVE_INVITE(c) => c.write_encrypted_client(w, e),
            Self::CMSG_CALENDAR_EVENT_STATUS(c) => c.write_encrypted_client(w, e),
            Self::CMSG_CALENDAR_EVENT_MODERATOR_STATUS(c) => c.write_encrypted_client(w, e),
            Self::CMSG_CALENDAR_COMPLAIN(c) => c.write_encrypted_client(w, e),
            Self::CMSG_UPDATE_MISSILE_TRAJECTORY(c) => c.write_encrypted_client(w, e),
            Self::CMSG_COMPLETE_MOVIE => CMSG_COMPLETE_MOVIE{}.write_encrypted_client(w, e),
            Self::CMSG_QUERY_INSPECT_ACHIEVEMENTS(c) => c.write_encrypted_client(w, e),
            Self::CMSG_DISMISS_CONTROLLED_VEHICLE => CMSG_DISMISS_CONTROLLED_VEHICLE{}.write_encrypted_client(w, e),
            Self::CMSG_CHAR_CUSTOMIZE(c) => c.write_encrypted_client(w, e),
            Self::CMSG_REQUEST_VEHICLE_EXIT => CMSG_REQUEST_VEHICLE_EXIT{}.write_encrypted_client(w, e),
            Self::CMSG_REQUEST_VEHICLE_PREV_SEAT => CMSG_REQUEST_VEHICLE_PREV_SEAT{}.write_encrypted_client(w, e),
            Self::CMSG_REQUEST_VEHICLE_NEXT_SEAT => CMSG_REQUEST_VEHICLE_NEXT_SEAT{}.write_encrypted_client(w, e),
            Self::CMSG_REQUEST_VEHICLE_SWITCH_SEAT(c) => c.write_encrypted_client(w, e),
            Self::CMSG_PET_LEARN_TALENT(c) => c.write_encrypted_client(w, e),
            Self::CMSG_GAMEOBJ_REPORT_USE(c) => c.write_encrypted_client(w, e),
            Self::CMSG_REMOVE_GLYPH(c) => c.write_encrypted_client(w, e),
            Self::CMSG_DISMISS_CRITTER(c) => c.write_encrypted_client(w, e),
            Self::CMSG_AUCTION_LIST_PENDING_SALES(c) => c.write_encrypted_client(w, e),
            Self::CMSG_ENABLETAXI(c) => c.write_encrypted_client(w, e),
            Self::CMSG_CHANGE_SEATS_ON_CONTROLLED_VEHICLE(c) => c.write_encrypted_client(w, e),
            Self::CMSG_HEARTH_AND_RESURRECT => CMSG_HEARTH_AND_RESURRECT{}.write_encrypted_client(w, e),
            Self::CMSG_PLAYER_VEHICLE_ENTER(c) => c.write_encrypted_client(w, e),
            Self::CMSG_CONTROLLER_EJECT_PASSENGER(c) => c.write_encrypted_client(w, e),
            Self::CMSG_ITEM_REFUND_INFO(c) => c.write_encrypted_client(w, e),
            Self::CMSG_ITEM_REFUND(c) => c.write_encrypted_client(w, e),
            Self::CMSG_CORPSE_MAP_POSITION_QUERY(c) => c.write_encrypted_client(w, e),
            Self::CMSG_CALENDAR_EVENT_SIGNUP(c) => c.write_encrypted_client(w, e),
            Self::CMSG_EQUIPMENT_SET_SAVE(c) => c.write_encrypted_client(w, e),
            Self::CMSG_UPDATE_PROJECTILE_POSITION(c) => c.write_encrypted_client(w, e),
            Self::CMSG_LEARN_PREVIEW_TALENTS(c) => c.write_encrypted_client(w, e),
            Self::CMSG_LEARN_PREVIEW_TALENTS_PET(c) => c.write_encrypted_client(w, e),
            Self::CMSG_MOVE_GRAVITY_DISABLE_ACK(c) => c.write_encrypted_client(w, e),
            Self::CMSG_MOVE_GRAVITY_ENABLE_ACK(c) => c.write_encrypted_client(w, e),
            Self::CMSG_EQUIPMENT_SET_USE(c) => c.write_encrypted_client(w, e),
            Self::CMSG_CHAR_FACTION_CHANGE(c) => c.write_encrypted_client(w, e),
            Self::CMSG_BATTLEFIELD_MGR_ENTRY_INVITE_RESPONSE(c) => c.write_encrypted_client(w, e),
            Self::CMSG_BATTLEFIELD_MGR_QUEUE_INVITE_RESPONSE(c) => c.write_encrypted_client(w, e),
            Self::CMSG_BATTLEFIELD_MGR_EXIT_REQUEST(c) => c.write_encrypted_client(w, e),
            Self::MSG_SET_RAID_DIFFICULTY(c) => c.write_encrypted_client(w, e),
            Self::CMSG_GMRESPONSE_RESOLVE => CMSG_GMRESPONSE_RESOLVE{}.write_encrypted_client(w, e),
            Self::CMSG_WORLD_STATE_UI_TIMER_UPDATE => CMSG_WORLD_STATE_UI_TIMER_UPDATE{}.write_encrypted_client(w, e),
            Self::CMSG_CHAR_RACE_CHANGE(c) => c.write_encrypted_client(w, e),
            Self::CMSG_READY_FOR_ACCOUNT_DATA_TIMES => CMSG_READY_FOR_ACCOUNT_DATA_TIMES{}.write_encrypted_client(w, e),
            Self::CMSG_QUERY_QUESTS_COMPLETED => CMSG_QUERY_QUESTS_COMPLETED{}.write_encrypted_client(w, e),
            Self::CMSG_GM_REPORT_LAG(c) => c.write_encrypted_client(w, e),
            Self::CMSG_MOVE_SET_COLLISION_HGT_ACK(c) => c.write_encrypted_client(w, e),
        }
    }

    #[cfg(feature = "sync")]
    pub fn write_unencrypted_client<W: std::io::Write>(&self, mut w: W) -> Result<(), std::io::Error> {
        match self {
            Self::MSG_MOVE_START_FORWARD(c) => c.write_unencrypted_client(w),
            Self::MSG_MOVE_START_BACKWARD(c) => c.write_unencrypted_client(w),
            Self::MSG_MOVE_STOP(c) => c.write_unencrypted_client(w),
            Self::MSG_MOVE_START_STRAFE_LEFT(c) => c.write_unencrypted_client(w),
            Self::MSG_MOVE_START_STRAFE_RIGHT(c) => c.write_unencrypted_client(w),
            Self::MSG_MOVE_STOP_STRAFE(c) => c.write_unencrypted_client(w),
            Self::MSG_MOVE_JUMP(c) => c.write_unencrypted_client(w),
            Self::MSG_MOVE_START_TURN_LEFT(c) => c.write_unencrypted_client(w),
            Self::MSG_MOVE_START_TURN_RIGHT(c) => c.write_unencrypted_client(w),
            Self::MSG_MOVE_STOP_TURN(c) => c.write_unencrypted_client(w),
            Self::MSG_MOVE_START_PITCH_UP(c) => c.write_unencrypted_client(w),
            Self::MSG_MOVE_START_PITCH_DOWN(c) => c.write_unencrypted_client(w),
            Self::MSG_MOVE_STOP_PITCH(c) => c.write_unencrypted_client(w),
            Self::MSG_MOVE_SET_RUN_MODE(c) => c.write_unencrypted_client(w),
            Self::MSG_MOVE_SET_WALK_MODE(c) => c.write_unencrypted_client(w),
            Self::MSG_MOVE_FALL_LAND(c) => c.write_unencrypted_client(w),
            Self::MSG_MOVE_START_SWIM(c) => c.write_unencrypted_client(w),
            Self::MSG_MOVE_STOP_SWIM(c) => c.write_unencrypted_client(w),
            Self::MSG_MOVE_SET_FACING(c) => c.write_unencrypted_client(w),
            Self::MSG_MOVE_SET_PITCH(c) => c.write_unencrypted_client(w),
            Self::MSG_MOVE_WORLDPORT_ACK => MSG_MOVE_WORLDPORT_ACK{}.write_unencrypted_client(w),
            Self::MSG_MOVE_HEARTBEAT(c) => c.write_unencrypted_client(w),
            Self::MSG_MOVE_HOVER(c) => c.write_unencrypted_client(w),
            Self::MSG_PETITION_DECLINE(c) => c.write_unencrypted_client(w),
            Self::MSG_TABARDVENDOR_ACTIVATE(c) => c.write_unencrypted_client(w),
            Self::MSG_QUEST_PUSH_RESULT(c) => c.write_unencrypted_client(w),
            Self::MSG_MOVE_WATER_WALK(c) => c.write_unencrypted_client(w),
            Self::MSG_PETITION_RENAME(c) => c.write_unencrypted_client(w),
            Self::MSG_MOVE_START_ASCEND(c) => c.write_unencrypted_client(w),
            Self::MSG_MOVE_STOP_ASCEND(c) => c.write_unencrypted_client(w),
            Self::MSG_MOVE_SET_FLIGHT_BACK_SPEED(c) => c.write_unencrypted_client(w),
            Self::MSG_MOVE_START_DESCEND(c) => c.write_unencrypted_client(w),
            Self::CMSG_CALENDAR_GET_NUM_PENDING => CMSG_CALENDAR_GET_NUM_PENDING{}.write_unencrypted_client(w),
            Self::CMSG_BOOTME => CMSG_BOOTME{}.write_unencrypted_client(w),
            Self::CMSG_DBLOOKUP(c) => c.write_unencrypted_client(w),
            Self::CMSG_WORLD_TELEPORT(c) => c.write_unencrypted_client(w),
            Self::CMSG_TELEPORT_TO_UNIT(c) => c.write_unencrypted_client(w),
            Self::CMSG_CHAR_CREATE(c) => c.write_unencrypted_client(w),
            Self::CMSG_CHAR_ENUM => CMSG_CHAR_ENUM{}.write_unencrypted_client(w),
            Self::CMSG_CHAR_DELETE(c) => c.write_unencrypted_client(w),
            Self::CMSG_PLAYER_LOGIN(c) => c.write_unencrypted_client(w),
            Self::CMSG_PLAYER_LOGOUT => CMSG_PLAYER_LOGOUT{}.write_unencrypted_client(w),
            Self::CMSG_LOGOUT_REQUEST => CMSG_LOGOUT_REQUEST{}.write_unencrypted_client(w),
            Self::CMSG_LOGOUT_CANCEL => CMSG_LOGOUT_CANCEL{}.write_unencrypted_client(w),
            Self::CMSG_NAME_QUERY(c) => c.write_unencrypted_client(w),
            Self::CMSG_PET_NAME_QUERY(c) => c.write_unencrypted_client(w),
            Self::CMSG_GUILD_QUERY(c) => c.write_unencrypted_client(w),
            Self::CMSG_ITEM_QUERY_SINGLE(c) => c.write_unencrypted_client(w),
            Self::CMSG_PAGE_TEXT_QUERY(c) => c.write_unencrypted_client(w),
            Self::CMSG_QUEST_QUERY(c) => c.write_unencrypted_client(w),
            Self::CMSG_GAMEOBJECT_QUERY(c) => c.write_unencrypted_client(w),
            Self::CMSG_CREATURE_QUERY(c) => c.write_unencrypted_client(w),
            Self::CMSG_WHO(c) => c.write_unencrypted_client(w),
            Self::CMSG_WHOIS(c) => c.write_unencrypted_client(w),
            Self::CMSG_CONTACT_LIST(c) => c.write_unencrypted_client(w),
            Self::CMSG_ADD_FRIEND(c) => c.write_unencrypted_client(w),
            Self::CMSG_DEL_FRIEND(c) => c.write_unencrypted_client(w),
            Self::CMSG_SET_CONTACT_NOTES(c) => c.write_unencrypted_client(w),
            Self::CMSG_ADD_IGNORE(c) => c.write_unencrypted_client(w),
            Self::CMSG_DEL_IGNORE(c) => c.write_unencrypted_client(w),
            Self::CMSG_GROUP_INVITE(c) => c.write_unencrypted_client(w),
            Self::CMSG_GROUP_CANCEL => CMSG_GROUP_CANCEL{}.write_unencrypted_client(w),
            Self::CMSG_GROUP_ACCEPT => CMSG_GROUP_ACCEPT{}.write_unencrypted_client(w),
            Self::CMSG_GROUP_DECLINE => CMSG_GROUP_DECLINE{}.write_unencrypted_client(w),
            Self::CMSG_GROUP_UNINVITE(c) => c.write_unencrypted_client(w),
            Self::CMSG_GROUP_UNINVITE_GUID(c) => c.write_unencrypted_client(w),
            Self::CMSG_GROUP_SET_LEADER(c) => c.write_unencrypted_client(w),
            Self::CMSG_LOOT_METHOD(c) => c.write_unencrypted_client(w),
            Self::CMSG_GROUP_DISBAND => CMSG_GROUP_DISBAND{}.write_unencrypted_client(w),
            Self::CMSG_GUILD_CREATE(c) => c.write_unencrypted_client(w),
            Self::CMSG_GUILD_INVITE(c) => c.write_unencrypted_client(w),
            Self::CMSG_GUILD_ACCEPT => CMSG_GUILD_ACCEPT{}.write_unencrypted_client(w),
            Self::CMSG_GUILD_DECLINE => CMSG_GUILD_DECLINE{}.write_unencrypted_client(w),
            Self::CMSG_GUILD_INFO => CMSG_GUILD_INFO{}.write_unencrypted_client(w),
            Self::CMSG_GUILD_ROSTER => CMSG_GUILD_ROSTER{}.write_unencrypted_client(w),
            Self::CMSG_GUILD_PROMOTE(c) => c.write_unencrypted_client(w),
            Self::CMSG_GUILD_DEMOTE(c) => c.write_unencrypted_client(w),
            Self::CMSG_GUILD_LEAVE => CMSG_GUILD_LEAVE{}.write_unencrypted_client(w),
            Self::CMSG_GUILD_REMOVE(c) => c.write_unencrypted_client(w),
            Self::CMSG_GUILD_DISBAND => CMSG_GUILD_DISBAND{}.write_unencrypted_client(w),
            Self::CMSG_GUILD_LEADER(c) => c.write_unencrypted_client(w),
            Self::CMSG_GUILD_MOTD(c) => c.write_unencrypted_client(w),
            Self::CMSG_MESSAGECHAT(c) => c.write_unencrypted_client(w),
            Self::CMSG_JOIN_CHANNEL(c) => c.write_unencrypted_client(w),
            Self::CMSG_LEAVE_CHANNEL(c) => c.write_unencrypted_client(w),
            Self::CMSG_CHANNEL_LIST(c) => c.write_unencrypted_client(w),
            Self::CMSG_CHANNEL_PASSWORD(c) => c.write_unencrypted_client(w),
            Self::CMSG_CHANNEL_SET_OWNER(c) => c.write_unencrypted_client(w),
            Self::CMSG_CHANNEL_OWNER(c) => c.write_unencrypted_client(w),
            Self::CMSG_CHANNEL_MODERATOR(c) => c.write_unencrypted_client(w),
            Self::CMSG_CHANNEL_UNMODERATOR(c) => c.write_unencrypted_client(w),
            Self::CMSG_CHANNEL_MUTE(c) => c.write_unencrypted_client(w),
            Self::CMSG_CHANNEL_UNMUTE(c) => c.write_unencrypted_client(w),
            Self::CMSG_CHANNEL_INVITE(c) => c.write_unencrypted_client(w),
            Self::CMSG_CHANNEL_KICK(c) => c.write_unencrypted_client(w),
            Self::CMSG_CHANNEL_BAN(c) => c.write_unencrypted_client(w),
            Self::CMSG_CHANNEL_UNBAN(c) => c.write_unencrypted_client(w),
            Self::CMSG_CHANNEL_ANNOUNCEMENTS(c) => c.write_unencrypted_client(w),
            Self::CMSG_CHANNEL_MODERATE(c) => c.write_unencrypted_client(w),
            Self::CMSG_USE_ITEM(c) => c.write_unencrypted_client(w),
            Self::CMSG_OPEN_ITEM(c) => c.write_unencrypted_client(w),
            Self::CMSG_READ_ITEM(c) => c.write_unencrypted_client(w),
            Self::CMSG_GAMEOBJ_USE(c) => c.write_unencrypted_client(w),
            Self::CMSG_AREATRIGGER(c) => c.write_unencrypted_client(w),
            Self::MSG_MOVE_TELEPORT(c) => c.write_unencrypted_client(w),
            Self::MSG_MOVE_TELEPORT_ACK(c) => c.write_unencrypted_client(w),
            Self::CMSG_MOVE_SET_RAW_POSITION(c) => c.write_unencrypted_client(w),
            Self::CMSG_FORCE_RUN_SPEED_CHANGE_ACK(c) => c.write_unencrypted_client(w),
            Self::CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACK(c) => c.write_unencrypted_client(w),
            Self::CMSG_FORCE_SWIM_SPEED_CHANGE_ACK(c) => c.write_unencrypted_client(w),
            Self::CMSG_FORCE_MOVE_ROOT_ACK(c) => c.write_unencrypted_client(w),
            Self::CMSG_FORCE_MOVE_UNROOT_ACK(c) => c.write_unencrypted_client(w),
            Self::CMSG_MOVE_KNOCK_BACK_ACK(c) => c.write_unencrypted_client(w),
            Self::CMSG_MOVE_HOVER_ACK(c) => c.write_unencrypted_client(w),
            Self::CMSG_NEXT_CINEMATIC_CAMERA => CMSG_NEXT_CINEMATIC_CAMERA{}.write_unencrypted_client(w),
            Self::CMSG_COMPLETE_CINEMATIC => CMSG_COMPLETE_CINEMATIC{}.write_unencrypted_client(w),
            Self::CMSG_TUTORIAL_FLAG(c) => c.write_unencrypted_client(w),
            Self::CMSG_TUTORIAL_CLEAR => CMSG_TUTORIAL_CLEAR{}.write_unencrypted_client(w),
            Self::CMSG_TUTORIAL_RESET => CMSG_TUTORIAL_RESET{}.write_unencrypted_client(w),
            Self::CMSG_STANDSTATECHANGE(c) => c.write_unencrypted_client(w),
            Self::CMSG_EMOTE(c) => c.write_unencrypted_client(w),
            Self::CMSG_TEXT_EMOTE(c) => c.write_unencrypted_client(w),
            Self::CMSG_AUTOSTORE_LOOT_ITEM(c) => c.write_unencrypted_client(w),
            Self::CMSG_AUTOEQUIP_ITEM(c) => c.write_unencrypted_client(w),
            Self::CMSG_AUTOSTORE_BAG_ITEM(c) => c.write_unencrypted_client(w),
            Self::CMSG_SWAP_ITEM(c) => c.write_unencrypted_client(w),
            Self::CMSG_SWAP_INV_ITEM(c) => c.write_unencrypted_client(w),
            Self::CMSG_SPLIT_ITEM(c) => c.write_unencrypted_client(w),
            Self::CMSG_AUTOEQUIP_ITEM_SLOT(c) => c.write_unencrypted_client(w),
            Self::CMSG_DESTROYITEM(c) => c.write_unencrypted_client(w),
            Self::CMSG_INSPECT(c) => c.write_unencrypted_client(w),
            Self::CMSG_INITIATE_TRADE(c) => c.write_unencrypted_client(w),
            Self::CMSG_BEGIN_TRADE => CMSG_BEGIN_TRADE{}.write_unencrypted_client(w),
            Self::CMSG_BUSY_TRADE => CMSG_BUSY_TRADE{}.write_unencrypted_client(w),
            Self::CMSG_IGNORE_TRADE => CMSG_IGNORE_TRADE{}.write_unencrypted_client(w),
            Self::CMSG_ACCEPT_TRADE(c) => c.write_unencrypted_client(w),
            Self::CMSG_UNACCEPT_TRADE => CMSG_UNACCEPT_TRADE{}.write_unencrypted_client(w),
            Self::CMSG_CANCEL_TRADE => CMSG_CANCEL_TRADE{}.write_unencrypted_client(w),
            Self::CMSG_SET_TRADE_ITEM(c) => c.write_unencrypted_client(w),
            Self::CMSG_CLEAR_TRADE_ITEM(c) => c.write_unencrypted_client(w),
            Self::CMSG_SET_TRADE_GOLD(c) => c.write_unencrypted_client(w),
            Self::CMSG_SET_FACTION_ATWAR(c) => c.write_unencrypted_client(w),
            Self::CMSG_SET_ACTION_BUTTON(c) => c.write_unencrypted_client(w),
            Self::CMSG_CAST_SPELL(c) => c.write_unencrypted_client(w),
            Self::CMSG_CANCEL_CAST(c) => c.write_unencrypted_client(w),
            Self::CMSG_CANCEL_AURA(c) => c.write_unencrypted_client(w),
            Self::CMSG_CANCEL_CHANNELLING(c) => c.write_unencrypted_client(w),
            Self::CMSG_SET_SELECTION(c) => c.write_unencrypted_client(w),
            Self::CMSG_DELETEEQUIPMENT_SET(c) => c.write_unencrypted_client(w),
            Self::CMSG_INSTANCE_LOCK_RESPONSE(c) => c.write_unencrypted_client(w),
            Self::CMSG_ATTACKSWING(c) => c.write_unencrypted_client(w),
            Self::CMSG_ATTACKSTOP => CMSG_ATTACKSTOP{}.write_unencrypted_client(w),
            Self::CMSG_REPOP_REQUEST => CMSG_REPOP_REQUEST{}.write_unencrypted_client(w),
            Self::CMSG_RESURRECT_RESPONSE(c) => c.write_unencrypted_client(w),
            Self::CMSG_LOOT(c) => c.write_unencrypted_client(w),
            Self::CMSG_LOOT_MONEY => CMSG_LOOT_MONEY{}.write_unencrypted_client(w),
            Self::CMSG_LOOT_RELEASE(c) => c.write_unencrypted_client(w),
            Self::CMSG_DUEL_ACCEPTED(c) => c.write_unencrypted_client(w),
            Self::CMSG_DUEL_CANCELLED(c) => c.write_unencrypted_client(w),
            Self::CMSG_MOUNTSPECIAL_ANIM => CMSG_MOUNTSPECIAL_ANIM{}.write_unencrypted_client(w),
            Self::CMSG_PET_SET_ACTION(c) => c.write_unencrypted_client(w),
            Self::CMSG_PET_ACTION(c) => c.write_unencrypted_client(w),
            Self::CMSG_PET_ABANDON(c) => c.write_unencrypted_client(w),
            Self::CMSG_PET_RENAME(c) => c.write_unencrypted_client(w),
            Self::CMSG_GOSSIP_HELLO(c) => c.write_unencrypted_client(w),
            Self::CMSG_GOSSIP_SELECT_OPTION(c) => c.write_unencrypted_client(w),
            Self::CMSG_NPC_TEXT_QUERY(c) => c.write_unencrypted_client(w),
            Self::CMSG_QUESTGIVER_STATUS_QUERY(c) => c.write_unencrypted_client(w),
            Self::CMSG_QUESTGIVER_HELLO(c) => c.write_unencrypted_client(w),
            Self::CMSG_QUESTGIVER_QUERY_QUEST(c) => c.write_unencrypted_client(w),
            Self::CMSG_QUESTGIVER_QUEST_AUTOLAUNCH => CMSG_QUESTGIVER_QUEST_AUTOLAUNCH{}.write_unencrypted_client(w),
            Self::CMSG_QUESTGIVER_ACCEPT_QUEST(c) => c.write_unencrypted_client(w),
            Self::CMSG_QUESTGIVER_COMPLETE_QUEST(c) => c.write_unencrypted_client(w),
            Self::CMSG_QUESTGIVER_REQUEST_REWARD(c) => c.write_unencrypted_client(w),
            Self::CMSG_QUESTGIVER_CHOOSE_REWARD(c) => c.write_unencrypted_client(w),
            Self::CMSG_QUESTGIVER_CANCEL => CMSG_QUESTGIVER_CANCEL{}.write_unencrypted_client(w),
            Self::CMSG_QUESTLOG_SWAP_QUEST(c) => c.write_unencrypted_client(w),
            Self::CMSG_QUESTLOG_REMOVE_QUEST(c) => c.write_unencrypted_client(w),
            Self::CMSG_QUEST_CONFIRM_ACCEPT(c) => c.write_unencrypted_client(w),
            Self::CMSG_PUSHQUESTTOPARTY(c) => c.write_unencrypted_client(w),
            Self::CMSG_LIST_INVENTORY(c) => c.write_unencrypted_client(w),
            Self::CMSG_SELL_ITEM(c) => c.write_unencrypted_client(w),
            Self::CMSG_BUY_ITEM(c) => c.write_unencrypted_client(w),
            Self::CMSG_BUY_ITEM_IN_SLOT(c) => c.write_unencrypted_client(w),
            Self::CMSG_TAXINODE_STATUS_QUERY(c) => c.write_unencrypted_client(w),
            Self::CMSG_TAXIQUERYAVAILABLENODES(c) => c.write_unencrypted_client(w),
            Self::CMSG_ACTIVATETAXI(c) => c.write_unencrypted_client(w),
            Self::CMSG_TRAINER_LIST(c) => c.write_unencrypted_client(w),
            Self::CMSG_TRAINER_BUY_SPELL(c) => c.write_unencrypted_client(w),
            Self::CMSG_BINDER_ACTIVATE(c) => c.write_unencrypted_client(w),
            Self::CMSG_BANKER_ACTIVATE(c) => c.write_unencrypted_client(w),
            Self::CMSG_BUY_BANK_SLOT(c) => c.write_unencrypted_client(w),
            Self::CMSG_PETITION_SHOWLIST(c) => c.write_unencrypted_client(w),
            Self::CMSG_PETITION_BUY(c) => c.write_unencrypted_client(w),
            Self::CMSG_PETITION_SHOW_SIGNATURES(c) => c.write_unencrypted_client(w),
            Self::CMSG_PETITION_SIGN(c) => c.write_unencrypted_client(w),
            Self::CMSG_OFFER_PETITION(c) => c.write_unencrypted_client(w),
            Self::CMSG_TURN_IN_PETITION(c) => c.write_unencrypted_client(w),
            Self::CMSG_PETITION_QUERY(c) => c.write_unencrypted_client(w),
            Self::CMSG_BUG(c) => c.write_unencrypted_client(w),
            Self::CMSG_PLAYED_TIME(c) => c.write_unencrypted_client(w),
            Self::CMSG_QUERY_TIME => CMSG_QUERY_TIME{}.write_unencrypted_client(w),
            Self::CMSG_RECLAIM_CORPSE(c) => c.write_unencrypted_client(w),
            Self::CMSG_WRAP_ITEM(c) => c.write_unencrypted_client(w),
            Self::MSG_MINIMAP_PING(c) => c.write_unencrypted_client(w),
            Self::CMSG_PING(c) => c.write_unencrypted_client(w),
            Self::CMSG_SETSHEATHED(c) => c.write_unencrypted_client(w),
            Self::CMSG_QUEST_POI_QUERY(c) => c.write_unencrypted_client(w),
            Self::CMSG_AUTH_SESSION(c) => c.write_unencrypted_client(w),
            Self::CMSG_PET_CAST_SPELL(c) => c.write_unencrypted_client(w),
            Self::MSG_SAVE_GUILD_EMBLEM(c) => c.write_unencrypted_client(w),
            Self::CMSG_ZONEUPDATE(c) => c.write_unencrypted_client(w),
            Self::MSG_RANDOM_ROLL(c) => c.write_unencrypted_client(w),
            Self::CMSG_UNLEARN_SKILL(c) => c.write_unencrypted_client(w),
            Self::CMSG_GMTICKET_CREATE(c) => c.write_unencrypted_client(w),
            Self::CMSG_GMTICKET_UPDATETEXT(c) => c.write_unencrypted_client(w),
            Self::CMSG_REQUEST_ACCOUNT_DATA(c) => c.write_unencrypted_client(w),
            Self::CMSG_UPDATE_ACCOUNT_DATA(c) => c.write_unencrypted_client(w),
            Self::CMSG_GMTICKET_GETTICKET => CMSG_GMTICKET_GETTICKET{}.write_unencrypted_client(w),
            Self::CMSG_UNLEARN_TALENTS => CMSG_UNLEARN_TALENTS{}.write_unencrypted_client(w),
            Self::MSG_CORPSE_QUERY => MSG_CORPSE_QUERY_Client{}.write_unencrypted_client(w),
            Self::CMSG_GMTICKET_DELETETICKET => CMSG_GMTICKET_DELETETICKET{}.write_unencrypted_client(w),
            Self::CMSG_GMTICKET_SYSTEMSTATUS => CMSG_GMTICKET_SYSTEMSTATUS{}.write_unencrypted_client(w),
            Self::CMSG_SPIRIT_HEALER_ACTIVATE(c) => c.write_unencrypted_client(w),
            Self::CMSG_CHAT_IGNORED(c) => c.write_unencrypted_client(w),
            Self::CMSG_GUILD_RANK(c) => c.write_unencrypted_client(w),
            Self::CMSG_GUILD_ADD_RANK(c) => c.write_unencrypted_client(w),
            Self::CMSG_GUILD_DEL_RANK => CMSG_GUILD_DEL_RANK{}.write_unencrypted_client(w),
            Self::CMSG_GUILD_SET_PUBLIC_NOTE(c) => c.write_unencrypted_client(w),
            Self::CMSG_GUILD_SET_OFFICER_NOTE(c) => c.write_unencrypted_client(w),
            Self::CMSG_SEND_MAIL(c) => c.write_unencrypted_client(w),
            Self::CMSG_GET_MAIL_LIST(c) => c.write_unencrypted_client(w),
            Self::CMSG_BATTLEFIELD_LIST(c) => c.write_unencrypted_client(w),
            Self::CMSG_ITEM_TEXT_QUERY(c) => c.write_unencrypted_client(w),
            Self::CMSG_MAIL_TAKE_MONEY(c) => c.write_unencrypted_client(w),
            Self::CMSG_MAIL_TAKE_ITEM(c) => c.write_unencrypted_client(w),
            Self::CMSG_MAIL_MARK_AS_READ(c) => c.write_unencrypted_client(w),
            Self::CMSG_MAIL_RETURN_TO_SENDER(c) => c.write_unencrypted_client(w),
            Self::CMSG_MAIL_DELETE(c) => c.write_unencrypted_client(w),
            Self::CMSG_MAIL_CREATE_TEXT_ITEM(c) => c.write_unencrypted_client(w),
            Self::CMSG_LEARN_TALENT(c) => c.write_unencrypted_client(w),
            Self::CMSG_TOGGLE_PVP(c) => c.write_unencrypted_client(w),
            Self::MSG_AUCTION_HELLO(c) => c.write_unencrypted_client(w),
            Self::CMSG_AUCTION_SELL_ITEM(c) => c.write_unencrypted_client(w),
            Self::CMSG_AUCTION_REMOVE_ITEM(c) => c.write_unencrypted_client(w),
            Self::CMSG_AUCTION_LIST_ITEMS(c) => c.write_unencrypted_client(w),
            Self::CMSG_AUCTION_LIST_OWNER_ITEMS(c) => c.write_unencrypted_client(w),
            Self::CMSG_AUCTION_PLACE_BID(c) => c.write_unencrypted_client(w),
            Self::CMSG_AUCTION_LIST_BIDDER_ITEMS(c) => c.write_unencrypted_client(w),
            Self::CMSG_SET_AMMO(c) => c.write_unencrypted_client(w),
            Self::CMSG_SET_ACTIVE_MOVER(c) => c.write_unencrypted_client(w),
            Self::CMSG_PET_CANCEL_AURA(c) => c.write_unencrypted_client(w),
            Self::CMSG_CANCEL_AUTO_REPEAT_SPELL => CMSG_CANCEL_AUTO_REPEAT_SPELL{}.write_unencrypted_client(w),
            Self::MSG_LIST_STABLED_PETS(c) => c.write_unencrypted_client(w),
            Self::CMSG_STABLE_PET(c) => c.write_unencrypted_client(w),
            Self::CMSG_UNSTABLE_PET(c) => c.write_unencrypted_client(w),
            Self::CMSG_BUY_STABLE_SLOT(c) => c.write_unencrypted_client(w),
            Self::CMSG_STABLE_SWAP_PET(c) => c.write_unencrypted_client(w),
            Self::CMSG_REQUEST_PET_INFO => CMSG_REQUEST_PET_INFO{}.write_unencrypted_client(w),
            Self::CMSG_FAR_SIGHT(c) => c.write_unencrypted_client(w),
            Self::CMSG_GROUP_CHANGE_SUB_GROUP(c) => c.write_unencrypted_client(w),
            Self::CMSG_REQUEST_PARTY_MEMBER_STATS(c) => c.write_unencrypted_client(w),
            Self::CMSG_GROUP_SWAP_SUB_GROUP(c) => c.write_unencrypted_client(w),
            Self::CMSG_AUTOSTORE_BANK_ITEM(c) => c.write_unencrypted_client(w),
            Self::CMSG_AUTOBANK_ITEM(c) => c.write_unencrypted_client(w),
            Self::MSG_QUERY_NEXT_MAIL_TIME => MSG_QUERY_NEXT_MAIL_TIME_Client{}.write_unencrypted_client(w),
            Self::CMSG_GROUP_RAID_CONVERT => CMSG_GROUP_RAID_CONVERT{}.write_unencrypted_client(w),
            Self::CMSG_GROUP_ASSISTANT_LEADER(c) => c.write_unencrypted_client(w),
            Self::CMSG_BUYBACK_ITEM(c) => c.write_unencrypted_client(w),
            Self::CMSG_SET_SAVED_INSTANCE_EXTEND(c) => c.write_unencrypted_client(w),
            Self::CMSG_LFG_GET_STATUS => CMSG_LFG_GET_STATUS{}.write_unencrypted_client(w),
            Self::CMSG_GMTICKETSYSTEM_TOGGLE => CMSG_GMTICKETSYSTEM_TOGGLE{}.write_unencrypted_client(w),
            Self::CMSG_CANCEL_GROWTH_AURA => CMSG_CANCEL_GROWTH_AURA{}.write_unencrypted_client(w),
            Self::CMSG_LOOT_ROLL(c) => c.write_unencrypted_client(w),
            Self::CMSG_LOOT_MASTER_GIVE(c) => c.write_unencrypted_client(w),
            Self::CMSG_REPAIR_ITEM(c) => c.write_unencrypted_client(w),
            Self::MSG_TALENT_WIPE_CONFIRM(c) => c.write_unencrypted_client(w),
            Self::CMSG_SUMMON_RESPONSE(c) => c.write_unencrypted_client(w),
            Self::CMSG_SELF_RES => CMSG_SELF_RES{}.write_unencrypted_client(w),
            Self::CMSG_TOGGLE_HELM => CMSG_TOGGLE_HELM{}.write_unencrypted_client(w),
            Self::CMSG_TOGGLE_CLOAK => CMSG_TOGGLE_CLOAK{}.write_unencrypted_client(w),
            Self::CMSG_SET_ACTIONBAR_TOGGLES(c) => c.write_unencrypted_client(w),
            Self::CMSG_ITEM_NAME_QUERY(c) => c.write_unencrypted_client(w),
            Self::CMSG_CHAR_RENAME(c) => c.write_unencrypted_client(w),
            Self::CMSG_MOVE_SPLINE_DONE(c) => c.write_unencrypted_client(w),
            Self::CMSG_MOVE_FALL_RESET(c) => c.write_unencrypted_client(w),
            Self::CMSG_REQUEST_RAID_INFO => CMSG_REQUEST_RAID_INFO{}.write_unencrypted_client(w),
            Self::CMSG_MOVE_TIME_SKIPPED(c) => c.write_unencrypted_client(w),
            Self::CMSG_MOVE_FEATHER_FALL_ACK(c) => c.write_unencrypted_client(w),
            Self::CMSG_MOVE_WATER_WALK_ACK(c) => c.write_unencrypted_client(w),
            Self::CMSG_MOVE_NOT_ACTIVE_MOVER(c) => c.write_unencrypted_client(w),
            Self::CMSG_BATTLEFIELD_STATUS => CMSG_BATTLEFIELD_STATUS{}.write_unencrypted_client(w),
            Self::CMSG_BATTLEFIELD_PORT(c) => c.write_unencrypted_client(w),
            Self::MSG_INSPECT_HONOR_STATS(c) => c.write_unencrypted_client(w),
            Self::CMSG_BATTLEMASTER_HELLO(c) => c.write_unencrypted_client(w),
            Self::CMSG_FORCE_WALK_SPEED_CHANGE_ACK(c) => c.write_unencrypted_client(w),
            Self::CMSG_FORCE_SWIM_BACK_SPEED_CHANGE_ACK(c) => c.write_unencrypted_client(w),
            Self::CMSG_FORCE_TURN_RATE_CHANGE_ACK(c) => c.write_unencrypted_client(w),
            Self::MSG_PVP_LOG_DATA => MSG_PVP_LOG_DATA_Client{}.write_unencrypted_client(w),
            Self::CMSG_LEAVE_BATTLEFIELD(c) => c.write_unencrypted_client(w),
            Self::CMSG_AREA_SPIRIT_HEALER_QUERY(c) => c.write_unencrypted_client(w),
            Self::CMSG_AREA_SPIRIT_HEALER_QUEUE(c) => c.write_unencrypted_client(w),
            Self::CMSG_WARDEN_DATA(c) => c.write_unencrypted_client(w),
            Self::MSG_BATTLEGROUND_PLAYER_POSITIONS => MSG_BATTLEGROUND_PLAYER_POSITIONS_Client{}.write_unencrypted_client(w),
            Self::CMSG_PET_STOP_ATTACK(c) => c.write_unencrypted_client(w),
            Self::CMSG_BATTLEMASTER_JOIN(c) => c.write_unencrypted_client(w),
            Self::CMSG_PET_UNLEARN(c) => c.write_unencrypted_client(w),
            Self::CMSG_PET_SPELL_AUTOCAST(c) => c.write_unencrypted_client(w),
            Self::CMSG_GUILD_INFO_TEXT(c) => c.write_unencrypted_client(w),
            Self::CMSG_ACTIVATETAXIEXPRESS(c) => c.write_unencrypted_client(w),
            Self::CMSG_SET_FACTION_INACTIVE(c) => c.write_unencrypted_client(w),
            Self::CMSG_SET_WATCHED_FACTION(c) => c.write_unencrypted_client(w),
            Self::CMSG_RESET_INSTANCES => CMSG_RESET_INSTANCES{}.write_unencrypted_client(w),
            Self::MSG_RAID_TARGET_UPDATE(c) => c.write_unencrypted_client(w),
            Self::MSG_RAID_READY_CHECK(c) => c.write_unencrypted_client(w),
            Self::MSG_SET_DUNGEON_DIFFICULTY(c) => c.write_unencrypted_client(w),
            Self::CMSG_GMSURVEY_SUBMIT(c) => c.write_unencrypted_client(w),
            Self::CMSG_MOVE_SET_CAN_TRANSITION_BETWEEN_SWIM_AND_FLY_ACK(c) => c.write_unencrypted_client(w),
            Self::CMSG_MOVE_SET_CAN_FLY_ACK(c) => c.write_unencrypted_client(w),
            Self::CMSG_MOVE_SET_FLY(c) => c.write_unencrypted_client(w),
            Self::CMSG_SOCKET_GEMS(c) => c.write_unencrypted_client(w),
            Self::CMSG_ARENA_TEAM_ROSTER(c) => c.write_unencrypted_client(w),
            Self::CMSG_ARENA_TEAM_INVITE(c) => c.write_unencrypted_client(w),
            Self::CMSG_ARENA_TEAM_ACCEPT => CMSG_ARENA_TEAM_ACCEPT{}.write_unencrypted_client(w),
            Self::CMSG_ARENA_TEAM_DECLINE => CMSG_ARENA_TEAM_DECLINE{}.write_unencrypted_client(w),
            Self::CMSG_ARENA_TEAM_LEAVE(c) => c.write_unencrypted_client(w),
            Self::CMSG_ARENA_TEAM_REMOVE(c) => c.write_unencrypted_client(w),
            Self::CMSG_ARENA_TEAM_DISBAND(c) => c.write_unencrypted_client(w),
            Self::CMSG_ARENA_TEAM_LEADER(c) => c.write_unencrypted_client(w),
            Self::CMSG_BATTLEMASTER_JOIN_ARENA(c) => c.write_unencrypted_client(w),
            Self::CMSG_LFG_JOIN(c) => c.write_unencrypted_client(w),
            Self::CMSG_LFG_LEAVE => CMSG_LFG_LEAVE{}.write_unencrypted_client(w),
            Self::CMSG_SEARCH_LFG_JOIN(c) => c.write_unencrypted_client(w),
            Self::CMSG_SEARCH_LFG_LEAVE(c) => c.write_unencrypted_client(w),
            Self::CMSG_LFG_PROPOSAL_RESULT(c) => c.write_unencrypted_client(w),
            Self::CMSG_SET_LFG_COMMENT(c) => c.write_unencrypted_client(w),
            Self::CMSG_LFG_SET_ROLES(c) => c.write_unencrypted_client(w),
            Self::CMSG_LFG_SET_BOOT_VOTE(c) => c.write_unencrypted_client(w),
            Self::CMSG_LFD_PLAYER_LOCK_INFO_REQUEST => CMSG_LFD_PLAYER_LOCK_INFO_REQUEST{}.write_unencrypted_client(w),
            Self::CMSG_LFG_TELEPORT(c) => c.write_unencrypted_client(w),
            Self::CMSG_LFD_PARTY_LOCK_INFO_REQUEST => CMSG_LFD_PARTY_LOCK_INFO_REQUEST{}.write_unencrypted_client(w),
            Self::CMSG_SET_TITLE(c) => c.write_unencrypted_client(w),
            Self::CMSG_CANCEL_MOUNT_AURA => CMSG_CANCEL_MOUNT_AURA{}.write_unencrypted_client(w),
            Self::MSG_INSPECT_ARENA_TEAMS(c) => c.write_unencrypted_client(w),
            Self::CMSG_CANCEL_TEMP_ENCHANTMENT(c) => c.write_unencrypted_client(w),
            Self::CMSG_FORCE_FLIGHT_SPEED_CHANGE_ACK(c) => c.write_unencrypted_client(w),
            Self::CMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE_ACK(c) => c.write_unencrypted_client(w),
            Self::CMSG_SET_TAXI_BENCHMARK_MODE(c) => c.write_unencrypted_client(w),
            Self::CMSG_REALM_SPLIT(c) => c.write_unencrypted_client(w),
            Self::CMSG_MOVE_CHNG_TRANSPORT(c) => c.write_unencrypted_client(w),
            Self::MSG_PARTY_ASSIGNMENT(c) => c.write_unencrypted_client(w),
            Self::CMSG_TIME_SYNC_RESP(c) => c.write_unencrypted_client(w),
            Self::MSG_RAID_READY_CHECK_CONFIRM(c) => c.write_unencrypted_client(w),
            Self::CMSG_VOICE_SESSION_ENABLE(c) => c.write_unencrypted_client(w),
            Self::CMSG_COMMENTATOR_ENABLE(c) => c.write_unencrypted_client(w),
            Self::MSG_RAID_READY_CHECK_FINISHED => MSG_RAID_READY_CHECK_FINISHED_Client{}.write_unencrypted_client(w),
            Self::CMSG_COMPLAIN(c) => c.write_unencrypted_client(w),
            Self::CMSG_CHANNEL_DISPLAY_LIST(c) => c.write_unencrypted_client(w),
            Self::CMSG_SET_ACTIVE_VOICE_CHANNEL(c) => c.write_unencrypted_client(w),
            Self::CMSG_GET_CHANNEL_MEMBER_COUNT(c) => c.write_unencrypted_client(w),
            Self::CMSG_CHANNEL_VOICE_ON => CMSG_CHANNEL_VOICE_ON{}.write_unencrypted_client(w),
            Self::CMSG_REPORT_PVP_AFK(c) => c.write_unencrypted_client(w),
            Self::CMSG_GUILD_BANKER_ACTIVATE(c) => c.write_unencrypted_client(w),
            Self::CMSG_GUILD_BANK_QUERY_TAB(c) => c.write_unencrypted_client(w),
            Self::CMSG_GUILD_BANK_SWAP_ITEMS(c) => c.write_unencrypted_client(w),
            Self::CMSG_GUILD_BANK_BUY_TAB(c) => c.write_unencrypted_client(w),
            Self::CMSG_GUILD_BANK_UPDATE_TAB(c) => c.write_unencrypted_client(w),
            Self::CMSG_GUILD_BANK_DEPOSIT_MONEY(c) => c.write_unencrypted_client(w),
            Self::CMSG_GUILD_BANK_WITHDRAW_MONEY(c) => c.write_unencrypted_client(w),
            Self::MSG_GUILD_BANK_LOG_QUERY(c) => c.write_unencrypted_client(w),
            Self::CMSG_SET_CHANNEL_WATCH(c) => c.write_unencrypted_client(w),
            Self::CMSG_CLEAR_CHANNEL_WATCH(c) => c.write_unencrypted_client(w),
            Self::CMSG_SPELLCLICK(c) => c.write_unencrypted_client(w),
            Self::MSG_GUILD_PERMISSIONS => MSG_GUILD_PERMISSIONS_Client{}.write_unencrypted_client(w),
            Self::MSG_GUILD_BANK_MONEY_WITHDRAWN => MSG_GUILD_BANK_MONEY_WITHDRAWN_Client{}.write_unencrypted_client(w),
            Self::MSG_GUILD_EVENT_LOG_QUERY => MSG_GUILD_EVENT_LOG_QUERY_Client{}.write_unencrypted_client(w),
            Self::CMSG_GET_MIRRORIMAGE_DATA(c) => c.write_unencrypted_client(w),
            Self::CMSG_KEEP_ALIVE => CMSG_KEEP_ALIVE{}.write_unencrypted_client(w),
            Self::CMSG_OPT_OUT_OF_LOOT(c) => c.write_unencrypted_client(w),
            Self::MSG_QUERY_GUILD_BANK_TEXT(c) => c.write_unencrypted_client(w),
            Self::CMSG_SET_GUILD_BANK_TEXT(c) => c.write_unencrypted_client(w),
            Self::CMSG_GRANT_LEVEL(c) => c.write_unencrypted_client(w),
            Self::CMSG_TOTEM_DESTROYED(c) => c.write_unencrypted_client(w),
            Self::CMSG_QUESTGIVER_STATUS_MULTIPLE_QUERY => CMSG_QUESTGIVER_STATUS_MULTIPLE_QUERY{}.write_unencrypted_client(w),
            Self::CMSG_SET_PLAYER_DECLINED_NAMES(c) => c.write_unencrypted_client(w),
            Self::CMSG_ACCEPT_LEVEL_GRANT(c) => c.write_unencrypted_client(w),
            Self::CMSG_ALTER_APPEARANCE(c) => c.write_unencrypted_client(w),
            Self::CMSG_CALENDAR_GET_CALENDAR => CMSG_CALENDAR_GET_CALENDAR{}.write_unencrypted_client(w),
            Self::CMSG_CALENDAR_GET_EVENT(c) => c.write_unencrypted_client(w),
            Self::CMSG_CALENDAR_GUILD_FILTER(c) => c.write_unencrypted_client(w),
            Self::CMSG_CALENDAR_ARENA_TEAM(c) => c.write_unencrypted_client(w),
            Self::CMSG_CALENDAR_ADD_EVENT(c) => c.write_unencrypted_client(w),
            Self::CMSG_CALENDAR_UPDATE_EVENT(c) => c.write_unencrypted_client(w),
            Self::CMSG_CALENDAR_REMOVE_EVENT(c) => c.write_unencrypted_client(w),
            Self::CMSG_CALENDAR_COPY_EVENT(c) => c.write_unencrypted_client(w),
            Self::CMSG_CALENDAR_EVENT_INVITE(c) => c.write_unencrypted_client(w),
            Self::CMSG_CALENDAR_EVENT_RSVP(c) => c.write_unencrypted_client(w),
            Self::CMSG_CALENDAR_EVENT_REMOVE_INVITE(c) => c.write_unencrypted_client(w),
            Self::CMSG_CALENDAR_EVENT_STATUS(c) => c.write_unencrypted_client(w),
            Self::CMSG_CALENDAR_EVENT_MODERATOR_STATUS(c) => c.write_unencrypted_client(w),
            Self::CMSG_CALENDAR_COMPLAIN(c) => c.write_unencrypted_client(w),
            Self::CMSG_UPDATE_MISSILE_TRAJECTORY(c) => c.write_unencrypted_client(w),
            Self::CMSG_COMPLETE_MOVIE => CMSG_COMPLETE_MOVIE{}.write_unencrypted_client(w),
            Self::CMSG_QUERY_INSPECT_ACHIEVEMENTS(c) => c.write_unencrypted_client(w),
            Self::CMSG_DISMISS_CONTROLLED_VEHICLE => CMSG_DISMISS_CONTROLLED_VEHICLE{}.write_unencrypted_client(w),
            Self::CMSG_CHAR_CUSTOMIZE(c) => c.write_unencrypted_client(w),
            Self::CMSG_REQUEST_VEHICLE_EXIT => CMSG_REQUEST_VEHICLE_EXIT{}.write_unencrypted_client(w),
            Self::CMSG_REQUEST_VEHICLE_PREV_SEAT => CMSG_REQUEST_VEHICLE_PREV_SEAT{}.write_unencrypted_client(w),
            Self::CMSG_REQUEST_VEHICLE_NEXT_SEAT => CMSG_REQUEST_VEHICLE_NEXT_SEAT{}.write_unencrypted_client(w),
            Self::CMSG_REQUEST_VEHICLE_SWITCH_SEAT(c) => c.write_unencrypted_client(w),
            Self::CMSG_PET_LEARN_TALENT(c) => c.write_unencrypted_client(w),
            Self::CMSG_GAMEOBJ_REPORT_USE(c) => c.write_unencrypted_client(w),
            Self::CMSG_REMOVE_GLYPH(c) => c.write_unencrypted_client(w),
            Self::CMSG_DISMISS_CRITTER(c) => c.write_unencrypted_client(w),
            Self::CMSG_AUCTION_LIST_PENDING_SALES(c) => c.write_unencrypted_client(w),
            Self::CMSG_ENABLETAXI(c) => c.write_unencrypted_client(w),
            Self::CMSG_CHANGE_SEATS_ON_CONTROLLED_VEHICLE(c) => c.write_unencrypted_client(w),
            Self::CMSG_HEARTH_AND_RESURRECT => CMSG_HEARTH_AND_RESURRECT{}.write_unencrypted_client(w),
            Self::CMSG_PLAYER_VEHICLE_ENTER(c) => c.write_unencrypted_client(w),
            Self::CMSG_CONTROLLER_EJECT_PASSENGER(c) => c.write_unencrypted_client(w),
            Self::CMSG_ITEM_REFUND_INFO(c) => c.write_unencrypted_client(w),
            Self::CMSG_ITEM_REFUND(c) => c.write_unencrypted_client(w),
            Self::CMSG_CORPSE_MAP_POSITION_QUERY(c) => c.write_unencrypted_client(w),
            Self::CMSG_CALENDAR_EVENT_SIGNUP(c) => c.write_unencrypted_client(w),
            Self::CMSG_EQUIPMENT_SET_SAVE(c) => c.write_unencrypted_client(w),
            Self::CMSG_UPDATE_PROJECTILE_POSITION(c) => c.write_unencrypted_client(w),
            Self::CMSG_LEARN_PREVIEW_TALENTS(c) => c.write_unencrypted_client(w),
            Self::CMSG_LEARN_PREVIEW_TALENTS_PET(c) => c.write_unencrypted_client(w),
            Self::CMSG_MOVE_GRAVITY_DISABLE_ACK(c) => c.write_unencrypted_client(w),
            Self::CMSG_MOVE_GRAVITY_ENABLE_ACK(c) => c.write_unencrypted_client(w),
            Self::CMSG_EQUIPMENT_SET_USE(c) => c.write_unencrypted_client(w),
            Self::CMSG_CHAR_FACTION_CHANGE(c) => c.write_unencrypted_client(w),
            Self::CMSG_BATTLEFIELD_MGR_ENTRY_INVITE_RESPONSE(c) => c.write_unencrypted_client(w),
            Self::CMSG_BATTLEFIELD_MGR_QUEUE_INVITE_RESPONSE(c) => c.write_unencrypted_client(w),
            Self::CMSG_BATTLEFIELD_MGR_EXIT_REQUEST(c) => c.write_unencrypted_client(w),
            Self::MSG_SET_RAID_DIFFICULTY(c) => c.write_unencrypted_client(w),
            Self::CMSG_GMRESPONSE_RESOLVE => CMSG_GMRESPONSE_RESOLVE{}.write_unencrypted_client(w),
            Self::CMSG_WORLD_STATE_UI_TIMER_UPDATE => CMSG_WORLD_STATE_UI_TIMER_UPDATE{}.write_unencrypted_client(w),
            Self::CMSG_CHAR_RACE_CHANGE(c) => c.write_unencrypted_client(w),
            Self::CMSG_READY_FOR_ACCOUNT_DATA_TIMES => CMSG_READY_FOR_ACCOUNT_DATA_TIMES{}.write_unencrypted_client(w),
            Self::CMSG_QUERY_QUESTS_COMPLETED => CMSG_QUERY_QUESTS_COMPLETED{}.write_unencrypted_client(w),
            Self::CMSG_GM_REPORT_LAG(c) => c.write_unencrypted_client(w),
            Self::CMSG_MOVE_SET_COLLISION_HGT_ACK(c) => c.write_unencrypted_client(w),
        }
    }

    #[cfg(all(feature = "tokio", feature = "encryption"))]
    pub async fn tokio_write_encrypted_client<W: tokio::io::AsyncWriteExt + Unpin + Send>(&self, mut w: W, e: &mut ClientEncrypterHalf) -> Result<(), std::io::Error> {
        match self {
            Self::MSG_MOVE_START_FORWARD(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::MSG_MOVE_START_BACKWARD(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::MSG_MOVE_STOP(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::MSG_MOVE_START_STRAFE_LEFT(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::MSG_MOVE_START_STRAFE_RIGHT(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::MSG_MOVE_STOP_STRAFE(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::MSG_MOVE_JUMP(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::MSG_MOVE_START_TURN_LEFT(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::MSG_MOVE_START_TURN_RIGHT(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::MSG_MOVE_STOP_TURN(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::MSG_MOVE_START_PITCH_UP(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::MSG_MOVE_START_PITCH_DOWN(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::MSG_MOVE_STOP_PITCH(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::MSG_MOVE_SET_RUN_MODE(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::MSG_MOVE_SET_WALK_MODE(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::MSG_MOVE_FALL_LAND(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::MSG_MOVE_START_SWIM(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::MSG_MOVE_STOP_SWIM(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::MSG_MOVE_SET_FACING(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::MSG_MOVE_SET_PITCH(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::MSG_MOVE_WORLDPORT_ACK => MSG_MOVE_WORLDPORT_ACK{}.tokio_write_encrypted_client(w, e).await,
            Self::MSG_MOVE_HEARTBEAT(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::MSG_MOVE_HOVER(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::MSG_PETITION_DECLINE(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::MSG_TABARDVENDOR_ACTIVATE(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::MSG_QUEST_PUSH_RESULT(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::MSG_MOVE_WATER_WALK(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::MSG_PETITION_RENAME(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::MSG_MOVE_START_ASCEND(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::MSG_MOVE_STOP_ASCEND(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::MSG_MOVE_SET_FLIGHT_BACK_SPEED(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::MSG_MOVE_START_DESCEND(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_CALENDAR_GET_NUM_PENDING => CMSG_CALENDAR_GET_NUM_PENDING{}.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_BOOTME => CMSG_BOOTME{}.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_DBLOOKUP(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_WORLD_TELEPORT(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_TELEPORT_TO_UNIT(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_CHAR_CREATE(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_CHAR_ENUM => CMSG_CHAR_ENUM{}.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_CHAR_DELETE(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_PLAYER_LOGIN(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_PLAYER_LOGOUT => CMSG_PLAYER_LOGOUT{}.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_LOGOUT_REQUEST => CMSG_LOGOUT_REQUEST{}.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_LOGOUT_CANCEL => CMSG_LOGOUT_CANCEL{}.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_NAME_QUERY(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_PET_NAME_QUERY(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_GUILD_QUERY(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_ITEM_QUERY_SINGLE(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_PAGE_TEXT_QUERY(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_QUEST_QUERY(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_GAMEOBJECT_QUERY(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_CREATURE_QUERY(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_WHO(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_WHOIS(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_CONTACT_LIST(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_ADD_FRIEND(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_DEL_FRIEND(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_SET_CONTACT_NOTES(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_ADD_IGNORE(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_DEL_IGNORE(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_GROUP_INVITE(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_GROUP_CANCEL => CMSG_GROUP_CANCEL{}.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_GROUP_ACCEPT => CMSG_GROUP_ACCEPT{}.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_GROUP_DECLINE => CMSG_GROUP_DECLINE{}.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_GROUP_UNINVITE(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_GROUP_UNINVITE_GUID(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_GROUP_SET_LEADER(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_LOOT_METHOD(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_GROUP_DISBAND => CMSG_GROUP_DISBAND{}.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_GUILD_CREATE(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_GUILD_INVITE(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_GUILD_ACCEPT => CMSG_GUILD_ACCEPT{}.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_GUILD_DECLINE => CMSG_GUILD_DECLINE{}.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_GUILD_INFO => CMSG_GUILD_INFO{}.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_GUILD_ROSTER => CMSG_GUILD_ROSTER{}.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_GUILD_PROMOTE(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_GUILD_DEMOTE(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_GUILD_LEAVE => CMSG_GUILD_LEAVE{}.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_GUILD_REMOVE(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_GUILD_DISBAND => CMSG_GUILD_DISBAND{}.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_GUILD_LEADER(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_GUILD_MOTD(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_MESSAGECHAT(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_JOIN_CHANNEL(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_LEAVE_CHANNEL(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_CHANNEL_LIST(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_CHANNEL_PASSWORD(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_CHANNEL_SET_OWNER(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_CHANNEL_OWNER(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_CHANNEL_MODERATOR(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_CHANNEL_UNMODERATOR(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_CHANNEL_MUTE(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_CHANNEL_UNMUTE(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_CHANNEL_INVITE(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_CHANNEL_KICK(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_CHANNEL_BAN(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_CHANNEL_UNBAN(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_CHANNEL_ANNOUNCEMENTS(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_CHANNEL_MODERATE(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_USE_ITEM(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_OPEN_ITEM(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_READ_ITEM(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_GAMEOBJ_USE(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_AREATRIGGER(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::MSG_MOVE_TELEPORT(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::MSG_MOVE_TELEPORT_ACK(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_MOVE_SET_RAW_POSITION(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_FORCE_RUN_SPEED_CHANGE_ACK(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACK(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_FORCE_SWIM_SPEED_CHANGE_ACK(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_FORCE_MOVE_ROOT_ACK(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_FORCE_MOVE_UNROOT_ACK(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_MOVE_KNOCK_BACK_ACK(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_MOVE_HOVER_ACK(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_NEXT_CINEMATIC_CAMERA => CMSG_NEXT_CINEMATIC_CAMERA{}.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_COMPLETE_CINEMATIC => CMSG_COMPLETE_CINEMATIC{}.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_TUTORIAL_FLAG(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_TUTORIAL_CLEAR => CMSG_TUTORIAL_CLEAR{}.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_TUTORIAL_RESET => CMSG_TUTORIAL_RESET{}.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_STANDSTATECHANGE(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_EMOTE(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_TEXT_EMOTE(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_AUTOSTORE_LOOT_ITEM(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_AUTOEQUIP_ITEM(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_AUTOSTORE_BAG_ITEM(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_SWAP_ITEM(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_SWAP_INV_ITEM(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_SPLIT_ITEM(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_AUTOEQUIP_ITEM_SLOT(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_DESTROYITEM(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_INSPECT(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_INITIATE_TRADE(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_BEGIN_TRADE => CMSG_BEGIN_TRADE{}.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_BUSY_TRADE => CMSG_BUSY_TRADE{}.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_IGNORE_TRADE => CMSG_IGNORE_TRADE{}.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_ACCEPT_TRADE(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_UNACCEPT_TRADE => CMSG_UNACCEPT_TRADE{}.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_CANCEL_TRADE => CMSG_CANCEL_TRADE{}.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_SET_TRADE_ITEM(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_CLEAR_TRADE_ITEM(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_SET_TRADE_GOLD(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_SET_FACTION_ATWAR(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_SET_ACTION_BUTTON(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_CAST_SPELL(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_CANCEL_CAST(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_CANCEL_AURA(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_CANCEL_CHANNELLING(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_SET_SELECTION(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_DELETEEQUIPMENT_SET(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_INSTANCE_LOCK_RESPONSE(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_ATTACKSWING(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_ATTACKSTOP => CMSG_ATTACKSTOP{}.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_REPOP_REQUEST => CMSG_REPOP_REQUEST{}.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_RESURRECT_RESPONSE(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_LOOT(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_LOOT_MONEY => CMSG_LOOT_MONEY{}.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_LOOT_RELEASE(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_DUEL_ACCEPTED(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_DUEL_CANCELLED(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_MOUNTSPECIAL_ANIM => CMSG_MOUNTSPECIAL_ANIM{}.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_PET_SET_ACTION(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_PET_ACTION(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_PET_ABANDON(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_PET_RENAME(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_GOSSIP_HELLO(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_GOSSIP_SELECT_OPTION(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_NPC_TEXT_QUERY(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_QUESTGIVER_STATUS_QUERY(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_QUESTGIVER_HELLO(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_QUESTGIVER_QUERY_QUEST(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_QUESTGIVER_QUEST_AUTOLAUNCH => CMSG_QUESTGIVER_QUEST_AUTOLAUNCH{}.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_QUESTGIVER_ACCEPT_QUEST(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_QUESTGIVER_COMPLETE_QUEST(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_QUESTGIVER_REQUEST_REWARD(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_QUESTGIVER_CHOOSE_REWARD(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_QUESTGIVER_CANCEL => CMSG_QUESTGIVER_CANCEL{}.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_QUESTLOG_SWAP_QUEST(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_QUESTLOG_REMOVE_QUEST(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_QUEST_CONFIRM_ACCEPT(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_PUSHQUESTTOPARTY(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_LIST_INVENTORY(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_SELL_ITEM(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_BUY_ITEM(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_BUY_ITEM_IN_SLOT(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_TAXINODE_STATUS_QUERY(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_TAXIQUERYAVAILABLENODES(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_ACTIVATETAXI(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_TRAINER_LIST(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_TRAINER_BUY_SPELL(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_BINDER_ACTIVATE(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_BANKER_ACTIVATE(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_BUY_BANK_SLOT(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_PETITION_SHOWLIST(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_PETITION_BUY(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_PETITION_SHOW_SIGNATURES(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_PETITION_SIGN(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_OFFER_PETITION(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_TURN_IN_PETITION(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_PETITION_QUERY(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_BUG(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_PLAYED_TIME(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_QUERY_TIME => CMSG_QUERY_TIME{}.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_RECLAIM_CORPSE(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_WRAP_ITEM(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::MSG_MINIMAP_PING(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_PING(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_SETSHEATHED(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_QUEST_POI_QUERY(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_AUTH_SESSION(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_PET_CAST_SPELL(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::MSG_SAVE_GUILD_EMBLEM(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_ZONEUPDATE(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::MSG_RANDOM_ROLL(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_UNLEARN_SKILL(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_GMTICKET_CREATE(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_GMTICKET_UPDATETEXT(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_REQUEST_ACCOUNT_DATA(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_UPDATE_ACCOUNT_DATA(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_GMTICKET_GETTICKET => CMSG_GMTICKET_GETTICKET{}.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_UNLEARN_TALENTS => CMSG_UNLEARN_TALENTS{}.tokio_write_encrypted_client(w, e).await,
            Self::MSG_CORPSE_QUERY => MSG_CORPSE_QUERY_Client{}.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_GMTICKET_DELETETICKET => CMSG_GMTICKET_DELETETICKET{}.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_GMTICKET_SYSTEMSTATUS => CMSG_GMTICKET_SYSTEMSTATUS{}.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_SPIRIT_HEALER_ACTIVATE(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_CHAT_IGNORED(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_GUILD_RANK(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_GUILD_ADD_RANK(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_GUILD_DEL_RANK => CMSG_GUILD_DEL_RANK{}.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_GUILD_SET_PUBLIC_NOTE(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_GUILD_SET_OFFICER_NOTE(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_SEND_MAIL(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_GET_MAIL_LIST(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_BATTLEFIELD_LIST(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_ITEM_TEXT_QUERY(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_MAIL_TAKE_MONEY(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_MAIL_TAKE_ITEM(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_MAIL_MARK_AS_READ(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_MAIL_RETURN_TO_SENDER(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_MAIL_DELETE(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_MAIL_CREATE_TEXT_ITEM(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_LEARN_TALENT(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_TOGGLE_PVP(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::MSG_AUCTION_HELLO(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_AUCTION_SELL_ITEM(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_AUCTION_REMOVE_ITEM(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_AUCTION_LIST_ITEMS(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_AUCTION_LIST_OWNER_ITEMS(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_AUCTION_PLACE_BID(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_AUCTION_LIST_BIDDER_ITEMS(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_SET_AMMO(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_SET_ACTIVE_MOVER(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_PET_CANCEL_AURA(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_CANCEL_AUTO_REPEAT_SPELL => CMSG_CANCEL_AUTO_REPEAT_SPELL{}.tokio_write_encrypted_client(w, e).await,
            Self::MSG_LIST_STABLED_PETS(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_STABLE_PET(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_UNSTABLE_PET(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_BUY_STABLE_SLOT(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_STABLE_SWAP_PET(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_REQUEST_PET_INFO => CMSG_REQUEST_PET_INFO{}.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_FAR_SIGHT(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_GROUP_CHANGE_SUB_GROUP(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_REQUEST_PARTY_MEMBER_STATS(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_GROUP_SWAP_SUB_GROUP(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_AUTOSTORE_BANK_ITEM(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_AUTOBANK_ITEM(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::MSG_QUERY_NEXT_MAIL_TIME => MSG_QUERY_NEXT_MAIL_TIME_Client{}.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_GROUP_RAID_CONVERT => CMSG_GROUP_RAID_CONVERT{}.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_GROUP_ASSISTANT_LEADER(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_BUYBACK_ITEM(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_SET_SAVED_INSTANCE_EXTEND(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_LFG_GET_STATUS => CMSG_LFG_GET_STATUS{}.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_GMTICKETSYSTEM_TOGGLE => CMSG_GMTICKETSYSTEM_TOGGLE{}.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_CANCEL_GROWTH_AURA => CMSG_CANCEL_GROWTH_AURA{}.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_LOOT_ROLL(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_LOOT_MASTER_GIVE(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_REPAIR_ITEM(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::MSG_TALENT_WIPE_CONFIRM(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_SUMMON_RESPONSE(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_SELF_RES => CMSG_SELF_RES{}.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_TOGGLE_HELM => CMSG_TOGGLE_HELM{}.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_TOGGLE_CLOAK => CMSG_TOGGLE_CLOAK{}.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_SET_ACTIONBAR_TOGGLES(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_ITEM_NAME_QUERY(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_CHAR_RENAME(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_MOVE_SPLINE_DONE(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_MOVE_FALL_RESET(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_REQUEST_RAID_INFO => CMSG_REQUEST_RAID_INFO{}.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_MOVE_TIME_SKIPPED(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_MOVE_FEATHER_FALL_ACK(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_MOVE_WATER_WALK_ACK(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_MOVE_NOT_ACTIVE_MOVER(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_BATTLEFIELD_STATUS => CMSG_BATTLEFIELD_STATUS{}.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_BATTLEFIELD_PORT(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::MSG_INSPECT_HONOR_STATS(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_BATTLEMASTER_HELLO(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_FORCE_WALK_SPEED_CHANGE_ACK(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_FORCE_SWIM_BACK_SPEED_CHANGE_ACK(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_FORCE_TURN_RATE_CHANGE_ACK(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::MSG_PVP_LOG_DATA => MSG_PVP_LOG_DATA_Client{}.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_LEAVE_BATTLEFIELD(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_AREA_SPIRIT_HEALER_QUERY(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_AREA_SPIRIT_HEALER_QUEUE(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_WARDEN_DATA(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::MSG_BATTLEGROUND_PLAYER_POSITIONS => MSG_BATTLEGROUND_PLAYER_POSITIONS_Client{}.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_PET_STOP_ATTACK(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_BATTLEMASTER_JOIN(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_PET_UNLEARN(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_PET_SPELL_AUTOCAST(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_GUILD_INFO_TEXT(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_ACTIVATETAXIEXPRESS(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_SET_FACTION_INACTIVE(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_SET_WATCHED_FACTION(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_RESET_INSTANCES => CMSG_RESET_INSTANCES{}.tokio_write_encrypted_client(w, e).await,
            Self::MSG_RAID_TARGET_UPDATE(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::MSG_RAID_READY_CHECK(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::MSG_SET_DUNGEON_DIFFICULTY(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_GMSURVEY_SUBMIT(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_MOVE_SET_CAN_TRANSITION_BETWEEN_SWIM_AND_FLY_ACK(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_MOVE_SET_CAN_FLY_ACK(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_MOVE_SET_FLY(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_SOCKET_GEMS(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_ARENA_TEAM_ROSTER(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_ARENA_TEAM_INVITE(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_ARENA_TEAM_ACCEPT => CMSG_ARENA_TEAM_ACCEPT{}.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_ARENA_TEAM_DECLINE => CMSG_ARENA_TEAM_DECLINE{}.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_ARENA_TEAM_LEAVE(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_ARENA_TEAM_REMOVE(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_ARENA_TEAM_DISBAND(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_ARENA_TEAM_LEADER(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_BATTLEMASTER_JOIN_ARENA(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_LFG_JOIN(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_LFG_LEAVE => CMSG_LFG_LEAVE{}.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_SEARCH_LFG_JOIN(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_SEARCH_LFG_LEAVE(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_LFG_PROPOSAL_RESULT(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_SET_LFG_COMMENT(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_LFG_SET_ROLES(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_LFG_SET_BOOT_VOTE(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_LFD_PLAYER_LOCK_INFO_REQUEST => CMSG_LFD_PLAYER_LOCK_INFO_REQUEST{}.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_LFG_TELEPORT(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_LFD_PARTY_LOCK_INFO_REQUEST => CMSG_LFD_PARTY_LOCK_INFO_REQUEST{}.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_SET_TITLE(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_CANCEL_MOUNT_AURA => CMSG_CANCEL_MOUNT_AURA{}.tokio_write_encrypted_client(w, e).await,
            Self::MSG_INSPECT_ARENA_TEAMS(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_CANCEL_TEMP_ENCHANTMENT(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_FORCE_FLIGHT_SPEED_CHANGE_ACK(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE_ACK(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_SET_TAXI_BENCHMARK_MODE(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_REALM_SPLIT(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_MOVE_CHNG_TRANSPORT(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::MSG_PARTY_ASSIGNMENT(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_TIME_SYNC_RESP(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::MSG_RAID_READY_CHECK_CONFIRM(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_VOICE_SESSION_ENABLE(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_COMMENTATOR_ENABLE(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::MSG_RAID_READY_CHECK_FINISHED => MSG_RAID_READY_CHECK_FINISHED_Client{}.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_COMPLAIN(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_CHANNEL_DISPLAY_LIST(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_SET_ACTIVE_VOICE_CHANNEL(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_GET_CHANNEL_MEMBER_COUNT(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_CHANNEL_VOICE_ON => CMSG_CHANNEL_VOICE_ON{}.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_REPORT_PVP_AFK(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_GUILD_BANKER_ACTIVATE(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_GUILD_BANK_QUERY_TAB(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_GUILD_BANK_SWAP_ITEMS(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_GUILD_BANK_BUY_TAB(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_GUILD_BANK_UPDATE_TAB(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_GUILD_BANK_DEPOSIT_MONEY(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_GUILD_BANK_WITHDRAW_MONEY(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::MSG_GUILD_BANK_LOG_QUERY(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_SET_CHANNEL_WATCH(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_CLEAR_CHANNEL_WATCH(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_SPELLCLICK(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::MSG_GUILD_PERMISSIONS => MSG_GUILD_PERMISSIONS_Client{}.tokio_write_encrypted_client(w, e).await,
            Self::MSG_GUILD_BANK_MONEY_WITHDRAWN => MSG_GUILD_BANK_MONEY_WITHDRAWN_Client{}.tokio_write_encrypted_client(w, e).await,
            Self::MSG_GUILD_EVENT_LOG_QUERY => MSG_GUILD_EVENT_LOG_QUERY_Client{}.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_GET_MIRRORIMAGE_DATA(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_KEEP_ALIVE => CMSG_KEEP_ALIVE{}.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_OPT_OUT_OF_LOOT(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::MSG_QUERY_GUILD_BANK_TEXT(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_SET_GUILD_BANK_TEXT(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_GRANT_LEVEL(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_TOTEM_DESTROYED(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_QUESTGIVER_STATUS_MULTIPLE_QUERY => CMSG_QUESTGIVER_STATUS_MULTIPLE_QUERY{}.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_SET_PLAYER_DECLINED_NAMES(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_ACCEPT_LEVEL_GRANT(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_ALTER_APPEARANCE(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_CALENDAR_GET_CALENDAR => CMSG_CALENDAR_GET_CALENDAR{}.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_CALENDAR_GET_EVENT(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_CALENDAR_GUILD_FILTER(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_CALENDAR_ARENA_TEAM(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_CALENDAR_ADD_EVENT(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_CALENDAR_UPDATE_EVENT(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_CALENDAR_REMOVE_EVENT(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_CALENDAR_COPY_EVENT(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_CALENDAR_EVENT_INVITE(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_CALENDAR_EVENT_RSVP(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_CALENDAR_EVENT_REMOVE_INVITE(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_CALENDAR_EVENT_STATUS(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_CALENDAR_EVENT_MODERATOR_STATUS(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_CALENDAR_COMPLAIN(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_UPDATE_MISSILE_TRAJECTORY(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_COMPLETE_MOVIE => CMSG_COMPLETE_MOVIE{}.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_QUERY_INSPECT_ACHIEVEMENTS(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_DISMISS_CONTROLLED_VEHICLE => CMSG_DISMISS_CONTROLLED_VEHICLE{}.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_CHAR_CUSTOMIZE(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_REQUEST_VEHICLE_EXIT => CMSG_REQUEST_VEHICLE_EXIT{}.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_REQUEST_VEHICLE_PREV_SEAT => CMSG_REQUEST_VEHICLE_PREV_SEAT{}.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_REQUEST_VEHICLE_NEXT_SEAT => CMSG_REQUEST_VEHICLE_NEXT_SEAT{}.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_REQUEST_VEHICLE_SWITCH_SEAT(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_PET_LEARN_TALENT(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_GAMEOBJ_REPORT_USE(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_REMOVE_GLYPH(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_DISMISS_CRITTER(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_AUCTION_LIST_PENDING_SALES(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_ENABLETAXI(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_CHANGE_SEATS_ON_CONTROLLED_VEHICLE(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_HEARTH_AND_RESURRECT => CMSG_HEARTH_AND_RESURRECT{}.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_PLAYER_VEHICLE_ENTER(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_CONTROLLER_EJECT_PASSENGER(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_ITEM_REFUND_INFO(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_ITEM_REFUND(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_CORPSE_MAP_POSITION_QUERY(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_CALENDAR_EVENT_SIGNUP(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_EQUIPMENT_SET_SAVE(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_UPDATE_PROJECTILE_POSITION(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_LEARN_PREVIEW_TALENTS(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_LEARN_PREVIEW_TALENTS_PET(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_MOVE_GRAVITY_DISABLE_ACK(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_MOVE_GRAVITY_ENABLE_ACK(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_EQUIPMENT_SET_USE(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_CHAR_FACTION_CHANGE(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_BATTLEFIELD_MGR_ENTRY_INVITE_RESPONSE(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_BATTLEFIELD_MGR_QUEUE_INVITE_RESPONSE(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_BATTLEFIELD_MGR_EXIT_REQUEST(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::MSG_SET_RAID_DIFFICULTY(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_GMRESPONSE_RESOLVE => CMSG_GMRESPONSE_RESOLVE{}.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_WORLD_STATE_UI_TIMER_UPDATE => CMSG_WORLD_STATE_UI_TIMER_UPDATE{}.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_CHAR_RACE_CHANGE(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_READY_FOR_ACCOUNT_DATA_TIMES => CMSG_READY_FOR_ACCOUNT_DATA_TIMES{}.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_QUERY_QUESTS_COMPLETED => CMSG_QUERY_QUESTS_COMPLETED{}.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_GM_REPORT_LAG(c) => c.tokio_write_encrypted_client(w, e).await,
            Self::CMSG_MOVE_SET_COLLISION_HGT_ACK(c) => c.tokio_write_encrypted_client(w, e).await,
        }
    }

    #[cfg(feature = "tokio")]
    pub async fn tokio_write_unencrypted_client<W: tokio::io::AsyncWriteExt + Unpin + Send>(&self, mut w: W) -> Result<(), std::io::Error> {
        match self {
            Self::MSG_MOVE_START_FORWARD(c) => c.tokio_write_unencrypted_client(w).await,
            Self::MSG_MOVE_START_BACKWARD(c) => c.tokio_write_unencrypted_client(w).await,
            Self::MSG_MOVE_STOP(c) => c.tokio_write_unencrypted_client(w).await,
            Self::MSG_MOVE_START_STRAFE_LEFT(c) => c.tokio_write_unencrypted_client(w).await,
            Self::MSG_MOVE_START_STRAFE_RIGHT(c) => c.tokio_write_unencrypted_client(w).await,
            Self::MSG_MOVE_STOP_STRAFE(c) => c.tokio_write_unencrypted_client(w).await,
            Self::MSG_MOVE_JUMP(c) => c.tokio_write_unencrypted_client(w).await,
            Self::MSG_MOVE_START_TURN_LEFT(c) => c.tokio_write_unencrypted_client(w).await,
            Self::MSG_MOVE_START_TURN_RIGHT(c) => c.tokio_write_unencrypted_client(w).await,
            Self::MSG_MOVE_STOP_TURN(c) => c.tokio_write_unencrypted_client(w).await,
            Self::MSG_MOVE_START_PITCH_UP(c) => c.tokio_write_unencrypted_client(w).await,
            Self::MSG_MOVE_START_PITCH_DOWN(c) => c.tokio_write_unencrypted_client(w).await,
            Self::MSG_MOVE_STOP_PITCH(c) => c.tokio_write_unencrypted_client(w).await,
            Self::MSG_MOVE_SET_RUN_MODE(c) => c.tokio_write_unencrypted_client(w).await,
            Self::MSG_MOVE_SET_WALK_MODE(c) => c.tokio_write_unencrypted_client(w).await,
            Self::MSG_MOVE_FALL_LAND(c) => c.tokio_write_unencrypted_client(w).await,
            Self::MSG_MOVE_START_SWIM(c) => c.tokio_write_unencrypted_client(w).await,
            Self::MSG_MOVE_STOP_SWIM(c) => c.tokio_write_unencrypted_client(w).await,
            Self::MSG_MOVE_SET_FACING(c) => c.tokio_write_unencrypted_client(w).await,
            Self::MSG_MOVE_SET_PITCH(c) => c.tokio_write_unencrypted_client(w).await,
            Self::MSG_MOVE_WORLDPORT_ACK => MSG_MOVE_WORLDPORT_ACK{}.tokio_write_unencrypted_client(w).await,
            Self::MSG_MOVE_HEARTBEAT(c) => c.tokio_write_unencrypted_client(w).await,
            Self::MSG_MOVE_HOVER(c) => c.tokio_write_unencrypted_client(w).await,
            Self::MSG_PETITION_DECLINE(c) => c.tokio_write_unencrypted_client(w).await,
            Self::MSG_TABARDVENDOR_ACTIVATE(c) => c.tokio_write_unencrypted_client(w).await,
            Self::MSG_QUEST_PUSH_RESULT(c) => c.tokio_write_unencrypted_client(w).await,
            Self::MSG_MOVE_WATER_WALK(c) => c.tokio_write_unencrypted_client(w).await,
            Self::MSG_PETITION_RENAME(c) => c.tokio_write_unencrypted_client(w).await,
            Self::MSG_MOVE_START_ASCEND(c) => c.tokio_write_unencrypted_client(w).await,
            Self::MSG_MOVE_STOP_ASCEND(c) => c.tokio_write_unencrypted_client(w).await,
            Self::MSG_MOVE_SET_FLIGHT_BACK_SPEED(c) => c.tokio_write_unencrypted_client(w).await,
            Self::MSG_MOVE_START_DESCEND(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_CALENDAR_GET_NUM_PENDING => CMSG_CALENDAR_GET_NUM_PENDING{}.tokio_write_unencrypted_client(w).await,
            Self::CMSG_BOOTME => CMSG_BOOTME{}.tokio_write_unencrypted_client(w).await,
            Self::CMSG_DBLOOKUP(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_WORLD_TELEPORT(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_TELEPORT_TO_UNIT(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_CHAR_CREATE(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_CHAR_ENUM => CMSG_CHAR_ENUM{}.tokio_write_unencrypted_client(w).await,
            Self::CMSG_CHAR_DELETE(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_PLAYER_LOGIN(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_PLAYER_LOGOUT => CMSG_PLAYER_LOGOUT{}.tokio_write_unencrypted_client(w).await,
            Self::CMSG_LOGOUT_REQUEST => CMSG_LOGOUT_REQUEST{}.tokio_write_unencrypted_client(w).await,
            Self::CMSG_LOGOUT_CANCEL => CMSG_LOGOUT_CANCEL{}.tokio_write_unencrypted_client(w).await,
            Self::CMSG_NAME_QUERY(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_PET_NAME_QUERY(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_GUILD_QUERY(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_ITEM_QUERY_SINGLE(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_PAGE_TEXT_QUERY(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_QUEST_QUERY(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_GAMEOBJECT_QUERY(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_CREATURE_QUERY(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_WHO(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_WHOIS(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_CONTACT_LIST(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_ADD_FRIEND(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_DEL_FRIEND(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_SET_CONTACT_NOTES(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_ADD_IGNORE(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_DEL_IGNORE(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_GROUP_INVITE(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_GROUP_CANCEL => CMSG_GROUP_CANCEL{}.tokio_write_unencrypted_client(w).await,
            Self::CMSG_GROUP_ACCEPT => CMSG_GROUP_ACCEPT{}.tokio_write_unencrypted_client(w).await,
            Self::CMSG_GROUP_DECLINE => CMSG_GROUP_DECLINE{}.tokio_write_unencrypted_client(w).await,
            Self::CMSG_GROUP_UNINVITE(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_GROUP_UNINVITE_GUID(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_GROUP_SET_LEADER(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_LOOT_METHOD(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_GROUP_DISBAND => CMSG_GROUP_DISBAND{}.tokio_write_unencrypted_client(w).await,
            Self::CMSG_GUILD_CREATE(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_GUILD_INVITE(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_GUILD_ACCEPT => CMSG_GUILD_ACCEPT{}.tokio_write_unencrypted_client(w).await,
            Self::CMSG_GUILD_DECLINE => CMSG_GUILD_DECLINE{}.tokio_write_unencrypted_client(w).await,
            Self::CMSG_GUILD_INFO => CMSG_GUILD_INFO{}.tokio_write_unencrypted_client(w).await,
            Self::CMSG_GUILD_ROSTER => CMSG_GUILD_ROSTER{}.tokio_write_unencrypted_client(w).await,
            Self::CMSG_GUILD_PROMOTE(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_GUILD_DEMOTE(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_GUILD_LEAVE => CMSG_GUILD_LEAVE{}.tokio_write_unencrypted_client(w).await,
            Self::CMSG_GUILD_REMOVE(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_GUILD_DISBAND => CMSG_GUILD_DISBAND{}.tokio_write_unencrypted_client(w).await,
            Self::CMSG_GUILD_LEADER(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_GUILD_MOTD(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_MESSAGECHAT(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_JOIN_CHANNEL(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_LEAVE_CHANNEL(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_CHANNEL_LIST(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_CHANNEL_PASSWORD(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_CHANNEL_SET_OWNER(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_CHANNEL_OWNER(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_CHANNEL_MODERATOR(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_CHANNEL_UNMODERATOR(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_CHANNEL_MUTE(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_CHANNEL_UNMUTE(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_CHANNEL_INVITE(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_CHANNEL_KICK(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_CHANNEL_BAN(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_CHANNEL_UNBAN(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_CHANNEL_ANNOUNCEMENTS(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_CHANNEL_MODERATE(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_USE_ITEM(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_OPEN_ITEM(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_READ_ITEM(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_GAMEOBJ_USE(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_AREATRIGGER(c) => c.tokio_write_unencrypted_client(w).await,
            Self::MSG_MOVE_TELEPORT(c) => c.tokio_write_unencrypted_client(w).await,
            Self::MSG_MOVE_TELEPORT_ACK(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_MOVE_SET_RAW_POSITION(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_FORCE_RUN_SPEED_CHANGE_ACK(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACK(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_FORCE_SWIM_SPEED_CHANGE_ACK(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_FORCE_MOVE_ROOT_ACK(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_FORCE_MOVE_UNROOT_ACK(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_MOVE_KNOCK_BACK_ACK(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_MOVE_HOVER_ACK(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_NEXT_CINEMATIC_CAMERA => CMSG_NEXT_CINEMATIC_CAMERA{}.tokio_write_unencrypted_client(w).await,
            Self::CMSG_COMPLETE_CINEMATIC => CMSG_COMPLETE_CINEMATIC{}.tokio_write_unencrypted_client(w).await,
            Self::CMSG_TUTORIAL_FLAG(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_TUTORIAL_CLEAR => CMSG_TUTORIAL_CLEAR{}.tokio_write_unencrypted_client(w).await,
            Self::CMSG_TUTORIAL_RESET => CMSG_TUTORIAL_RESET{}.tokio_write_unencrypted_client(w).await,
            Self::CMSG_STANDSTATECHANGE(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_EMOTE(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_TEXT_EMOTE(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_AUTOSTORE_LOOT_ITEM(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_AUTOEQUIP_ITEM(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_AUTOSTORE_BAG_ITEM(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_SWAP_ITEM(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_SWAP_INV_ITEM(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_SPLIT_ITEM(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_AUTOEQUIP_ITEM_SLOT(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_DESTROYITEM(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_INSPECT(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_INITIATE_TRADE(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_BEGIN_TRADE => CMSG_BEGIN_TRADE{}.tokio_write_unencrypted_client(w).await,
            Self::CMSG_BUSY_TRADE => CMSG_BUSY_TRADE{}.tokio_write_unencrypted_client(w).await,
            Self::CMSG_IGNORE_TRADE => CMSG_IGNORE_TRADE{}.tokio_write_unencrypted_client(w).await,
            Self::CMSG_ACCEPT_TRADE(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_UNACCEPT_TRADE => CMSG_UNACCEPT_TRADE{}.tokio_write_unencrypted_client(w).await,
            Self::CMSG_CANCEL_TRADE => CMSG_CANCEL_TRADE{}.tokio_write_unencrypted_client(w).await,
            Self::CMSG_SET_TRADE_ITEM(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_CLEAR_TRADE_ITEM(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_SET_TRADE_GOLD(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_SET_FACTION_ATWAR(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_SET_ACTION_BUTTON(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_CAST_SPELL(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_CANCEL_CAST(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_CANCEL_AURA(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_CANCEL_CHANNELLING(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_SET_SELECTION(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_DELETEEQUIPMENT_SET(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_INSTANCE_LOCK_RESPONSE(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_ATTACKSWING(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_ATTACKSTOP => CMSG_ATTACKSTOP{}.tokio_write_unencrypted_client(w).await,
            Self::CMSG_REPOP_REQUEST => CMSG_REPOP_REQUEST{}.tokio_write_unencrypted_client(w).await,
            Self::CMSG_RESURRECT_RESPONSE(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_LOOT(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_LOOT_MONEY => CMSG_LOOT_MONEY{}.tokio_write_unencrypted_client(w).await,
            Self::CMSG_LOOT_RELEASE(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_DUEL_ACCEPTED(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_DUEL_CANCELLED(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_MOUNTSPECIAL_ANIM => CMSG_MOUNTSPECIAL_ANIM{}.tokio_write_unencrypted_client(w).await,
            Self::CMSG_PET_SET_ACTION(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_PET_ACTION(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_PET_ABANDON(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_PET_RENAME(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_GOSSIP_HELLO(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_GOSSIP_SELECT_OPTION(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_NPC_TEXT_QUERY(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_QUESTGIVER_STATUS_QUERY(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_QUESTGIVER_HELLO(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_QUESTGIVER_QUERY_QUEST(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_QUESTGIVER_QUEST_AUTOLAUNCH => CMSG_QUESTGIVER_QUEST_AUTOLAUNCH{}.tokio_write_unencrypted_client(w).await,
            Self::CMSG_QUESTGIVER_ACCEPT_QUEST(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_QUESTGIVER_COMPLETE_QUEST(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_QUESTGIVER_REQUEST_REWARD(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_QUESTGIVER_CHOOSE_REWARD(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_QUESTGIVER_CANCEL => CMSG_QUESTGIVER_CANCEL{}.tokio_write_unencrypted_client(w).await,
            Self::CMSG_QUESTLOG_SWAP_QUEST(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_QUESTLOG_REMOVE_QUEST(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_QUEST_CONFIRM_ACCEPT(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_PUSHQUESTTOPARTY(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_LIST_INVENTORY(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_SELL_ITEM(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_BUY_ITEM(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_BUY_ITEM_IN_SLOT(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_TAXINODE_STATUS_QUERY(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_TAXIQUERYAVAILABLENODES(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_ACTIVATETAXI(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_TRAINER_LIST(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_TRAINER_BUY_SPELL(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_BINDER_ACTIVATE(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_BANKER_ACTIVATE(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_BUY_BANK_SLOT(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_PETITION_SHOWLIST(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_PETITION_BUY(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_PETITION_SHOW_SIGNATURES(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_PETITION_SIGN(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_OFFER_PETITION(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_TURN_IN_PETITION(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_PETITION_QUERY(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_BUG(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_PLAYED_TIME(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_QUERY_TIME => CMSG_QUERY_TIME{}.tokio_write_unencrypted_client(w).await,
            Self::CMSG_RECLAIM_CORPSE(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_WRAP_ITEM(c) => c.tokio_write_unencrypted_client(w).await,
            Self::MSG_MINIMAP_PING(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_PING(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_SETSHEATHED(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_QUEST_POI_QUERY(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_AUTH_SESSION(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_PET_CAST_SPELL(c) => c.tokio_write_unencrypted_client(w).await,
            Self::MSG_SAVE_GUILD_EMBLEM(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_ZONEUPDATE(c) => c.tokio_write_unencrypted_client(w).await,
            Self::MSG_RANDOM_ROLL(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_UNLEARN_SKILL(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_GMTICKET_CREATE(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_GMTICKET_UPDATETEXT(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_REQUEST_ACCOUNT_DATA(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_UPDATE_ACCOUNT_DATA(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_GMTICKET_GETTICKET => CMSG_GMTICKET_GETTICKET{}.tokio_write_unencrypted_client(w).await,
            Self::CMSG_UNLEARN_TALENTS => CMSG_UNLEARN_TALENTS{}.tokio_write_unencrypted_client(w).await,
            Self::MSG_CORPSE_QUERY => MSG_CORPSE_QUERY_Client{}.tokio_write_unencrypted_client(w).await,
            Self::CMSG_GMTICKET_DELETETICKET => CMSG_GMTICKET_DELETETICKET{}.tokio_write_unencrypted_client(w).await,
            Self::CMSG_GMTICKET_SYSTEMSTATUS => CMSG_GMTICKET_SYSTEMSTATUS{}.tokio_write_unencrypted_client(w).await,
            Self::CMSG_SPIRIT_HEALER_ACTIVATE(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_CHAT_IGNORED(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_GUILD_RANK(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_GUILD_ADD_RANK(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_GUILD_DEL_RANK => CMSG_GUILD_DEL_RANK{}.tokio_write_unencrypted_client(w).await,
            Self::CMSG_GUILD_SET_PUBLIC_NOTE(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_GUILD_SET_OFFICER_NOTE(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_SEND_MAIL(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_GET_MAIL_LIST(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_BATTLEFIELD_LIST(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_ITEM_TEXT_QUERY(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_MAIL_TAKE_MONEY(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_MAIL_TAKE_ITEM(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_MAIL_MARK_AS_READ(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_MAIL_RETURN_TO_SENDER(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_MAIL_DELETE(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_MAIL_CREATE_TEXT_ITEM(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_LEARN_TALENT(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_TOGGLE_PVP(c) => c.tokio_write_unencrypted_client(w).await,
            Self::MSG_AUCTION_HELLO(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_AUCTION_SELL_ITEM(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_AUCTION_REMOVE_ITEM(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_AUCTION_LIST_ITEMS(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_AUCTION_LIST_OWNER_ITEMS(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_AUCTION_PLACE_BID(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_AUCTION_LIST_BIDDER_ITEMS(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_SET_AMMO(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_SET_ACTIVE_MOVER(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_PET_CANCEL_AURA(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_CANCEL_AUTO_REPEAT_SPELL => CMSG_CANCEL_AUTO_REPEAT_SPELL{}.tokio_write_unencrypted_client(w).await,
            Self::MSG_LIST_STABLED_PETS(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_STABLE_PET(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_UNSTABLE_PET(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_BUY_STABLE_SLOT(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_STABLE_SWAP_PET(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_REQUEST_PET_INFO => CMSG_REQUEST_PET_INFO{}.tokio_write_unencrypted_client(w).await,
            Self::CMSG_FAR_SIGHT(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_GROUP_CHANGE_SUB_GROUP(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_REQUEST_PARTY_MEMBER_STATS(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_GROUP_SWAP_SUB_GROUP(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_AUTOSTORE_BANK_ITEM(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_AUTOBANK_ITEM(c) => c.tokio_write_unencrypted_client(w).await,
            Self::MSG_QUERY_NEXT_MAIL_TIME => MSG_QUERY_NEXT_MAIL_TIME_Client{}.tokio_write_unencrypted_client(w).await,
            Self::CMSG_GROUP_RAID_CONVERT => CMSG_GROUP_RAID_CONVERT{}.tokio_write_unencrypted_client(w).await,
            Self::CMSG_GROUP_ASSISTANT_LEADER(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_BUYBACK_ITEM(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_SET_SAVED_INSTANCE_EXTEND(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_LFG_GET_STATUS => CMSG_LFG_GET_STATUS{}.tokio_write_unencrypted_client(w).await,
            Self::CMSG_GMTICKETSYSTEM_TOGGLE => CMSG_GMTICKETSYSTEM_TOGGLE{}.tokio_write_unencrypted_client(w).await,
            Self::CMSG_CANCEL_GROWTH_AURA => CMSG_CANCEL_GROWTH_AURA{}.tokio_write_unencrypted_client(w).await,
            Self::CMSG_LOOT_ROLL(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_LOOT_MASTER_GIVE(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_REPAIR_ITEM(c) => c.tokio_write_unencrypted_client(w).await,
            Self::MSG_TALENT_WIPE_CONFIRM(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_SUMMON_RESPONSE(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_SELF_RES => CMSG_SELF_RES{}.tokio_write_unencrypted_client(w).await,
            Self::CMSG_TOGGLE_HELM => CMSG_TOGGLE_HELM{}.tokio_write_unencrypted_client(w).await,
            Self::CMSG_TOGGLE_CLOAK => CMSG_TOGGLE_CLOAK{}.tokio_write_unencrypted_client(w).await,
            Self::CMSG_SET_ACTIONBAR_TOGGLES(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_ITEM_NAME_QUERY(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_CHAR_RENAME(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_MOVE_SPLINE_DONE(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_MOVE_FALL_RESET(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_REQUEST_RAID_INFO => CMSG_REQUEST_RAID_INFO{}.tokio_write_unencrypted_client(w).await,
            Self::CMSG_MOVE_TIME_SKIPPED(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_MOVE_FEATHER_FALL_ACK(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_MOVE_WATER_WALK_ACK(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_MOVE_NOT_ACTIVE_MOVER(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_BATTLEFIELD_STATUS => CMSG_BATTLEFIELD_STATUS{}.tokio_write_unencrypted_client(w).await,
            Self::CMSG_BATTLEFIELD_PORT(c) => c.tokio_write_unencrypted_client(w).await,
            Self::MSG_INSPECT_HONOR_STATS(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_BATTLEMASTER_HELLO(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_FORCE_WALK_SPEED_CHANGE_ACK(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_FORCE_SWIM_BACK_SPEED_CHANGE_ACK(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_FORCE_TURN_RATE_CHANGE_ACK(c) => c.tokio_write_unencrypted_client(w).await,
            Self::MSG_PVP_LOG_DATA => MSG_PVP_LOG_DATA_Client{}.tokio_write_unencrypted_client(w).await,
            Self::CMSG_LEAVE_BATTLEFIELD(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_AREA_SPIRIT_HEALER_QUERY(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_AREA_SPIRIT_HEALER_QUEUE(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_WARDEN_DATA(c) => c.tokio_write_unencrypted_client(w).await,
            Self::MSG_BATTLEGROUND_PLAYER_POSITIONS => MSG_BATTLEGROUND_PLAYER_POSITIONS_Client{}.tokio_write_unencrypted_client(w).await,
            Self::CMSG_PET_STOP_ATTACK(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_BATTLEMASTER_JOIN(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_PET_UNLEARN(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_PET_SPELL_AUTOCAST(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_GUILD_INFO_TEXT(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_ACTIVATETAXIEXPRESS(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_SET_FACTION_INACTIVE(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_SET_WATCHED_FACTION(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_RESET_INSTANCES => CMSG_RESET_INSTANCES{}.tokio_write_unencrypted_client(w).await,
            Self::MSG_RAID_TARGET_UPDATE(c) => c.tokio_write_unencrypted_client(w).await,
            Self::MSG_RAID_READY_CHECK(c) => c.tokio_write_unencrypted_client(w).await,
            Self::MSG_SET_DUNGEON_DIFFICULTY(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_GMSURVEY_SUBMIT(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_MOVE_SET_CAN_TRANSITION_BETWEEN_SWIM_AND_FLY_ACK(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_MOVE_SET_CAN_FLY_ACK(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_MOVE_SET_FLY(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_SOCKET_GEMS(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_ARENA_TEAM_ROSTER(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_ARENA_TEAM_INVITE(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_ARENA_TEAM_ACCEPT => CMSG_ARENA_TEAM_ACCEPT{}.tokio_write_unencrypted_client(w).await,
            Self::CMSG_ARENA_TEAM_DECLINE => CMSG_ARENA_TEAM_DECLINE{}.tokio_write_unencrypted_client(w).await,
            Self::CMSG_ARENA_TEAM_LEAVE(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_ARENA_TEAM_REMOVE(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_ARENA_TEAM_DISBAND(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_ARENA_TEAM_LEADER(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_BATTLEMASTER_JOIN_ARENA(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_LFG_JOIN(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_LFG_LEAVE => CMSG_LFG_LEAVE{}.tokio_write_unencrypted_client(w).await,
            Self::CMSG_SEARCH_LFG_JOIN(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_SEARCH_LFG_LEAVE(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_LFG_PROPOSAL_RESULT(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_SET_LFG_COMMENT(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_LFG_SET_ROLES(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_LFG_SET_BOOT_VOTE(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_LFD_PLAYER_LOCK_INFO_REQUEST => CMSG_LFD_PLAYER_LOCK_INFO_REQUEST{}.tokio_write_unencrypted_client(w).await,
            Self::CMSG_LFG_TELEPORT(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_LFD_PARTY_LOCK_INFO_REQUEST => CMSG_LFD_PARTY_LOCK_INFO_REQUEST{}.tokio_write_unencrypted_client(w).await,
            Self::CMSG_SET_TITLE(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_CANCEL_MOUNT_AURA => CMSG_CANCEL_MOUNT_AURA{}.tokio_write_unencrypted_client(w).await,
            Self::MSG_INSPECT_ARENA_TEAMS(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_CANCEL_TEMP_ENCHANTMENT(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_FORCE_FLIGHT_SPEED_CHANGE_ACK(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE_ACK(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_SET_TAXI_BENCHMARK_MODE(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_REALM_SPLIT(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_MOVE_CHNG_TRANSPORT(c) => c.tokio_write_unencrypted_client(w).await,
            Self::MSG_PARTY_ASSIGNMENT(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_TIME_SYNC_RESP(c) => c.tokio_write_unencrypted_client(w).await,
            Self::MSG_RAID_READY_CHECK_CONFIRM(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_VOICE_SESSION_ENABLE(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_COMMENTATOR_ENABLE(c) => c.tokio_write_unencrypted_client(w).await,
            Self::MSG_RAID_READY_CHECK_FINISHED => MSG_RAID_READY_CHECK_FINISHED_Client{}.tokio_write_unencrypted_client(w).await,
            Self::CMSG_COMPLAIN(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_CHANNEL_DISPLAY_LIST(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_SET_ACTIVE_VOICE_CHANNEL(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_GET_CHANNEL_MEMBER_COUNT(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_CHANNEL_VOICE_ON => CMSG_CHANNEL_VOICE_ON{}.tokio_write_unencrypted_client(w).await,
            Self::CMSG_REPORT_PVP_AFK(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_GUILD_BANKER_ACTIVATE(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_GUILD_BANK_QUERY_TAB(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_GUILD_BANK_SWAP_ITEMS(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_GUILD_BANK_BUY_TAB(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_GUILD_BANK_UPDATE_TAB(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_GUILD_BANK_DEPOSIT_MONEY(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_GUILD_BANK_WITHDRAW_MONEY(c) => c.tokio_write_unencrypted_client(w).await,
            Self::MSG_GUILD_BANK_LOG_QUERY(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_SET_CHANNEL_WATCH(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_CLEAR_CHANNEL_WATCH(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_SPELLCLICK(c) => c.tokio_write_unencrypted_client(w).await,
            Self::MSG_GUILD_PERMISSIONS => MSG_GUILD_PERMISSIONS_Client{}.tokio_write_unencrypted_client(w).await,
            Self::MSG_GUILD_BANK_MONEY_WITHDRAWN => MSG_GUILD_BANK_MONEY_WITHDRAWN_Client{}.tokio_write_unencrypted_client(w).await,
            Self::MSG_GUILD_EVENT_LOG_QUERY => MSG_GUILD_EVENT_LOG_QUERY_Client{}.tokio_write_unencrypted_client(w).await,
            Self::CMSG_GET_MIRRORIMAGE_DATA(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_KEEP_ALIVE => CMSG_KEEP_ALIVE{}.tokio_write_unencrypted_client(w).await,
            Self::CMSG_OPT_OUT_OF_LOOT(c) => c.tokio_write_unencrypted_client(w).await,
            Self::MSG_QUERY_GUILD_BANK_TEXT(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_SET_GUILD_BANK_TEXT(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_GRANT_LEVEL(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_TOTEM_DESTROYED(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_QUESTGIVER_STATUS_MULTIPLE_QUERY => CMSG_QUESTGIVER_STATUS_MULTIPLE_QUERY{}.tokio_write_unencrypted_client(w).await,
            Self::CMSG_SET_PLAYER_DECLINED_NAMES(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_ACCEPT_LEVEL_GRANT(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_ALTER_APPEARANCE(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_CALENDAR_GET_CALENDAR => CMSG_CALENDAR_GET_CALENDAR{}.tokio_write_unencrypted_client(w).await,
            Self::CMSG_CALENDAR_GET_EVENT(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_CALENDAR_GUILD_FILTER(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_CALENDAR_ARENA_TEAM(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_CALENDAR_ADD_EVENT(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_CALENDAR_UPDATE_EVENT(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_CALENDAR_REMOVE_EVENT(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_CALENDAR_COPY_EVENT(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_CALENDAR_EVENT_INVITE(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_CALENDAR_EVENT_RSVP(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_CALENDAR_EVENT_REMOVE_INVITE(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_CALENDAR_EVENT_STATUS(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_CALENDAR_EVENT_MODERATOR_STATUS(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_CALENDAR_COMPLAIN(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_UPDATE_MISSILE_TRAJECTORY(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_COMPLETE_MOVIE => CMSG_COMPLETE_MOVIE{}.tokio_write_unencrypted_client(w).await,
            Self::CMSG_QUERY_INSPECT_ACHIEVEMENTS(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_DISMISS_CONTROLLED_VEHICLE => CMSG_DISMISS_CONTROLLED_VEHICLE{}.tokio_write_unencrypted_client(w).await,
            Self::CMSG_CHAR_CUSTOMIZE(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_REQUEST_VEHICLE_EXIT => CMSG_REQUEST_VEHICLE_EXIT{}.tokio_write_unencrypted_client(w).await,
            Self::CMSG_REQUEST_VEHICLE_PREV_SEAT => CMSG_REQUEST_VEHICLE_PREV_SEAT{}.tokio_write_unencrypted_client(w).await,
            Self::CMSG_REQUEST_VEHICLE_NEXT_SEAT => CMSG_REQUEST_VEHICLE_NEXT_SEAT{}.tokio_write_unencrypted_client(w).await,
            Self::CMSG_REQUEST_VEHICLE_SWITCH_SEAT(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_PET_LEARN_TALENT(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_GAMEOBJ_REPORT_USE(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_REMOVE_GLYPH(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_DISMISS_CRITTER(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_AUCTION_LIST_PENDING_SALES(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_ENABLETAXI(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_CHANGE_SEATS_ON_CONTROLLED_VEHICLE(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_HEARTH_AND_RESURRECT => CMSG_HEARTH_AND_RESURRECT{}.tokio_write_unencrypted_client(w).await,
            Self::CMSG_PLAYER_VEHICLE_ENTER(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_CONTROLLER_EJECT_PASSENGER(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_ITEM_REFUND_INFO(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_ITEM_REFUND(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_CORPSE_MAP_POSITION_QUERY(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_CALENDAR_EVENT_SIGNUP(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_EQUIPMENT_SET_SAVE(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_UPDATE_PROJECTILE_POSITION(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_LEARN_PREVIEW_TALENTS(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_LEARN_PREVIEW_TALENTS_PET(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_MOVE_GRAVITY_DISABLE_ACK(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_MOVE_GRAVITY_ENABLE_ACK(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_EQUIPMENT_SET_USE(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_CHAR_FACTION_CHANGE(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_BATTLEFIELD_MGR_ENTRY_INVITE_RESPONSE(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_BATTLEFIELD_MGR_QUEUE_INVITE_RESPONSE(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_BATTLEFIELD_MGR_EXIT_REQUEST(c) => c.tokio_write_unencrypted_client(w).await,
            Self::MSG_SET_RAID_DIFFICULTY(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_GMRESPONSE_RESOLVE => CMSG_GMRESPONSE_RESOLVE{}.tokio_write_unencrypted_client(w).await,
            Self::CMSG_WORLD_STATE_UI_TIMER_UPDATE => CMSG_WORLD_STATE_UI_TIMER_UPDATE{}.tokio_write_unencrypted_client(w).await,
            Self::CMSG_CHAR_RACE_CHANGE(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_READY_FOR_ACCOUNT_DATA_TIMES => CMSG_READY_FOR_ACCOUNT_DATA_TIMES{}.tokio_write_unencrypted_client(w).await,
            Self::CMSG_QUERY_QUESTS_COMPLETED => CMSG_QUERY_QUESTS_COMPLETED{}.tokio_write_unencrypted_client(w).await,
            Self::CMSG_GM_REPORT_LAG(c) => c.tokio_write_unencrypted_client(w).await,
            Self::CMSG_MOVE_SET_COLLISION_HGT_ACK(c) => c.tokio_write_unencrypted_client(w).await,
        }
    }

    #[cfg(all(feature = "async-std", feature = "encryption"))]
    pub async fn astd_write_encrypted_client<W: async_std::io::WriteExt + Unpin + Send>(&self, mut w: W, e: &mut ClientEncrypterHalf) -> Result<(), std::io::Error> {
        match self {
            Self::MSG_MOVE_START_FORWARD(c) => c.astd_write_encrypted_client(w, e).await,
            Self::MSG_MOVE_START_BACKWARD(c) => c.astd_write_encrypted_client(w, e).await,
            Self::MSG_MOVE_STOP(c) => c.astd_write_encrypted_client(w, e).await,
            Self::MSG_MOVE_START_STRAFE_LEFT(c) => c.astd_write_encrypted_client(w, e).await,
            Self::MSG_MOVE_START_STRAFE_RIGHT(c) => c.astd_write_encrypted_client(w, e).await,
            Self::MSG_MOVE_STOP_STRAFE(c) => c.astd_write_encrypted_client(w, e).await,
            Self::MSG_MOVE_JUMP(c) => c.astd_write_encrypted_client(w, e).await,
            Self::MSG_MOVE_START_TURN_LEFT(c) => c.astd_write_encrypted_client(w, e).await,
            Self::MSG_MOVE_START_TURN_RIGHT(c) => c.astd_write_encrypted_client(w, e).await,
            Self::MSG_MOVE_STOP_TURN(c) => c.astd_write_encrypted_client(w, e).await,
            Self::MSG_MOVE_START_PITCH_UP(c) => c.astd_write_encrypted_client(w, e).await,
            Self::MSG_MOVE_START_PITCH_DOWN(c) => c.astd_write_encrypted_client(w, e).await,
            Self::MSG_MOVE_STOP_PITCH(c) => c.astd_write_encrypted_client(w, e).await,
            Self::MSG_MOVE_SET_RUN_MODE(c) => c.astd_write_encrypted_client(w, e).await,
            Self::MSG_MOVE_SET_WALK_MODE(c) => c.astd_write_encrypted_client(w, e).await,
            Self::MSG_MOVE_FALL_LAND(c) => c.astd_write_encrypted_client(w, e).await,
            Self::MSG_MOVE_START_SWIM(c) => c.astd_write_encrypted_client(w, e).await,
            Self::MSG_MOVE_STOP_SWIM(c) => c.astd_write_encrypted_client(w, e).await,
            Self::MSG_MOVE_SET_FACING(c) => c.astd_write_encrypted_client(w, e).await,
            Self::MSG_MOVE_SET_PITCH(c) => c.astd_write_encrypted_client(w, e).await,
            Self::MSG_MOVE_WORLDPORT_ACK => MSG_MOVE_WORLDPORT_ACK{}.astd_write_encrypted_client(w, e).await,
            Self::MSG_MOVE_HEARTBEAT(c) => c.astd_write_encrypted_client(w, e).await,
            Self::MSG_MOVE_HOVER(c) => c.astd_write_encrypted_client(w, e).await,
            Self::MSG_PETITION_DECLINE(c) => c.astd_write_encrypted_client(w, e).await,
            Self::MSG_TABARDVENDOR_ACTIVATE(c) => c.astd_write_encrypted_client(w, e).await,
            Self::MSG_QUEST_PUSH_RESULT(c) => c.astd_write_encrypted_client(w, e).await,
            Self::MSG_MOVE_WATER_WALK(c) => c.astd_write_encrypted_client(w, e).await,
            Self::MSG_PETITION_RENAME(c) => c.astd_write_encrypted_client(w, e).await,
            Self::MSG_MOVE_START_ASCEND(c) => c.astd_write_encrypted_client(w, e).await,
            Self::MSG_MOVE_STOP_ASCEND(c) => c.astd_write_encrypted_client(w, e).await,
            Self::MSG_MOVE_SET_FLIGHT_BACK_SPEED(c) => c.astd_write_encrypted_client(w, e).await,
            Self::MSG_MOVE_START_DESCEND(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_CALENDAR_GET_NUM_PENDING => CMSG_CALENDAR_GET_NUM_PENDING{}.astd_write_encrypted_client(w, e).await,
            Self::CMSG_BOOTME => CMSG_BOOTME{}.astd_write_encrypted_client(w, e).await,
            Self::CMSG_DBLOOKUP(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_WORLD_TELEPORT(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_TELEPORT_TO_UNIT(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_CHAR_CREATE(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_CHAR_ENUM => CMSG_CHAR_ENUM{}.astd_write_encrypted_client(w, e).await,
            Self::CMSG_CHAR_DELETE(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_PLAYER_LOGIN(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_PLAYER_LOGOUT => CMSG_PLAYER_LOGOUT{}.astd_write_encrypted_client(w, e).await,
            Self::CMSG_LOGOUT_REQUEST => CMSG_LOGOUT_REQUEST{}.astd_write_encrypted_client(w, e).await,
            Self::CMSG_LOGOUT_CANCEL => CMSG_LOGOUT_CANCEL{}.astd_write_encrypted_client(w, e).await,
            Self::CMSG_NAME_QUERY(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_PET_NAME_QUERY(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_GUILD_QUERY(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_ITEM_QUERY_SINGLE(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_PAGE_TEXT_QUERY(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_QUEST_QUERY(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_GAMEOBJECT_QUERY(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_CREATURE_QUERY(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_WHO(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_WHOIS(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_CONTACT_LIST(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_ADD_FRIEND(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_DEL_FRIEND(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_SET_CONTACT_NOTES(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_ADD_IGNORE(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_DEL_IGNORE(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_GROUP_INVITE(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_GROUP_CANCEL => CMSG_GROUP_CANCEL{}.astd_write_encrypted_client(w, e).await,
            Self::CMSG_GROUP_ACCEPT => CMSG_GROUP_ACCEPT{}.astd_write_encrypted_client(w, e).await,
            Self::CMSG_GROUP_DECLINE => CMSG_GROUP_DECLINE{}.astd_write_encrypted_client(w, e).await,
            Self::CMSG_GROUP_UNINVITE(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_GROUP_UNINVITE_GUID(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_GROUP_SET_LEADER(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_LOOT_METHOD(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_GROUP_DISBAND => CMSG_GROUP_DISBAND{}.astd_write_encrypted_client(w, e).await,
            Self::CMSG_GUILD_CREATE(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_GUILD_INVITE(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_GUILD_ACCEPT => CMSG_GUILD_ACCEPT{}.astd_write_encrypted_client(w, e).await,
            Self::CMSG_GUILD_DECLINE => CMSG_GUILD_DECLINE{}.astd_write_encrypted_client(w, e).await,
            Self::CMSG_GUILD_INFO => CMSG_GUILD_INFO{}.astd_write_encrypted_client(w, e).await,
            Self::CMSG_GUILD_ROSTER => CMSG_GUILD_ROSTER{}.astd_write_encrypted_client(w, e).await,
            Self::CMSG_GUILD_PROMOTE(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_GUILD_DEMOTE(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_GUILD_LEAVE => CMSG_GUILD_LEAVE{}.astd_write_encrypted_client(w, e).await,
            Self::CMSG_GUILD_REMOVE(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_GUILD_DISBAND => CMSG_GUILD_DISBAND{}.astd_write_encrypted_client(w, e).await,
            Self::CMSG_GUILD_LEADER(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_GUILD_MOTD(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_MESSAGECHAT(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_JOIN_CHANNEL(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_LEAVE_CHANNEL(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_CHANNEL_LIST(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_CHANNEL_PASSWORD(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_CHANNEL_SET_OWNER(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_CHANNEL_OWNER(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_CHANNEL_MODERATOR(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_CHANNEL_UNMODERATOR(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_CHANNEL_MUTE(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_CHANNEL_UNMUTE(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_CHANNEL_INVITE(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_CHANNEL_KICK(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_CHANNEL_BAN(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_CHANNEL_UNBAN(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_CHANNEL_ANNOUNCEMENTS(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_CHANNEL_MODERATE(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_USE_ITEM(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_OPEN_ITEM(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_READ_ITEM(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_GAMEOBJ_USE(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_AREATRIGGER(c) => c.astd_write_encrypted_client(w, e).await,
            Self::MSG_MOVE_TELEPORT(c) => c.astd_write_encrypted_client(w, e).await,
            Self::MSG_MOVE_TELEPORT_ACK(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_MOVE_SET_RAW_POSITION(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_FORCE_RUN_SPEED_CHANGE_ACK(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACK(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_FORCE_SWIM_SPEED_CHANGE_ACK(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_FORCE_MOVE_ROOT_ACK(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_FORCE_MOVE_UNROOT_ACK(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_MOVE_KNOCK_BACK_ACK(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_MOVE_HOVER_ACK(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_NEXT_CINEMATIC_CAMERA => CMSG_NEXT_CINEMATIC_CAMERA{}.astd_write_encrypted_client(w, e).await,
            Self::CMSG_COMPLETE_CINEMATIC => CMSG_COMPLETE_CINEMATIC{}.astd_write_encrypted_client(w, e).await,
            Self::CMSG_TUTORIAL_FLAG(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_TUTORIAL_CLEAR => CMSG_TUTORIAL_CLEAR{}.astd_write_encrypted_client(w, e).await,
            Self::CMSG_TUTORIAL_RESET => CMSG_TUTORIAL_RESET{}.astd_write_encrypted_client(w, e).await,
            Self::CMSG_STANDSTATECHANGE(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_EMOTE(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_TEXT_EMOTE(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_AUTOSTORE_LOOT_ITEM(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_AUTOEQUIP_ITEM(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_AUTOSTORE_BAG_ITEM(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_SWAP_ITEM(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_SWAP_INV_ITEM(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_SPLIT_ITEM(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_AUTOEQUIP_ITEM_SLOT(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_DESTROYITEM(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_INSPECT(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_INITIATE_TRADE(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_BEGIN_TRADE => CMSG_BEGIN_TRADE{}.astd_write_encrypted_client(w, e).await,
            Self::CMSG_BUSY_TRADE => CMSG_BUSY_TRADE{}.astd_write_encrypted_client(w, e).await,
            Self::CMSG_IGNORE_TRADE => CMSG_IGNORE_TRADE{}.astd_write_encrypted_client(w, e).await,
            Self::CMSG_ACCEPT_TRADE(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_UNACCEPT_TRADE => CMSG_UNACCEPT_TRADE{}.astd_write_encrypted_client(w, e).await,
            Self::CMSG_CANCEL_TRADE => CMSG_CANCEL_TRADE{}.astd_write_encrypted_client(w, e).await,
            Self::CMSG_SET_TRADE_ITEM(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_CLEAR_TRADE_ITEM(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_SET_TRADE_GOLD(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_SET_FACTION_ATWAR(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_SET_ACTION_BUTTON(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_CAST_SPELL(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_CANCEL_CAST(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_CANCEL_AURA(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_CANCEL_CHANNELLING(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_SET_SELECTION(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_DELETEEQUIPMENT_SET(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_INSTANCE_LOCK_RESPONSE(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_ATTACKSWING(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_ATTACKSTOP => CMSG_ATTACKSTOP{}.astd_write_encrypted_client(w, e).await,
            Self::CMSG_REPOP_REQUEST => CMSG_REPOP_REQUEST{}.astd_write_encrypted_client(w, e).await,
            Self::CMSG_RESURRECT_RESPONSE(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_LOOT(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_LOOT_MONEY => CMSG_LOOT_MONEY{}.astd_write_encrypted_client(w, e).await,
            Self::CMSG_LOOT_RELEASE(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_DUEL_ACCEPTED(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_DUEL_CANCELLED(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_MOUNTSPECIAL_ANIM => CMSG_MOUNTSPECIAL_ANIM{}.astd_write_encrypted_client(w, e).await,
            Self::CMSG_PET_SET_ACTION(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_PET_ACTION(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_PET_ABANDON(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_PET_RENAME(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_GOSSIP_HELLO(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_GOSSIP_SELECT_OPTION(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_NPC_TEXT_QUERY(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_QUESTGIVER_STATUS_QUERY(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_QUESTGIVER_HELLO(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_QUESTGIVER_QUERY_QUEST(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_QUESTGIVER_QUEST_AUTOLAUNCH => CMSG_QUESTGIVER_QUEST_AUTOLAUNCH{}.astd_write_encrypted_client(w, e).await,
            Self::CMSG_QUESTGIVER_ACCEPT_QUEST(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_QUESTGIVER_COMPLETE_QUEST(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_QUESTGIVER_REQUEST_REWARD(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_QUESTGIVER_CHOOSE_REWARD(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_QUESTGIVER_CANCEL => CMSG_QUESTGIVER_CANCEL{}.astd_write_encrypted_client(w, e).await,
            Self::CMSG_QUESTLOG_SWAP_QUEST(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_QUESTLOG_REMOVE_QUEST(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_QUEST_CONFIRM_ACCEPT(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_PUSHQUESTTOPARTY(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_LIST_INVENTORY(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_SELL_ITEM(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_BUY_ITEM(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_BUY_ITEM_IN_SLOT(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_TAXINODE_STATUS_QUERY(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_TAXIQUERYAVAILABLENODES(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_ACTIVATETAXI(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_TRAINER_LIST(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_TRAINER_BUY_SPELL(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_BINDER_ACTIVATE(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_BANKER_ACTIVATE(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_BUY_BANK_SLOT(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_PETITION_SHOWLIST(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_PETITION_BUY(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_PETITION_SHOW_SIGNATURES(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_PETITION_SIGN(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_OFFER_PETITION(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_TURN_IN_PETITION(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_PETITION_QUERY(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_BUG(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_PLAYED_TIME(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_QUERY_TIME => CMSG_QUERY_TIME{}.astd_write_encrypted_client(w, e).await,
            Self::CMSG_RECLAIM_CORPSE(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_WRAP_ITEM(c) => c.astd_write_encrypted_client(w, e).await,
            Self::MSG_MINIMAP_PING(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_PING(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_SETSHEATHED(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_QUEST_POI_QUERY(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_AUTH_SESSION(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_PET_CAST_SPELL(c) => c.astd_write_encrypted_client(w, e).await,
            Self::MSG_SAVE_GUILD_EMBLEM(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_ZONEUPDATE(c) => c.astd_write_encrypted_client(w, e).await,
            Self::MSG_RANDOM_ROLL(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_UNLEARN_SKILL(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_GMTICKET_CREATE(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_GMTICKET_UPDATETEXT(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_REQUEST_ACCOUNT_DATA(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_UPDATE_ACCOUNT_DATA(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_GMTICKET_GETTICKET => CMSG_GMTICKET_GETTICKET{}.astd_write_encrypted_client(w, e).await,
            Self::CMSG_UNLEARN_TALENTS => CMSG_UNLEARN_TALENTS{}.astd_write_encrypted_client(w, e).await,
            Self::MSG_CORPSE_QUERY => MSG_CORPSE_QUERY_Client{}.astd_write_encrypted_client(w, e).await,
            Self::CMSG_GMTICKET_DELETETICKET => CMSG_GMTICKET_DELETETICKET{}.astd_write_encrypted_client(w, e).await,
            Self::CMSG_GMTICKET_SYSTEMSTATUS => CMSG_GMTICKET_SYSTEMSTATUS{}.astd_write_encrypted_client(w, e).await,
            Self::CMSG_SPIRIT_HEALER_ACTIVATE(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_CHAT_IGNORED(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_GUILD_RANK(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_GUILD_ADD_RANK(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_GUILD_DEL_RANK => CMSG_GUILD_DEL_RANK{}.astd_write_encrypted_client(w, e).await,
            Self::CMSG_GUILD_SET_PUBLIC_NOTE(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_GUILD_SET_OFFICER_NOTE(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_SEND_MAIL(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_GET_MAIL_LIST(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_BATTLEFIELD_LIST(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_ITEM_TEXT_QUERY(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_MAIL_TAKE_MONEY(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_MAIL_TAKE_ITEM(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_MAIL_MARK_AS_READ(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_MAIL_RETURN_TO_SENDER(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_MAIL_DELETE(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_MAIL_CREATE_TEXT_ITEM(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_LEARN_TALENT(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_TOGGLE_PVP(c) => c.astd_write_encrypted_client(w, e).await,
            Self::MSG_AUCTION_HELLO(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_AUCTION_SELL_ITEM(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_AUCTION_REMOVE_ITEM(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_AUCTION_LIST_ITEMS(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_AUCTION_LIST_OWNER_ITEMS(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_AUCTION_PLACE_BID(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_AUCTION_LIST_BIDDER_ITEMS(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_SET_AMMO(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_SET_ACTIVE_MOVER(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_PET_CANCEL_AURA(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_CANCEL_AUTO_REPEAT_SPELL => CMSG_CANCEL_AUTO_REPEAT_SPELL{}.astd_write_encrypted_client(w, e).await,
            Self::MSG_LIST_STABLED_PETS(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_STABLE_PET(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_UNSTABLE_PET(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_BUY_STABLE_SLOT(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_STABLE_SWAP_PET(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_REQUEST_PET_INFO => CMSG_REQUEST_PET_INFO{}.astd_write_encrypted_client(w, e).await,
            Self::CMSG_FAR_SIGHT(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_GROUP_CHANGE_SUB_GROUP(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_REQUEST_PARTY_MEMBER_STATS(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_GROUP_SWAP_SUB_GROUP(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_AUTOSTORE_BANK_ITEM(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_AUTOBANK_ITEM(c) => c.astd_write_encrypted_client(w, e).await,
            Self::MSG_QUERY_NEXT_MAIL_TIME => MSG_QUERY_NEXT_MAIL_TIME_Client{}.astd_write_encrypted_client(w, e).await,
            Self::CMSG_GROUP_RAID_CONVERT => CMSG_GROUP_RAID_CONVERT{}.astd_write_encrypted_client(w, e).await,
            Self::CMSG_GROUP_ASSISTANT_LEADER(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_BUYBACK_ITEM(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_SET_SAVED_INSTANCE_EXTEND(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_LFG_GET_STATUS => CMSG_LFG_GET_STATUS{}.astd_write_encrypted_client(w, e).await,
            Self::CMSG_GMTICKETSYSTEM_TOGGLE => CMSG_GMTICKETSYSTEM_TOGGLE{}.astd_write_encrypted_client(w, e).await,
            Self::CMSG_CANCEL_GROWTH_AURA => CMSG_CANCEL_GROWTH_AURA{}.astd_write_encrypted_client(w, e).await,
            Self::CMSG_LOOT_ROLL(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_LOOT_MASTER_GIVE(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_REPAIR_ITEM(c) => c.astd_write_encrypted_client(w, e).await,
            Self::MSG_TALENT_WIPE_CONFIRM(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_SUMMON_RESPONSE(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_SELF_RES => CMSG_SELF_RES{}.astd_write_encrypted_client(w, e).await,
            Self::CMSG_TOGGLE_HELM => CMSG_TOGGLE_HELM{}.astd_write_encrypted_client(w, e).await,
            Self::CMSG_TOGGLE_CLOAK => CMSG_TOGGLE_CLOAK{}.astd_write_encrypted_client(w, e).await,
            Self::CMSG_SET_ACTIONBAR_TOGGLES(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_ITEM_NAME_QUERY(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_CHAR_RENAME(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_MOVE_SPLINE_DONE(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_MOVE_FALL_RESET(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_REQUEST_RAID_INFO => CMSG_REQUEST_RAID_INFO{}.astd_write_encrypted_client(w, e).await,
            Self::CMSG_MOVE_TIME_SKIPPED(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_MOVE_FEATHER_FALL_ACK(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_MOVE_WATER_WALK_ACK(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_MOVE_NOT_ACTIVE_MOVER(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_BATTLEFIELD_STATUS => CMSG_BATTLEFIELD_STATUS{}.astd_write_encrypted_client(w, e).await,
            Self::CMSG_BATTLEFIELD_PORT(c) => c.astd_write_encrypted_client(w, e).await,
            Self::MSG_INSPECT_HONOR_STATS(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_BATTLEMASTER_HELLO(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_FORCE_WALK_SPEED_CHANGE_ACK(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_FORCE_SWIM_BACK_SPEED_CHANGE_ACK(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_FORCE_TURN_RATE_CHANGE_ACK(c) => c.astd_write_encrypted_client(w, e).await,
            Self::MSG_PVP_LOG_DATA => MSG_PVP_LOG_DATA_Client{}.astd_write_encrypted_client(w, e).await,
            Self::CMSG_LEAVE_BATTLEFIELD(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_AREA_SPIRIT_HEALER_QUERY(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_AREA_SPIRIT_HEALER_QUEUE(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_WARDEN_DATA(c) => c.astd_write_encrypted_client(w, e).await,
            Self::MSG_BATTLEGROUND_PLAYER_POSITIONS => MSG_BATTLEGROUND_PLAYER_POSITIONS_Client{}.astd_write_encrypted_client(w, e).await,
            Self::CMSG_PET_STOP_ATTACK(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_BATTLEMASTER_JOIN(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_PET_UNLEARN(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_PET_SPELL_AUTOCAST(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_GUILD_INFO_TEXT(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_ACTIVATETAXIEXPRESS(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_SET_FACTION_INACTIVE(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_SET_WATCHED_FACTION(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_RESET_INSTANCES => CMSG_RESET_INSTANCES{}.astd_write_encrypted_client(w, e).await,
            Self::MSG_RAID_TARGET_UPDATE(c) => c.astd_write_encrypted_client(w, e).await,
            Self::MSG_RAID_READY_CHECK(c) => c.astd_write_encrypted_client(w, e).await,
            Self::MSG_SET_DUNGEON_DIFFICULTY(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_GMSURVEY_SUBMIT(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_MOVE_SET_CAN_TRANSITION_BETWEEN_SWIM_AND_FLY_ACK(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_MOVE_SET_CAN_FLY_ACK(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_MOVE_SET_FLY(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_SOCKET_GEMS(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_ARENA_TEAM_ROSTER(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_ARENA_TEAM_INVITE(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_ARENA_TEAM_ACCEPT => CMSG_ARENA_TEAM_ACCEPT{}.astd_write_encrypted_client(w, e).await,
            Self::CMSG_ARENA_TEAM_DECLINE => CMSG_ARENA_TEAM_DECLINE{}.astd_write_encrypted_client(w, e).await,
            Self::CMSG_ARENA_TEAM_LEAVE(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_ARENA_TEAM_REMOVE(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_ARENA_TEAM_DISBAND(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_ARENA_TEAM_LEADER(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_BATTLEMASTER_JOIN_ARENA(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_LFG_JOIN(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_LFG_LEAVE => CMSG_LFG_LEAVE{}.astd_write_encrypted_client(w, e).await,
            Self::CMSG_SEARCH_LFG_JOIN(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_SEARCH_LFG_LEAVE(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_LFG_PROPOSAL_RESULT(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_SET_LFG_COMMENT(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_LFG_SET_ROLES(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_LFG_SET_BOOT_VOTE(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_LFD_PLAYER_LOCK_INFO_REQUEST => CMSG_LFD_PLAYER_LOCK_INFO_REQUEST{}.astd_write_encrypted_client(w, e).await,
            Self::CMSG_LFG_TELEPORT(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_LFD_PARTY_LOCK_INFO_REQUEST => CMSG_LFD_PARTY_LOCK_INFO_REQUEST{}.astd_write_encrypted_client(w, e).await,
            Self::CMSG_SET_TITLE(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_CANCEL_MOUNT_AURA => CMSG_CANCEL_MOUNT_AURA{}.astd_write_encrypted_client(w, e).await,
            Self::MSG_INSPECT_ARENA_TEAMS(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_CANCEL_TEMP_ENCHANTMENT(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_FORCE_FLIGHT_SPEED_CHANGE_ACK(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE_ACK(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_SET_TAXI_BENCHMARK_MODE(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_REALM_SPLIT(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_MOVE_CHNG_TRANSPORT(c) => c.astd_write_encrypted_client(w, e).await,
            Self::MSG_PARTY_ASSIGNMENT(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_TIME_SYNC_RESP(c) => c.astd_write_encrypted_client(w, e).await,
            Self::MSG_RAID_READY_CHECK_CONFIRM(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_VOICE_SESSION_ENABLE(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_COMMENTATOR_ENABLE(c) => c.astd_write_encrypted_client(w, e).await,
            Self::MSG_RAID_READY_CHECK_FINISHED => MSG_RAID_READY_CHECK_FINISHED_Client{}.astd_write_encrypted_client(w, e).await,
            Self::CMSG_COMPLAIN(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_CHANNEL_DISPLAY_LIST(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_SET_ACTIVE_VOICE_CHANNEL(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_GET_CHANNEL_MEMBER_COUNT(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_CHANNEL_VOICE_ON => CMSG_CHANNEL_VOICE_ON{}.astd_write_encrypted_client(w, e).await,
            Self::CMSG_REPORT_PVP_AFK(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_GUILD_BANKER_ACTIVATE(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_GUILD_BANK_QUERY_TAB(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_GUILD_BANK_SWAP_ITEMS(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_GUILD_BANK_BUY_TAB(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_GUILD_BANK_UPDATE_TAB(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_GUILD_BANK_DEPOSIT_MONEY(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_GUILD_BANK_WITHDRAW_MONEY(c) => c.astd_write_encrypted_client(w, e).await,
            Self::MSG_GUILD_BANK_LOG_QUERY(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_SET_CHANNEL_WATCH(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_CLEAR_CHANNEL_WATCH(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_SPELLCLICK(c) => c.astd_write_encrypted_client(w, e).await,
            Self::MSG_GUILD_PERMISSIONS => MSG_GUILD_PERMISSIONS_Client{}.astd_write_encrypted_client(w, e).await,
            Self::MSG_GUILD_BANK_MONEY_WITHDRAWN => MSG_GUILD_BANK_MONEY_WITHDRAWN_Client{}.astd_write_encrypted_client(w, e).await,
            Self::MSG_GUILD_EVENT_LOG_QUERY => MSG_GUILD_EVENT_LOG_QUERY_Client{}.astd_write_encrypted_client(w, e).await,
            Self::CMSG_GET_MIRRORIMAGE_DATA(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_KEEP_ALIVE => CMSG_KEEP_ALIVE{}.astd_write_encrypted_client(w, e).await,
            Self::CMSG_OPT_OUT_OF_LOOT(c) => c.astd_write_encrypted_client(w, e).await,
            Self::MSG_QUERY_GUILD_BANK_TEXT(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_SET_GUILD_BANK_TEXT(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_GRANT_LEVEL(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_TOTEM_DESTROYED(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_QUESTGIVER_STATUS_MULTIPLE_QUERY => CMSG_QUESTGIVER_STATUS_MULTIPLE_QUERY{}.astd_write_encrypted_client(w, e).await,
            Self::CMSG_SET_PLAYER_DECLINED_NAMES(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_ACCEPT_LEVEL_GRANT(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_ALTER_APPEARANCE(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_CALENDAR_GET_CALENDAR => CMSG_CALENDAR_GET_CALENDAR{}.astd_write_encrypted_client(w, e).await,
            Self::CMSG_CALENDAR_GET_EVENT(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_CALENDAR_GUILD_FILTER(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_CALENDAR_ARENA_TEAM(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_CALENDAR_ADD_EVENT(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_CALENDAR_UPDATE_EVENT(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_CALENDAR_REMOVE_EVENT(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_CALENDAR_COPY_EVENT(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_CALENDAR_EVENT_INVITE(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_CALENDAR_EVENT_RSVP(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_CALENDAR_EVENT_REMOVE_INVITE(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_CALENDAR_EVENT_STATUS(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_CALENDAR_EVENT_MODERATOR_STATUS(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_CALENDAR_COMPLAIN(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_UPDATE_MISSILE_TRAJECTORY(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_COMPLETE_MOVIE => CMSG_COMPLETE_MOVIE{}.astd_write_encrypted_client(w, e).await,
            Self::CMSG_QUERY_INSPECT_ACHIEVEMENTS(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_DISMISS_CONTROLLED_VEHICLE => CMSG_DISMISS_CONTROLLED_VEHICLE{}.astd_write_encrypted_client(w, e).await,
            Self::CMSG_CHAR_CUSTOMIZE(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_REQUEST_VEHICLE_EXIT => CMSG_REQUEST_VEHICLE_EXIT{}.astd_write_encrypted_client(w, e).await,
            Self::CMSG_REQUEST_VEHICLE_PREV_SEAT => CMSG_REQUEST_VEHICLE_PREV_SEAT{}.astd_write_encrypted_client(w, e).await,
            Self::CMSG_REQUEST_VEHICLE_NEXT_SEAT => CMSG_REQUEST_VEHICLE_NEXT_SEAT{}.astd_write_encrypted_client(w, e).await,
            Self::CMSG_REQUEST_VEHICLE_SWITCH_SEAT(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_PET_LEARN_TALENT(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_GAMEOBJ_REPORT_USE(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_REMOVE_GLYPH(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_DISMISS_CRITTER(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_AUCTION_LIST_PENDING_SALES(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_ENABLETAXI(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_CHANGE_SEATS_ON_CONTROLLED_VEHICLE(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_HEARTH_AND_RESURRECT => CMSG_HEARTH_AND_RESURRECT{}.astd_write_encrypted_client(w, e).await,
            Self::CMSG_PLAYER_VEHICLE_ENTER(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_CONTROLLER_EJECT_PASSENGER(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_ITEM_REFUND_INFO(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_ITEM_REFUND(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_CORPSE_MAP_POSITION_QUERY(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_CALENDAR_EVENT_SIGNUP(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_EQUIPMENT_SET_SAVE(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_UPDATE_PROJECTILE_POSITION(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_LEARN_PREVIEW_TALENTS(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_LEARN_PREVIEW_TALENTS_PET(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_MOVE_GRAVITY_DISABLE_ACK(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_MOVE_GRAVITY_ENABLE_ACK(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_EQUIPMENT_SET_USE(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_CHAR_FACTION_CHANGE(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_BATTLEFIELD_MGR_ENTRY_INVITE_RESPONSE(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_BATTLEFIELD_MGR_QUEUE_INVITE_RESPONSE(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_BATTLEFIELD_MGR_EXIT_REQUEST(c) => c.astd_write_encrypted_client(w, e).await,
            Self::MSG_SET_RAID_DIFFICULTY(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_GMRESPONSE_RESOLVE => CMSG_GMRESPONSE_RESOLVE{}.astd_write_encrypted_client(w, e).await,
            Self::CMSG_WORLD_STATE_UI_TIMER_UPDATE => CMSG_WORLD_STATE_UI_TIMER_UPDATE{}.astd_write_encrypted_client(w, e).await,
            Self::CMSG_CHAR_RACE_CHANGE(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_READY_FOR_ACCOUNT_DATA_TIMES => CMSG_READY_FOR_ACCOUNT_DATA_TIMES{}.astd_write_encrypted_client(w, e).await,
            Self::CMSG_QUERY_QUESTS_COMPLETED => CMSG_QUERY_QUESTS_COMPLETED{}.astd_write_encrypted_client(w, e).await,
            Self::CMSG_GM_REPORT_LAG(c) => c.astd_write_encrypted_client(w, e).await,
            Self::CMSG_MOVE_SET_COLLISION_HGT_ACK(c) => c.astd_write_encrypted_client(w, e).await,
        }
    }

    #[cfg(feature = "async-std")]
    pub async fn astd_write_unencrypted_client<W: async_std::io::WriteExt + Unpin + Send>(&self, mut w: W) -> Result<(), std::io::Error> {
        match self {
            Self::MSG_MOVE_START_FORWARD(c) => c.astd_write_unencrypted_client(w).await,
            Self::MSG_MOVE_START_BACKWARD(c) => c.astd_write_unencrypted_client(w).await,
            Self::MSG_MOVE_STOP(c) => c.astd_write_unencrypted_client(w).await,
            Self::MSG_MOVE_START_STRAFE_LEFT(c) => c.astd_write_unencrypted_client(w).await,
            Self::MSG_MOVE_START_STRAFE_RIGHT(c) => c.astd_write_unencrypted_client(w).await,
            Self::MSG_MOVE_STOP_STRAFE(c) => c.astd_write_unencrypted_client(w).await,
            Self::MSG_MOVE_JUMP(c) => c.astd_write_unencrypted_client(w).await,
            Self::MSG_MOVE_START_TURN_LEFT(c) => c.astd_write_unencrypted_client(w).await,
            Self::MSG_MOVE_START_TURN_RIGHT(c) => c.astd_write_unencrypted_client(w).await,
            Self::MSG_MOVE_STOP_TURN(c) => c.astd_write_unencrypted_client(w).await,
            Self::MSG_MOVE_START_PITCH_UP(c) => c.astd_write_unencrypted_client(w).await,
            Self::MSG_MOVE_START_PITCH_DOWN(c) => c.astd_write_unencrypted_client(w).await,
            Self::MSG_MOVE_STOP_PITCH(c) => c.astd_write_unencrypted_client(w).await,
            Self::MSG_MOVE_SET_RUN_MODE(c) => c.astd_write_unencrypted_client(w).await,
            Self::MSG_MOVE_SET_WALK_MODE(c) => c.astd_write_unencrypted_client(w).await,
            Self::MSG_MOVE_FALL_LAND(c) => c.astd_write_unencrypted_client(w).await,
            Self::MSG_MOVE_START_SWIM(c) => c.astd_write_unencrypted_client(w).await,
            Self::MSG_MOVE_STOP_SWIM(c) => c.astd_write_unencrypted_client(w).await,
            Self::MSG_MOVE_SET_FACING(c) => c.astd_write_unencrypted_client(w).await,
            Self::MSG_MOVE_SET_PITCH(c) => c.astd_write_unencrypted_client(w).await,
            Self::MSG_MOVE_WORLDPORT_ACK => MSG_MOVE_WORLDPORT_ACK{}.astd_write_unencrypted_client(w).await,
            Self::MSG_MOVE_HEARTBEAT(c) => c.astd_write_unencrypted_client(w).await,
            Self::MSG_MOVE_HOVER(c) => c.astd_write_unencrypted_client(w).await,
            Self::MSG_PETITION_DECLINE(c) => c.astd_write_unencrypted_client(w).await,
            Self::MSG_TABARDVENDOR_ACTIVATE(c) => c.astd_write_unencrypted_client(w).await,
            Self::MSG_QUEST_PUSH_RESULT(c) => c.astd_write_unencrypted_client(w).await,
            Self::MSG_MOVE_WATER_WALK(c) => c.astd_write_unencrypted_client(w).await,
            Self::MSG_PETITION_RENAME(c) => c.astd_write_unencrypted_client(w).await,
            Self::MSG_MOVE_START_ASCEND(c) => c.astd_write_unencrypted_client(w).await,
            Self::MSG_MOVE_STOP_ASCEND(c) => c.astd_write_unencrypted_client(w).await,
            Self::MSG_MOVE_SET_FLIGHT_BACK_SPEED(c) => c.astd_write_unencrypted_client(w).await,
            Self::MSG_MOVE_START_DESCEND(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_CALENDAR_GET_NUM_PENDING => CMSG_CALENDAR_GET_NUM_PENDING{}.astd_write_unencrypted_client(w).await,
            Self::CMSG_BOOTME => CMSG_BOOTME{}.astd_write_unencrypted_client(w).await,
            Self::CMSG_DBLOOKUP(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_WORLD_TELEPORT(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_TELEPORT_TO_UNIT(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_CHAR_CREATE(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_CHAR_ENUM => CMSG_CHAR_ENUM{}.astd_write_unencrypted_client(w).await,
            Self::CMSG_CHAR_DELETE(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_PLAYER_LOGIN(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_PLAYER_LOGOUT => CMSG_PLAYER_LOGOUT{}.astd_write_unencrypted_client(w).await,
            Self::CMSG_LOGOUT_REQUEST => CMSG_LOGOUT_REQUEST{}.astd_write_unencrypted_client(w).await,
            Self::CMSG_LOGOUT_CANCEL => CMSG_LOGOUT_CANCEL{}.astd_write_unencrypted_client(w).await,
            Self::CMSG_NAME_QUERY(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_PET_NAME_QUERY(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_GUILD_QUERY(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_ITEM_QUERY_SINGLE(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_PAGE_TEXT_QUERY(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_QUEST_QUERY(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_GAMEOBJECT_QUERY(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_CREATURE_QUERY(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_WHO(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_WHOIS(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_CONTACT_LIST(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_ADD_FRIEND(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_DEL_FRIEND(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_SET_CONTACT_NOTES(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_ADD_IGNORE(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_DEL_IGNORE(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_GROUP_INVITE(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_GROUP_CANCEL => CMSG_GROUP_CANCEL{}.astd_write_unencrypted_client(w).await,
            Self::CMSG_GROUP_ACCEPT => CMSG_GROUP_ACCEPT{}.astd_write_unencrypted_client(w).await,
            Self::CMSG_GROUP_DECLINE => CMSG_GROUP_DECLINE{}.astd_write_unencrypted_client(w).await,
            Self::CMSG_GROUP_UNINVITE(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_GROUP_UNINVITE_GUID(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_GROUP_SET_LEADER(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_LOOT_METHOD(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_GROUP_DISBAND => CMSG_GROUP_DISBAND{}.astd_write_unencrypted_client(w).await,
            Self::CMSG_GUILD_CREATE(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_GUILD_INVITE(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_GUILD_ACCEPT => CMSG_GUILD_ACCEPT{}.astd_write_unencrypted_client(w).await,
            Self::CMSG_GUILD_DECLINE => CMSG_GUILD_DECLINE{}.astd_write_unencrypted_client(w).await,
            Self::CMSG_GUILD_INFO => CMSG_GUILD_INFO{}.astd_write_unencrypted_client(w).await,
            Self::CMSG_GUILD_ROSTER => CMSG_GUILD_ROSTER{}.astd_write_unencrypted_client(w).await,
            Self::CMSG_GUILD_PROMOTE(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_GUILD_DEMOTE(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_GUILD_LEAVE => CMSG_GUILD_LEAVE{}.astd_write_unencrypted_client(w).await,
            Self::CMSG_GUILD_REMOVE(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_GUILD_DISBAND => CMSG_GUILD_DISBAND{}.astd_write_unencrypted_client(w).await,
            Self::CMSG_GUILD_LEADER(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_GUILD_MOTD(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_MESSAGECHAT(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_JOIN_CHANNEL(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_LEAVE_CHANNEL(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_CHANNEL_LIST(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_CHANNEL_PASSWORD(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_CHANNEL_SET_OWNER(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_CHANNEL_OWNER(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_CHANNEL_MODERATOR(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_CHANNEL_UNMODERATOR(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_CHANNEL_MUTE(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_CHANNEL_UNMUTE(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_CHANNEL_INVITE(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_CHANNEL_KICK(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_CHANNEL_BAN(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_CHANNEL_UNBAN(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_CHANNEL_ANNOUNCEMENTS(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_CHANNEL_MODERATE(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_USE_ITEM(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_OPEN_ITEM(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_READ_ITEM(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_GAMEOBJ_USE(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_AREATRIGGER(c) => c.astd_write_unencrypted_client(w).await,
            Self::MSG_MOVE_TELEPORT(c) => c.astd_write_unencrypted_client(w).await,
            Self::MSG_MOVE_TELEPORT_ACK(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_MOVE_SET_RAW_POSITION(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_FORCE_RUN_SPEED_CHANGE_ACK(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACK(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_FORCE_SWIM_SPEED_CHANGE_ACK(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_FORCE_MOVE_ROOT_ACK(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_FORCE_MOVE_UNROOT_ACK(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_MOVE_KNOCK_BACK_ACK(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_MOVE_HOVER_ACK(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_NEXT_CINEMATIC_CAMERA => CMSG_NEXT_CINEMATIC_CAMERA{}.astd_write_unencrypted_client(w).await,
            Self::CMSG_COMPLETE_CINEMATIC => CMSG_COMPLETE_CINEMATIC{}.astd_write_unencrypted_client(w).await,
            Self::CMSG_TUTORIAL_FLAG(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_TUTORIAL_CLEAR => CMSG_TUTORIAL_CLEAR{}.astd_write_unencrypted_client(w).await,
            Self::CMSG_TUTORIAL_RESET => CMSG_TUTORIAL_RESET{}.astd_write_unencrypted_client(w).await,
            Self::CMSG_STANDSTATECHANGE(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_EMOTE(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_TEXT_EMOTE(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_AUTOSTORE_LOOT_ITEM(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_AUTOEQUIP_ITEM(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_AUTOSTORE_BAG_ITEM(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_SWAP_ITEM(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_SWAP_INV_ITEM(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_SPLIT_ITEM(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_AUTOEQUIP_ITEM_SLOT(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_DESTROYITEM(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_INSPECT(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_INITIATE_TRADE(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_BEGIN_TRADE => CMSG_BEGIN_TRADE{}.astd_write_unencrypted_client(w).await,
            Self::CMSG_BUSY_TRADE => CMSG_BUSY_TRADE{}.astd_write_unencrypted_client(w).await,
            Self::CMSG_IGNORE_TRADE => CMSG_IGNORE_TRADE{}.astd_write_unencrypted_client(w).await,
            Self::CMSG_ACCEPT_TRADE(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_UNACCEPT_TRADE => CMSG_UNACCEPT_TRADE{}.astd_write_unencrypted_client(w).await,
            Self::CMSG_CANCEL_TRADE => CMSG_CANCEL_TRADE{}.astd_write_unencrypted_client(w).await,
            Self::CMSG_SET_TRADE_ITEM(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_CLEAR_TRADE_ITEM(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_SET_TRADE_GOLD(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_SET_FACTION_ATWAR(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_SET_ACTION_BUTTON(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_CAST_SPELL(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_CANCEL_CAST(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_CANCEL_AURA(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_CANCEL_CHANNELLING(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_SET_SELECTION(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_DELETEEQUIPMENT_SET(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_INSTANCE_LOCK_RESPONSE(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_ATTACKSWING(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_ATTACKSTOP => CMSG_ATTACKSTOP{}.astd_write_unencrypted_client(w).await,
            Self::CMSG_REPOP_REQUEST => CMSG_REPOP_REQUEST{}.astd_write_unencrypted_client(w).await,
            Self::CMSG_RESURRECT_RESPONSE(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_LOOT(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_LOOT_MONEY => CMSG_LOOT_MONEY{}.astd_write_unencrypted_client(w).await,
            Self::CMSG_LOOT_RELEASE(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_DUEL_ACCEPTED(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_DUEL_CANCELLED(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_MOUNTSPECIAL_ANIM => CMSG_MOUNTSPECIAL_ANIM{}.astd_write_unencrypted_client(w).await,
            Self::CMSG_PET_SET_ACTION(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_PET_ACTION(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_PET_ABANDON(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_PET_RENAME(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_GOSSIP_HELLO(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_GOSSIP_SELECT_OPTION(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_NPC_TEXT_QUERY(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_QUESTGIVER_STATUS_QUERY(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_QUESTGIVER_HELLO(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_QUESTGIVER_QUERY_QUEST(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_QUESTGIVER_QUEST_AUTOLAUNCH => CMSG_QUESTGIVER_QUEST_AUTOLAUNCH{}.astd_write_unencrypted_client(w).await,
            Self::CMSG_QUESTGIVER_ACCEPT_QUEST(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_QUESTGIVER_COMPLETE_QUEST(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_QUESTGIVER_REQUEST_REWARD(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_QUESTGIVER_CHOOSE_REWARD(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_QUESTGIVER_CANCEL => CMSG_QUESTGIVER_CANCEL{}.astd_write_unencrypted_client(w).await,
            Self::CMSG_QUESTLOG_SWAP_QUEST(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_QUESTLOG_REMOVE_QUEST(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_QUEST_CONFIRM_ACCEPT(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_PUSHQUESTTOPARTY(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_LIST_INVENTORY(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_SELL_ITEM(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_BUY_ITEM(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_BUY_ITEM_IN_SLOT(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_TAXINODE_STATUS_QUERY(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_TAXIQUERYAVAILABLENODES(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_ACTIVATETAXI(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_TRAINER_LIST(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_TRAINER_BUY_SPELL(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_BINDER_ACTIVATE(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_BANKER_ACTIVATE(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_BUY_BANK_SLOT(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_PETITION_SHOWLIST(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_PETITION_BUY(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_PETITION_SHOW_SIGNATURES(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_PETITION_SIGN(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_OFFER_PETITION(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_TURN_IN_PETITION(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_PETITION_QUERY(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_BUG(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_PLAYED_TIME(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_QUERY_TIME => CMSG_QUERY_TIME{}.astd_write_unencrypted_client(w).await,
            Self::CMSG_RECLAIM_CORPSE(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_WRAP_ITEM(c) => c.astd_write_unencrypted_client(w).await,
            Self::MSG_MINIMAP_PING(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_PING(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_SETSHEATHED(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_QUEST_POI_QUERY(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_AUTH_SESSION(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_PET_CAST_SPELL(c) => c.astd_write_unencrypted_client(w).await,
            Self::MSG_SAVE_GUILD_EMBLEM(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_ZONEUPDATE(c) => c.astd_write_unencrypted_client(w).await,
            Self::MSG_RANDOM_ROLL(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_UNLEARN_SKILL(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_GMTICKET_CREATE(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_GMTICKET_UPDATETEXT(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_REQUEST_ACCOUNT_DATA(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_UPDATE_ACCOUNT_DATA(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_GMTICKET_GETTICKET => CMSG_GMTICKET_GETTICKET{}.astd_write_unencrypted_client(w).await,
            Self::CMSG_UNLEARN_TALENTS => CMSG_UNLEARN_TALENTS{}.astd_write_unencrypted_client(w).await,
            Self::MSG_CORPSE_QUERY => MSG_CORPSE_QUERY_Client{}.astd_write_unencrypted_client(w).await,
            Self::CMSG_GMTICKET_DELETETICKET => CMSG_GMTICKET_DELETETICKET{}.astd_write_unencrypted_client(w).await,
            Self::CMSG_GMTICKET_SYSTEMSTATUS => CMSG_GMTICKET_SYSTEMSTATUS{}.astd_write_unencrypted_client(w).await,
            Self::CMSG_SPIRIT_HEALER_ACTIVATE(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_CHAT_IGNORED(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_GUILD_RANK(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_GUILD_ADD_RANK(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_GUILD_DEL_RANK => CMSG_GUILD_DEL_RANK{}.astd_write_unencrypted_client(w).await,
            Self::CMSG_GUILD_SET_PUBLIC_NOTE(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_GUILD_SET_OFFICER_NOTE(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_SEND_MAIL(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_GET_MAIL_LIST(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_BATTLEFIELD_LIST(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_ITEM_TEXT_QUERY(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_MAIL_TAKE_MONEY(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_MAIL_TAKE_ITEM(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_MAIL_MARK_AS_READ(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_MAIL_RETURN_TO_SENDER(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_MAIL_DELETE(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_MAIL_CREATE_TEXT_ITEM(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_LEARN_TALENT(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_TOGGLE_PVP(c) => c.astd_write_unencrypted_client(w).await,
            Self::MSG_AUCTION_HELLO(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_AUCTION_SELL_ITEM(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_AUCTION_REMOVE_ITEM(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_AUCTION_LIST_ITEMS(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_AUCTION_LIST_OWNER_ITEMS(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_AUCTION_PLACE_BID(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_AUCTION_LIST_BIDDER_ITEMS(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_SET_AMMO(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_SET_ACTIVE_MOVER(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_PET_CANCEL_AURA(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_CANCEL_AUTO_REPEAT_SPELL => CMSG_CANCEL_AUTO_REPEAT_SPELL{}.astd_write_unencrypted_client(w).await,
            Self::MSG_LIST_STABLED_PETS(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_STABLE_PET(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_UNSTABLE_PET(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_BUY_STABLE_SLOT(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_STABLE_SWAP_PET(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_REQUEST_PET_INFO => CMSG_REQUEST_PET_INFO{}.astd_write_unencrypted_client(w).await,
            Self::CMSG_FAR_SIGHT(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_GROUP_CHANGE_SUB_GROUP(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_REQUEST_PARTY_MEMBER_STATS(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_GROUP_SWAP_SUB_GROUP(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_AUTOSTORE_BANK_ITEM(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_AUTOBANK_ITEM(c) => c.astd_write_unencrypted_client(w).await,
            Self::MSG_QUERY_NEXT_MAIL_TIME => MSG_QUERY_NEXT_MAIL_TIME_Client{}.astd_write_unencrypted_client(w).await,
            Self::CMSG_GROUP_RAID_CONVERT => CMSG_GROUP_RAID_CONVERT{}.astd_write_unencrypted_client(w).await,
            Self::CMSG_GROUP_ASSISTANT_LEADER(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_BUYBACK_ITEM(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_SET_SAVED_INSTANCE_EXTEND(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_LFG_GET_STATUS => CMSG_LFG_GET_STATUS{}.astd_write_unencrypted_client(w).await,
            Self::CMSG_GMTICKETSYSTEM_TOGGLE => CMSG_GMTICKETSYSTEM_TOGGLE{}.astd_write_unencrypted_client(w).await,
            Self::CMSG_CANCEL_GROWTH_AURA => CMSG_CANCEL_GROWTH_AURA{}.astd_write_unencrypted_client(w).await,
            Self::CMSG_LOOT_ROLL(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_LOOT_MASTER_GIVE(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_REPAIR_ITEM(c) => c.astd_write_unencrypted_client(w).await,
            Self::MSG_TALENT_WIPE_CONFIRM(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_SUMMON_RESPONSE(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_SELF_RES => CMSG_SELF_RES{}.astd_write_unencrypted_client(w).await,
            Self::CMSG_TOGGLE_HELM => CMSG_TOGGLE_HELM{}.astd_write_unencrypted_client(w).await,
            Self::CMSG_TOGGLE_CLOAK => CMSG_TOGGLE_CLOAK{}.astd_write_unencrypted_client(w).await,
            Self::CMSG_SET_ACTIONBAR_TOGGLES(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_ITEM_NAME_QUERY(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_CHAR_RENAME(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_MOVE_SPLINE_DONE(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_MOVE_FALL_RESET(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_REQUEST_RAID_INFO => CMSG_REQUEST_RAID_INFO{}.astd_write_unencrypted_client(w).await,
            Self::CMSG_MOVE_TIME_SKIPPED(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_MOVE_FEATHER_FALL_ACK(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_MOVE_WATER_WALK_ACK(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_MOVE_NOT_ACTIVE_MOVER(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_BATTLEFIELD_STATUS => CMSG_BATTLEFIELD_STATUS{}.astd_write_unencrypted_client(w).await,
            Self::CMSG_BATTLEFIELD_PORT(c) => c.astd_write_unencrypted_client(w).await,
            Self::MSG_INSPECT_HONOR_STATS(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_BATTLEMASTER_HELLO(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_FORCE_WALK_SPEED_CHANGE_ACK(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_FORCE_SWIM_BACK_SPEED_CHANGE_ACK(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_FORCE_TURN_RATE_CHANGE_ACK(c) => c.astd_write_unencrypted_client(w).await,
            Self::MSG_PVP_LOG_DATA => MSG_PVP_LOG_DATA_Client{}.astd_write_unencrypted_client(w).await,
            Self::CMSG_LEAVE_BATTLEFIELD(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_AREA_SPIRIT_HEALER_QUERY(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_AREA_SPIRIT_HEALER_QUEUE(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_WARDEN_DATA(c) => c.astd_write_unencrypted_client(w).await,
            Self::MSG_BATTLEGROUND_PLAYER_POSITIONS => MSG_BATTLEGROUND_PLAYER_POSITIONS_Client{}.astd_write_unencrypted_client(w).await,
            Self::CMSG_PET_STOP_ATTACK(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_BATTLEMASTER_JOIN(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_PET_UNLEARN(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_PET_SPELL_AUTOCAST(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_GUILD_INFO_TEXT(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_ACTIVATETAXIEXPRESS(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_SET_FACTION_INACTIVE(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_SET_WATCHED_FACTION(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_RESET_INSTANCES => CMSG_RESET_INSTANCES{}.astd_write_unencrypted_client(w).await,
            Self::MSG_RAID_TARGET_UPDATE(c) => c.astd_write_unencrypted_client(w).await,
            Self::MSG_RAID_READY_CHECK(c) => c.astd_write_unencrypted_client(w).await,
            Self::MSG_SET_DUNGEON_DIFFICULTY(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_GMSURVEY_SUBMIT(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_MOVE_SET_CAN_TRANSITION_BETWEEN_SWIM_AND_FLY_ACK(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_MOVE_SET_CAN_FLY_ACK(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_MOVE_SET_FLY(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_SOCKET_GEMS(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_ARENA_TEAM_ROSTER(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_ARENA_TEAM_INVITE(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_ARENA_TEAM_ACCEPT => CMSG_ARENA_TEAM_ACCEPT{}.astd_write_unencrypted_client(w).await,
            Self::CMSG_ARENA_TEAM_DECLINE => CMSG_ARENA_TEAM_DECLINE{}.astd_write_unencrypted_client(w).await,
            Self::CMSG_ARENA_TEAM_LEAVE(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_ARENA_TEAM_REMOVE(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_ARENA_TEAM_DISBAND(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_ARENA_TEAM_LEADER(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_BATTLEMASTER_JOIN_ARENA(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_LFG_JOIN(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_LFG_LEAVE => CMSG_LFG_LEAVE{}.astd_write_unencrypted_client(w).await,
            Self::CMSG_SEARCH_LFG_JOIN(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_SEARCH_LFG_LEAVE(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_LFG_PROPOSAL_RESULT(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_SET_LFG_COMMENT(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_LFG_SET_ROLES(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_LFG_SET_BOOT_VOTE(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_LFD_PLAYER_LOCK_INFO_REQUEST => CMSG_LFD_PLAYER_LOCK_INFO_REQUEST{}.astd_write_unencrypted_client(w).await,
            Self::CMSG_LFG_TELEPORT(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_LFD_PARTY_LOCK_INFO_REQUEST => CMSG_LFD_PARTY_LOCK_INFO_REQUEST{}.astd_write_unencrypted_client(w).await,
            Self::CMSG_SET_TITLE(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_CANCEL_MOUNT_AURA => CMSG_CANCEL_MOUNT_AURA{}.astd_write_unencrypted_client(w).await,
            Self::MSG_INSPECT_ARENA_TEAMS(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_CANCEL_TEMP_ENCHANTMENT(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_FORCE_FLIGHT_SPEED_CHANGE_ACK(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE_ACK(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_SET_TAXI_BENCHMARK_MODE(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_REALM_SPLIT(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_MOVE_CHNG_TRANSPORT(c) => c.astd_write_unencrypted_client(w).await,
            Self::MSG_PARTY_ASSIGNMENT(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_TIME_SYNC_RESP(c) => c.astd_write_unencrypted_client(w).await,
            Self::MSG_RAID_READY_CHECK_CONFIRM(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_VOICE_SESSION_ENABLE(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_COMMENTATOR_ENABLE(c) => c.astd_write_unencrypted_client(w).await,
            Self::MSG_RAID_READY_CHECK_FINISHED => MSG_RAID_READY_CHECK_FINISHED_Client{}.astd_write_unencrypted_client(w).await,
            Self::CMSG_COMPLAIN(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_CHANNEL_DISPLAY_LIST(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_SET_ACTIVE_VOICE_CHANNEL(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_GET_CHANNEL_MEMBER_COUNT(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_CHANNEL_VOICE_ON => CMSG_CHANNEL_VOICE_ON{}.astd_write_unencrypted_client(w).await,
            Self::CMSG_REPORT_PVP_AFK(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_GUILD_BANKER_ACTIVATE(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_GUILD_BANK_QUERY_TAB(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_GUILD_BANK_SWAP_ITEMS(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_GUILD_BANK_BUY_TAB(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_GUILD_BANK_UPDATE_TAB(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_GUILD_BANK_DEPOSIT_MONEY(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_GUILD_BANK_WITHDRAW_MONEY(c) => c.astd_write_unencrypted_client(w).await,
            Self::MSG_GUILD_BANK_LOG_QUERY(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_SET_CHANNEL_WATCH(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_CLEAR_CHANNEL_WATCH(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_SPELLCLICK(c) => c.astd_write_unencrypted_client(w).await,
            Self::MSG_GUILD_PERMISSIONS => MSG_GUILD_PERMISSIONS_Client{}.astd_write_unencrypted_client(w).await,
            Self::MSG_GUILD_BANK_MONEY_WITHDRAWN => MSG_GUILD_BANK_MONEY_WITHDRAWN_Client{}.astd_write_unencrypted_client(w).await,
            Self::MSG_GUILD_EVENT_LOG_QUERY => MSG_GUILD_EVENT_LOG_QUERY_Client{}.astd_write_unencrypted_client(w).await,
            Self::CMSG_GET_MIRRORIMAGE_DATA(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_KEEP_ALIVE => CMSG_KEEP_ALIVE{}.astd_write_unencrypted_client(w).await,
            Self::CMSG_OPT_OUT_OF_LOOT(c) => c.astd_write_unencrypted_client(w).await,
            Self::MSG_QUERY_GUILD_BANK_TEXT(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_SET_GUILD_BANK_TEXT(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_GRANT_LEVEL(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_TOTEM_DESTROYED(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_QUESTGIVER_STATUS_MULTIPLE_QUERY => CMSG_QUESTGIVER_STATUS_MULTIPLE_QUERY{}.astd_write_unencrypted_client(w).await,
            Self::CMSG_SET_PLAYER_DECLINED_NAMES(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_ACCEPT_LEVEL_GRANT(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_ALTER_APPEARANCE(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_CALENDAR_GET_CALENDAR => CMSG_CALENDAR_GET_CALENDAR{}.astd_write_unencrypted_client(w).await,
            Self::CMSG_CALENDAR_GET_EVENT(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_CALENDAR_GUILD_FILTER(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_CALENDAR_ARENA_TEAM(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_CALENDAR_ADD_EVENT(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_CALENDAR_UPDATE_EVENT(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_CALENDAR_REMOVE_EVENT(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_CALENDAR_COPY_EVENT(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_CALENDAR_EVENT_INVITE(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_CALENDAR_EVENT_RSVP(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_CALENDAR_EVENT_REMOVE_INVITE(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_CALENDAR_EVENT_STATUS(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_CALENDAR_EVENT_MODERATOR_STATUS(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_CALENDAR_COMPLAIN(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_UPDATE_MISSILE_TRAJECTORY(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_COMPLETE_MOVIE => CMSG_COMPLETE_MOVIE{}.astd_write_unencrypted_client(w).await,
            Self::CMSG_QUERY_INSPECT_ACHIEVEMENTS(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_DISMISS_CONTROLLED_VEHICLE => CMSG_DISMISS_CONTROLLED_VEHICLE{}.astd_write_unencrypted_client(w).await,
            Self::CMSG_CHAR_CUSTOMIZE(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_REQUEST_VEHICLE_EXIT => CMSG_REQUEST_VEHICLE_EXIT{}.astd_write_unencrypted_client(w).await,
            Self::CMSG_REQUEST_VEHICLE_PREV_SEAT => CMSG_REQUEST_VEHICLE_PREV_SEAT{}.astd_write_unencrypted_client(w).await,
            Self::CMSG_REQUEST_VEHICLE_NEXT_SEAT => CMSG_REQUEST_VEHICLE_NEXT_SEAT{}.astd_write_unencrypted_client(w).await,
            Self::CMSG_REQUEST_VEHICLE_SWITCH_SEAT(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_PET_LEARN_TALENT(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_GAMEOBJ_REPORT_USE(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_REMOVE_GLYPH(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_DISMISS_CRITTER(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_AUCTION_LIST_PENDING_SALES(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_ENABLETAXI(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_CHANGE_SEATS_ON_CONTROLLED_VEHICLE(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_HEARTH_AND_RESURRECT => CMSG_HEARTH_AND_RESURRECT{}.astd_write_unencrypted_client(w).await,
            Self::CMSG_PLAYER_VEHICLE_ENTER(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_CONTROLLER_EJECT_PASSENGER(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_ITEM_REFUND_INFO(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_ITEM_REFUND(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_CORPSE_MAP_POSITION_QUERY(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_CALENDAR_EVENT_SIGNUP(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_EQUIPMENT_SET_SAVE(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_UPDATE_PROJECTILE_POSITION(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_LEARN_PREVIEW_TALENTS(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_LEARN_PREVIEW_TALENTS_PET(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_MOVE_GRAVITY_DISABLE_ACK(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_MOVE_GRAVITY_ENABLE_ACK(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_EQUIPMENT_SET_USE(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_CHAR_FACTION_CHANGE(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_BATTLEFIELD_MGR_ENTRY_INVITE_RESPONSE(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_BATTLEFIELD_MGR_QUEUE_INVITE_RESPONSE(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_BATTLEFIELD_MGR_EXIT_REQUEST(c) => c.astd_write_unencrypted_client(w).await,
            Self::MSG_SET_RAID_DIFFICULTY(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_GMRESPONSE_RESOLVE => CMSG_GMRESPONSE_RESOLVE{}.astd_write_unencrypted_client(w).await,
            Self::CMSG_WORLD_STATE_UI_TIMER_UPDATE => CMSG_WORLD_STATE_UI_TIMER_UPDATE{}.astd_write_unencrypted_client(w).await,
            Self::CMSG_CHAR_RACE_CHANGE(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_READY_FOR_ACCOUNT_DATA_TIMES => CMSG_READY_FOR_ACCOUNT_DATA_TIMES{}.astd_write_unencrypted_client(w).await,
            Self::CMSG_QUERY_QUESTS_COMPLETED => CMSG_QUERY_QUESTS_COMPLETED{}.astd_write_unencrypted_client(w).await,
            Self::CMSG_GM_REPORT_LAG(c) => c.astd_write_unencrypted_client(w).await,
            Self::CMSG_MOVE_SET_COLLISION_HGT_ACK(c) => c.astd_write_unencrypted_client(w).await,
        }
    }

    pub const fn movement_info(&self) -> Option<&MovementInfo> {
        match self {
            Self::CMSG_MOVE_FALL_RESET(c) => Some(&c.info),
            Self::CMSG_MOVE_SET_FLY(c) => Some(&c.info),
            Self::CMSG_MOVE_CHNG_TRANSPORT(c) => Some(&c.info),
            _ => None,
        }
    }

    #[cfg(feature = "print-testcase")]
    pub fn to_test_case_string(&self) -> Option<String> {
        match self {
            Self::MSG_MOVE_START_FORWARD(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::MSG_MOVE_START_BACKWARD(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::MSG_MOVE_STOP(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::MSG_MOVE_START_STRAFE_LEFT(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::MSG_MOVE_START_STRAFE_RIGHT(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::MSG_MOVE_STOP_STRAFE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::MSG_MOVE_JUMP(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::MSG_MOVE_START_TURN_LEFT(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::MSG_MOVE_START_TURN_RIGHT(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::MSG_MOVE_STOP_TURN(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::MSG_MOVE_START_PITCH_UP(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::MSG_MOVE_START_PITCH_DOWN(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::MSG_MOVE_STOP_PITCH(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::MSG_MOVE_SET_RUN_MODE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::MSG_MOVE_SET_WALK_MODE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::MSG_MOVE_FALL_LAND(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::MSG_MOVE_START_SWIM(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::MSG_MOVE_STOP_SWIM(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::MSG_MOVE_SET_FACING(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::MSG_MOVE_SET_PITCH(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::MSG_MOVE_WORLDPORT_ACK => crate::Message::to_test_case_string(&MSG_MOVE_WORLDPORT_ACK{}),
            Self::MSG_MOVE_HEARTBEAT(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::MSG_MOVE_HOVER(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::MSG_PETITION_DECLINE(c) => crate::Message::to_test_case_string(c),
            Self::MSG_TABARDVENDOR_ACTIVATE(c) => crate::Message::to_test_case_string(c),
            Self::MSG_QUEST_PUSH_RESULT(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::MSG_MOVE_WATER_WALK(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::MSG_PETITION_RENAME(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::MSG_MOVE_START_ASCEND(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::MSG_MOVE_STOP_ASCEND(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::MSG_MOVE_SET_FLIGHT_BACK_SPEED(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::MSG_MOVE_START_DESCEND(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_CALENDAR_GET_NUM_PENDING => crate::Message::to_test_case_string(&CMSG_CALENDAR_GET_NUM_PENDING{}),
            Self::CMSG_BOOTME => crate::Message::to_test_case_string(&CMSG_BOOTME{}),
            Self::CMSG_DBLOOKUP(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_CHAR_CREATE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_LOGOUT_CANCEL => crate::Message::to_test_case_string(&CMSG_LOGOUT_CANCEL{}),
            Self::CMSG_NAME_QUERY(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_GUILD_QUERY(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_ITEM_QUERY_SINGLE(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_PAGE_TEXT_QUERY(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_QUEST_QUERY(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_GAMEOBJECT_QUERY(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_CREATURE_QUERY(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_WHO(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_WHOIS(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_CONTACT_LIST(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_ADD_FRIEND(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_DEL_FRIEND(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_SET_CONTACT_NOTES(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_ADD_IGNORE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_DEL_IGNORE(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_GROUP_INVITE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_GROUP_CANCEL => crate::Message::to_test_case_string(&CMSG_GROUP_CANCEL{}),
            Self::CMSG_GROUP_ACCEPT => crate::Message::to_test_case_string(&CMSG_GROUP_ACCEPT{}),
            Self::CMSG_GROUP_DECLINE => crate::Message::to_test_case_string(&CMSG_GROUP_DECLINE{}),
            Self::CMSG_GROUP_UNINVITE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_GROUP_UNINVITE_GUID(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_GROUP_SET_LEADER(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_LOOT_METHOD(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_GROUP_DISBAND => crate::Message::to_test_case_string(&CMSG_GROUP_DISBAND{}),
            Self::CMSG_GUILD_CREATE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_GUILD_INVITE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_GUILD_ACCEPT => crate::Message::to_test_case_string(&CMSG_GUILD_ACCEPT{}),
            Self::CMSG_GUILD_DECLINE => crate::Message::to_test_case_string(&CMSG_GUILD_DECLINE{}),
            Self::CMSG_GUILD_INFO => crate::Message::to_test_case_string(&CMSG_GUILD_INFO{}),
            Self::CMSG_GUILD_ROSTER => crate::Message::to_test_case_string(&CMSG_GUILD_ROSTER{}),
            Self::CMSG_GUILD_PROMOTE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_GUILD_DEMOTE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_GUILD_LEAVE => crate::Message::to_test_case_string(&CMSG_GUILD_LEAVE{}),
            Self::CMSG_GUILD_REMOVE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_GUILD_DISBAND => crate::Message::to_test_case_string(&CMSG_GUILD_DISBAND{}),
            Self::CMSG_GUILD_LEADER(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_GUILD_MOTD(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_MESSAGECHAT(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_JOIN_CHANNEL(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_LEAVE_CHANNEL(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_CHANNEL_LIST(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_CHANNEL_PASSWORD(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_CHANNEL_SET_OWNER(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_CHANNEL_OWNER(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_CHANNEL_MODERATOR(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_CHANNEL_UNMODERATOR(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_CHANNEL_MUTE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_CHANNEL_UNMUTE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_CHANNEL_INVITE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_CHANNEL_KICK(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_CHANNEL_BAN(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_CHANNEL_UNBAN(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_CHANNEL_ANNOUNCEMENTS(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_CHANNEL_MODERATE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_USE_ITEM(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_OPEN_ITEM(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_READ_ITEM(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_GAMEOBJ_USE(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_AREATRIGGER(c) => crate::Message::to_test_case_string(c),
            Self::MSG_MOVE_TELEPORT(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_MOVE_SET_RAW_POSITION(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_FORCE_RUN_SPEED_CHANGE_ACK(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACK(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_FORCE_SWIM_SPEED_CHANGE_ACK(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_FORCE_MOVE_ROOT_ACK(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_FORCE_MOVE_UNROOT_ACK(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_MOVE_KNOCK_BACK_ACK(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_MOVE_HOVER_ACK(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_NEXT_CINEMATIC_CAMERA => crate::Message::to_test_case_string(&CMSG_NEXT_CINEMATIC_CAMERA{}),
            Self::CMSG_COMPLETE_CINEMATIC => crate::Message::to_test_case_string(&CMSG_COMPLETE_CINEMATIC{}),
            Self::CMSG_TUTORIAL_FLAG(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_TUTORIAL_CLEAR => crate::Message::to_test_case_string(&CMSG_TUTORIAL_CLEAR{}),
            Self::CMSG_TUTORIAL_RESET => crate::Message::to_test_case_string(&CMSG_TUTORIAL_RESET{}),
            Self::CMSG_EMOTE(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_TEXT_EMOTE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_AUTOSTORE_LOOT_ITEM(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_AUTOSTORE_BAG_ITEM(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_SWAP_ITEM(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_SWAP_INV_ITEM(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_SPLIT_ITEM(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_AUTOEQUIP_ITEM_SLOT(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_DESTROYITEM(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_INSPECT(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_BEGIN_TRADE => crate::Message::to_test_case_string(&CMSG_BEGIN_TRADE{}),
            Self::CMSG_BUSY_TRADE => crate::Message::to_test_case_string(&CMSG_BUSY_TRADE{}),
            Self::CMSG_IGNORE_TRADE => crate::Message::to_test_case_string(&CMSG_IGNORE_TRADE{}),
            Self::CMSG_ACCEPT_TRADE(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_UNACCEPT_TRADE => crate::Message::to_test_case_string(&CMSG_UNACCEPT_TRADE{}),
            Self::CMSG_SET_TRADE_ITEM(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_CLEAR_TRADE_ITEM(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_SET_TRADE_GOLD(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_SET_FACTION_ATWAR(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_SET_ACTION_BUTTON(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_CAST_SPELL(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_CANCEL_AURA(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_CANCEL_CHANNELLING(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_DELETEEQUIPMENT_SET(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_INSTANCE_LOCK_RESPONSE(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_ATTACKSTOP => crate::Message::to_test_case_string(&CMSG_ATTACKSTOP{}),
            Self::CMSG_REPOP_REQUEST => crate::Message::to_test_case_string(&CMSG_REPOP_REQUEST{}),
            Self::CMSG_RESURRECT_RESPONSE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_LOOT(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_LOOT_MONEY => crate::Message::to_test_case_string(&CMSG_LOOT_MONEY{}),
            Self::CMSG_LOOT_RELEASE(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_DUEL_ACCEPTED(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_DUEL_CANCELLED(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_MOUNTSPECIAL_ANIM => crate::Message::to_test_case_string(&CMSG_MOUNTSPECIAL_ANIM{}),
            Self::CMSG_PET_SET_ACTION(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_PET_ACTION(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_PET_ABANDON(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_PET_RENAME(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_GOSSIP_HELLO(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_GOSSIP_SELECT_OPTION(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_NPC_TEXT_QUERY(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_QUESTGIVER_STATUS_QUERY(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_QUESTGIVER_HELLO(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_QUESTGIVER_QUERY_QUEST(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_QUESTGIVER_QUEST_AUTOLAUNCH => crate::Message::to_test_case_string(&CMSG_QUESTGIVER_QUEST_AUTOLAUNCH{}),
            Self::CMSG_QUESTGIVER_ACCEPT_QUEST(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_QUESTGIVER_COMPLETE_QUEST(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_QUESTGIVER_REQUEST_REWARD(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_QUESTGIVER_CHOOSE_REWARD(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_QUESTGIVER_CANCEL => crate::Message::to_test_case_string(&CMSG_QUESTGIVER_CANCEL{}),
            Self::CMSG_QUESTLOG_SWAP_QUEST(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_QUESTLOG_REMOVE_QUEST(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_QUEST_CONFIRM_ACCEPT(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_PUSHQUESTTOPARTY(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_LIST_INVENTORY(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_SELL_ITEM(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_BUY_ITEM(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_BUY_ITEM_IN_SLOT(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_TAXINODE_STATUS_QUERY(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_TAXIQUERYAVAILABLENODES(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_ACTIVATETAXI(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_TRAINER_LIST(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_TRAINER_BUY_SPELL(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_BINDER_ACTIVATE(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_BANKER_ACTIVATE(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_BUY_BANK_SLOT(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_PETITION_SHOWLIST(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_PETITION_BUY(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_PETITION_SHOW_SIGNATURES(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_PETITION_SIGN(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_OFFER_PETITION(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_TURN_IN_PETITION(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_PETITION_QUERY(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_BUG(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_PLAYED_TIME(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_RECLAIM_CORPSE(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_WRAP_ITEM(c) => crate::Message::to_test_case_string(c),
            Self::MSG_MINIMAP_PING(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_QUEST_POI_QUERY(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_AUTH_SESSION(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_PET_CAST_SPELL(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::MSG_SAVE_GUILD_EMBLEM(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_ZONEUPDATE(c) => crate::Message::to_test_case_string(c),
            Self::MSG_RANDOM_ROLL(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_UNLEARN_SKILL(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_GMTICKET_CREATE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_GMTICKET_UPDATETEXT(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_UPDATE_ACCOUNT_DATA(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_UNLEARN_TALENTS => crate::Message::to_test_case_string(&CMSG_UNLEARN_TALENTS{}),
            Self::MSG_CORPSE_QUERY => crate::Message::to_test_case_string(&MSG_CORPSE_QUERY_Client{}),
            Self::CMSG_GMTICKET_DELETETICKET => crate::Message::to_test_case_string(&CMSG_GMTICKET_DELETETICKET{}),
            Self::CMSG_GMTICKET_SYSTEMSTATUS => crate::Message::to_test_case_string(&CMSG_GMTICKET_SYSTEMSTATUS{}),
            Self::CMSG_SPIRIT_HEALER_ACTIVATE(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_CHAT_IGNORED(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_GUILD_RANK(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_GUILD_ADD_RANK(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_GUILD_DEL_RANK => crate::Message::to_test_case_string(&CMSG_GUILD_DEL_RANK{}),
            Self::CMSG_GUILD_SET_PUBLIC_NOTE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_GUILD_SET_OFFICER_NOTE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_SEND_MAIL(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_GET_MAIL_LIST(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_BATTLEFIELD_LIST(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_ITEM_TEXT_QUERY(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_MAIL_TAKE_MONEY(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_MAIL_TAKE_ITEM(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_MAIL_MARK_AS_READ(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_MAIL_RETURN_TO_SENDER(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_MAIL_DELETE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_MAIL_CREATE_TEXT_ITEM(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_LEARN_TALENT(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_TOGGLE_PVP(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_AUCTION_SELL_ITEM(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_AUCTION_REMOVE_ITEM(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_AUCTION_LIST_ITEMS(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_AUCTION_LIST_OWNER_ITEMS(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_AUCTION_PLACE_BID(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_AUCTION_LIST_BIDDER_ITEMS(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_SET_AMMO(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_PET_CANCEL_AURA(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_CANCEL_AUTO_REPEAT_SPELL => crate::Message::to_test_case_string(&CMSG_CANCEL_AUTO_REPEAT_SPELL{}),
            Self::MSG_LIST_STABLED_PETS(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_STABLE_PET(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_UNSTABLE_PET(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_BUY_STABLE_SLOT(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_STABLE_SWAP_PET(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_REQUEST_PET_INFO => crate::Message::to_test_case_string(&CMSG_REQUEST_PET_INFO{}),
            Self::CMSG_FAR_SIGHT(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_GROUP_CHANGE_SUB_GROUP(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_REQUEST_PARTY_MEMBER_STATS(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_GROUP_SWAP_SUB_GROUP(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_AUTOSTORE_BANK_ITEM(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_AUTOBANK_ITEM(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_GROUP_RAID_CONVERT => crate::Message::to_test_case_string(&CMSG_GROUP_RAID_CONVERT{}),
            Self::CMSG_GROUP_ASSISTANT_LEADER(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_BUYBACK_ITEM(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_SET_SAVED_INSTANCE_EXTEND(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_LFG_GET_STATUS => crate::Message::to_test_case_string(&CMSG_LFG_GET_STATUS{}),
            Self::CMSG_GMTICKETSYSTEM_TOGGLE => crate::Message::to_test_case_string(&CMSG_GMTICKETSYSTEM_TOGGLE{}),
            Self::CMSG_CANCEL_GROWTH_AURA => crate::Message::to_test_case_string(&CMSG_CANCEL_GROWTH_AURA{}),
            Self::CMSG_LOOT_ROLL(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_LOOT_MASTER_GIVE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_REPAIR_ITEM(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::MSG_TALENT_WIPE_CONFIRM(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_SUMMON_RESPONSE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_SELF_RES => crate::Message::to_test_case_string(&CMSG_SELF_RES{}),
            Self::CMSG_TOGGLE_HELM => crate::Message::to_test_case_string(&CMSG_TOGGLE_HELM{}),
            Self::CMSG_TOGGLE_CLOAK => crate::Message::to_test_case_string(&CMSG_TOGGLE_CLOAK{}),
            Self::CMSG_SET_ACTIONBAR_TOGGLES(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_ITEM_NAME_QUERY(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_MOVE_SPLINE_DONE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_MOVE_FALL_RESET(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_MOVE_TIME_SKIPPED(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_MOVE_FEATHER_FALL_ACK(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_MOVE_WATER_WALK_ACK(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_MOVE_NOT_ACTIVE_MOVER(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_BATTLEFIELD_PORT(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::MSG_INSPECT_HONOR_STATS(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_BATTLEMASTER_HELLO(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_FORCE_WALK_SPEED_CHANGE_ACK(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_FORCE_SWIM_BACK_SPEED_CHANGE_ACK(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_FORCE_TURN_RATE_CHANGE_ACK(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::MSG_PVP_LOG_DATA => crate::Message::to_test_case_string(&MSG_PVP_LOG_DATA_Client{}),
            Self::CMSG_LEAVE_BATTLEFIELD(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_AREA_SPIRIT_HEALER_QUERY(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_AREA_SPIRIT_HEALER_QUEUE(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_WARDEN_DATA(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::MSG_BATTLEGROUND_PLAYER_POSITIONS => crate::Message::to_test_case_string(&MSG_BATTLEGROUND_PLAYER_POSITIONS_Client{}),
            Self::CMSG_PET_STOP_ATTACK(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_BATTLEMASTER_JOIN(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_PET_UNLEARN(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_PET_SPELL_AUTOCAST(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_GUILD_INFO_TEXT(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_ACTIVATETAXIEXPRESS(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_SET_FACTION_INACTIVE(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_SET_WATCHED_FACTION(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_RESET_INSTANCES => crate::Message::to_test_case_string(&CMSG_RESET_INSTANCES{}),
            Self::MSG_RAID_TARGET_UPDATE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::MSG_RAID_READY_CHECK(c) => crate::Message::to_test_case_string(c),
            Self::MSG_SET_DUNGEON_DIFFICULTY(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_GMSURVEY_SUBMIT(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_MOVE_SET_CAN_TRANSITION_BETWEEN_SWIM_AND_FLY_ACK(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_MOVE_SET_CAN_FLY_ACK(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_MOVE_SET_FLY(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_SOCKET_GEMS(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_ARENA_TEAM_ROSTER(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_ARENA_TEAM_INVITE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_ARENA_TEAM_ACCEPT => crate::Message::to_test_case_string(&CMSG_ARENA_TEAM_ACCEPT{}),
            Self::CMSG_ARENA_TEAM_DECLINE => crate::Message::to_test_case_string(&CMSG_ARENA_TEAM_DECLINE{}),
            Self::CMSG_ARENA_TEAM_LEAVE(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_ARENA_TEAM_REMOVE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_ARENA_TEAM_DISBAND(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_ARENA_TEAM_LEADER(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_BATTLEMASTER_JOIN_ARENA(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_LFG_JOIN(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_LFG_LEAVE => crate::Message::to_test_case_string(&CMSG_LFG_LEAVE{}),
            Self::CMSG_SEARCH_LFG_JOIN(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_SEARCH_LFG_LEAVE(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_LFG_PROPOSAL_RESULT(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_SET_LFG_COMMENT(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_LFG_SET_ROLES(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_LFG_SET_BOOT_VOTE(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_LFD_PLAYER_LOCK_INFO_REQUEST => crate::Message::to_test_case_string(&CMSG_LFD_PLAYER_LOCK_INFO_REQUEST{}),
            Self::CMSG_LFG_TELEPORT(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_LFD_PARTY_LOCK_INFO_REQUEST => crate::Message::to_test_case_string(&CMSG_LFD_PARTY_LOCK_INFO_REQUEST{}),
            Self::CMSG_SET_TITLE(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_CANCEL_MOUNT_AURA => crate::Message::to_test_case_string(&CMSG_CANCEL_MOUNT_AURA{}),
            Self::MSG_INSPECT_ARENA_TEAMS(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_CANCEL_TEMP_ENCHANTMENT(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_FORCE_FLIGHT_SPEED_CHANGE_ACK(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE_ACK(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_SET_TAXI_BENCHMARK_MODE(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_REALM_SPLIT(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_MOVE_CHNG_TRANSPORT(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::MSG_PARTY_ASSIGNMENT(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_TIME_SYNC_RESP(c) => crate::Message::to_test_case_string(c),
            Self::MSG_RAID_READY_CHECK_CONFIRM(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_VOICE_SESSION_ENABLE(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_COMMENTATOR_ENABLE(c) => crate::Message::to_test_case_string(c),
            Self::MSG_RAID_READY_CHECK_FINISHED => crate::Message::to_test_case_string(&MSG_RAID_READY_CHECK_FINISHED_Client{}),
            Self::CMSG_COMPLAIN(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_CHANNEL_DISPLAY_LIST(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_SET_ACTIVE_VOICE_CHANNEL(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_GET_CHANNEL_MEMBER_COUNT(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_CHANNEL_VOICE_ON => crate::Message::to_test_case_string(&CMSG_CHANNEL_VOICE_ON{}),
            Self::CMSG_REPORT_PVP_AFK(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_GUILD_BANKER_ACTIVATE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_GUILD_BANK_QUERY_TAB(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_GUILD_BANK_SWAP_ITEMS(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_GUILD_BANK_BUY_TAB(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_GUILD_BANK_UPDATE_TAB(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_GUILD_BANK_DEPOSIT_MONEY(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_GUILD_BANK_WITHDRAW_MONEY(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::MSG_GUILD_BANK_LOG_QUERY(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_SET_CHANNEL_WATCH(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_CLEAR_CHANNEL_WATCH(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_SPELLCLICK(c) => crate::Message::to_test_case_string(c),
            Self::MSG_GUILD_PERMISSIONS => crate::Message::to_test_case_string(&MSG_GUILD_PERMISSIONS_Client{}),
            Self::MSG_GUILD_BANK_MONEY_WITHDRAWN => crate::Message::to_test_case_string(&MSG_GUILD_BANK_MONEY_WITHDRAWN_Client{}),
            Self::MSG_GUILD_EVENT_LOG_QUERY => crate::Message::to_test_case_string(&MSG_GUILD_EVENT_LOG_QUERY_Client{}),
            Self::CMSG_GET_MIRRORIMAGE_DATA(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_KEEP_ALIVE => crate::Message::to_test_case_string(&CMSG_KEEP_ALIVE{}),
            Self::CMSG_OPT_OUT_OF_LOOT(c) => crate::Message::to_test_case_string(c),
            Self::MSG_QUERY_GUILD_BANK_TEXT(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_SET_GUILD_BANK_TEXT(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_GRANT_LEVEL(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_TOTEM_DESTROYED(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_QUESTGIVER_STATUS_MULTIPLE_QUERY => crate::Message::to_test_case_string(&CMSG_QUESTGIVER_STATUS_MULTIPLE_QUERY{}),
            Self::CMSG_SET_PLAYER_DECLINED_NAMES(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_ACCEPT_LEVEL_GRANT(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_ALTER_APPEARANCE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_CALENDAR_GET_CALENDAR => crate::Message::to_test_case_string(&CMSG_CALENDAR_GET_CALENDAR{}),
            Self::CMSG_CALENDAR_GET_EVENT(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_CALENDAR_GUILD_FILTER(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_CALENDAR_ARENA_TEAM(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_CALENDAR_ADD_EVENT(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_CALENDAR_UPDATE_EVENT(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_CALENDAR_REMOVE_EVENT(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_CALENDAR_COPY_EVENT(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_CALENDAR_EVENT_INVITE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_CALENDAR_EVENT_RSVP(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_CALENDAR_EVENT_REMOVE_INVITE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_CALENDAR_EVENT_STATUS(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_CALENDAR_EVENT_MODERATOR_STATUS(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_CALENDAR_COMPLAIN(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_UPDATE_MISSILE_TRAJECTORY(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_COMPLETE_MOVIE => crate::Message::to_test_case_string(&CMSG_COMPLETE_MOVIE{}),
            Self::CMSG_QUERY_INSPECT_ACHIEVEMENTS(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_DISMISS_CONTROLLED_VEHICLE => crate::Message::to_test_case_string(&CMSG_DISMISS_CONTROLLED_VEHICLE{}),
            Self::CMSG_CHAR_CUSTOMIZE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_REQUEST_VEHICLE_EXIT => crate::Message::to_test_case_string(&CMSG_REQUEST_VEHICLE_EXIT{}),
            Self::CMSG_REQUEST_VEHICLE_PREV_SEAT => crate::Message::to_test_case_string(&CMSG_REQUEST_VEHICLE_PREV_SEAT{}),
            Self::CMSG_REQUEST_VEHICLE_NEXT_SEAT => crate::Message::to_test_case_string(&CMSG_REQUEST_VEHICLE_NEXT_SEAT{}),
            Self::CMSG_REQUEST_VEHICLE_SWITCH_SEAT(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_PET_LEARN_TALENT(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_GAMEOBJ_REPORT_USE(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_REMOVE_GLYPH(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_DISMISS_CRITTER(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_AUCTION_LIST_PENDING_SALES(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_ENABLETAXI(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_CHANGE_SEATS_ON_CONTROLLED_VEHICLE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_HEARTH_AND_RESURRECT => crate::Message::to_test_case_string(&CMSG_HEARTH_AND_RESURRECT{}),
            Self::CMSG_PLAYER_VEHICLE_ENTER(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_CONTROLLER_EJECT_PASSENGER(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_ITEM_REFUND_INFO(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_ITEM_REFUND(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_CORPSE_MAP_POSITION_QUERY(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_CALENDAR_EVENT_SIGNUP(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_EQUIPMENT_SET_SAVE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_UPDATE_PROJECTILE_POSITION(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_LEARN_PREVIEW_TALENTS(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_LEARN_PREVIEW_TALENTS_PET(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_MOVE_GRAVITY_DISABLE_ACK(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_MOVE_GRAVITY_ENABLE_ACK(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_EQUIPMENT_SET_USE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_CHAR_FACTION_CHANGE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_BATTLEFIELD_MGR_ENTRY_INVITE_RESPONSE(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_BATTLEFIELD_MGR_QUEUE_INVITE_RESPONSE(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_BATTLEFIELD_MGR_EXIT_REQUEST(c) => crate::Message::to_test_case_string(c),
            Self::MSG_SET_RAID_DIFFICULTY(c) => crate::Message::to_test_case_string(c),
            Self::CMSG_GMRESPONSE_RESOLVE => crate::Message::to_test_case_string(&CMSG_GMRESPONSE_RESOLVE{}),
            Self::CMSG_WORLD_STATE_UI_TIMER_UPDATE => crate::Message::to_test_case_string(&CMSG_WORLD_STATE_UI_TIMER_UPDATE{}),
            Self::CMSG_CHAR_RACE_CHANGE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_READY_FOR_ACCOUNT_DATA_TIMES => crate::Message::to_test_case_string(&CMSG_READY_FOR_ACCOUNT_DATA_TIMES{}),
            Self::CMSG_QUERY_QUESTS_COMPLETED => crate::Message::to_test_case_string(&CMSG_QUERY_QUESTS_COMPLETED{}),
            Self::CMSG_GM_REPORT_LAG(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_MOVE_SET_COLLISION_HGT_ACK(c) => crate::Message::to_test_case_string(c.as_ref()),
            _ => None,
        }
    }

    #[cfg(feature = "print-testcase")]
    pub const fn message_name(&self) -> &'static str {
        match self {
            Self::MSG_MOVE_START_FORWARD(_) => "MSG_MOVE_START_FORWARD",
            Self::MSG_MOVE_START_BACKWARD(_) => "MSG_MOVE_START_BACKWARD",
            Self::MSG_MOVE_STOP(_) => "MSG_MOVE_STOP",
            Self::MSG_MOVE_START_STRAFE_LEFT(_) => "MSG_MOVE_START_STRAFE_LEFT",
            Self::MSG_MOVE_START_STRAFE_RIGHT(_) => "MSG_MOVE_START_STRAFE_RIGHT",
            Self::MSG_MOVE_STOP_STRAFE(_) => "MSG_MOVE_STOP_STRAFE",
            Self::MSG_MOVE_JUMP(_) => "MSG_MOVE_JUMP",
            Self::MSG_MOVE_START_TURN_LEFT(_) => "MSG_MOVE_START_TURN_LEFT",
            Self::MSG_MOVE_START_TURN_RIGHT(_) => "MSG_MOVE_START_TURN_RIGHT",
            Self::MSG_MOVE_STOP_TURN(_) => "MSG_MOVE_STOP_TURN",
            Self::MSG_MOVE_START_PITCH_UP(_) => "MSG_MOVE_START_PITCH_UP",
            Self::MSG_MOVE_START_PITCH_DOWN(_) => "MSG_MOVE_START_PITCH_DOWN",
            Self::MSG_MOVE_STOP_PITCH(_) => "MSG_MOVE_STOP_PITCH",
            Self::MSG_MOVE_SET_RUN_MODE(_) => "MSG_MOVE_SET_RUN_MODE",
            Self::MSG_MOVE_SET_WALK_MODE(_) => "MSG_MOVE_SET_WALK_MODE",
            Self::MSG_MOVE_FALL_LAND(_) => "MSG_MOVE_FALL_LAND",
            Self::MSG_MOVE_START_SWIM(_) => "MSG_MOVE_START_SWIM",
            Self::MSG_MOVE_STOP_SWIM(_) => "MSG_MOVE_STOP_SWIM",
            Self::MSG_MOVE_SET_FACING(_) => "MSG_MOVE_SET_FACING",
            Self::MSG_MOVE_SET_PITCH(_) => "MSG_MOVE_SET_PITCH",
            Self::MSG_MOVE_WORLDPORT_ACK => "MSG_MOVE_WORLDPORT_ACK",
            Self::MSG_MOVE_HEARTBEAT(_) => "MSG_MOVE_HEARTBEAT",
            Self::MSG_MOVE_HOVER(_) => "MSG_MOVE_HOVER",
            Self::MSG_PETITION_DECLINE(_) => "MSG_PETITION_DECLINE",
            Self::MSG_TABARDVENDOR_ACTIVATE(_) => "MSG_TABARDVENDOR_ACTIVATE",
            Self::MSG_QUEST_PUSH_RESULT(_) => "MSG_QUEST_PUSH_RESULT",
            Self::MSG_MOVE_WATER_WALK(_) => "MSG_MOVE_WATER_WALK",
            Self::MSG_PETITION_RENAME(_) => "MSG_PETITION_RENAME",
            Self::MSG_MOVE_START_ASCEND(_) => "MSG_MOVE_START_ASCEND",
            Self::MSG_MOVE_STOP_ASCEND(_) => "MSG_MOVE_STOP_ASCEND",
            Self::MSG_MOVE_SET_FLIGHT_BACK_SPEED(_) => "MSG_MOVE_SET_FLIGHT_BACK_SPEED",
            Self::MSG_MOVE_START_DESCEND(_) => "MSG_MOVE_START_DESCEND",
            Self::CMSG_CALENDAR_GET_NUM_PENDING => "CMSG_CALENDAR_GET_NUM_PENDING",
            Self::CMSG_BOOTME => "CMSG_BOOTME",
            Self::CMSG_DBLOOKUP(_) => "CMSG_DBLOOKUP",
            Self::CMSG_WORLD_TELEPORT(_) => "CMSG_WORLD_TELEPORT",
            Self::CMSG_TELEPORT_TO_UNIT(_) => "CMSG_TELEPORT_TO_UNIT",
            Self::CMSG_CHAR_CREATE(_) => "CMSG_CHAR_CREATE",
            Self::CMSG_CHAR_ENUM => "CMSG_CHAR_ENUM",
            Self::CMSG_CHAR_DELETE(_) => "CMSG_CHAR_DELETE",
            Self::CMSG_PLAYER_LOGIN(_) => "CMSG_PLAYER_LOGIN",
            Self::CMSG_PLAYER_LOGOUT => "CMSG_PLAYER_LOGOUT",
            Self::CMSG_LOGOUT_REQUEST => "CMSG_LOGOUT_REQUEST",
            Self::CMSG_LOGOUT_CANCEL => "CMSG_LOGOUT_CANCEL",
            Self::CMSG_NAME_QUERY(_) => "CMSG_NAME_QUERY",
            Self::CMSG_PET_NAME_QUERY(_) => "CMSG_PET_NAME_QUERY",
            Self::CMSG_GUILD_QUERY(_) => "CMSG_GUILD_QUERY",
            Self::CMSG_ITEM_QUERY_SINGLE(_) => "CMSG_ITEM_QUERY_SINGLE",
            Self::CMSG_PAGE_TEXT_QUERY(_) => "CMSG_PAGE_TEXT_QUERY",
            Self::CMSG_QUEST_QUERY(_) => "CMSG_QUEST_QUERY",
            Self::CMSG_GAMEOBJECT_QUERY(_) => "CMSG_GAMEOBJECT_QUERY",
            Self::CMSG_CREATURE_QUERY(_) => "CMSG_CREATURE_QUERY",
            Self::CMSG_WHO(_) => "CMSG_WHO",
            Self::CMSG_WHOIS(_) => "CMSG_WHOIS",
            Self::CMSG_CONTACT_LIST(_) => "CMSG_CONTACT_LIST",
            Self::CMSG_ADD_FRIEND(_) => "CMSG_ADD_FRIEND",
            Self::CMSG_DEL_FRIEND(_) => "CMSG_DEL_FRIEND",
            Self::CMSG_SET_CONTACT_NOTES(_) => "CMSG_SET_CONTACT_NOTES",
            Self::CMSG_ADD_IGNORE(_) => "CMSG_ADD_IGNORE",
            Self::CMSG_DEL_IGNORE(_) => "CMSG_DEL_IGNORE",
            Self::CMSG_GROUP_INVITE(_) => "CMSG_GROUP_INVITE",
            Self::CMSG_GROUP_CANCEL => "CMSG_GROUP_CANCEL",
            Self::CMSG_GROUP_ACCEPT => "CMSG_GROUP_ACCEPT",
            Self::CMSG_GROUP_DECLINE => "CMSG_GROUP_DECLINE",
            Self::CMSG_GROUP_UNINVITE(_) => "CMSG_GROUP_UNINVITE",
            Self::CMSG_GROUP_UNINVITE_GUID(_) => "CMSG_GROUP_UNINVITE_GUID",
            Self::CMSG_GROUP_SET_LEADER(_) => "CMSG_GROUP_SET_LEADER",
            Self::CMSG_LOOT_METHOD(_) => "CMSG_LOOT_METHOD",
            Self::CMSG_GROUP_DISBAND => "CMSG_GROUP_DISBAND",
            Self::CMSG_GUILD_CREATE(_) => "CMSG_GUILD_CREATE",
            Self::CMSG_GUILD_INVITE(_) => "CMSG_GUILD_INVITE",
            Self::CMSG_GUILD_ACCEPT => "CMSG_GUILD_ACCEPT",
            Self::CMSG_GUILD_DECLINE => "CMSG_GUILD_DECLINE",
            Self::CMSG_GUILD_INFO => "CMSG_GUILD_INFO",
            Self::CMSG_GUILD_ROSTER => "CMSG_GUILD_ROSTER",
            Self::CMSG_GUILD_PROMOTE(_) => "CMSG_GUILD_PROMOTE",
            Self::CMSG_GUILD_DEMOTE(_) => "CMSG_GUILD_DEMOTE",
            Self::CMSG_GUILD_LEAVE => "CMSG_GUILD_LEAVE",
            Self::CMSG_GUILD_REMOVE(_) => "CMSG_GUILD_REMOVE",
            Self::CMSG_GUILD_DISBAND => "CMSG_GUILD_DISBAND",
            Self::CMSG_GUILD_LEADER(_) => "CMSG_GUILD_LEADER",
            Self::CMSG_GUILD_MOTD(_) => "CMSG_GUILD_MOTD",
            Self::CMSG_MESSAGECHAT(_) => "CMSG_MESSAGECHAT",
            Self::CMSG_JOIN_CHANNEL(_) => "CMSG_JOIN_CHANNEL",
            Self::CMSG_LEAVE_CHANNEL(_) => "CMSG_LEAVE_CHANNEL",
            Self::CMSG_CHANNEL_LIST(_) => "CMSG_CHANNEL_LIST",
            Self::CMSG_CHANNEL_PASSWORD(_) => "CMSG_CHANNEL_PASSWORD",
            Self::CMSG_CHANNEL_SET_OWNER(_) => "CMSG_CHANNEL_SET_OWNER",
            Self::CMSG_CHANNEL_OWNER(_) => "CMSG_CHANNEL_OWNER",
            Self::CMSG_CHANNEL_MODERATOR(_) => "CMSG_CHANNEL_MODERATOR",
            Self::CMSG_CHANNEL_UNMODERATOR(_) => "CMSG_CHANNEL_UNMODERATOR",
            Self::CMSG_CHANNEL_MUTE(_) => "CMSG_CHANNEL_MUTE",
            Self::CMSG_CHANNEL_UNMUTE(_) => "CMSG_CHANNEL_UNMUTE",
            Self::CMSG_CHANNEL_INVITE(_) => "CMSG_CHANNEL_INVITE",
            Self::CMSG_CHANNEL_KICK(_) => "CMSG_CHANNEL_KICK",
            Self::CMSG_CHANNEL_BAN(_) => "CMSG_CHANNEL_BAN",
            Self::CMSG_CHANNEL_UNBAN(_) => "CMSG_CHANNEL_UNBAN",
            Self::CMSG_CHANNEL_ANNOUNCEMENTS(_) => "CMSG_CHANNEL_ANNOUNCEMENTS",
            Self::CMSG_CHANNEL_MODERATE(_) => "CMSG_CHANNEL_MODERATE",
            Self::CMSG_USE_ITEM(_) => "CMSG_USE_ITEM",
            Self::CMSG_OPEN_ITEM(_) => "CMSG_OPEN_ITEM",
            Self::CMSG_READ_ITEM(_) => "CMSG_READ_ITEM",
            Self::CMSG_GAMEOBJ_USE(_) => "CMSG_GAMEOBJ_USE",
            Self::CMSG_AREATRIGGER(_) => "CMSG_AREATRIGGER",
            Self::MSG_MOVE_TELEPORT(_) => "MSG_MOVE_TELEPORT_Server",
            Self::MSG_MOVE_TELEPORT_ACK(_) => "MSG_MOVE_TELEPORT_ACK_Client",
            Self::CMSG_MOVE_SET_RAW_POSITION(_) => "CMSG_MOVE_SET_RAW_POSITION",
            Self::CMSG_FORCE_RUN_SPEED_CHANGE_ACK(_) => "CMSG_FORCE_RUN_SPEED_CHANGE_ACK",
            Self::CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACK(_) => "CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACK",
            Self::CMSG_FORCE_SWIM_SPEED_CHANGE_ACK(_) => "CMSG_FORCE_SWIM_SPEED_CHANGE_ACK",
            Self::CMSG_FORCE_MOVE_ROOT_ACK(_) => "CMSG_FORCE_MOVE_ROOT_ACK",
            Self::CMSG_FORCE_MOVE_UNROOT_ACK(_) => "CMSG_FORCE_MOVE_UNROOT_ACK",
            Self::CMSG_MOVE_KNOCK_BACK_ACK(_) => "CMSG_MOVE_KNOCK_BACK_ACK",
            Self::CMSG_MOVE_HOVER_ACK(_) => "CMSG_MOVE_HOVER_ACK",
            Self::CMSG_NEXT_CINEMATIC_CAMERA => "CMSG_NEXT_CINEMATIC_CAMERA",
            Self::CMSG_COMPLETE_CINEMATIC => "CMSG_COMPLETE_CINEMATIC",
            Self::CMSG_TUTORIAL_FLAG(_) => "CMSG_TUTORIAL_FLAG",
            Self::CMSG_TUTORIAL_CLEAR => "CMSG_TUTORIAL_CLEAR",
            Self::CMSG_TUTORIAL_RESET => "CMSG_TUTORIAL_RESET",
            Self::CMSG_STANDSTATECHANGE(_) => "CMSG_STANDSTATECHANGE",
            Self::CMSG_EMOTE(_) => "CMSG_EMOTE",
            Self::CMSG_TEXT_EMOTE(_) => "CMSG_TEXT_EMOTE",
            Self::CMSG_AUTOSTORE_LOOT_ITEM(_) => "CMSG_AUTOSTORE_LOOT_ITEM",
            Self::CMSG_AUTOEQUIP_ITEM(_) => "CMSG_AUTOEQUIP_ITEM",
            Self::CMSG_AUTOSTORE_BAG_ITEM(_) => "CMSG_AUTOSTORE_BAG_ITEM",
            Self::CMSG_SWAP_ITEM(_) => "CMSG_SWAP_ITEM",
            Self::CMSG_SWAP_INV_ITEM(_) => "CMSG_SWAP_INV_ITEM",
            Self::CMSG_SPLIT_ITEM(_) => "CMSG_SPLIT_ITEM",
            Self::CMSG_AUTOEQUIP_ITEM_SLOT(_) => "CMSG_AUTOEQUIP_ITEM_SLOT",
            Self::CMSG_DESTROYITEM(_) => "CMSG_DESTROYITEM",
            Self::CMSG_INSPECT(_) => "CMSG_INSPECT",
            Self::CMSG_INITIATE_TRADE(_) => "CMSG_INITIATE_TRADE",
            Self::CMSG_BEGIN_TRADE => "CMSG_BEGIN_TRADE",
            Self::CMSG_BUSY_TRADE => "CMSG_BUSY_TRADE",
            Self::CMSG_IGNORE_TRADE => "CMSG_IGNORE_TRADE",
            Self::CMSG_ACCEPT_TRADE(_) => "CMSG_ACCEPT_TRADE",
            Self::CMSG_UNACCEPT_TRADE => "CMSG_UNACCEPT_TRADE",
            Self::CMSG_CANCEL_TRADE => "CMSG_CANCEL_TRADE",
            Self::CMSG_SET_TRADE_ITEM(_) => "CMSG_SET_TRADE_ITEM",
            Self::CMSG_CLEAR_TRADE_ITEM(_) => "CMSG_CLEAR_TRADE_ITEM",
            Self::CMSG_SET_TRADE_GOLD(_) => "CMSG_SET_TRADE_GOLD",
            Self::CMSG_SET_FACTION_ATWAR(_) => "CMSG_SET_FACTION_ATWAR",
            Self::CMSG_SET_ACTION_BUTTON(_) => "CMSG_SET_ACTION_BUTTON",
            Self::CMSG_CAST_SPELL(_) => "CMSG_CAST_SPELL",
            Self::CMSG_CANCEL_CAST(_) => "CMSG_CANCEL_CAST",
            Self::CMSG_CANCEL_AURA(_) => "CMSG_CANCEL_AURA",
            Self::CMSG_CANCEL_CHANNELLING(_) => "CMSG_CANCEL_CHANNELLING",
            Self::CMSG_SET_SELECTION(_) => "CMSG_SET_SELECTION",
            Self::CMSG_DELETEEQUIPMENT_SET(_) => "CMSG_DELETEEQUIPMENT_SET",
            Self::CMSG_INSTANCE_LOCK_RESPONSE(_) => "CMSG_INSTANCE_LOCK_RESPONSE",
            Self::CMSG_ATTACKSWING(_) => "CMSG_ATTACKSWING",
            Self::CMSG_ATTACKSTOP => "CMSG_ATTACKSTOP",
            Self::CMSG_REPOP_REQUEST => "CMSG_REPOP_REQUEST",
            Self::CMSG_RESURRECT_RESPONSE(_) => "CMSG_RESURRECT_RESPONSE",
            Self::CMSG_LOOT(_) => "CMSG_LOOT",
            Self::CMSG_LOOT_MONEY => "CMSG_LOOT_MONEY",
            Self::CMSG_LOOT_RELEASE(_) => "CMSG_LOOT_RELEASE",
            Self::CMSG_DUEL_ACCEPTED(_) => "CMSG_DUEL_ACCEPTED",
            Self::CMSG_DUEL_CANCELLED(_) => "CMSG_DUEL_CANCELLED",
            Self::CMSG_MOUNTSPECIAL_ANIM => "CMSG_MOUNTSPECIAL_ANIM",
            Self::CMSG_PET_SET_ACTION(_) => "CMSG_PET_SET_ACTION",
            Self::CMSG_PET_ACTION(_) => "CMSG_PET_ACTION",
            Self::CMSG_PET_ABANDON(_) => "CMSG_PET_ABANDON",
            Self::CMSG_PET_RENAME(_) => "CMSG_PET_RENAME",
            Self::CMSG_GOSSIP_HELLO(_) => "CMSG_GOSSIP_HELLO",
            Self::CMSG_GOSSIP_SELECT_OPTION(_) => "CMSG_GOSSIP_SELECT_OPTION",
            Self::CMSG_NPC_TEXT_QUERY(_) => "CMSG_NPC_TEXT_QUERY",
            Self::CMSG_QUESTGIVER_STATUS_QUERY(_) => "CMSG_QUESTGIVER_STATUS_QUERY",
            Self::CMSG_QUESTGIVER_HELLO(_) => "CMSG_QUESTGIVER_HELLO",
            Self::CMSG_QUESTGIVER_QUERY_QUEST(_) => "CMSG_QUESTGIVER_QUERY_QUEST",
            Self::CMSG_QUESTGIVER_QUEST_AUTOLAUNCH => "CMSG_QUESTGIVER_QUEST_AUTOLAUNCH",
            Self::CMSG_QUESTGIVER_ACCEPT_QUEST(_) => "CMSG_QUESTGIVER_ACCEPT_QUEST",
            Self::CMSG_QUESTGIVER_COMPLETE_QUEST(_) => "CMSG_QUESTGIVER_COMPLETE_QUEST",
            Self::CMSG_QUESTGIVER_REQUEST_REWARD(_) => "CMSG_QUESTGIVER_REQUEST_REWARD",
            Self::CMSG_QUESTGIVER_CHOOSE_REWARD(_) => "CMSG_QUESTGIVER_CHOOSE_REWARD",
            Self::CMSG_QUESTGIVER_CANCEL => "CMSG_QUESTGIVER_CANCEL",
            Self::CMSG_QUESTLOG_SWAP_QUEST(_) => "CMSG_QUESTLOG_SWAP_QUEST",
            Self::CMSG_QUESTLOG_REMOVE_QUEST(_) => "CMSG_QUESTLOG_REMOVE_QUEST",
            Self::CMSG_QUEST_CONFIRM_ACCEPT(_) => "CMSG_QUEST_CONFIRM_ACCEPT",
            Self::CMSG_PUSHQUESTTOPARTY(_) => "CMSG_PUSHQUESTTOPARTY",
            Self::CMSG_LIST_INVENTORY(_) => "CMSG_LIST_INVENTORY",
            Self::CMSG_SELL_ITEM(_) => "CMSG_SELL_ITEM",
            Self::CMSG_BUY_ITEM(_) => "CMSG_BUY_ITEM",
            Self::CMSG_BUY_ITEM_IN_SLOT(_) => "CMSG_BUY_ITEM_IN_SLOT",
            Self::CMSG_TAXINODE_STATUS_QUERY(_) => "CMSG_TAXINODE_STATUS_QUERY",
            Self::CMSG_TAXIQUERYAVAILABLENODES(_) => "CMSG_TAXIQUERYAVAILABLENODES",
            Self::CMSG_ACTIVATETAXI(_) => "CMSG_ACTIVATETAXI",
            Self::CMSG_TRAINER_LIST(_) => "CMSG_TRAINER_LIST",
            Self::CMSG_TRAINER_BUY_SPELL(_) => "CMSG_TRAINER_BUY_SPELL",
            Self::CMSG_BINDER_ACTIVATE(_) => "CMSG_BINDER_ACTIVATE",
            Self::CMSG_BANKER_ACTIVATE(_) => "CMSG_BANKER_ACTIVATE",
            Self::CMSG_BUY_BANK_SLOT(_) => "CMSG_BUY_BANK_SLOT",
            Self::CMSG_PETITION_SHOWLIST(_) => "CMSG_PETITION_SHOWLIST",
            Self::CMSG_PETITION_BUY(_) => "CMSG_PETITION_BUY",
            Self::CMSG_PETITION_SHOW_SIGNATURES(_) => "CMSG_PETITION_SHOW_SIGNATURES",
            Self::CMSG_PETITION_SIGN(_) => "CMSG_PETITION_SIGN",
            Self::CMSG_OFFER_PETITION(_) => "CMSG_OFFER_PETITION",
            Self::CMSG_TURN_IN_PETITION(_) => "CMSG_TURN_IN_PETITION",
            Self::CMSG_PETITION_QUERY(_) => "CMSG_PETITION_QUERY",
            Self::CMSG_BUG(_) => "CMSG_BUG",
            Self::CMSG_PLAYED_TIME(_) => "CMSG_PLAYED_TIME",
            Self::CMSG_QUERY_TIME => "CMSG_QUERY_TIME",
            Self::CMSG_RECLAIM_CORPSE(_) => "CMSG_RECLAIM_CORPSE",
            Self::CMSG_WRAP_ITEM(_) => "CMSG_WRAP_ITEM",
            Self::MSG_MINIMAP_PING(_) => "MSG_MINIMAP_PING_Client",
            Self::CMSG_PING(_) => "CMSG_PING",
            Self::CMSG_SETSHEATHED(_) => "CMSG_SETSHEATHED",
            Self::CMSG_QUEST_POI_QUERY(_) => "CMSG_QUEST_POI_QUERY",
            Self::CMSG_AUTH_SESSION(_) => "CMSG_AUTH_SESSION",
            Self::CMSG_PET_CAST_SPELL(_) => "CMSG_PET_CAST_SPELL",
            Self::MSG_SAVE_GUILD_EMBLEM(_) => "MSG_SAVE_GUILD_EMBLEM_Client",
            Self::CMSG_ZONEUPDATE(_) => "CMSG_ZONEUPDATE",
            Self::MSG_RANDOM_ROLL(_) => "MSG_RANDOM_ROLL_Client",
            Self::CMSG_UNLEARN_SKILL(_) => "CMSG_UNLEARN_SKILL",
            Self::CMSG_GMTICKET_CREATE(_) => "CMSG_GMTICKET_CREATE",
            Self::CMSG_GMTICKET_UPDATETEXT(_) => "CMSG_GMTICKET_UPDATETEXT",
            Self::CMSG_REQUEST_ACCOUNT_DATA(_) => "CMSG_REQUEST_ACCOUNT_DATA",
            Self::CMSG_UPDATE_ACCOUNT_DATA(_) => "CMSG_UPDATE_ACCOUNT_DATA",
            Self::CMSG_GMTICKET_GETTICKET => "CMSG_GMTICKET_GETTICKET",
            Self::CMSG_UNLEARN_TALENTS => "CMSG_UNLEARN_TALENTS",
            Self::MSG_CORPSE_QUERY => "MSG_CORPSE_QUERY_Client",
            Self::CMSG_GMTICKET_DELETETICKET => "CMSG_GMTICKET_DELETETICKET",
            Self::CMSG_GMTICKET_SYSTEMSTATUS => "CMSG_GMTICKET_SYSTEMSTATUS",
            Self::CMSG_SPIRIT_HEALER_ACTIVATE(_) => "CMSG_SPIRIT_HEALER_ACTIVATE",
            Self::CMSG_CHAT_IGNORED(_) => "CMSG_CHAT_IGNORED",
            Self::CMSG_GUILD_RANK(_) => "CMSG_GUILD_RANK",
            Self::CMSG_GUILD_ADD_RANK(_) => "CMSG_GUILD_ADD_RANK",
            Self::CMSG_GUILD_DEL_RANK => "CMSG_GUILD_DEL_RANK",
            Self::CMSG_GUILD_SET_PUBLIC_NOTE(_) => "CMSG_GUILD_SET_PUBLIC_NOTE",
            Self::CMSG_GUILD_SET_OFFICER_NOTE(_) => "CMSG_GUILD_SET_OFFICER_NOTE",
            Self::CMSG_SEND_MAIL(_) => "CMSG_SEND_MAIL",
            Self::CMSG_GET_MAIL_LIST(_) => "CMSG_GET_MAIL_LIST",
            Self::CMSG_BATTLEFIELD_LIST(_) => "CMSG_BATTLEFIELD_LIST",
            Self::CMSG_ITEM_TEXT_QUERY(_) => "CMSG_ITEM_TEXT_QUERY",
            Self::CMSG_MAIL_TAKE_MONEY(_) => "CMSG_MAIL_TAKE_MONEY",
            Self::CMSG_MAIL_TAKE_ITEM(_) => "CMSG_MAIL_TAKE_ITEM",
            Self::CMSG_MAIL_MARK_AS_READ(_) => "CMSG_MAIL_MARK_AS_READ",
            Self::CMSG_MAIL_RETURN_TO_SENDER(_) => "CMSG_MAIL_RETURN_TO_SENDER",
            Self::CMSG_MAIL_DELETE(_) => "CMSG_MAIL_DELETE",
            Self::CMSG_MAIL_CREATE_TEXT_ITEM(_) => "CMSG_MAIL_CREATE_TEXT_ITEM",
            Self::CMSG_LEARN_TALENT(_) => "CMSG_LEARN_TALENT",
            Self::CMSG_TOGGLE_PVP(_) => "CMSG_TOGGLE_PVP",
            Self::MSG_AUCTION_HELLO(_) => "MSG_AUCTION_HELLO_Client",
            Self::CMSG_AUCTION_SELL_ITEM(_) => "CMSG_AUCTION_SELL_ITEM",
            Self::CMSG_AUCTION_REMOVE_ITEM(_) => "CMSG_AUCTION_REMOVE_ITEM",
            Self::CMSG_AUCTION_LIST_ITEMS(_) => "CMSG_AUCTION_LIST_ITEMS",
            Self::CMSG_AUCTION_LIST_OWNER_ITEMS(_) => "CMSG_AUCTION_LIST_OWNER_ITEMS",
            Self::CMSG_AUCTION_PLACE_BID(_) => "CMSG_AUCTION_PLACE_BID",
            Self::CMSG_AUCTION_LIST_BIDDER_ITEMS(_) => "CMSG_AUCTION_LIST_BIDDER_ITEMS",
            Self::CMSG_SET_AMMO(_) => "CMSG_SET_AMMO",
            Self::CMSG_SET_ACTIVE_MOVER(_) => "CMSG_SET_ACTIVE_MOVER",
            Self::CMSG_PET_CANCEL_AURA(_) => "CMSG_PET_CANCEL_AURA",
            Self::CMSG_CANCEL_AUTO_REPEAT_SPELL => "CMSG_CANCEL_AUTO_REPEAT_SPELL",
            Self::MSG_LIST_STABLED_PETS(_) => "MSG_LIST_STABLED_PETS_Client",
            Self::CMSG_STABLE_PET(_) => "CMSG_STABLE_PET",
            Self::CMSG_UNSTABLE_PET(_) => "CMSG_UNSTABLE_PET",
            Self::CMSG_BUY_STABLE_SLOT(_) => "CMSG_BUY_STABLE_SLOT",
            Self::CMSG_STABLE_SWAP_PET(_) => "CMSG_STABLE_SWAP_PET",
            Self::CMSG_REQUEST_PET_INFO => "CMSG_REQUEST_PET_INFO",
            Self::CMSG_FAR_SIGHT(_) => "CMSG_FAR_SIGHT",
            Self::CMSG_GROUP_CHANGE_SUB_GROUP(_) => "CMSG_GROUP_CHANGE_SUB_GROUP",
            Self::CMSG_REQUEST_PARTY_MEMBER_STATS(_) => "CMSG_REQUEST_PARTY_MEMBER_STATS",
            Self::CMSG_GROUP_SWAP_SUB_GROUP(_) => "CMSG_GROUP_SWAP_SUB_GROUP",
            Self::CMSG_AUTOSTORE_BANK_ITEM(_) => "CMSG_AUTOSTORE_BANK_ITEM",
            Self::CMSG_AUTOBANK_ITEM(_) => "CMSG_AUTOBANK_ITEM",
            Self::MSG_QUERY_NEXT_MAIL_TIME => "MSG_QUERY_NEXT_MAIL_TIME_Client",
            Self::CMSG_GROUP_RAID_CONVERT => "CMSG_GROUP_RAID_CONVERT",
            Self::CMSG_GROUP_ASSISTANT_LEADER(_) => "CMSG_GROUP_ASSISTANT_LEADER",
            Self::CMSG_BUYBACK_ITEM(_) => "CMSG_BUYBACK_ITEM",
            Self::CMSG_SET_SAVED_INSTANCE_EXTEND(_) => "CMSG_SET_SAVED_INSTANCE_EXTEND",
            Self::CMSG_LFG_GET_STATUS => "CMSG_LFG_GET_STATUS",
            Self::CMSG_GMTICKETSYSTEM_TOGGLE => "CMSG_GMTICKETSYSTEM_TOGGLE",
            Self::CMSG_CANCEL_GROWTH_AURA => "CMSG_CANCEL_GROWTH_AURA",
            Self::CMSG_LOOT_ROLL(_) => "CMSG_LOOT_ROLL",
            Self::CMSG_LOOT_MASTER_GIVE(_) => "CMSG_LOOT_MASTER_GIVE",
            Self::CMSG_REPAIR_ITEM(_) => "CMSG_REPAIR_ITEM",
            Self::MSG_TALENT_WIPE_CONFIRM(_) => "MSG_TALENT_WIPE_CONFIRM_Client",
            Self::CMSG_SUMMON_RESPONSE(_) => "CMSG_SUMMON_RESPONSE",
            Self::CMSG_SELF_RES => "CMSG_SELF_RES",
            Self::CMSG_TOGGLE_HELM => "CMSG_TOGGLE_HELM",
            Self::CMSG_TOGGLE_CLOAK => "CMSG_TOGGLE_CLOAK",
            Self::CMSG_SET_ACTIONBAR_TOGGLES(_) => "CMSG_SET_ACTIONBAR_TOGGLES",
            Self::CMSG_ITEM_NAME_QUERY(_) => "CMSG_ITEM_NAME_QUERY",
            Self::CMSG_CHAR_RENAME(_) => "CMSG_CHAR_RENAME",
            Self::CMSG_MOVE_SPLINE_DONE(_) => "CMSG_MOVE_SPLINE_DONE",
            Self::CMSG_MOVE_FALL_RESET(_) => "CMSG_MOVE_FALL_RESET",
            Self::CMSG_REQUEST_RAID_INFO => "CMSG_REQUEST_RAID_INFO",
            Self::CMSG_MOVE_TIME_SKIPPED(_) => "CMSG_MOVE_TIME_SKIPPED",
            Self::CMSG_MOVE_FEATHER_FALL_ACK(_) => "CMSG_MOVE_FEATHER_FALL_ACK",
            Self::CMSG_MOVE_WATER_WALK_ACK(_) => "CMSG_MOVE_WATER_WALK_ACK",
            Self::CMSG_MOVE_NOT_ACTIVE_MOVER(_) => "CMSG_MOVE_NOT_ACTIVE_MOVER",
            Self::CMSG_BATTLEFIELD_STATUS => "CMSG_BATTLEFIELD_STATUS",
            Self::CMSG_BATTLEFIELD_PORT(_) => "CMSG_BATTLEFIELD_PORT",
            Self::MSG_INSPECT_HONOR_STATS(_) => "MSG_INSPECT_HONOR_STATS_Client",
            Self::CMSG_BATTLEMASTER_HELLO(_) => "CMSG_BATTLEMASTER_HELLO",
            Self::CMSG_FORCE_WALK_SPEED_CHANGE_ACK(_) => "CMSG_FORCE_WALK_SPEED_CHANGE_ACK",
            Self::CMSG_FORCE_SWIM_BACK_SPEED_CHANGE_ACK(_) => "CMSG_FORCE_SWIM_BACK_SPEED_CHANGE_ACK",
            Self::CMSG_FORCE_TURN_RATE_CHANGE_ACK(_) => "CMSG_FORCE_TURN_RATE_CHANGE_ACK",
            Self::MSG_PVP_LOG_DATA => "MSG_PVP_LOG_DATA_Client",
            Self::CMSG_LEAVE_BATTLEFIELD(_) => "CMSG_LEAVE_BATTLEFIELD",
            Self::CMSG_AREA_SPIRIT_HEALER_QUERY(_) => "CMSG_AREA_SPIRIT_HEALER_QUERY",
            Self::CMSG_AREA_SPIRIT_HEALER_QUEUE(_) => "CMSG_AREA_SPIRIT_HEALER_QUEUE",
            Self::CMSG_WARDEN_DATA(_) => "CMSG_WARDEN_DATA",
            Self::MSG_BATTLEGROUND_PLAYER_POSITIONS => "MSG_BATTLEGROUND_PLAYER_POSITIONS_Client",
            Self::CMSG_PET_STOP_ATTACK(_) => "CMSG_PET_STOP_ATTACK",
            Self::CMSG_BATTLEMASTER_JOIN(_) => "CMSG_BATTLEMASTER_JOIN",
            Self::CMSG_PET_UNLEARN(_) => "CMSG_PET_UNLEARN",
            Self::CMSG_PET_SPELL_AUTOCAST(_) => "CMSG_PET_SPELL_AUTOCAST",
            Self::CMSG_GUILD_INFO_TEXT(_) => "CMSG_GUILD_INFO_TEXT",
            Self::CMSG_ACTIVATETAXIEXPRESS(_) => "CMSG_ACTIVATETAXIEXPRESS",
            Self::CMSG_SET_FACTION_INACTIVE(_) => "CMSG_SET_FACTION_INACTIVE",
            Self::CMSG_SET_WATCHED_FACTION(_) => "CMSG_SET_WATCHED_FACTION",
            Self::CMSG_RESET_INSTANCES => "CMSG_RESET_INSTANCES",
            Self::MSG_RAID_TARGET_UPDATE(_) => "MSG_RAID_TARGET_UPDATE_Client",
            Self::MSG_RAID_READY_CHECK(_) => "MSG_RAID_READY_CHECK_Client",
            Self::MSG_SET_DUNGEON_DIFFICULTY(_) => "MSG_SET_DUNGEON_DIFFICULTY_Client",
            Self::CMSG_GMSURVEY_SUBMIT(_) => "CMSG_GMSURVEY_SUBMIT",
            Self::CMSG_MOVE_SET_CAN_TRANSITION_BETWEEN_SWIM_AND_FLY_ACK(_) => "CMSG_MOVE_SET_CAN_TRANSITION_BETWEEN_SWIM_AND_FLY_ACK",
            Self::CMSG_MOVE_SET_CAN_FLY_ACK(_) => "CMSG_MOVE_SET_CAN_FLY_ACK",
            Self::CMSG_MOVE_SET_FLY(_) => "CMSG_MOVE_SET_FLY",
            Self::CMSG_SOCKET_GEMS(_) => "CMSG_SOCKET_GEMS",
            Self::CMSG_ARENA_TEAM_ROSTER(_) => "CMSG_ARENA_TEAM_ROSTER",
            Self::CMSG_ARENA_TEAM_INVITE(_) => "CMSG_ARENA_TEAM_INVITE",
            Self::CMSG_ARENA_TEAM_ACCEPT => "CMSG_ARENA_TEAM_ACCEPT",
            Self::CMSG_ARENA_TEAM_DECLINE => "CMSG_ARENA_TEAM_DECLINE",
            Self::CMSG_ARENA_TEAM_LEAVE(_) => "CMSG_ARENA_TEAM_LEAVE",
            Self::CMSG_ARENA_TEAM_REMOVE(_) => "CMSG_ARENA_TEAM_REMOVE",
            Self::CMSG_ARENA_TEAM_DISBAND(_) => "CMSG_ARENA_TEAM_DISBAND",
            Self::CMSG_ARENA_TEAM_LEADER(_) => "CMSG_ARENA_TEAM_LEADER",
            Self::CMSG_BATTLEMASTER_JOIN_ARENA(_) => "CMSG_BATTLEMASTER_JOIN_ARENA",
            Self::CMSG_LFG_JOIN(_) => "CMSG_LFG_JOIN",
            Self::CMSG_LFG_LEAVE => "CMSG_LFG_LEAVE",
            Self::CMSG_SEARCH_LFG_JOIN(_) => "CMSG_SEARCH_LFG_JOIN",
            Self::CMSG_SEARCH_LFG_LEAVE(_) => "CMSG_SEARCH_LFG_LEAVE",
            Self::CMSG_LFG_PROPOSAL_RESULT(_) => "CMSG_LFG_PROPOSAL_RESULT",
            Self::CMSG_SET_LFG_COMMENT(_) => "CMSG_SET_LFG_COMMENT",
            Self::CMSG_LFG_SET_ROLES(_) => "CMSG_LFG_SET_ROLES",
            Self::CMSG_LFG_SET_BOOT_VOTE(_) => "CMSG_LFG_SET_BOOT_VOTE",
            Self::CMSG_LFD_PLAYER_LOCK_INFO_REQUEST => "CMSG_LFD_PLAYER_LOCK_INFO_REQUEST",
            Self::CMSG_LFG_TELEPORT(_) => "CMSG_LFG_TELEPORT",
            Self::CMSG_LFD_PARTY_LOCK_INFO_REQUEST => "CMSG_LFD_PARTY_LOCK_INFO_REQUEST",
            Self::CMSG_SET_TITLE(_) => "CMSG_SET_TITLE",
            Self::CMSG_CANCEL_MOUNT_AURA => "CMSG_CANCEL_MOUNT_AURA",
            Self::MSG_INSPECT_ARENA_TEAMS(_) => "MSG_INSPECT_ARENA_TEAMS_Client",
            Self::CMSG_CANCEL_TEMP_ENCHANTMENT(_) => "CMSG_CANCEL_TEMP_ENCHANTMENT",
            Self::CMSG_FORCE_FLIGHT_SPEED_CHANGE_ACK(_) => "CMSG_FORCE_FLIGHT_SPEED_CHANGE_ACK",
            Self::CMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE_ACK(_) => "CMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE_ACK",
            Self::CMSG_SET_TAXI_BENCHMARK_MODE(_) => "CMSG_SET_TAXI_BENCHMARK_MODE",
            Self::CMSG_REALM_SPLIT(_) => "CMSG_REALM_SPLIT",
            Self::CMSG_MOVE_CHNG_TRANSPORT(_) => "CMSG_MOVE_CHNG_TRANSPORT",
            Self::MSG_PARTY_ASSIGNMENT(_) => "MSG_PARTY_ASSIGNMENT_Client",
            Self::CMSG_TIME_SYNC_RESP(_) => "CMSG_TIME_SYNC_RESP",
            Self::MSG_RAID_READY_CHECK_CONFIRM(_) => "MSG_RAID_READY_CHECK_CONFIRM_Client",
            Self::CMSG_VOICE_SESSION_ENABLE(_) => "CMSG_VOICE_SESSION_ENABLE",
            Self::CMSG_COMMENTATOR_ENABLE(_) => "CMSG_COMMENTATOR_ENABLE",
            Self::MSG_RAID_READY_CHECK_FINISHED => "MSG_RAID_READY_CHECK_FINISHED_Client",
            Self::CMSG_COMPLAIN(_) => "CMSG_COMPLAIN",
            Self::CMSG_CHANNEL_DISPLAY_LIST(_) => "CMSG_CHANNEL_DISPLAY_LIST",
            Self::CMSG_SET_ACTIVE_VOICE_CHANNEL(_) => "CMSG_SET_ACTIVE_VOICE_CHANNEL",
            Self::CMSG_GET_CHANNEL_MEMBER_COUNT(_) => "CMSG_GET_CHANNEL_MEMBER_COUNT",
            Self::CMSG_CHANNEL_VOICE_ON => "CMSG_CHANNEL_VOICE_ON",
            Self::CMSG_REPORT_PVP_AFK(_) => "CMSG_REPORT_PVP_AFK",
            Self::CMSG_GUILD_BANKER_ACTIVATE(_) => "CMSG_GUILD_BANKER_ACTIVATE",
            Self::CMSG_GUILD_BANK_QUERY_TAB(_) => "CMSG_GUILD_BANK_QUERY_TAB",
            Self::CMSG_GUILD_BANK_SWAP_ITEMS(_) => "CMSG_GUILD_BANK_SWAP_ITEMS",
            Self::CMSG_GUILD_BANK_BUY_TAB(_) => "CMSG_GUILD_BANK_BUY_TAB",
            Self::CMSG_GUILD_BANK_UPDATE_TAB(_) => "CMSG_GUILD_BANK_UPDATE_TAB",
            Self::CMSG_GUILD_BANK_DEPOSIT_MONEY(_) => "CMSG_GUILD_BANK_DEPOSIT_MONEY",
            Self::CMSG_GUILD_BANK_WITHDRAW_MONEY(_) => "CMSG_GUILD_BANK_WITHDRAW_MONEY",
            Self::MSG_GUILD_BANK_LOG_QUERY(_) => "MSG_GUILD_BANK_LOG_QUERY_Client",
            Self::CMSG_SET_CHANNEL_WATCH(_) => "CMSG_SET_CHANNEL_WATCH",
            Self::CMSG_CLEAR_CHANNEL_WATCH(_) => "CMSG_CLEAR_CHANNEL_WATCH",
            Self::CMSG_SPELLCLICK(_) => "CMSG_SPELLCLICK",
            Self::MSG_GUILD_PERMISSIONS => "MSG_GUILD_PERMISSIONS_Client",
            Self::MSG_GUILD_BANK_MONEY_WITHDRAWN => "MSG_GUILD_BANK_MONEY_WITHDRAWN_Client",
            Self::MSG_GUILD_EVENT_LOG_QUERY => "MSG_GUILD_EVENT_LOG_QUERY_Client",
            Self::CMSG_GET_MIRRORIMAGE_DATA(_) => "CMSG_GET_MIRRORIMAGE_DATA",
            Self::CMSG_KEEP_ALIVE => "CMSG_KEEP_ALIVE",
            Self::CMSG_OPT_OUT_OF_LOOT(_) => "CMSG_OPT_OUT_OF_LOOT",
            Self::MSG_QUERY_GUILD_BANK_TEXT(_) => "MSG_QUERY_GUILD_BANK_TEXT_Client",
            Self::CMSG_SET_GUILD_BANK_TEXT(_) => "CMSG_SET_GUILD_BANK_TEXT",
            Self::CMSG_GRANT_LEVEL(_) => "CMSG_GRANT_LEVEL",
            Self::CMSG_TOTEM_DESTROYED(_) => "CMSG_TOTEM_DESTROYED",
            Self::CMSG_QUESTGIVER_STATUS_MULTIPLE_QUERY => "CMSG_QUESTGIVER_STATUS_MULTIPLE_QUERY",
            Self::CMSG_SET_PLAYER_DECLINED_NAMES(_) => "CMSG_SET_PLAYER_DECLINED_NAMES",
            Self::CMSG_ACCEPT_LEVEL_GRANT(_) => "CMSG_ACCEPT_LEVEL_GRANT",
            Self::CMSG_ALTER_APPEARANCE(_) => "CMSG_ALTER_APPEARANCE",
            Self::CMSG_CALENDAR_GET_CALENDAR => "CMSG_CALENDAR_GET_CALENDAR",
            Self::CMSG_CALENDAR_GET_EVENT(_) => "CMSG_CALENDAR_GET_EVENT",
            Self::CMSG_CALENDAR_GUILD_FILTER(_) => "CMSG_CALENDAR_GUILD_FILTER",
            Self::CMSG_CALENDAR_ARENA_TEAM(_) => "CMSG_CALENDAR_ARENA_TEAM",
            Self::CMSG_CALENDAR_ADD_EVENT(_) => "CMSG_CALENDAR_ADD_EVENT",
            Self::CMSG_CALENDAR_UPDATE_EVENT(_) => "CMSG_CALENDAR_UPDATE_EVENT",
            Self::CMSG_CALENDAR_REMOVE_EVENT(_) => "CMSG_CALENDAR_REMOVE_EVENT",
            Self::CMSG_CALENDAR_COPY_EVENT(_) => "CMSG_CALENDAR_COPY_EVENT",
            Self::CMSG_CALENDAR_EVENT_INVITE(_) => "CMSG_CALENDAR_EVENT_INVITE",
            Self::CMSG_CALENDAR_EVENT_RSVP(_) => "CMSG_CALENDAR_EVENT_RSVP",
            Self::CMSG_CALENDAR_EVENT_REMOVE_INVITE(_) => "CMSG_CALENDAR_EVENT_REMOVE_INVITE",
            Self::CMSG_CALENDAR_EVENT_STATUS(_) => "CMSG_CALENDAR_EVENT_STATUS",
            Self::CMSG_CALENDAR_EVENT_MODERATOR_STATUS(_) => "CMSG_CALENDAR_EVENT_MODERATOR_STATUS",
            Self::CMSG_CALENDAR_COMPLAIN(_) => "CMSG_CALENDAR_COMPLAIN",
            Self::CMSG_UPDATE_MISSILE_TRAJECTORY(_) => "CMSG_UPDATE_MISSILE_TRAJECTORY",
            Self::CMSG_COMPLETE_MOVIE => "CMSG_COMPLETE_MOVIE",
            Self::CMSG_QUERY_INSPECT_ACHIEVEMENTS(_) => "CMSG_QUERY_INSPECT_ACHIEVEMENTS",
            Self::CMSG_DISMISS_CONTROLLED_VEHICLE => "CMSG_DISMISS_CONTROLLED_VEHICLE",
            Self::CMSG_CHAR_CUSTOMIZE(_) => "CMSG_CHAR_CUSTOMIZE",
            Self::CMSG_REQUEST_VEHICLE_EXIT => "CMSG_REQUEST_VEHICLE_EXIT",
            Self::CMSG_REQUEST_VEHICLE_PREV_SEAT => "CMSG_REQUEST_VEHICLE_PREV_SEAT",
            Self::CMSG_REQUEST_VEHICLE_NEXT_SEAT => "CMSG_REQUEST_VEHICLE_NEXT_SEAT",
            Self::CMSG_REQUEST_VEHICLE_SWITCH_SEAT(_) => "CMSG_REQUEST_VEHICLE_SWITCH_SEAT",
            Self::CMSG_PET_LEARN_TALENT(_) => "CMSG_PET_LEARN_TALENT",
            Self::CMSG_GAMEOBJ_REPORT_USE(_) => "CMSG_GAMEOBJ_REPORT_USE",
            Self::CMSG_REMOVE_GLYPH(_) => "CMSG_REMOVE_GLYPH",
            Self::CMSG_DISMISS_CRITTER(_) => "CMSG_DISMISS_CRITTER",
            Self::CMSG_AUCTION_LIST_PENDING_SALES(_) => "CMSG_AUCTION_LIST_PENDING_SALES",
            Self::CMSG_ENABLETAXI(_) => "CMSG_ENABLETAXI",
            Self::CMSG_CHANGE_SEATS_ON_CONTROLLED_VEHICLE(_) => "CMSG_CHANGE_SEATS_ON_CONTROLLED_VEHICLE",
            Self::CMSG_HEARTH_AND_RESURRECT => "CMSG_HEARTH_AND_RESURRECT",
            Self::CMSG_PLAYER_VEHICLE_ENTER(_) => "CMSG_PLAYER_VEHICLE_ENTER",
            Self::CMSG_CONTROLLER_EJECT_PASSENGER(_) => "CMSG_CONTROLLER_EJECT_PASSENGER",
            Self::CMSG_ITEM_REFUND_INFO(_) => "CMSG_ITEM_REFUND_INFO",
            Self::CMSG_ITEM_REFUND(_) => "CMSG_ITEM_REFUND",
            Self::CMSG_CORPSE_MAP_POSITION_QUERY(_) => "CMSG_CORPSE_MAP_POSITION_QUERY",
            Self::CMSG_CALENDAR_EVENT_SIGNUP(_) => "CMSG_CALENDAR_EVENT_SIGNUP",
            Self::CMSG_EQUIPMENT_SET_SAVE(_) => "CMSG_EQUIPMENT_SET_SAVE",
            Self::CMSG_UPDATE_PROJECTILE_POSITION(_) => "CMSG_UPDATE_PROJECTILE_POSITION",
            Self::CMSG_LEARN_PREVIEW_TALENTS(_) => "CMSG_LEARN_PREVIEW_TALENTS",
            Self::CMSG_LEARN_PREVIEW_TALENTS_PET(_) => "CMSG_LEARN_PREVIEW_TALENTS_PET",
            Self::CMSG_MOVE_GRAVITY_DISABLE_ACK(_) => "CMSG_MOVE_GRAVITY_DISABLE_ACK",
            Self::CMSG_MOVE_GRAVITY_ENABLE_ACK(_) => "CMSG_MOVE_GRAVITY_ENABLE_ACK",
            Self::CMSG_EQUIPMENT_SET_USE(_) => "CMSG_EQUIPMENT_SET_USE",
            Self::CMSG_CHAR_FACTION_CHANGE(_) => "CMSG_CHAR_FACTION_CHANGE",
            Self::CMSG_BATTLEFIELD_MGR_ENTRY_INVITE_RESPONSE(_) => "CMSG_BATTLEFIELD_MGR_ENTRY_INVITE_RESPONSE",
            Self::CMSG_BATTLEFIELD_MGR_QUEUE_INVITE_RESPONSE(_) => "CMSG_BATTLEFIELD_MGR_QUEUE_INVITE_RESPONSE",
            Self::CMSG_BATTLEFIELD_MGR_EXIT_REQUEST(_) => "CMSG_BATTLEFIELD_MGR_EXIT_REQUEST",
            Self::MSG_SET_RAID_DIFFICULTY(_) => "MSG_SET_RAID_DIFFICULTY_Client",
            Self::CMSG_GMRESPONSE_RESOLVE => "CMSG_GMRESPONSE_RESOLVE",
            Self::CMSG_WORLD_STATE_UI_TIMER_UPDATE => "CMSG_WORLD_STATE_UI_TIMER_UPDATE",
            Self::CMSG_CHAR_RACE_CHANGE(_) => "CMSG_CHAR_RACE_CHANGE",
            Self::CMSG_READY_FOR_ACCOUNT_DATA_TIMES => "CMSG_READY_FOR_ACCOUNT_DATA_TIMES",
            Self::CMSG_QUERY_QUESTS_COMPLETED => "CMSG_QUERY_QUESTS_COMPLETED",
            Self::CMSG_GM_REPORT_LAG(_) => "CMSG_GM_REPORT_LAG",
            Self::CMSG_MOVE_SET_COLLISION_HGT_ACK(_) => "CMSG_MOVE_SET_COLLISION_HGT_ACK",
        }
    }

}

impl std::fmt::Display for ClientOpcodeMessage {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str(match self {
            ClientOpcodeMessage::MSG_MOVE_START_FORWARD(_) => "MSG_MOVE_START_FORWARD",
            ClientOpcodeMessage::MSG_MOVE_START_BACKWARD(_) => "MSG_MOVE_START_BACKWARD",
            ClientOpcodeMessage::MSG_MOVE_STOP(_) => "MSG_MOVE_STOP",
            ClientOpcodeMessage::MSG_MOVE_START_STRAFE_LEFT(_) => "MSG_MOVE_START_STRAFE_LEFT",
            ClientOpcodeMessage::MSG_MOVE_START_STRAFE_RIGHT(_) => "MSG_MOVE_START_STRAFE_RIGHT",
            ClientOpcodeMessage::MSG_MOVE_STOP_STRAFE(_) => "MSG_MOVE_STOP_STRAFE",
            ClientOpcodeMessage::MSG_MOVE_JUMP(_) => "MSG_MOVE_JUMP",
            ClientOpcodeMessage::MSG_MOVE_START_TURN_LEFT(_) => "MSG_MOVE_START_TURN_LEFT",
            ClientOpcodeMessage::MSG_MOVE_START_TURN_RIGHT(_) => "MSG_MOVE_START_TURN_RIGHT",
            ClientOpcodeMessage::MSG_MOVE_STOP_TURN(_) => "MSG_MOVE_STOP_TURN",
            ClientOpcodeMessage::MSG_MOVE_START_PITCH_UP(_) => "MSG_MOVE_START_PITCH_UP",
            ClientOpcodeMessage::MSG_MOVE_START_PITCH_DOWN(_) => "MSG_MOVE_START_PITCH_DOWN",
            ClientOpcodeMessage::MSG_MOVE_STOP_PITCH(_) => "MSG_MOVE_STOP_PITCH",
            ClientOpcodeMessage::MSG_MOVE_SET_RUN_MODE(_) => "MSG_MOVE_SET_RUN_MODE",
            ClientOpcodeMessage::MSG_MOVE_SET_WALK_MODE(_) => "MSG_MOVE_SET_WALK_MODE",
            ClientOpcodeMessage::MSG_MOVE_FALL_LAND(_) => "MSG_MOVE_FALL_LAND",
            ClientOpcodeMessage::MSG_MOVE_START_SWIM(_) => "MSG_MOVE_START_SWIM",
            ClientOpcodeMessage::MSG_MOVE_STOP_SWIM(_) => "MSG_MOVE_STOP_SWIM",
            ClientOpcodeMessage::MSG_MOVE_SET_FACING(_) => "MSG_MOVE_SET_FACING",
            ClientOpcodeMessage::MSG_MOVE_SET_PITCH(_) => "MSG_MOVE_SET_PITCH",
            ClientOpcodeMessage::MSG_MOVE_WORLDPORT_ACK => "MSG_MOVE_WORLDPORT_ACK",
            ClientOpcodeMessage::MSG_MOVE_HEARTBEAT(_) => "MSG_MOVE_HEARTBEAT",
            ClientOpcodeMessage::MSG_MOVE_HOVER(_) => "MSG_MOVE_HOVER",
            ClientOpcodeMessage::MSG_PETITION_DECLINE(_) => "MSG_PETITION_DECLINE",
            ClientOpcodeMessage::MSG_TABARDVENDOR_ACTIVATE(_) => "MSG_TABARDVENDOR_ACTIVATE",
            ClientOpcodeMessage::MSG_QUEST_PUSH_RESULT(_) => "MSG_QUEST_PUSH_RESULT",
            ClientOpcodeMessage::MSG_MOVE_WATER_WALK(_) => "MSG_MOVE_WATER_WALK",
            ClientOpcodeMessage::MSG_PETITION_RENAME(_) => "MSG_PETITION_RENAME",
            ClientOpcodeMessage::MSG_MOVE_START_ASCEND(_) => "MSG_MOVE_START_ASCEND",
            ClientOpcodeMessage::MSG_MOVE_STOP_ASCEND(_) => "MSG_MOVE_STOP_ASCEND",
            ClientOpcodeMessage::MSG_MOVE_SET_FLIGHT_BACK_SPEED(_) => "MSG_MOVE_SET_FLIGHT_BACK_SPEED",
            ClientOpcodeMessage::MSG_MOVE_START_DESCEND(_) => "MSG_MOVE_START_DESCEND",
            ClientOpcodeMessage::CMSG_CALENDAR_GET_NUM_PENDING => "CMSG_CALENDAR_GET_NUM_PENDING",
            ClientOpcodeMessage::CMSG_BOOTME => "CMSG_BOOTME",
            ClientOpcodeMessage::CMSG_DBLOOKUP(_) => "CMSG_DBLOOKUP",
            ClientOpcodeMessage::CMSG_WORLD_TELEPORT(_) => "CMSG_WORLD_TELEPORT",
            ClientOpcodeMessage::CMSG_TELEPORT_TO_UNIT(_) => "CMSG_TELEPORT_TO_UNIT",
            ClientOpcodeMessage::CMSG_CHAR_CREATE(_) => "CMSG_CHAR_CREATE",
            ClientOpcodeMessage::CMSG_CHAR_ENUM => "CMSG_CHAR_ENUM",
            ClientOpcodeMessage::CMSG_CHAR_DELETE(_) => "CMSG_CHAR_DELETE",
            ClientOpcodeMessage::CMSG_PLAYER_LOGIN(_) => "CMSG_PLAYER_LOGIN",
            ClientOpcodeMessage::CMSG_PLAYER_LOGOUT => "CMSG_PLAYER_LOGOUT",
            ClientOpcodeMessage::CMSG_LOGOUT_REQUEST => "CMSG_LOGOUT_REQUEST",
            ClientOpcodeMessage::CMSG_LOGOUT_CANCEL => "CMSG_LOGOUT_CANCEL",
            ClientOpcodeMessage::CMSG_NAME_QUERY(_) => "CMSG_NAME_QUERY",
            ClientOpcodeMessage::CMSG_PET_NAME_QUERY(_) => "CMSG_PET_NAME_QUERY",
            ClientOpcodeMessage::CMSG_GUILD_QUERY(_) => "CMSG_GUILD_QUERY",
            ClientOpcodeMessage::CMSG_ITEM_QUERY_SINGLE(_) => "CMSG_ITEM_QUERY_SINGLE",
            ClientOpcodeMessage::CMSG_PAGE_TEXT_QUERY(_) => "CMSG_PAGE_TEXT_QUERY",
            ClientOpcodeMessage::CMSG_QUEST_QUERY(_) => "CMSG_QUEST_QUERY",
            ClientOpcodeMessage::CMSG_GAMEOBJECT_QUERY(_) => "CMSG_GAMEOBJECT_QUERY",
            ClientOpcodeMessage::CMSG_CREATURE_QUERY(_) => "CMSG_CREATURE_QUERY",
            ClientOpcodeMessage::CMSG_WHO(_) => "CMSG_WHO",
            ClientOpcodeMessage::CMSG_WHOIS(_) => "CMSG_WHOIS",
            ClientOpcodeMessage::CMSG_CONTACT_LIST(_) => "CMSG_CONTACT_LIST",
            ClientOpcodeMessage::CMSG_ADD_FRIEND(_) => "CMSG_ADD_FRIEND",
            ClientOpcodeMessage::CMSG_DEL_FRIEND(_) => "CMSG_DEL_FRIEND",
            ClientOpcodeMessage::CMSG_SET_CONTACT_NOTES(_) => "CMSG_SET_CONTACT_NOTES",
            ClientOpcodeMessage::CMSG_ADD_IGNORE(_) => "CMSG_ADD_IGNORE",
            ClientOpcodeMessage::CMSG_DEL_IGNORE(_) => "CMSG_DEL_IGNORE",
            ClientOpcodeMessage::CMSG_GROUP_INVITE(_) => "CMSG_GROUP_INVITE",
            ClientOpcodeMessage::CMSG_GROUP_CANCEL => "CMSG_GROUP_CANCEL",
            ClientOpcodeMessage::CMSG_GROUP_ACCEPT => "CMSG_GROUP_ACCEPT",
            ClientOpcodeMessage::CMSG_GROUP_DECLINE => "CMSG_GROUP_DECLINE",
            ClientOpcodeMessage::CMSG_GROUP_UNINVITE(_) => "CMSG_GROUP_UNINVITE",
            ClientOpcodeMessage::CMSG_GROUP_UNINVITE_GUID(_) => "CMSG_GROUP_UNINVITE_GUID",
            ClientOpcodeMessage::CMSG_GROUP_SET_LEADER(_) => "CMSG_GROUP_SET_LEADER",
            ClientOpcodeMessage::CMSG_LOOT_METHOD(_) => "CMSG_LOOT_METHOD",
            ClientOpcodeMessage::CMSG_GROUP_DISBAND => "CMSG_GROUP_DISBAND",
            ClientOpcodeMessage::CMSG_GUILD_CREATE(_) => "CMSG_GUILD_CREATE",
            ClientOpcodeMessage::CMSG_GUILD_INVITE(_) => "CMSG_GUILD_INVITE",
            ClientOpcodeMessage::CMSG_GUILD_ACCEPT => "CMSG_GUILD_ACCEPT",
            ClientOpcodeMessage::CMSG_GUILD_DECLINE => "CMSG_GUILD_DECLINE",
            ClientOpcodeMessage::CMSG_GUILD_INFO => "CMSG_GUILD_INFO",
            ClientOpcodeMessage::CMSG_GUILD_ROSTER => "CMSG_GUILD_ROSTER",
            ClientOpcodeMessage::CMSG_GUILD_PROMOTE(_) => "CMSG_GUILD_PROMOTE",
            ClientOpcodeMessage::CMSG_GUILD_DEMOTE(_) => "CMSG_GUILD_DEMOTE",
            ClientOpcodeMessage::CMSG_GUILD_LEAVE => "CMSG_GUILD_LEAVE",
            ClientOpcodeMessage::CMSG_GUILD_REMOVE(_) => "CMSG_GUILD_REMOVE",
            ClientOpcodeMessage::CMSG_GUILD_DISBAND => "CMSG_GUILD_DISBAND",
            ClientOpcodeMessage::CMSG_GUILD_LEADER(_) => "CMSG_GUILD_LEADER",
            ClientOpcodeMessage::CMSG_GUILD_MOTD(_) => "CMSG_GUILD_MOTD",
            ClientOpcodeMessage::CMSG_MESSAGECHAT(_) => "CMSG_MESSAGECHAT",
            ClientOpcodeMessage::CMSG_JOIN_CHANNEL(_) => "CMSG_JOIN_CHANNEL",
            ClientOpcodeMessage::CMSG_LEAVE_CHANNEL(_) => "CMSG_LEAVE_CHANNEL",
            ClientOpcodeMessage::CMSG_CHANNEL_LIST(_) => "CMSG_CHANNEL_LIST",
            ClientOpcodeMessage::CMSG_CHANNEL_PASSWORD(_) => "CMSG_CHANNEL_PASSWORD",
            ClientOpcodeMessage::CMSG_CHANNEL_SET_OWNER(_) => "CMSG_CHANNEL_SET_OWNER",
            ClientOpcodeMessage::CMSG_CHANNEL_OWNER(_) => "CMSG_CHANNEL_OWNER",
            ClientOpcodeMessage::CMSG_CHANNEL_MODERATOR(_) => "CMSG_CHANNEL_MODERATOR",
            ClientOpcodeMessage::CMSG_CHANNEL_UNMODERATOR(_) => "CMSG_CHANNEL_UNMODERATOR",
            ClientOpcodeMessage::CMSG_CHANNEL_MUTE(_) => "CMSG_CHANNEL_MUTE",
            ClientOpcodeMessage::CMSG_CHANNEL_UNMUTE(_) => "CMSG_CHANNEL_UNMUTE",
            ClientOpcodeMessage::CMSG_CHANNEL_INVITE(_) => "CMSG_CHANNEL_INVITE",
            ClientOpcodeMessage::CMSG_CHANNEL_KICK(_) => "CMSG_CHANNEL_KICK",
            ClientOpcodeMessage::CMSG_CHANNEL_BAN(_) => "CMSG_CHANNEL_BAN",
            ClientOpcodeMessage::CMSG_CHANNEL_UNBAN(_) => "CMSG_CHANNEL_UNBAN",
            ClientOpcodeMessage::CMSG_CHANNEL_ANNOUNCEMENTS(_) => "CMSG_CHANNEL_ANNOUNCEMENTS",
            ClientOpcodeMessage::CMSG_CHANNEL_MODERATE(_) => "CMSG_CHANNEL_MODERATE",
            ClientOpcodeMessage::CMSG_USE_ITEM(_) => "CMSG_USE_ITEM",
            ClientOpcodeMessage::CMSG_OPEN_ITEM(_) => "CMSG_OPEN_ITEM",
            ClientOpcodeMessage::CMSG_READ_ITEM(_) => "CMSG_READ_ITEM",
            ClientOpcodeMessage::CMSG_GAMEOBJ_USE(_) => "CMSG_GAMEOBJ_USE",
            ClientOpcodeMessage::CMSG_AREATRIGGER(_) => "CMSG_AREATRIGGER",
            ClientOpcodeMessage::MSG_MOVE_TELEPORT(_) => "MSG_MOVE_TELEPORT_Server",
            ClientOpcodeMessage::MSG_MOVE_TELEPORT_ACK(_) => "MSG_MOVE_TELEPORT_ACK_Client",
            ClientOpcodeMessage::CMSG_MOVE_SET_RAW_POSITION(_) => "CMSG_MOVE_SET_RAW_POSITION",
            ClientOpcodeMessage::CMSG_FORCE_RUN_SPEED_CHANGE_ACK(_) => "CMSG_FORCE_RUN_SPEED_CHANGE_ACK",
            ClientOpcodeMessage::CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACK(_) => "CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACK",
            ClientOpcodeMessage::CMSG_FORCE_SWIM_SPEED_CHANGE_ACK(_) => "CMSG_FORCE_SWIM_SPEED_CHANGE_ACK",
            ClientOpcodeMessage::CMSG_FORCE_MOVE_ROOT_ACK(_) => "CMSG_FORCE_MOVE_ROOT_ACK",
            ClientOpcodeMessage::CMSG_FORCE_MOVE_UNROOT_ACK(_) => "CMSG_FORCE_MOVE_UNROOT_ACK",
            ClientOpcodeMessage::CMSG_MOVE_KNOCK_BACK_ACK(_) => "CMSG_MOVE_KNOCK_BACK_ACK",
            ClientOpcodeMessage::CMSG_MOVE_HOVER_ACK(_) => "CMSG_MOVE_HOVER_ACK",
            ClientOpcodeMessage::CMSG_NEXT_CINEMATIC_CAMERA => "CMSG_NEXT_CINEMATIC_CAMERA",
            ClientOpcodeMessage::CMSG_COMPLETE_CINEMATIC => "CMSG_COMPLETE_CINEMATIC",
            ClientOpcodeMessage::CMSG_TUTORIAL_FLAG(_) => "CMSG_TUTORIAL_FLAG",
            ClientOpcodeMessage::CMSG_TUTORIAL_CLEAR => "CMSG_TUTORIAL_CLEAR",
            ClientOpcodeMessage::CMSG_TUTORIAL_RESET => "CMSG_TUTORIAL_RESET",
            ClientOpcodeMessage::CMSG_STANDSTATECHANGE(_) => "CMSG_STANDSTATECHANGE",
            ClientOpcodeMessage::CMSG_EMOTE(_) => "CMSG_EMOTE",
            ClientOpcodeMessage::CMSG_TEXT_EMOTE(_) => "CMSG_TEXT_EMOTE",
            ClientOpcodeMessage::CMSG_AUTOSTORE_LOOT_ITEM(_) => "CMSG_AUTOSTORE_LOOT_ITEM",
            ClientOpcodeMessage::CMSG_AUTOEQUIP_ITEM(_) => "CMSG_AUTOEQUIP_ITEM",
            ClientOpcodeMessage::CMSG_AUTOSTORE_BAG_ITEM(_) => "CMSG_AUTOSTORE_BAG_ITEM",
            ClientOpcodeMessage::CMSG_SWAP_ITEM(_) => "CMSG_SWAP_ITEM",
            ClientOpcodeMessage::CMSG_SWAP_INV_ITEM(_) => "CMSG_SWAP_INV_ITEM",
            ClientOpcodeMessage::CMSG_SPLIT_ITEM(_) => "CMSG_SPLIT_ITEM",
            ClientOpcodeMessage::CMSG_AUTOEQUIP_ITEM_SLOT(_) => "CMSG_AUTOEQUIP_ITEM_SLOT",
            ClientOpcodeMessage::CMSG_DESTROYITEM(_) => "CMSG_DESTROYITEM",
            ClientOpcodeMessage::CMSG_INSPECT(_) => "CMSG_INSPECT",
            ClientOpcodeMessage::CMSG_INITIATE_TRADE(_) => "CMSG_INITIATE_TRADE",
            ClientOpcodeMessage::CMSG_BEGIN_TRADE => "CMSG_BEGIN_TRADE",
            ClientOpcodeMessage::CMSG_BUSY_TRADE => "CMSG_BUSY_TRADE",
            ClientOpcodeMessage::CMSG_IGNORE_TRADE => "CMSG_IGNORE_TRADE",
            ClientOpcodeMessage::CMSG_ACCEPT_TRADE(_) => "CMSG_ACCEPT_TRADE",
            ClientOpcodeMessage::CMSG_UNACCEPT_TRADE => "CMSG_UNACCEPT_TRADE",
            ClientOpcodeMessage::CMSG_CANCEL_TRADE => "CMSG_CANCEL_TRADE",
            ClientOpcodeMessage::CMSG_SET_TRADE_ITEM(_) => "CMSG_SET_TRADE_ITEM",
            ClientOpcodeMessage::CMSG_CLEAR_TRADE_ITEM(_) => "CMSG_CLEAR_TRADE_ITEM",
            ClientOpcodeMessage::CMSG_SET_TRADE_GOLD(_) => "CMSG_SET_TRADE_GOLD",
            ClientOpcodeMessage::CMSG_SET_FACTION_ATWAR(_) => "CMSG_SET_FACTION_ATWAR",
            ClientOpcodeMessage::CMSG_SET_ACTION_BUTTON(_) => "CMSG_SET_ACTION_BUTTON",
            ClientOpcodeMessage::CMSG_CAST_SPELL(_) => "CMSG_CAST_SPELL",
            ClientOpcodeMessage::CMSG_CANCEL_CAST(_) => "CMSG_CANCEL_CAST",
            ClientOpcodeMessage::CMSG_CANCEL_AURA(_) => "CMSG_CANCEL_AURA",
            ClientOpcodeMessage::CMSG_CANCEL_CHANNELLING(_) => "CMSG_CANCEL_CHANNELLING",
            ClientOpcodeMessage::CMSG_SET_SELECTION(_) => "CMSG_SET_SELECTION",
            ClientOpcodeMessage::CMSG_DELETEEQUIPMENT_SET(_) => "CMSG_DELETEEQUIPMENT_SET",
            ClientOpcodeMessage::CMSG_INSTANCE_LOCK_RESPONSE(_) => "CMSG_INSTANCE_LOCK_RESPONSE",
            ClientOpcodeMessage::CMSG_ATTACKSWING(_) => "CMSG_ATTACKSWING",
            ClientOpcodeMessage::CMSG_ATTACKSTOP => "CMSG_ATTACKSTOP",
            ClientOpcodeMessage::CMSG_REPOP_REQUEST => "CMSG_REPOP_REQUEST",
            ClientOpcodeMessage::CMSG_RESURRECT_RESPONSE(_) => "CMSG_RESURRECT_RESPONSE",
            ClientOpcodeMessage::CMSG_LOOT(_) => "CMSG_LOOT",
            ClientOpcodeMessage::CMSG_LOOT_MONEY => "CMSG_LOOT_MONEY",
            ClientOpcodeMessage::CMSG_LOOT_RELEASE(_) => "CMSG_LOOT_RELEASE",
            ClientOpcodeMessage::CMSG_DUEL_ACCEPTED(_) => "CMSG_DUEL_ACCEPTED",
            ClientOpcodeMessage::CMSG_DUEL_CANCELLED(_) => "CMSG_DUEL_CANCELLED",
            ClientOpcodeMessage::CMSG_MOUNTSPECIAL_ANIM => "CMSG_MOUNTSPECIAL_ANIM",
            ClientOpcodeMessage::CMSG_PET_SET_ACTION(_) => "CMSG_PET_SET_ACTION",
            ClientOpcodeMessage::CMSG_PET_ACTION(_) => "CMSG_PET_ACTION",
            ClientOpcodeMessage::CMSG_PET_ABANDON(_) => "CMSG_PET_ABANDON",
            ClientOpcodeMessage::CMSG_PET_RENAME(_) => "CMSG_PET_RENAME",
            ClientOpcodeMessage::CMSG_GOSSIP_HELLO(_) => "CMSG_GOSSIP_HELLO",
            ClientOpcodeMessage::CMSG_GOSSIP_SELECT_OPTION(_) => "CMSG_GOSSIP_SELECT_OPTION",
            ClientOpcodeMessage::CMSG_NPC_TEXT_QUERY(_) => "CMSG_NPC_TEXT_QUERY",
            ClientOpcodeMessage::CMSG_QUESTGIVER_STATUS_QUERY(_) => "CMSG_QUESTGIVER_STATUS_QUERY",
            ClientOpcodeMessage::CMSG_QUESTGIVER_HELLO(_) => "CMSG_QUESTGIVER_HELLO",
            ClientOpcodeMessage::CMSG_QUESTGIVER_QUERY_QUEST(_) => "CMSG_QUESTGIVER_QUERY_QUEST",
            ClientOpcodeMessage::CMSG_QUESTGIVER_QUEST_AUTOLAUNCH => "CMSG_QUESTGIVER_QUEST_AUTOLAUNCH",
            ClientOpcodeMessage::CMSG_QUESTGIVER_ACCEPT_QUEST(_) => "CMSG_QUESTGIVER_ACCEPT_QUEST",
            ClientOpcodeMessage::CMSG_QUESTGIVER_COMPLETE_QUEST(_) => "CMSG_QUESTGIVER_COMPLETE_QUEST",
            ClientOpcodeMessage::CMSG_QUESTGIVER_REQUEST_REWARD(_) => "CMSG_QUESTGIVER_REQUEST_REWARD",
            ClientOpcodeMessage::CMSG_QUESTGIVER_CHOOSE_REWARD(_) => "CMSG_QUESTGIVER_CHOOSE_REWARD",
            ClientOpcodeMessage::CMSG_QUESTGIVER_CANCEL => "CMSG_QUESTGIVER_CANCEL",
            ClientOpcodeMessage::CMSG_QUESTLOG_SWAP_QUEST(_) => "CMSG_QUESTLOG_SWAP_QUEST",
            ClientOpcodeMessage::CMSG_QUESTLOG_REMOVE_QUEST(_) => "CMSG_QUESTLOG_REMOVE_QUEST",
            ClientOpcodeMessage::CMSG_QUEST_CONFIRM_ACCEPT(_) => "CMSG_QUEST_CONFIRM_ACCEPT",
            ClientOpcodeMessage::CMSG_PUSHQUESTTOPARTY(_) => "CMSG_PUSHQUESTTOPARTY",
            ClientOpcodeMessage::CMSG_LIST_INVENTORY(_) => "CMSG_LIST_INVENTORY",
            ClientOpcodeMessage::CMSG_SELL_ITEM(_) => "CMSG_SELL_ITEM",
            ClientOpcodeMessage::CMSG_BUY_ITEM(_) => "CMSG_BUY_ITEM",
            ClientOpcodeMessage::CMSG_BUY_ITEM_IN_SLOT(_) => "CMSG_BUY_ITEM_IN_SLOT",
            ClientOpcodeMessage::CMSG_TAXINODE_STATUS_QUERY(_) => "CMSG_TAXINODE_STATUS_QUERY",
            ClientOpcodeMessage::CMSG_TAXIQUERYAVAILABLENODES(_) => "CMSG_TAXIQUERYAVAILABLENODES",
            ClientOpcodeMessage::CMSG_ACTIVATETAXI(_) => "CMSG_ACTIVATETAXI",
            ClientOpcodeMessage::CMSG_TRAINER_LIST(_) => "CMSG_TRAINER_LIST",
            ClientOpcodeMessage::CMSG_TRAINER_BUY_SPELL(_) => "CMSG_TRAINER_BUY_SPELL",
            ClientOpcodeMessage::CMSG_BINDER_ACTIVATE(_) => "CMSG_BINDER_ACTIVATE",
            ClientOpcodeMessage::CMSG_BANKER_ACTIVATE(_) => "CMSG_BANKER_ACTIVATE",
            ClientOpcodeMessage::CMSG_BUY_BANK_SLOT(_) => "CMSG_BUY_BANK_SLOT",
            ClientOpcodeMessage::CMSG_PETITION_SHOWLIST(_) => "CMSG_PETITION_SHOWLIST",
            ClientOpcodeMessage::CMSG_PETITION_BUY(_) => "CMSG_PETITION_BUY",
            ClientOpcodeMessage::CMSG_PETITION_SHOW_SIGNATURES(_) => "CMSG_PETITION_SHOW_SIGNATURES",
            ClientOpcodeMessage::CMSG_PETITION_SIGN(_) => "CMSG_PETITION_SIGN",
            ClientOpcodeMessage::CMSG_OFFER_PETITION(_) => "CMSG_OFFER_PETITION",
            ClientOpcodeMessage::CMSG_TURN_IN_PETITION(_) => "CMSG_TURN_IN_PETITION",
            ClientOpcodeMessage::CMSG_PETITION_QUERY(_) => "CMSG_PETITION_QUERY",
            ClientOpcodeMessage::CMSG_BUG(_) => "CMSG_BUG",
            ClientOpcodeMessage::CMSG_PLAYED_TIME(_) => "CMSG_PLAYED_TIME",
            ClientOpcodeMessage::CMSG_QUERY_TIME => "CMSG_QUERY_TIME",
            ClientOpcodeMessage::CMSG_RECLAIM_CORPSE(_) => "CMSG_RECLAIM_CORPSE",
            ClientOpcodeMessage::CMSG_WRAP_ITEM(_) => "CMSG_WRAP_ITEM",
            ClientOpcodeMessage::MSG_MINIMAP_PING(_) => "MSG_MINIMAP_PING_Client",
            ClientOpcodeMessage::CMSG_PING(_) => "CMSG_PING",
            ClientOpcodeMessage::CMSG_SETSHEATHED(_) => "CMSG_SETSHEATHED",
            ClientOpcodeMessage::CMSG_QUEST_POI_QUERY(_) => "CMSG_QUEST_POI_QUERY",
            ClientOpcodeMessage::CMSG_AUTH_SESSION(_) => "CMSG_AUTH_SESSION",
            ClientOpcodeMessage::CMSG_PET_CAST_SPELL(_) => "CMSG_PET_CAST_SPELL",
            ClientOpcodeMessage::MSG_SAVE_GUILD_EMBLEM(_) => "MSG_SAVE_GUILD_EMBLEM_Client",
            ClientOpcodeMessage::CMSG_ZONEUPDATE(_) => "CMSG_ZONEUPDATE",
            ClientOpcodeMessage::MSG_RANDOM_ROLL(_) => "MSG_RANDOM_ROLL_Client",
            ClientOpcodeMessage::CMSG_UNLEARN_SKILL(_) => "CMSG_UNLEARN_SKILL",
            ClientOpcodeMessage::CMSG_GMTICKET_CREATE(_) => "CMSG_GMTICKET_CREATE",
            ClientOpcodeMessage::CMSG_GMTICKET_UPDATETEXT(_) => "CMSG_GMTICKET_UPDATETEXT",
            ClientOpcodeMessage::CMSG_REQUEST_ACCOUNT_DATA(_) => "CMSG_REQUEST_ACCOUNT_DATA",
            ClientOpcodeMessage::CMSG_UPDATE_ACCOUNT_DATA(_) => "CMSG_UPDATE_ACCOUNT_DATA",
            ClientOpcodeMessage::CMSG_GMTICKET_GETTICKET => "CMSG_GMTICKET_GETTICKET",
            ClientOpcodeMessage::CMSG_UNLEARN_TALENTS => "CMSG_UNLEARN_TALENTS",
            ClientOpcodeMessage::MSG_CORPSE_QUERY => "MSG_CORPSE_QUERY_Client",
            ClientOpcodeMessage::CMSG_GMTICKET_DELETETICKET => "CMSG_GMTICKET_DELETETICKET",
            ClientOpcodeMessage::CMSG_GMTICKET_SYSTEMSTATUS => "CMSG_GMTICKET_SYSTEMSTATUS",
            ClientOpcodeMessage::CMSG_SPIRIT_HEALER_ACTIVATE(_) => "CMSG_SPIRIT_HEALER_ACTIVATE",
            ClientOpcodeMessage::CMSG_CHAT_IGNORED(_) => "CMSG_CHAT_IGNORED",
            ClientOpcodeMessage::CMSG_GUILD_RANK(_) => "CMSG_GUILD_RANK",
            ClientOpcodeMessage::CMSG_GUILD_ADD_RANK(_) => "CMSG_GUILD_ADD_RANK",
            ClientOpcodeMessage::CMSG_GUILD_DEL_RANK => "CMSG_GUILD_DEL_RANK",
            ClientOpcodeMessage::CMSG_GUILD_SET_PUBLIC_NOTE(_) => "CMSG_GUILD_SET_PUBLIC_NOTE",
            ClientOpcodeMessage::CMSG_GUILD_SET_OFFICER_NOTE(_) => "CMSG_GUILD_SET_OFFICER_NOTE",
            ClientOpcodeMessage::CMSG_SEND_MAIL(_) => "CMSG_SEND_MAIL",
            ClientOpcodeMessage::CMSG_GET_MAIL_LIST(_) => "CMSG_GET_MAIL_LIST",
            ClientOpcodeMessage::CMSG_BATTLEFIELD_LIST(_) => "CMSG_BATTLEFIELD_LIST",
            ClientOpcodeMessage::CMSG_ITEM_TEXT_QUERY(_) => "CMSG_ITEM_TEXT_QUERY",
            ClientOpcodeMessage::CMSG_MAIL_TAKE_MONEY(_) => "CMSG_MAIL_TAKE_MONEY",
            ClientOpcodeMessage::CMSG_MAIL_TAKE_ITEM(_) => "CMSG_MAIL_TAKE_ITEM",
            ClientOpcodeMessage::CMSG_MAIL_MARK_AS_READ(_) => "CMSG_MAIL_MARK_AS_READ",
            ClientOpcodeMessage::CMSG_MAIL_RETURN_TO_SENDER(_) => "CMSG_MAIL_RETURN_TO_SENDER",
            ClientOpcodeMessage::CMSG_MAIL_DELETE(_) => "CMSG_MAIL_DELETE",
            ClientOpcodeMessage::CMSG_MAIL_CREATE_TEXT_ITEM(_) => "CMSG_MAIL_CREATE_TEXT_ITEM",
            ClientOpcodeMessage::CMSG_LEARN_TALENT(_) => "CMSG_LEARN_TALENT",
            ClientOpcodeMessage::CMSG_TOGGLE_PVP(_) => "CMSG_TOGGLE_PVP",
            ClientOpcodeMessage::MSG_AUCTION_HELLO(_) => "MSG_AUCTION_HELLO_Client",
            ClientOpcodeMessage::CMSG_AUCTION_SELL_ITEM(_) => "CMSG_AUCTION_SELL_ITEM",
            ClientOpcodeMessage::CMSG_AUCTION_REMOVE_ITEM(_) => "CMSG_AUCTION_REMOVE_ITEM",
            ClientOpcodeMessage::CMSG_AUCTION_LIST_ITEMS(_) => "CMSG_AUCTION_LIST_ITEMS",
            ClientOpcodeMessage::CMSG_AUCTION_LIST_OWNER_ITEMS(_) => "CMSG_AUCTION_LIST_OWNER_ITEMS",
            ClientOpcodeMessage::CMSG_AUCTION_PLACE_BID(_) => "CMSG_AUCTION_PLACE_BID",
            ClientOpcodeMessage::CMSG_AUCTION_LIST_BIDDER_ITEMS(_) => "CMSG_AUCTION_LIST_BIDDER_ITEMS",
            ClientOpcodeMessage::CMSG_SET_AMMO(_) => "CMSG_SET_AMMO",
            ClientOpcodeMessage::CMSG_SET_ACTIVE_MOVER(_) => "CMSG_SET_ACTIVE_MOVER",
            ClientOpcodeMessage::CMSG_PET_CANCEL_AURA(_) => "CMSG_PET_CANCEL_AURA",
            ClientOpcodeMessage::CMSG_CANCEL_AUTO_REPEAT_SPELL => "CMSG_CANCEL_AUTO_REPEAT_SPELL",
            ClientOpcodeMessage::MSG_LIST_STABLED_PETS(_) => "MSG_LIST_STABLED_PETS_Client",
            ClientOpcodeMessage::CMSG_STABLE_PET(_) => "CMSG_STABLE_PET",
            ClientOpcodeMessage::CMSG_UNSTABLE_PET(_) => "CMSG_UNSTABLE_PET",
            ClientOpcodeMessage::CMSG_BUY_STABLE_SLOT(_) => "CMSG_BUY_STABLE_SLOT",
            ClientOpcodeMessage::CMSG_STABLE_SWAP_PET(_) => "CMSG_STABLE_SWAP_PET",
            ClientOpcodeMessage::CMSG_REQUEST_PET_INFO => "CMSG_REQUEST_PET_INFO",
            ClientOpcodeMessage::CMSG_FAR_SIGHT(_) => "CMSG_FAR_SIGHT",
            ClientOpcodeMessage::CMSG_GROUP_CHANGE_SUB_GROUP(_) => "CMSG_GROUP_CHANGE_SUB_GROUP",
            ClientOpcodeMessage::CMSG_REQUEST_PARTY_MEMBER_STATS(_) => "CMSG_REQUEST_PARTY_MEMBER_STATS",
            ClientOpcodeMessage::CMSG_GROUP_SWAP_SUB_GROUP(_) => "CMSG_GROUP_SWAP_SUB_GROUP",
            ClientOpcodeMessage::CMSG_AUTOSTORE_BANK_ITEM(_) => "CMSG_AUTOSTORE_BANK_ITEM",
            ClientOpcodeMessage::CMSG_AUTOBANK_ITEM(_) => "CMSG_AUTOBANK_ITEM",
            ClientOpcodeMessage::MSG_QUERY_NEXT_MAIL_TIME => "MSG_QUERY_NEXT_MAIL_TIME_Client",
            ClientOpcodeMessage::CMSG_GROUP_RAID_CONVERT => "CMSG_GROUP_RAID_CONVERT",
            ClientOpcodeMessage::CMSG_GROUP_ASSISTANT_LEADER(_) => "CMSG_GROUP_ASSISTANT_LEADER",
            ClientOpcodeMessage::CMSG_BUYBACK_ITEM(_) => "CMSG_BUYBACK_ITEM",
            ClientOpcodeMessage::CMSG_SET_SAVED_INSTANCE_EXTEND(_) => "CMSG_SET_SAVED_INSTANCE_EXTEND",
            ClientOpcodeMessage::CMSG_LFG_GET_STATUS => "CMSG_LFG_GET_STATUS",
            ClientOpcodeMessage::CMSG_GMTICKETSYSTEM_TOGGLE => "CMSG_GMTICKETSYSTEM_TOGGLE",
            ClientOpcodeMessage::CMSG_CANCEL_GROWTH_AURA => "CMSG_CANCEL_GROWTH_AURA",
            ClientOpcodeMessage::CMSG_LOOT_ROLL(_) => "CMSG_LOOT_ROLL",
            ClientOpcodeMessage::CMSG_LOOT_MASTER_GIVE(_) => "CMSG_LOOT_MASTER_GIVE",
            ClientOpcodeMessage::CMSG_REPAIR_ITEM(_) => "CMSG_REPAIR_ITEM",
            ClientOpcodeMessage::MSG_TALENT_WIPE_CONFIRM(_) => "MSG_TALENT_WIPE_CONFIRM_Client",
            ClientOpcodeMessage::CMSG_SUMMON_RESPONSE(_) => "CMSG_SUMMON_RESPONSE",
            ClientOpcodeMessage::CMSG_SELF_RES => "CMSG_SELF_RES",
            ClientOpcodeMessage::CMSG_TOGGLE_HELM => "CMSG_TOGGLE_HELM",
            ClientOpcodeMessage::CMSG_TOGGLE_CLOAK => "CMSG_TOGGLE_CLOAK",
            ClientOpcodeMessage::CMSG_SET_ACTIONBAR_TOGGLES(_) => "CMSG_SET_ACTIONBAR_TOGGLES",
            ClientOpcodeMessage::CMSG_ITEM_NAME_QUERY(_) => "CMSG_ITEM_NAME_QUERY",
            ClientOpcodeMessage::CMSG_CHAR_RENAME(_) => "CMSG_CHAR_RENAME",
            ClientOpcodeMessage::CMSG_MOVE_SPLINE_DONE(_) => "CMSG_MOVE_SPLINE_DONE",
            ClientOpcodeMessage::CMSG_MOVE_FALL_RESET(_) => "CMSG_MOVE_FALL_RESET",
            ClientOpcodeMessage::CMSG_REQUEST_RAID_INFO => "CMSG_REQUEST_RAID_INFO",
            ClientOpcodeMessage::CMSG_MOVE_TIME_SKIPPED(_) => "CMSG_MOVE_TIME_SKIPPED",
            ClientOpcodeMessage::CMSG_MOVE_FEATHER_FALL_ACK(_) => "CMSG_MOVE_FEATHER_FALL_ACK",
            ClientOpcodeMessage::CMSG_MOVE_WATER_WALK_ACK(_) => "CMSG_MOVE_WATER_WALK_ACK",
            ClientOpcodeMessage::CMSG_MOVE_NOT_ACTIVE_MOVER(_) => "CMSG_MOVE_NOT_ACTIVE_MOVER",
            ClientOpcodeMessage::CMSG_BATTLEFIELD_STATUS => "CMSG_BATTLEFIELD_STATUS",
            ClientOpcodeMessage::CMSG_BATTLEFIELD_PORT(_) => "CMSG_BATTLEFIELD_PORT",
            ClientOpcodeMessage::MSG_INSPECT_HONOR_STATS(_) => "MSG_INSPECT_HONOR_STATS_Client",
            ClientOpcodeMessage::CMSG_BATTLEMASTER_HELLO(_) => "CMSG_BATTLEMASTER_HELLO",
            ClientOpcodeMessage::CMSG_FORCE_WALK_SPEED_CHANGE_ACK(_) => "CMSG_FORCE_WALK_SPEED_CHANGE_ACK",
            ClientOpcodeMessage::CMSG_FORCE_SWIM_BACK_SPEED_CHANGE_ACK(_) => "CMSG_FORCE_SWIM_BACK_SPEED_CHANGE_ACK",
            ClientOpcodeMessage::CMSG_FORCE_TURN_RATE_CHANGE_ACK(_) => "CMSG_FORCE_TURN_RATE_CHANGE_ACK",
            ClientOpcodeMessage::MSG_PVP_LOG_DATA => "MSG_PVP_LOG_DATA_Client",
            ClientOpcodeMessage::CMSG_LEAVE_BATTLEFIELD(_) => "CMSG_LEAVE_BATTLEFIELD",
            ClientOpcodeMessage::CMSG_AREA_SPIRIT_HEALER_QUERY(_) => "CMSG_AREA_SPIRIT_HEALER_QUERY",
            ClientOpcodeMessage::CMSG_AREA_SPIRIT_HEALER_QUEUE(_) => "CMSG_AREA_SPIRIT_HEALER_QUEUE",
            ClientOpcodeMessage::CMSG_WARDEN_DATA(_) => "CMSG_WARDEN_DATA",
            ClientOpcodeMessage::MSG_BATTLEGROUND_PLAYER_POSITIONS => "MSG_BATTLEGROUND_PLAYER_POSITIONS_Client",
            ClientOpcodeMessage::CMSG_PET_STOP_ATTACK(_) => "CMSG_PET_STOP_ATTACK",
            ClientOpcodeMessage::CMSG_BATTLEMASTER_JOIN(_) => "CMSG_BATTLEMASTER_JOIN",
            ClientOpcodeMessage::CMSG_PET_UNLEARN(_) => "CMSG_PET_UNLEARN",
            ClientOpcodeMessage::CMSG_PET_SPELL_AUTOCAST(_) => "CMSG_PET_SPELL_AUTOCAST",
            ClientOpcodeMessage::CMSG_GUILD_INFO_TEXT(_) => "CMSG_GUILD_INFO_TEXT",
            ClientOpcodeMessage::CMSG_ACTIVATETAXIEXPRESS(_) => "CMSG_ACTIVATETAXIEXPRESS",
            ClientOpcodeMessage::CMSG_SET_FACTION_INACTIVE(_) => "CMSG_SET_FACTION_INACTIVE",
            ClientOpcodeMessage::CMSG_SET_WATCHED_FACTION(_) => "CMSG_SET_WATCHED_FACTION",
            ClientOpcodeMessage::CMSG_RESET_INSTANCES => "CMSG_RESET_INSTANCES",
            ClientOpcodeMessage::MSG_RAID_TARGET_UPDATE(_) => "MSG_RAID_TARGET_UPDATE_Client",
            ClientOpcodeMessage::MSG_RAID_READY_CHECK(_) => "MSG_RAID_READY_CHECK_Client",
            ClientOpcodeMessage::MSG_SET_DUNGEON_DIFFICULTY(_) => "MSG_SET_DUNGEON_DIFFICULTY_Client",
            ClientOpcodeMessage::CMSG_GMSURVEY_SUBMIT(_) => "CMSG_GMSURVEY_SUBMIT",
            ClientOpcodeMessage::CMSG_MOVE_SET_CAN_TRANSITION_BETWEEN_SWIM_AND_FLY_ACK(_) => "CMSG_MOVE_SET_CAN_TRANSITION_BETWEEN_SWIM_AND_FLY_ACK",
            ClientOpcodeMessage::CMSG_MOVE_SET_CAN_FLY_ACK(_) => "CMSG_MOVE_SET_CAN_FLY_ACK",
            ClientOpcodeMessage::CMSG_MOVE_SET_FLY(_) => "CMSG_MOVE_SET_FLY",
            ClientOpcodeMessage::CMSG_SOCKET_GEMS(_) => "CMSG_SOCKET_GEMS",
            ClientOpcodeMessage::CMSG_ARENA_TEAM_ROSTER(_) => "CMSG_ARENA_TEAM_ROSTER",
            ClientOpcodeMessage::CMSG_ARENA_TEAM_INVITE(_) => "CMSG_ARENA_TEAM_INVITE",
            ClientOpcodeMessage::CMSG_ARENA_TEAM_ACCEPT => "CMSG_ARENA_TEAM_ACCEPT",
            ClientOpcodeMessage::CMSG_ARENA_TEAM_DECLINE => "CMSG_ARENA_TEAM_DECLINE",
            ClientOpcodeMessage::CMSG_ARENA_TEAM_LEAVE(_) => "CMSG_ARENA_TEAM_LEAVE",
            ClientOpcodeMessage::CMSG_ARENA_TEAM_REMOVE(_) => "CMSG_ARENA_TEAM_REMOVE",
            ClientOpcodeMessage::CMSG_ARENA_TEAM_DISBAND(_) => "CMSG_ARENA_TEAM_DISBAND",
            ClientOpcodeMessage::CMSG_ARENA_TEAM_LEADER(_) => "CMSG_ARENA_TEAM_LEADER",
            ClientOpcodeMessage::CMSG_BATTLEMASTER_JOIN_ARENA(_) => "CMSG_BATTLEMASTER_JOIN_ARENA",
            ClientOpcodeMessage::CMSG_LFG_JOIN(_) => "CMSG_LFG_JOIN",
            ClientOpcodeMessage::CMSG_LFG_LEAVE => "CMSG_LFG_LEAVE",
            ClientOpcodeMessage::CMSG_SEARCH_LFG_JOIN(_) => "CMSG_SEARCH_LFG_JOIN",
            ClientOpcodeMessage::CMSG_SEARCH_LFG_LEAVE(_) => "CMSG_SEARCH_LFG_LEAVE",
            ClientOpcodeMessage::CMSG_LFG_PROPOSAL_RESULT(_) => "CMSG_LFG_PROPOSAL_RESULT",
            ClientOpcodeMessage::CMSG_SET_LFG_COMMENT(_) => "CMSG_SET_LFG_COMMENT",
            ClientOpcodeMessage::CMSG_LFG_SET_ROLES(_) => "CMSG_LFG_SET_ROLES",
            ClientOpcodeMessage::CMSG_LFG_SET_BOOT_VOTE(_) => "CMSG_LFG_SET_BOOT_VOTE",
            ClientOpcodeMessage::CMSG_LFD_PLAYER_LOCK_INFO_REQUEST => "CMSG_LFD_PLAYER_LOCK_INFO_REQUEST",
            ClientOpcodeMessage::CMSG_LFG_TELEPORT(_) => "CMSG_LFG_TELEPORT",
            ClientOpcodeMessage::CMSG_LFD_PARTY_LOCK_INFO_REQUEST => "CMSG_LFD_PARTY_LOCK_INFO_REQUEST",
            ClientOpcodeMessage::CMSG_SET_TITLE(_) => "CMSG_SET_TITLE",
            ClientOpcodeMessage::CMSG_CANCEL_MOUNT_AURA => "CMSG_CANCEL_MOUNT_AURA",
            ClientOpcodeMessage::MSG_INSPECT_ARENA_TEAMS(_) => "MSG_INSPECT_ARENA_TEAMS_Client",
            ClientOpcodeMessage::CMSG_CANCEL_TEMP_ENCHANTMENT(_) => "CMSG_CANCEL_TEMP_ENCHANTMENT",
            ClientOpcodeMessage::CMSG_FORCE_FLIGHT_SPEED_CHANGE_ACK(_) => "CMSG_FORCE_FLIGHT_SPEED_CHANGE_ACK",
            ClientOpcodeMessage::CMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE_ACK(_) => "CMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE_ACK",
            ClientOpcodeMessage::CMSG_SET_TAXI_BENCHMARK_MODE(_) => "CMSG_SET_TAXI_BENCHMARK_MODE",
            ClientOpcodeMessage::CMSG_REALM_SPLIT(_) => "CMSG_REALM_SPLIT",
            ClientOpcodeMessage::CMSG_MOVE_CHNG_TRANSPORT(_) => "CMSG_MOVE_CHNG_TRANSPORT",
            ClientOpcodeMessage::MSG_PARTY_ASSIGNMENT(_) => "MSG_PARTY_ASSIGNMENT_Client",
            ClientOpcodeMessage::CMSG_TIME_SYNC_RESP(_) => "CMSG_TIME_SYNC_RESP",
            ClientOpcodeMessage::MSG_RAID_READY_CHECK_CONFIRM(_) => "MSG_RAID_READY_CHECK_CONFIRM_Client",
            ClientOpcodeMessage::CMSG_VOICE_SESSION_ENABLE(_) => "CMSG_VOICE_SESSION_ENABLE",
            ClientOpcodeMessage::CMSG_COMMENTATOR_ENABLE(_) => "CMSG_COMMENTATOR_ENABLE",
            ClientOpcodeMessage::MSG_RAID_READY_CHECK_FINISHED => "MSG_RAID_READY_CHECK_FINISHED_Client",
            ClientOpcodeMessage::CMSG_COMPLAIN(_) => "CMSG_COMPLAIN",
            ClientOpcodeMessage::CMSG_CHANNEL_DISPLAY_LIST(_) => "CMSG_CHANNEL_DISPLAY_LIST",
            ClientOpcodeMessage::CMSG_SET_ACTIVE_VOICE_CHANNEL(_) => "CMSG_SET_ACTIVE_VOICE_CHANNEL",
            ClientOpcodeMessage::CMSG_GET_CHANNEL_MEMBER_COUNT(_) => "CMSG_GET_CHANNEL_MEMBER_COUNT",
            ClientOpcodeMessage::CMSG_CHANNEL_VOICE_ON => "CMSG_CHANNEL_VOICE_ON",
            ClientOpcodeMessage::CMSG_REPORT_PVP_AFK(_) => "CMSG_REPORT_PVP_AFK",
            ClientOpcodeMessage::CMSG_GUILD_BANKER_ACTIVATE(_) => "CMSG_GUILD_BANKER_ACTIVATE",
            ClientOpcodeMessage::CMSG_GUILD_BANK_QUERY_TAB(_) => "CMSG_GUILD_BANK_QUERY_TAB",
            ClientOpcodeMessage::CMSG_GUILD_BANK_SWAP_ITEMS(_) => "CMSG_GUILD_BANK_SWAP_ITEMS",
            ClientOpcodeMessage::CMSG_GUILD_BANK_BUY_TAB(_) => "CMSG_GUILD_BANK_BUY_TAB",
            ClientOpcodeMessage::CMSG_GUILD_BANK_UPDATE_TAB(_) => "CMSG_GUILD_BANK_UPDATE_TAB",
            ClientOpcodeMessage::CMSG_GUILD_BANK_DEPOSIT_MONEY(_) => "CMSG_GUILD_BANK_DEPOSIT_MONEY",
            ClientOpcodeMessage::CMSG_GUILD_BANK_WITHDRAW_MONEY(_) => "CMSG_GUILD_BANK_WITHDRAW_MONEY",
            ClientOpcodeMessage::MSG_GUILD_BANK_LOG_QUERY(_) => "MSG_GUILD_BANK_LOG_QUERY_Client",
            ClientOpcodeMessage::CMSG_SET_CHANNEL_WATCH(_) => "CMSG_SET_CHANNEL_WATCH",
            ClientOpcodeMessage::CMSG_CLEAR_CHANNEL_WATCH(_) => "CMSG_CLEAR_CHANNEL_WATCH",
            ClientOpcodeMessage::CMSG_SPELLCLICK(_) => "CMSG_SPELLCLICK",
            ClientOpcodeMessage::MSG_GUILD_PERMISSIONS => "MSG_GUILD_PERMISSIONS_Client",
            ClientOpcodeMessage::MSG_GUILD_BANK_MONEY_WITHDRAWN => "MSG_GUILD_BANK_MONEY_WITHDRAWN_Client",
            ClientOpcodeMessage::MSG_GUILD_EVENT_LOG_QUERY => "MSG_GUILD_EVENT_LOG_QUERY_Client",
            ClientOpcodeMessage::CMSG_GET_MIRRORIMAGE_DATA(_) => "CMSG_GET_MIRRORIMAGE_DATA",
            ClientOpcodeMessage::CMSG_KEEP_ALIVE => "CMSG_KEEP_ALIVE",
            ClientOpcodeMessage::CMSG_OPT_OUT_OF_LOOT(_) => "CMSG_OPT_OUT_OF_LOOT",
            ClientOpcodeMessage::MSG_QUERY_GUILD_BANK_TEXT(_) => "MSG_QUERY_GUILD_BANK_TEXT_Client",
            ClientOpcodeMessage::CMSG_SET_GUILD_BANK_TEXT(_) => "CMSG_SET_GUILD_BANK_TEXT",
            ClientOpcodeMessage::CMSG_GRANT_LEVEL(_) => "CMSG_GRANT_LEVEL",
            ClientOpcodeMessage::CMSG_TOTEM_DESTROYED(_) => "CMSG_TOTEM_DESTROYED",
            ClientOpcodeMessage::CMSG_QUESTGIVER_STATUS_MULTIPLE_QUERY => "CMSG_QUESTGIVER_STATUS_MULTIPLE_QUERY",
            ClientOpcodeMessage::CMSG_SET_PLAYER_DECLINED_NAMES(_) => "CMSG_SET_PLAYER_DECLINED_NAMES",
            ClientOpcodeMessage::CMSG_ACCEPT_LEVEL_GRANT(_) => "CMSG_ACCEPT_LEVEL_GRANT",
            ClientOpcodeMessage::CMSG_ALTER_APPEARANCE(_) => "CMSG_ALTER_APPEARANCE",
            ClientOpcodeMessage::CMSG_CALENDAR_GET_CALENDAR => "CMSG_CALENDAR_GET_CALENDAR",
            ClientOpcodeMessage::CMSG_CALENDAR_GET_EVENT(_) => "CMSG_CALENDAR_GET_EVENT",
            ClientOpcodeMessage::CMSG_CALENDAR_GUILD_FILTER(_) => "CMSG_CALENDAR_GUILD_FILTER",
            ClientOpcodeMessage::CMSG_CALENDAR_ARENA_TEAM(_) => "CMSG_CALENDAR_ARENA_TEAM",
            ClientOpcodeMessage::CMSG_CALENDAR_ADD_EVENT(_) => "CMSG_CALENDAR_ADD_EVENT",
            ClientOpcodeMessage::CMSG_CALENDAR_UPDATE_EVENT(_) => "CMSG_CALENDAR_UPDATE_EVENT",
            ClientOpcodeMessage::CMSG_CALENDAR_REMOVE_EVENT(_) => "CMSG_CALENDAR_REMOVE_EVENT",
            ClientOpcodeMessage::CMSG_CALENDAR_COPY_EVENT(_) => "CMSG_CALENDAR_COPY_EVENT",
            ClientOpcodeMessage::CMSG_CALENDAR_EVENT_INVITE(_) => "CMSG_CALENDAR_EVENT_INVITE",
            ClientOpcodeMessage::CMSG_CALENDAR_EVENT_RSVP(_) => "CMSG_CALENDAR_EVENT_RSVP",
            ClientOpcodeMessage::CMSG_CALENDAR_EVENT_REMOVE_INVITE(_) => "CMSG_CALENDAR_EVENT_REMOVE_INVITE",
            ClientOpcodeMessage::CMSG_CALENDAR_EVENT_STATUS(_) => "CMSG_CALENDAR_EVENT_STATUS",
            ClientOpcodeMessage::CMSG_CALENDAR_EVENT_MODERATOR_STATUS(_) => "CMSG_CALENDAR_EVENT_MODERATOR_STATUS",
            ClientOpcodeMessage::CMSG_CALENDAR_COMPLAIN(_) => "CMSG_CALENDAR_COMPLAIN",
            ClientOpcodeMessage::CMSG_UPDATE_MISSILE_TRAJECTORY(_) => "CMSG_UPDATE_MISSILE_TRAJECTORY",
            ClientOpcodeMessage::CMSG_COMPLETE_MOVIE => "CMSG_COMPLETE_MOVIE",
            ClientOpcodeMessage::CMSG_QUERY_INSPECT_ACHIEVEMENTS(_) => "CMSG_QUERY_INSPECT_ACHIEVEMENTS",
            ClientOpcodeMessage::CMSG_DISMISS_CONTROLLED_VEHICLE => "CMSG_DISMISS_CONTROLLED_VEHICLE",
            ClientOpcodeMessage::CMSG_CHAR_CUSTOMIZE(_) => "CMSG_CHAR_CUSTOMIZE",
            ClientOpcodeMessage::CMSG_REQUEST_VEHICLE_EXIT => "CMSG_REQUEST_VEHICLE_EXIT",
            ClientOpcodeMessage::CMSG_REQUEST_VEHICLE_PREV_SEAT => "CMSG_REQUEST_VEHICLE_PREV_SEAT",
            ClientOpcodeMessage::CMSG_REQUEST_VEHICLE_NEXT_SEAT => "CMSG_REQUEST_VEHICLE_NEXT_SEAT",
            ClientOpcodeMessage::CMSG_REQUEST_VEHICLE_SWITCH_SEAT(_) => "CMSG_REQUEST_VEHICLE_SWITCH_SEAT",
            ClientOpcodeMessage::CMSG_PET_LEARN_TALENT(_) => "CMSG_PET_LEARN_TALENT",
            ClientOpcodeMessage::CMSG_GAMEOBJ_REPORT_USE(_) => "CMSG_GAMEOBJ_REPORT_USE",
            ClientOpcodeMessage::CMSG_REMOVE_GLYPH(_) => "CMSG_REMOVE_GLYPH",
            ClientOpcodeMessage::CMSG_DISMISS_CRITTER(_) => "CMSG_DISMISS_CRITTER",
            ClientOpcodeMessage::CMSG_AUCTION_LIST_PENDING_SALES(_) => "CMSG_AUCTION_LIST_PENDING_SALES",
            ClientOpcodeMessage::CMSG_ENABLETAXI(_) => "CMSG_ENABLETAXI",
            ClientOpcodeMessage::CMSG_CHANGE_SEATS_ON_CONTROLLED_VEHICLE(_) => "CMSG_CHANGE_SEATS_ON_CONTROLLED_VEHICLE",
            ClientOpcodeMessage::CMSG_HEARTH_AND_RESURRECT => "CMSG_HEARTH_AND_RESURRECT",
            ClientOpcodeMessage::CMSG_PLAYER_VEHICLE_ENTER(_) => "CMSG_PLAYER_VEHICLE_ENTER",
            ClientOpcodeMessage::CMSG_CONTROLLER_EJECT_PASSENGER(_) => "CMSG_CONTROLLER_EJECT_PASSENGER",
            ClientOpcodeMessage::CMSG_ITEM_REFUND_INFO(_) => "CMSG_ITEM_REFUND_INFO",
            ClientOpcodeMessage::CMSG_ITEM_REFUND(_) => "CMSG_ITEM_REFUND",
            ClientOpcodeMessage::CMSG_CORPSE_MAP_POSITION_QUERY(_) => "CMSG_CORPSE_MAP_POSITION_QUERY",
            ClientOpcodeMessage::CMSG_CALENDAR_EVENT_SIGNUP(_) => "CMSG_CALENDAR_EVENT_SIGNUP",
            ClientOpcodeMessage::CMSG_EQUIPMENT_SET_SAVE(_) => "CMSG_EQUIPMENT_SET_SAVE",
            ClientOpcodeMessage::CMSG_UPDATE_PROJECTILE_POSITION(_) => "CMSG_UPDATE_PROJECTILE_POSITION",
            ClientOpcodeMessage::CMSG_LEARN_PREVIEW_TALENTS(_) => "CMSG_LEARN_PREVIEW_TALENTS",
            ClientOpcodeMessage::CMSG_LEARN_PREVIEW_TALENTS_PET(_) => "CMSG_LEARN_PREVIEW_TALENTS_PET",
            ClientOpcodeMessage::CMSG_MOVE_GRAVITY_DISABLE_ACK(_) => "CMSG_MOVE_GRAVITY_DISABLE_ACK",
            ClientOpcodeMessage::CMSG_MOVE_GRAVITY_ENABLE_ACK(_) => "CMSG_MOVE_GRAVITY_ENABLE_ACK",
            ClientOpcodeMessage::CMSG_EQUIPMENT_SET_USE(_) => "CMSG_EQUIPMENT_SET_USE",
            ClientOpcodeMessage::CMSG_CHAR_FACTION_CHANGE(_) => "CMSG_CHAR_FACTION_CHANGE",
            ClientOpcodeMessage::CMSG_BATTLEFIELD_MGR_ENTRY_INVITE_RESPONSE(_) => "CMSG_BATTLEFIELD_MGR_ENTRY_INVITE_RESPONSE",
            ClientOpcodeMessage::CMSG_BATTLEFIELD_MGR_QUEUE_INVITE_RESPONSE(_) => "CMSG_BATTLEFIELD_MGR_QUEUE_INVITE_RESPONSE",
            ClientOpcodeMessage::CMSG_BATTLEFIELD_MGR_EXIT_REQUEST(_) => "CMSG_BATTLEFIELD_MGR_EXIT_REQUEST",
            ClientOpcodeMessage::MSG_SET_RAID_DIFFICULTY(_) => "MSG_SET_RAID_DIFFICULTY_Client",
            ClientOpcodeMessage::CMSG_GMRESPONSE_RESOLVE => "CMSG_GMRESPONSE_RESOLVE",
            ClientOpcodeMessage::CMSG_WORLD_STATE_UI_TIMER_UPDATE => "CMSG_WORLD_STATE_UI_TIMER_UPDATE",
            ClientOpcodeMessage::CMSG_CHAR_RACE_CHANGE(_) => "CMSG_CHAR_RACE_CHANGE",
            ClientOpcodeMessage::CMSG_READY_FOR_ACCOUNT_DATA_TIMES => "CMSG_READY_FOR_ACCOUNT_DATA_TIMES",
            ClientOpcodeMessage::CMSG_QUERY_QUESTS_COMPLETED => "CMSG_QUERY_QUESTS_COMPLETED",
            ClientOpcodeMessage::CMSG_GM_REPORT_LAG(_) => "CMSG_GM_REPORT_LAG",
            ClientOpcodeMessage::CMSG_MOVE_SET_COLLISION_HGT_ACK(_) => "CMSG_MOVE_SET_COLLISION_HGT_ACK",
        })
    }
}

impl From<MSG_MOVE_START_FORWARD> for ClientOpcodeMessage {
    fn from(c: MSG_MOVE_START_FORWARD) -> Self {
        Self::MSG_MOVE_START_FORWARD(Box::new(c))
    }
}

impl From<MSG_MOVE_START_BACKWARD> for ClientOpcodeMessage {
    fn from(c: MSG_MOVE_START_BACKWARD) -> Self {
        Self::MSG_MOVE_START_BACKWARD(Box::new(c))
    }
}

impl From<MSG_MOVE_STOP> for ClientOpcodeMessage {
    fn from(c: MSG_MOVE_STOP) -> Self {
        Self::MSG_MOVE_STOP(Box::new(c))
    }
}

impl From<MSG_MOVE_START_STRAFE_LEFT> for ClientOpcodeMessage {
    fn from(c: MSG_MOVE_START_STRAFE_LEFT) -> Self {
        Self::MSG_MOVE_START_STRAFE_LEFT(Box::new(c))
    }
}

impl From<MSG_MOVE_START_STRAFE_RIGHT> for ClientOpcodeMessage {
    fn from(c: MSG_MOVE_START_STRAFE_RIGHT) -> Self {
        Self::MSG_MOVE_START_STRAFE_RIGHT(Box::new(c))
    }
}

impl From<MSG_MOVE_STOP_STRAFE> for ClientOpcodeMessage {
    fn from(c: MSG_MOVE_STOP_STRAFE) -> Self {
        Self::MSG_MOVE_STOP_STRAFE(Box::new(c))
    }
}

impl From<MSG_MOVE_JUMP> for ClientOpcodeMessage {
    fn from(c: MSG_MOVE_JUMP) -> Self {
        Self::MSG_MOVE_JUMP(Box::new(c))
    }
}

impl From<MSG_MOVE_START_TURN_LEFT> for ClientOpcodeMessage {
    fn from(c: MSG_MOVE_START_TURN_LEFT) -> Self {
        Self::MSG_MOVE_START_TURN_LEFT(Box::new(c))
    }
}

impl From<MSG_MOVE_START_TURN_RIGHT> for ClientOpcodeMessage {
    fn from(c: MSG_MOVE_START_TURN_RIGHT) -> Self {
        Self::MSG_MOVE_START_TURN_RIGHT(Box::new(c))
    }
}

impl From<MSG_MOVE_STOP_TURN> for ClientOpcodeMessage {
    fn from(c: MSG_MOVE_STOP_TURN) -> Self {
        Self::MSG_MOVE_STOP_TURN(Box::new(c))
    }
}

impl From<MSG_MOVE_START_PITCH_UP> for ClientOpcodeMessage {
    fn from(c: MSG_MOVE_START_PITCH_UP) -> Self {
        Self::MSG_MOVE_START_PITCH_UP(Box::new(c))
    }
}

impl From<MSG_MOVE_START_PITCH_DOWN> for ClientOpcodeMessage {
    fn from(c: MSG_MOVE_START_PITCH_DOWN) -> Self {
        Self::MSG_MOVE_START_PITCH_DOWN(Box::new(c))
    }
}

impl From<MSG_MOVE_STOP_PITCH> for ClientOpcodeMessage {
    fn from(c: MSG_MOVE_STOP_PITCH) -> Self {
        Self::MSG_MOVE_STOP_PITCH(Box::new(c))
    }
}

impl From<MSG_MOVE_SET_RUN_MODE> for ClientOpcodeMessage {
    fn from(c: MSG_MOVE_SET_RUN_MODE) -> Self {
        Self::MSG_MOVE_SET_RUN_MODE(Box::new(c))
    }
}

impl From<MSG_MOVE_SET_WALK_MODE> for ClientOpcodeMessage {
    fn from(c: MSG_MOVE_SET_WALK_MODE) -> Self {
        Self::MSG_MOVE_SET_WALK_MODE(Box::new(c))
    }
}

impl From<MSG_MOVE_FALL_LAND> for ClientOpcodeMessage {
    fn from(c: MSG_MOVE_FALL_LAND) -> Self {
        Self::MSG_MOVE_FALL_LAND(Box::new(c))
    }
}

impl From<MSG_MOVE_START_SWIM> for ClientOpcodeMessage {
    fn from(c: MSG_MOVE_START_SWIM) -> Self {
        Self::MSG_MOVE_START_SWIM(Box::new(c))
    }
}

impl From<MSG_MOVE_STOP_SWIM> for ClientOpcodeMessage {
    fn from(c: MSG_MOVE_STOP_SWIM) -> Self {
        Self::MSG_MOVE_STOP_SWIM(Box::new(c))
    }
}

impl From<MSG_MOVE_SET_FACING> for ClientOpcodeMessage {
    fn from(c: MSG_MOVE_SET_FACING) -> Self {
        Self::MSG_MOVE_SET_FACING(Box::new(c))
    }
}

impl From<MSG_MOVE_SET_PITCH> for ClientOpcodeMessage {
    fn from(c: MSG_MOVE_SET_PITCH) -> Self {
        Self::MSG_MOVE_SET_PITCH(Box::new(c))
    }
}

impl From<MSG_MOVE_WORLDPORT_ACK> for ClientOpcodeMessage {
    fn from(_: MSG_MOVE_WORLDPORT_ACK) -> Self {
        Self::MSG_MOVE_WORLDPORT_ACK
    }
}

impl From<MSG_MOVE_HEARTBEAT> for ClientOpcodeMessage {
    fn from(c: MSG_MOVE_HEARTBEAT) -> Self {
        Self::MSG_MOVE_HEARTBEAT(Box::new(c))
    }
}

impl From<MSG_MOVE_HOVER> for ClientOpcodeMessage {
    fn from(c: MSG_MOVE_HOVER) -> Self {
        Self::MSG_MOVE_HOVER(Box::new(c))
    }
}

impl From<MSG_PETITION_DECLINE> for ClientOpcodeMessage {
    fn from(c: MSG_PETITION_DECLINE) -> Self {
        Self::MSG_PETITION_DECLINE(c)
    }
}

impl From<MSG_TABARDVENDOR_ACTIVATE> for ClientOpcodeMessage {
    fn from(c: MSG_TABARDVENDOR_ACTIVATE) -> Self {
        Self::MSG_TABARDVENDOR_ACTIVATE(c)
    }
}

impl From<MSG_QUEST_PUSH_RESULT> for ClientOpcodeMessage {
    fn from(c: MSG_QUEST_PUSH_RESULT) -> Self {
        Self::MSG_QUEST_PUSH_RESULT(Box::new(c))
    }
}

impl From<MSG_MOVE_WATER_WALK> for ClientOpcodeMessage {
    fn from(c: MSG_MOVE_WATER_WALK) -> Self {
        Self::MSG_MOVE_WATER_WALK(Box::new(c))
    }
}

impl From<MSG_PETITION_RENAME> for ClientOpcodeMessage {
    fn from(c: MSG_PETITION_RENAME) -> Self {
        Self::MSG_PETITION_RENAME(Box::new(c))
    }
}

impl From<MSG_MOVE_START_ASCEND> for ClientOpcodeMessage {
    fn from(c: MSG_MOVE_START_ASCEND) -> Self {
        Self::MSG_MOVE_START_ASCEND(Box::new(c))
    }
}

impl From<MSG_MOVE_STOP_ASCEND> for ClientOpcodeMessage {
    fn from(c: MSG_MOVE_STOP_ASCEND) -> Self {
        Self::MSG_MOVE_STOP_ASCEND(Box::new(c))
    }
}

impl From<MSG_MOVE_SET_FLIGHT_BACK_SPEED> for ClientOpcodeMessage {
    fn from(c: MSG_MOVE_SET_FLIGHT_BACK_SPEED) -> Self {
        Self::MSG_MOVE_SET_FLIGHT_BACK_SPEED(Box::new(c))
    }
}

impl From<MSG_MOVE_START_DESCEND> for ClientOpcodeMessage {
    fn from(c: MSG_MOVE_START_DESCEND) -> Self {
        Self::MSG_MOVE_START_DESCEND(Box::new(c))
    }
}

impl From<CMSG_CALENDAR_GET_NUM_PENDING> for ClientOpcodeMessage {
    fn from(_: CMSG_CALENDAR_GET_NUM_PENDING) -> Self {
        Self::CMSG_CALENDAR_GET_NUM_PENDING
    }
}

impl From<CMSG_BOOTME> for ClientOpcodeMessage {
    fn from(_: CMSG_BOOTME) -> Self {
        Self::CMSG_BOOTME
    }
}

impl From<CMSG_DBLOOKUP> for ClientOpcodeMessage {
    fn from(c: CMSG_DBLOOKUP) -> Self {
        Self::CMSG_DBLOOKUP(Box::new(c))
    }
}

impl From<CMSG_WORLD_TELEPORT> for ClientOpcodeMessage {
    fn from(c: CMSG_WORLD_TELEPORT) -> Self {
        Self::CMSG_WORLD_TELEPORT(Box::new(c))
    }
}

impl From<CMSG_TELEPORT_TO_UNIT> for ClientOpcodeMessage {
    fn from(c: CMSG_TELEPORT_TO_UNIT) -> Self {
        Self::CMSG_TELEPORT_TO_UNIT(Box::new(c))
    }
}

impl From<CMSG_CHAR_CREATE> for ClientOpcodeMessage {
    fn from(c: CMSG_CHAR_CREATE) -> Self {
        Self::CMSG_CHAR_CREATE(Box::new(c))
    }
}

impl From<CMSG_CHAR_ENUM> for ClientOpcodeMessage {
    fn from(_: CMSG_CHAR_ENUM) -> Self {
        Self::CMSG_CHAR_ENUM
    }
}

impl From<CMSG_CHAR_DELETE> for ClientOpcodeMessage {
    fn from(c: CMSG_CHAR_DELETE) -> Self {
        Self::CMSG_CHAR_DELETE(c)
    }
}

impl From<CMSG_PLAYER_LOGIN> for ClientOpcodeMessage {
    fn from(c: CMSG_PLAYER_LOGIN) -> Self {
        Self::CMSG_PLAYER_LOGIN(c)
    }
}

impl From<CMSG_PLAYER_LOGOUT> for ClientOpcodeMessage {
    fn from(_: CMSG_PLAYER_LOGOUT) -> Self {
        Self::CMSG_PLAYER_LOGOUT
    }
}

impl From<CMSG_LOGOUT_REQUEST> for ClientOpcodeMessage {
    fn from(_: CMSG_LOGOUT_REQUEST) -> Self {
        Self::CMSG_LOGOUT_REQUEST
    }
}

impl From<CMSG_LOGOUT_CANCEL> for ClientOpcodeMessage {
    fn from(_: CMSG_LOGOUT_CANCEL) -> Self {
        Self::CMSG_LOGOUT_CANCEL
    }
}

impl From<CMSG_NAME_QUERY> for ClientOpcodeMessage {
    fn from(c: CMSG_NAME_QUERY) -> Self {
        Self::CMSG_NAME_QUERY(c)
    }
}

impl From<CMSG_PET_NAME_QUERY> for ClientOpcodeMessage {
    fn from(c: CMSG_PET_NAME_QUERY) -> Self {
        Self::CMSG_PET_NAME_QUERY(Box::new(c))
    }
}

impl From<CMSG_GUILD_QUERY> for ClientOpcodeMessage {
    fn from(c: CMSG_GUILD_QUERY) -> Self {
        Self::CMSG_GUILD_QUERY(c)
    }
}

impl From<CMSG_ITEM_QUERY_SINGLE> for ClientOpcodeMessage {
    fn from(c: CMSG_ITEM_QUERY_SINGLE) -> Self {
        Self::CMSG_ITEM_QUERY_SINGLE(c)
    }
}

impl From<CMSG_PAGE_TEXT_QUERY> for ClientOpcodeMessage {
    fn from(c: CMSG_PAGE_TEXT_QUERY) -> Self {
        Self::CMSG_PAGE_TEXT_QUERY(Box::new(c))
    }
}

impl From<CMSG_QUEST_QUERY> for ClientOpcodeMessage {
    fn from(c: CMSG_QUEST_QUERY) -> Self {
        Self::CMSG_QUEST_QUERY(c)
    }
}

impl From<CMSG_GAMEOBJECT_QUERY> for ClientOpcodeMessage {
    fn from(c: CMSG_GAMEOBJECT_QUERY) -> Self {
        Self::CMSG_GAMEOBJECT_QUERY(Box::new(c))
    }
}

impl From<CMSG_CREATURE_QUERY> for ClientOpcodeMessage {
    fn from(c: CMSG_CREATURE_QUERY) -> Self {
        Self::CMSG_CREATURE_QUERY(Box::new(c))
    }
}

impl From<CMSG_WHO> for ClientOpcodeMessage {
    fn from(c: CMSG_WHO) -> Self {
        Self::CMSG_WHO(Box::new(c))
    }
}

impl From<CMSG_WHOIS> for ClientOpcodeMessage {
    fn from(c: CMSG_WHOIS) -> Self {
        Self::CMSG_WHOIS(Box::new(c))
    }
}

impl From<CMSG_CONTACT_LIST> for ClientOpcodeMessage {
    fn from(c: CMSG_CONTACT_LIST) -> Self {
        Self::CMSG_CONTACT_LIST(c)
    }
}

impl From<CMSG_ADD_FRIEND> for ClientOpcodeMessage {
    fn from(c: CMSG_ADD_FRIEND) -> Self {
        Self::CMSG_ADD_FRIEND(Box::new(c))
    }
}

impl From<CMSG_DEL_FRIEND> for ClientOpcodeMessage {
    fn from(c: CMSG_DEL_FRIEND) -> Self {
        Self::CMSG_DEL_FRIEND(c)
    }
}

impl From<CMSG_SET_CONTACT_NOTES> for ClientOpcodeMessage {
    fn from(c: CMSG_SET_CONTACT_NOTES) -> Self {
        Self::CMSG_SET_CONTACT_NOTES(Box::new(c))
    }
}

impl From<CMSG_ADD_IGNORE> for ClientOpcodeMessage {
    fn from(c: CMSG_ADD_IGNORE) -> Self {
        Self::CMSG_ADD_IGNORE(Box::new(c))
    }
}

impl From<CMSG_DEL_IGNORE> for ClientOpcodeMessage {
    fn from(c: CMSG_DEL_IGNORE) -> Self {
        Self::CMSG_DEL_IGNORE(c)
    }
}

impl From<CMSG_GROUP_INVITE> for ClientOpcodeMessage {
    fn from(c: CMSG_GROUP_INVITE) -> Self {
        Self::CMSG_GROUP_INVITE(Box::new(c))
    }
}

impl From<CMSG_GROUP_CANCEL> for ClientOpcodeMessage {
    fn from(_: CMSG_GROUP_CANCEL) -> Self {
        Self::CMSG_GROUP_CANCEL
    }
}

impl From<CMSG_GROUP_ACCEPT> for ClientOpcodeMessage {
    fn from(_: CMSG_GROUP_ACCEPT) -> Self {
        Self::CMSG_GROUP_ACCEPT
    }
}

impl From<CMSG_GROUP_DECLINE> for ClientOpcodeMessage {
    fn from(_: CMSG_GROUP_DECLINE) -> Self {
        Self::CMSG_GROUP_DECLINE
    }
}

impl From<CMSG_GROUP_UNINVITE> for ClientOpcodeMessage {
    fn from(c: CMSG_GROUP_UNINVITE) -> Self {
        Self::CMSG_GROUP_UNINVITE(Box::new(c))
    }
}

impl From<CMSG_GROUP_UNINVITE_GUID> for ClientOpcodeMessage {
    fn from(c: CMSG_GROUP_UNINVITE_GUID) -> Self {
        Self::CMSG_GROUP_UNINVITE_GUID(Box::new(c))
    }
}

impl From<CMSG_GROUP_SET_LEADER> for ClientOpcodeMessage {
    fn from(c: CMSG_GROUP_SET_LEADER) -> Self {
        Self::CMSG_GROUP_SET_LEADER(c)
    }
}

impl From<CMSG_LOOT_METHOD> for ClientOpcodeMessage {
    fn from(c: CMSG_LOOT_METHOD) -> Self {
        Self::CMSG_LOOT_METHOD(Box::new(c))
    }
}

impl From<CMSG_GROUP_DISBAND> for ClientOpcodeMessage {
    fn from(_: CMSG_GROUP_DISBAND) -> Self {
        Self::CMSG_GROUP_DISBAND
    }
}

impl From<CMSG_GUILD_CREATE> for ClientOpcodeMessage {
    fn from(c: CMSG_GUILD_CREATE) -> Self {
        Self::CMSG_GUILD_CREATE(Box::new(c))
    }
}

impl From<CMSG_GUILD_INVITE> for ClientOpcodeMessage {
    fn from(c: CMSG_GUILD_INVITE) -> Self {
        Self::CMSG_GUILD_INVITE(Box::new(c))
    }
}

impl From<CMSG_GUILD_ACCEPT> for ClientOpcodeMessage {
    fn from(_: CMSG_GUILD_ACCEPT) -> Self {
        Self::CMSG_GUILD_ACCEPT
    }
}

impl From<CMSG_GUILD_DECLINE> for ClientOpcodeMessage {
    fn from(_: CMSG_GUILD_DECLINE) -> Self {
        Self::CMSG_GUILD_DECLINE
    }
}

impl From<CMSG_GUILD_INFO> for ClientOpcodeMessage {
    fn from(_: CMSG_GUILD_INFO) -> Self {
        Self::CMSG_GUILD_INFO
    }
}

impl From<CMSG_GUILD_ROSTER> for ClientOpcodeMessage {
    fn from(_: CMSG_GUILD_ROSTER) -> Self {
        Self::CMSG_GUILD_ROSTER
    }
}

impl From<CMSG_GUILD_PROMOTE> for ClientOpcodeMessage {
    fn from(c: CMSG_GUILD_PROMOTE) -> Self {
        Self::CMSG_GUILD_PROMOTE(Box::new(c))
    }
}

impl From<CMSG_GUILD_DEMOTE> for ClientOpcodeMessage {
    fn from(c: CMSG_GUILD_DEMOTE) -> Self {
        Self::CMSG_GUILD_DEMOTE(Box::new(c))
    }
}

impl From<CMSG_GUILD_LEAVE> for ClientOpcodeMessage {
    fn from(_: CMSG_GUILD_LEAVE) -> Self {
        Self::CMSG_GUILD_LEAVE
    }
}

impl From<CMSG_GUILD_REMOVE> for ClientOpcodeMessage {
    fn from(c: CMSG_GUILD_REMOVE) -> Self {
        Self::CMSG_GUILD_REMOVE(Box::new(c))
    }
}

impl From<CMSG_GUILD_DISBAND> for ClientOpcodeMessage {
    fn from(_: CMSG_GUILD_DISBAND) -> Self {
        Self::CMSG_GUILD_DISBAND
    }
}

impl From<CMSG_GUILD_LEADER> for ClientOpcodeMessage {
    fn from(c: CMSG_GUILD_LEADER) -> Self {
        Self::CMSG_GUILD_LEADER(Box::new(c))
    }
}

impl From<CMSG_GUILD_MOTD> for ClientOpcodeMessage {
    fn from(c: CMSG_GUILD_MOTD) -> Self {
        Self::CMSG_GUILD_MOTD(Box::new(c))
    }
}

impl From<CMSG_MESSAGECHAT> for ClientOpcodeMessage {
    fn from(c: CMSG_MESSAGECHAT) -> Self {
        Self::CMSG_MESSAGECHAT(Box::new(c))
    }
}

impl From<CMSG_JOIN_CHANNEL> for ClientOpcodeMessage {
    fn from(c: CMSG_JOIN_CHANNEL) -> Self {
        Self::CMSG_JOIN_CHANNEL(Box::new(c))
    }
}

impl From<CMSG_LEAVE_CHANNEL> for ClientOpcodeMessage {
    fn from(c: CMSG_LEAVE_CHANNEL) -> Self {
        Self::CMSG_LEAVE_CHANNEL(Box::new(c))
    }
}

impl From<CMSG_CHANNEL_LIST> for ClientOpcodeMessage {
    fn from(c: CMSG_CHANNEL_LIST) -> Self {
        Self::CMSG_CHANNEL_LIST(Box::new(c))
    }
}

impl From<CMSG_CHANNEL_PASSWORD> for ClientOpcodeMessage {
    fn from(c: CMSG_CHANNEL_PASSWORD) -> Self {
        Self::CMSG_CHANNEL_PASSWORD(Box::new(c))
    }
}

impl From<CMSG_CHANNEL_SET_OWNER> for ClientOpcodeMessage {
    fn from(c: CMSG_CHANNEL_SET_OWNER) -> Self {
        Self::CMSG_CHANNEL_SET_OWNER(Box::new(c))
    }
}

impl From<CMSG_CHANNEL_OWNER> for ClientOpcodeMessage {
    fn from(c: CMSG_CHANNEL_OWNER) -> Self {
        Self::CMSG_CHANNEL_OWNER(Box::new(c))
    }
}

impl From<CMSG_CHANNEL_MODERATOR> for ClientOpcodeMessage {
    fn from(c: CMSG_CHANNEL_MODERATOR) -> Self {
        Self::CMSG_CHANNEL_MODERATOR(Box::new(c))
    }
}

impl From<CMSG_CHANNEL_UNMODERATOR> for ClientOpcodeMessage {
    fn from(c: CMSG_CHANNEL_UNMODERATOR) -> Self {
        Self::CMSG_CHANNEL_UNMODERATOR(Box::new(c))
    }
}

impl From<CMSG_CHANNEL_MUTE> for ClientOpcodeMessage {
    fn from(c: CMSG_CHANNEL_MUTE) -> Self {
        Self::CMSG_CHANNEL_MUTE(Box::new(c))
    }
}

impl From<CMSG_CHANNEL_UNMUTE> for ClientOpcodeMessage {
    fn from(c: CMSG_CHANNEL_UNMUTE) -> Self {
        Self::CMSG_CHANNEL_UNMUTE(Box::new(c))
    }
}

impl From<CMSG_CHANNEL_INVITE> for ClientOpcodeMessage {
    fn from(c: CMSG_CHANNEL_INVITE) -> Self {
        Self::CMSG_CHANNEL_INVITE(Box::new(c))
    }
}

impl From<CMSG_CHANNEL_KICK> for ClientOpcodeMessage {
    fn from(c: CMSG_CHANNEL_KICK) -> Self {
        Self::CMSG_CHANNEL_KICK(Box::new(c))
    }
}

impl From<CMSG_CHANNEL_BAN> for ClientOpcodeMessage {
    fn from(c: CMSG_CHANNEL_BAN) -> Self {
        Self::CMSG_CHANNEL_BAN(Box::new(c))
    }
}

impl From<CMSG_CHANNEL_UNBAN> for ClientOpcodeMessage {
    fn from(c: CMSG_CHANNEL_UNBAN) -> Self {
        Self::CMSG_CHANNEL_UNBAN(Box::new(c))
    }
}

impl From<CMSG_CHANNEL_ANNOUNCEMENTS> for ClientOpcodeMessage {
    fn from(c: CMSG_CHANNEL_ANNOUNCEMENTS) -> Self {
        Self::CMSG_CHANNEL_ANNOUNCEMENTS(Box::new(c))
    }
}

impl From<CMSG_CHANNEL_MODERATE> for ClientOpcodeMessage {
    fn from(c: CMSG_CHANNEL_MODERATE) -> Self {
        Self::CMSG_CHANNEL_MODERATE(Box::new(c))
    }
}

impl From<CMSG_USE_ITEM> for ClientOpcodeMessage {
    fn from(c: CMSG_USE_ITEM) -> Self {
        Self::CMSG_USE_ITEM(Box::new(c))
    }
}

impl From<CMSG_OPEN_ITEM> for ClientOpcodeMessage {
    fn from(c: CMSG_OPEN_ITEM) -> Self {
        Self::CMSG_OPEN_ITEM(c)
    }
}

impl From<CMSG_READ_ITEM> for ClientOpcodeMessage {
    fn from(c: CMSG_READ_ITEM) -> Self {
        Self::CMSG_READ_ITEM(c)
    }
}

impl From<CMSG_GAMEOBJ_USE> for ClientOpcodeMessage {
    fn from(c: CMSG_GAMEOBJ_USE) -> Self {
        Self::CMSG_GAMEOBJ_USE(c)
    }
}

impl From<CMSG_AREATRIGGER> for ClientOpcodeMessage {
    fn from(c: CMSG_AREATRIGGER) -> Self {
        Self::CMSG_AREATRIGGER(c)
    }
}

impl From<MSG_MOVE_TELEPORT_Server> for ClientOpcodeMessage {
    fn from(c: MSG_MOVE_TELEPORT_Server) -> Self {
        Self::MSG_MOVE_TELEPORT(Box::new(c))
    }
}

impl From<MSG_MOVE_TELEPORT_ACK_Client> for ClientOpcodeMessage {
    fn from(c: MSG_MOVE_TELEPORT_ACK_Client) -> Self {
        Self::MSG_MOVE_TELEPORT_ACK(Box::new(c))
    }
}

impl From<CMSG_MOVE_SET_RAW_POSITION> for ClientOpcodeMessage {
    fn from(c: CMSG_MOVE_SET_RAW_POSITION) -> Self {
        Self::CMSG_MOVE_SET_RAW_POSITION(Box::new(c))
    }
}

impl From<CMSG_FORCE_RUN_SPEED_CHANGE_ACK> for ClientOpcodeMessage {
    fn from(c: CMSG_FORCE_RUN_SPEED_CHANGE_ACK) -> Self {
        Self::CMSG_FORCE_RUN_SPEED_CHANGE_ACK(Box::new(c))
    }
}

impl From<CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACK> for ClientOpcodeMessage {
    fn from(c: CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACK) -> Self {
        Self::CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACK(Box::new(c))
    }
}

impl From<CMSG_FORCE_SWIM_SPEED_CHANGE_ACK> for ClientOpcodeMessage {
    fn from(c: CMSG_FORCE_SWIM_SPEED_CHANGE_ACK) -> Self {
        Self::CMSG_FORCE_SWIM_SPEED_CHANGE_ACK(Box::new(c))
    }
}

impl From<CMSG_FORCE_MOVE_ROOT_ACK> for ClientOpcodeMessage {
    fn from(c: CMSG_FORCE_MOVE_ROOT_ACK) -> Self {
        Self::CMSG_FORCE_MOVE_ROOT_ACK(Box::new(c))
    }
}

impl From<CMSG_FORCE_MOVE_UNROOT_ACK> for ClientOpcodeMessage {
    fn from(c: CMSG_FORCE_MOVE_UNROOT_ACK) -> Self {
        Self::CMSG_FORCE_MOVE_UNROOT_ACK(Box::new(c))
    }
}

impl From<CMSG_MOVE_KNOCK_BACK_ACK> for ClientOpcodeMessage {
    fn from(c: CMSG_MOVE_KNOCK_BACK_ACK) -> Self {
        Self::CMSG_MOVE_KNOCK_BACK_ACK(Box::new(c))
    }
}

impl From<CMSG_MOVE_HOVER_ACK> for ClientOpcodeMessage {
    fn from(c: CMSG_MOVE_HOVER_ACK) -> Self {
        Self::CMSG_MOVE_HOVER_ACK(Box::new(c))
    }
}

impl From<CMSG_NEXT_CINEMATIC_CAMERA> for ClientOpcodeMessage {
    fn from(_: CMSG_NEXT_CINEMATIC_CAMERA) -> Self {
        Self::CMSG_NEXT_CINEMATIC_CAMERA
    }
}

impl From<CMSG_COMPLETE_CINEMATIC> for ClientOpcodeMessage {
    fn from(_: CMSG_COMPLETE_CINEMATIC) -> Self {
        Self::CMSG_COMPLETE_CINEMATIC
    }
}

impl From<CMSG_TUTORIAL_FLAG> for ClientOpcodeMessage {
    fn from(c: CMSG_TUTORIAL_FLAG) -> Self {
        Self::CMSG_TUTORIAL_FLAG(c)
    }
}

impl From<CMSG_TUTORIAL_CLEAR> for ClientOpcodeMessage {
    fn from(_: CMSG_TUTORIAL_CLEAR) -> Self {
        Self::CMSG_TUTORIAL_CLEAR
    }
}

impl From<CMSG_TUTORIAL_RESET> for ClientOpcodeMessage {
    fn from(_: CMSG_TUTORIAL_RESET) -> Self {
        Self::CMSG_TUTORIAL_RESET
    }
}

impl From<CMSG_STANDSTATECHANGE> for ClientOpcodeMessage {
    fn from(c: CMSG_STANDSTATECHANGE) -> Self {
        Self::CMSG_STANDSTATECHANGE(c)
    }
}

impl From<CMSG_EMOTE> for ClientOpcodeMessage {
    fn from(c: CMSG_EMOTE) -> Self {
        Self::CMSG_EMOTE(c)
    }
}

impl From<CMSG_TEXT_EMOTE> for ClientOpcodeMessage {
    fn from(c: CMSG_TEXT_EMOTE) -> Self {
        Self::CMSG_TEXT_EMOTE(Box::new(c))
    }
}

impl From<CMSG_AUTOSTORE_LOOT_ITEM> for ClientOpcodeMessage {
    fn from(c: CMSG_AUTOSTORE_LOOT_ITEM) -> Self {
        Self::CMSG_AUTOSTORE_LOOT_ITEM(c)
    }
}

impl From<CMSG_AUTOEQUIP_ITEM> for ClientOpcodeMessage {
    fn from(c: CMSG_AUTOEQUIP_ITEM) -> Self {
        Self::CMSG_AUTOEQUIP_ITEM(c)
    }
}

impl From<CMSG_AUTOSTORE_BAG_ITEM> for ClientOpcodeMessage {
    fn from(c: CMSG_AUTOSTORE_BAG_ITEM) -> Self {
        Self::CMSG_AUTOSTORE_BAG_ITEM(c)
    }
}

impl From<CMSG_SWAP_ITEM> for ClientOpcodeMessage {
    fn from(c: CMSG_SWAP_ITEM) -> Self {
        Self::CMSG_SWAP_ITEM(c)
    }
}

impl From<CMSG_SWAP_INV_ITEM> for ClientOpcodeMessage {
    fn from(c: CMSG_SWAP_INV_ITEM) -> Self {
        Self::CMSG_SWAP_INV_ITEM(c)
    }
}

impl From<CMSG_SPLIT_ITEM> for ClientOpcodeMessage {
    fn from(c: CMSG_SPLIT_ITEM) -> Self {
        Self::CMSG_SPLIT_ITEM(c)
    }
}

impl From<CMSG_AUTOEQUIP_ITEM_SLOT> for ClientOpcodeMessage {
    fn from(c: CMSG_AUTOEQUIP_ITEM_SLOT) -> Self {
        Self::CMSG_AUTOEQUIP_ITEM_SLOT(Box::new(c))
    }
}

impl From<CMSG_DESTROYITEM> for ClientOpcodeMessage {
    fn from(c: CMSG_DESTROYITEM) -> Self {
        Self::CMSG_DESTROYITEM(c)
    }
}

impl From<CMSG_INSPECT> for ClientOpcodeMessage {
    fn from(c: CMSG_INSPECT) -> Self {
        Self::CMSG_INSPECT(c)
    }
}

impl From<CMSG_INITIATE_TRADE> for ClientOpcodeMessage {
    fn from(c: CMSG_INITIATE_TRADE) -> Self {
        Self::CMSG_INITIATE_TRADE(c)
    }
}

impl From<CMSG_BEGIN_TRADE> for ClientOpcodeMessage {
    fn from(_: CMSG_BEGIN_TRADE) -> Self {
        Self::CMSG_BEGIN_TRADE
    }
}

impl From<CMSG_BUSY_TRADE> for ClientOpcodeMessage {
    fn from(_: CMSG_BUSY_TRADE) -> Self {
        Self::CMSG_BUSY_TRADE
    }
}

impl From<CMSG_IGNORE_TRADE> for ClientOpcodeMessage {
    fn from(_: CMSG_IGNORE_TRADE) -> Self {
        Self::CMSG_IGNORE_TRADE
    }
}

impl From<CMSG_ACCEPT_TRADE> for ClientOpcodeMessage {
    fn from(c: CMSG_ACCEPT_TRADE) -> Self {
        Self::CMSG_ACCEPT_TRADE(c)
    }
}

impl From<CMSG_UNACCEPT_TRADE> for ClientOpcodeMessage {
    fn from(_: CMSG_UNACCEPT_TRADE) -> Self {
        Self::CMSG_UNACCEPT_TRADE
    }
}

impl From<CMSG_CANCEL_TRADE> for ClientOpcodeMessage {
    fn from(_: CMSG_CANCEL_TRADE) -> Self {
        Self::CMSG_CANCEL_TRADE
    }
}

impl From<CMSG_SET_TRADE_ITEM> for ClientOpcodeMessage {
    fn from(c: CMSG_SET_TRADE_ITEM) -> Self {
        Self::CMSG_SET_TRADE_ITEM(c)
    }
}

impl From<CMSG_CLEAR_TRADE_ITEM> for ClientOpcodeMessage {
    fn from(c: CMSG_CLEAR_TRADE_ITEM) -> Self {
        Self::CMSG_CLEAR_TRADE_ITEM(c)
    }
}

impl From<CMSG_SET_TRADE_GOLD> for ClientOpcodeMessage {
    fn from(c: CMSG_SET_TRADE_GOLD) -> Self {
        Self::CMSG_SET_TRADE_GOLD(c)
    }
}

impl From<CMSG_SET_FACTION_ATWAR> for ClientOpcodeMessage {
    fn from(c: CMSG_SET_FACTION_ATWAR) -> Self {
        Self::CMSG_SET_FACTION_ATWAR(c)
    }
}

impl From<CMSG_SET_ACTION_BUTTON> for ClientOpcodeMessage {
    fn from(c: CMSG_SET_ACTION_BUTTON) -> Self {
        Self::CMSG_SET_ACTION_BUTTON(c)
    }
}

impl From<CMSG_CAST_SPELL> for ClientOpcodeMessage {
    fn from(c: CMSG_CAST_SPELL) -> Self {
        Self::CMSG_CAST_SPELL(Box::new(c))
    }
}

impl From<CMSG_CANCEL_CAST> for ClientOpcodeMessage {
    fn from(c: CMSG_CANCEL_CAST) -> Self {
        Self::CMSG_CANCEL_CAST(c)
    }
}

impl From<CMSG_CANCEL_AURA> for ClientOpcodeMessage {
    fn from(c: CMSG_CANCEL_AURA) -> Self {
        Self::CMSG_CANCEL_AURA(c)
    }
}

impl From<CMSG_CANCEL_CHANNELLING> for ClientOpcodeMessage {
    fn from(c: CMSG_CANCEL_CHANNELLING) -> Self {
        Self::CMSG_CANCEL_CHANNELLING(c)
    }
}

impl From<CMSG_SET_SELECTION> for ClientOpcodeMessage {
    fn from(c: CMSG_SET_SELECTION) -> Self {
        Self::CMSG_SET_SELECTION(c)
    }
}

impl From<CMSG_DELETEEQUIPMENT_SET> for ClientOpcodeMessage {
    fn from(c: CMSG_DELETEEQUIPMENT_SET) -> Self {
        Self::CMSG_DELETEEQUIPMENT_SET(c)
    }
}

impl From<CMSG_INSTANCE_LOCK_RESPONSE> for ClientOpcodeMessage {
    fn from(c: CMSG_INSTANCE_LOCK_RESPONSE) -> Self {
        Self::CMSG_INSTANCE_LOCK_RESPONSE(c)
    }
}

impl From<CMSG_ATTACKSWING> for ClientOpcodeMessage {
    fn from(c: CMSG_ATTACKSWING) -> Self {
        Self::CMSG_ATTACKSWING(c)
    }
}

impl From<CMSG_ATTACKSTOP> for ClientOpcodeMessage {
    fn from(_: CMSG_ATTACKSTOP) -> Self {
        Self::CMSG_ATTACKSTOP
    }
}

impl From<CMSG_REPOP_REQUEST> for ClientOpcodeMessage {
    fn from(_: CMSG_REPOP_REQUEST) -> Self {
        Self::CMSG_REPOP_REQUEST
    }
}

impl From<CMSG_RESURRECT_RESPONSE> for ClientOpcodeMessage {
    fn from(c: CMSG_RESURRECT_RESPONSE) -> Self {
        Self::CMSG_RESURRECT_RESPONSE(Box::new(c))
    }
}

impl From<CMSG_LOOT> for ClientOpcodeMessage {
    fn from(c: CMSG_LOOT) -> Self {
        Self::CMSG_LOOT(c)
    }
}

impl From<CMSG_LOOT_MONEY> for ClientOpcodeMessage {
    fn from(_: CMSG_LOOT_MONEY) -> Self {
        Self::CMSG_LOOT_MONEY
    }
}

impl From<CMSG_LOOT_RELEASE> for ClientOpcodeMessage {
    fn from(c: CMSG_LOOT_RELEASE) -> Self {
        Self::CMSG_LOOT_RELEASE(c)
    }
}

impl From<CMSG_DUEL_ACCEPTED> for ClientOpcodeMessage {
    fn from(c: CMSG_DUEL_ACCEPTED) -> Self {
        Self::CMSG_DUEL_ACCEPTED(c)
    }
}

impl From<CMSG_DUEL_CANCELLED> for ClientOpcodeMessage {
    fn from(c: CMSG_DUEL_CANCELLED) -> Self {
        Self::CMSG_DUEL_CANCELLED(c)
    }
}

impl From<CMSG_MOUNTSPECIAL_ANIM> for ClientOpcodeMessage {
    fn from(_: CMSG_MOUNTSPECIAL_ANIM) -> Self {
        Self::CMSG_MOUNTSPECIAL_ANIM
    }
}

impl From<CMSG_PET_SET_ACTION> for ClientOpcodeMessage {
    fn from(c: CMSG_PET_SET_ACTION) -> Self {
        Self::CMSG_PET_SET_ACTION(Box::new(c))
    }
}

impl From<CMSG_PET_ACTION> for ClientOpcodeMessage {
    fn from(c: CMSG_PET_ACTION) -> Self {
        Self::CMSG_PET_ACTION(Box::new(c))
    }
}

impl From<CMSG_PET_ABANDON> for ClientOpcodeMessage {
    fn from(c: CMSG_PET_ABANDON) -> Self {
        Self::CMSG_PET_ABANDON(c)
    }
}

impl From<CMSG_PET_RENAME> for ClientOpcodeMessage {
    fn from(c: CMSG_PET_RENAME) -> Self {
        Self::CMSG_PET_RENAME(Box::new(c))
    }
}

impl From<CMSG_GOSSIP_HELLO> for ClientOpcodeMessage {
    fn from(c: CMSG_GOSSIP_HELLO) -> Self {
        Self::CMSG_GOSSIP_HELLO(c)
    }
}

impl From<CMSG_GOSSIP_SELECT_OPTION> for ClientOpcodeMessage {
    fn from(c: CMSG_GOSSIP_SELECT_OPTION) -> Self {
        Self::CMSG_GOSSIP_SELECT_OPTION(Box::new(c))
    }
}

impl From<CMSG_NPC_TEXT_QUERY> for ClientOpcodeMessage {
    fn from(c: CMSG_NPC_TEXT_QUERY) -> Self {
        Self::CMSG_NPC_TEXT_QUERY(Box::new(c))
    }
}

impl From<CMSG_QUESTGIVER_STATUS_QUERY> for ClientOpcodeMessage {
    fn from(c: CMSG_QUESTGIVER_STATUS_QUERY) -> Self {
        Self::CMSG_QUESTGIVER_STATUS_QUERY(c)
    }
}

impl From<CMSG_QUESTGIVER_HELLO> for ClientOpcodeMessage {
    fn from(c: CMSG_QUESTGIVER_HELLO) -> Self {
        Self::CMSG_QUESTGIVER_HELLO(c)
    }
}

impl From<CMSG_QUESTGIVER_QUERY_QUEST> for ClientOpcodeMessage {
    fn from(c: CMSG_QUESTGIVER_QUERY_QUEST) -> Self {
        Self::CMSG_QUESTGIVER_QUERY_QUEST(Box::new(c))
    }
}

impl From<CMSG_QUESTGIVER_QUEST_AUTOLAUNCH> for ClientOpcodeMessage {
    fn from(_: CMSG_QUESTGIVER_QUEST_AUTOLAUNCH) -> Self {
        Self::CMSG_QUESTGIVER_QUEST_AUTOLAUNCH
    }
}

impl From<CMSG_QUESTGIVER_ACCEPT_QUEST> for ClientOpcodeMessage {
    fn from(c: CMSG_QUESTGIVER_ACCEPT_QUEST) -> Self {
        Self::CMSG_QUESTGIVER_ACCEPT_QUEST(Box::new(c))
    }
}

impl From<CMSG_QUESTGIVER_COMPLETE_QUEST> for ClientOpcodeMessage {
    fn from(c: CMSG_QUESTGIVER_COMPLETE_QUEST) -> Self {
        Self::CMSG_QUESTGIVER_COMPLETE_QUEST(Box::new(c))
    }
}

impl From<CMSG_QUESTGIVER_REQUEST_REWARD> for ClientOpcodeMessage {
    fn from(c: CMSG_QUESTGIVER_REQUEST_REWARD) -> Self {
        Self::CMSG_QUESTGIVER_REQUEST_REWARD(Box::new(c))
    }
}

impl From<CMSG_QUESTGIVER_CHOOSE_REWARD> for ClientOpcodeMessage {
    fn from(c: CMSG_QUESTGIVER_CHOOSE_REWARD) -> Self {
        Self::CMSG_QUESTGIVER_CHOOSE_REWARD(Box::new(c))
    }
}

impl From<CMSG_QUESTGIVER_CANCEL> for ClientOpcodeMessage {
    fn from(_: CMSG_QUESTGIVER_CANCEL) -> Self {
        Self::CMSG_QUESTGIVER_CANCEL
    }
}

impl From<CMSG_QUESTLOG_SWAP_QUEST> for ClientOpcodeMessage {
    fn from(c: CMSG_QUESTLOG_SWAP_QUEST) -> Self {
        Self::CMSG_QUESTLOG_SWAP_QUEST(c)
    }
}

impl From<CMSG_QUESTLOG_REMOVE_QUEST> for ClientOpcodeMessage {
    fn from(c: CMSG_QUESTLOG_REMOVE_QUEST) -> Self {
        Self::CMSG_QUESTLOG_REMOVE_QUEST(c)
    }
}

impl From<CMSG_QUEST_CONFIRM_ACCEPT> for ClientOpcodeMessage {
    fn from(c: CMSG_QUEST_CONFIRM_ACCEPT) -> Self {
        Self::CMSG_QUEST_CONFIRM_ACCEPT(c)
    }
}

impl From<CMSG_PUSHQUESTTOPARTY> for ClientOpcodeMessage {
    fn from(c: CMSG_PUSHQUESTTOPARTY) -> Self {
        Self::CMSG_PUSHQUESTTOPARTY(c)
    }
}

impl From<CMSG_LIST_INVENTORY> for ClientOpcodeMessage {
    fn from(c: CMSG_LIST_INVENTORY) -> Self {
        Self::CMSG_LIST_INVENTORY(c)
    }
}

impl From<CMSG_SELL_ITEM> for ClientOpcodeMessage {
    fn from(c: CMSG_SELL_ITEM) -> Self {
        Self::CMSG_SELL_ITEM(Box::new(c))
    }
}

impl From<CMSG_BUY_ITEM> for ClientOpcodeMessage {
    fn from(c: CMSG_BUY_ITEM) -> Self {
        Self::CMSG_BUY_ITEM(Box::new(c))
    }
}

impl From<CMSG_BUY_ITEM_IN_SLOT> for ClientOpcodeMessage {
    fn from(c: CMSG_BUY_ITEM_IN_SLOT) -> Self {
        Self::CMSG_BUY_ITEM_IN_SLOT(Box::new(c))
    }
}

impl From<CMSG_TAXINODE_STATUS_QUERY> for ClientOpcodeMessage {
    fn from(c: CMSG_TAXINODE_STATUS_QUERY) -> Self {
        Self::CMSG_TAXINODE_STATUS_QUERY(c)
    }
}

impl From<CMSG_TAXIQUERYAVAILABLENODES> for ClientOpcodeMessage {
    fn from(c: CMSG_TAXIQUERYAVAILABLENODES) -> Self {
        Self::CMSG_TAXIQUERYAVAILABLENODES(c)
    }
}

impl From<CMSG_ACTIVATETAXI> for ClientOpcodeMessage {
    fn from(c: CMSG_ACTIVATETAXI) -> Self {
        Self::CMSG_ACTIVATETAXI(Box::new(c))
    }
}

impl From<CMSG_TRAINER_LIST> for ClientOpcodeMessage {
    fn from(c: CMSG_TRAINER_LIST) -> Self {
        Self::CMSG_TRAINER_LIST(c)
    }
}

impl From<CMSG_TRAINER_BUY_SPELL> for ClientOpcodeMessage {
    fn from(c: CMSG_TRAINER_BUY_SPELL) -> Self {
        Self::CMSG_TRAINER_BUY_SPELL(Box::new(c))
    }
}

impl From<CMSG_BINDER_ACTIVATE> for ClientOpcodeMessage {
    fn from(c: CMSG_BINDER_ACTIVATE) -> Self {
        Self::CMSG_BINDER_ACTIVATE(c)
    }
}

impl From<CMSG_BANKER_ACTIVATE> for ClientOpcodeMessage {
    fn from(c: CMSG_BANKER_ACTIVATE) -> Self {
        Self::CMSG_BANKER_ACTIVATE(c)
    }
}

impl From<CMSG_BUY_BANK_SLOT> for ClientOpcodeMessage {
    fn from(c: CMSG_BUY_BANK_SLOT) -> Self {
        Self::CMSG_BUY_BANK_SLOT(c)
    }
}

impl From<CMSG_PETITION_SHOWLIST> for ClientOpcodeMessage {
    fn from(c: CMSG_PETITION_SHOWLIST) -> Self {
        Self::CMSG_PETITION_SHOWLIST(c)
    }
}

impl From<CMSG_PETITION_BUY> for ClientOpcodeMessage {
    fn from(c: CMSG_PETITION_BUY) -> Self {
        Self::CMSG_PETITION_BUY(Box::new(c))
    }
}

impl From<CMSG_PETITION_SHOW_SIGNATURES> for ClientOpcodeMessage {
    fn from(c: CMSG_PETITION_SHOW_SIGNATURES) -> Self {
        Self::CMSG_PETITION_SHOW_SIGNATURES(c)
    }
}

impl From<CMSG_PETITION_SIGN> for ClientOpcodeMessage {
    fn from(c: CMSG_PETITION_SIGN) -> Self {
        Self::CMSG_PETITION_SIGN(Box::new(c))
    }
}

impl From<CMSG_OFFER_PETITION> for ClientOpcodeMessage {
    fn from(c: CMSG_OFFER_PETITION) -> Self {
        Self::CMSG_OFFER_PETITION(Box::new(c))
    }
}

impl From<CMSG_TURN_IN_PETITION> for ClientOpcodeMessage {
    fn from(c: CMSG_TURN_IN_PETITION) -> Self {
        Self::CMSG_TURN_IN_PETITION(c)
    }
}

impl From<CMSG_PETITION_QUERY> for ClientOpcodeMessage {
    fn from(c: CMSG_PETITION_QUERY) -> Self {
        Self::CMSG_PETITION_QUERY(Box::new(c))
    }
}

impl From<CMSG_BUG> for ClientOpcodeMessage {
    fn from(c: CMSG_BUG) -> Self {
        Self::CMSG_BUG(Box::new(c))
    }
}

impl From<CMSG_PLAYED_TIME> for ClientOpcodeMessage {
    fn from(c: CMSG_PLAYED_TIME) -> Self {
        Self::CMSG_PLAYED_TIME(c)
    }
}

impl From<CMSG_QUERY_TIME> for ClientOpcodeMessage {
    fn from(_: CMSG_QUERY_TIME) -> Self {
        Self::CMSG_QUERY_TIME
    }
}

impl From<CMSG_RECLAIM_CORPSE> for ClientOpcodeMessage {
    fn from(c: CMSG_RECLAIM_CORPSE) -> Self {
        Self::CMSG_RECLAIM_CORPSE(c)
    }
}

impl From<CMSG_WRAP_ITEM> for ClientOpcodeMessage {
    fn from(c: CMSG_WRAP_ITEM) -> Self {
        Self::CMSG_WRAP_ITEM(c)
    }
}

impl From<MSG_MINIMAP_PING_Client> for ClientOpcodeMessage {
    fn from(c: MSG_MINIMAP_PING_Client) -> Self {
        Self::MSG_MINIMAP_PING(c)
    }
}

impl From<CMSG_PING> for ClientOpcodeMessage {
    fn from(c: CMSG_PING) -> Self {
        Self::CMSG_PING(c)
    }
}

impl From<CMSG_SETSHEATHED> for ClientOpcodeMessage {
    fn from(c: CMSG_SETSHEATHED) -> Self {
        Self::CMSG_SETSHEATHED(c)
    }
}

impl From<CMSG_QUEST_POI_QUERY> for ClientOpcodeMessage {
    fn from(c: CMSG_QUEST_POI_QUERY) -> Self {
        Self::CMSG_QUEST_POI_QUERY(Box::new(c))
    }
}

impl From<CMSG_AUTH_SESSION> for ClientOpcodeMessage {
    fn from(c: CMSG_AUTH_SESSION) -> Self {
        Self::CMSG_AUTH_SESSION(Box::new(c))
    }
}

impl From<CMSG_PET_CAST_SPELL> for ClientOpcodeMessage {
    fn from(c: CMSG_PET_CAST_SPELL) -> Self {
        Self::CMSG_PET_CAST_SPELL(Box::new(c))
    }
}

impl From<MSG_SAVE_GUILD_EMBLEM_Client> for ClientOpcodeMessage {
    fn from(c: MSG_SAVE_GUILD_EMBLEM_Client) -> Self {
        Self::MSG_SAVE_GUILD_EMBLEM(Box::new(c))
    }
}

impl From<CMSG_ZONEUPDATE> for ClientOpcodeMessage {
    fn from(c: CMSG_ZONEUPDATE) -> Self {
        Self::CMSG_ZONEUPDATE(c)
    }
}

impl From<MSG_RANDOM_ROLL_Client> for ClientOpcodeMessage {
    fn from(c: MSG_RANDOM_ROLL_Client) -> Self {
        Self::MSG_RANDOM_ROLL(c)
    }
}

impl From<CMSG_UNLEARN_SKILL> for ClientOpcodeMessage {
    fn from(c: CMSG_UNLEARN_SKILL) -> Self {
        Self::CMSG_UNLEARN_SKILL(c)
    }
}

impl From<CMSG_GMTICKET_CREATE> for ClientOpcodeMessage {
    fn from(c: CMSG_GMTICKET_CREATE) -> Self {
        Self::CMSG_GMTICKET_CREATE(Box::new(c))
    }
}

impl From<CMSG_GMTICKET_UPDATETEXT> for ClientOpcodeMessage {
    fn from(c: CMSG_GMTICKET_UPDATETEXT) -> Self {
        Self::CMSG_GMTICKET_UPDATETEXT(Box::new(c))
    }
}

impl From<CMSG_REQUEST_ACCOUNT_DATA> for ClientOpcodeMessage {
    fn from(c: CMSG_REQUEST_ACCOUNT_DATA) -> Self {
        Self::CMSG_REQUEST_ACCOUNT_DATA(c)
    }
}

impl From<CMSG_UPDATE_ACCOUNT_DATA> for ClientOpcodeMessage {
    fn from(c: CMSG_UPDATE_ACCOUNT_DATA) -> Self {
        Self::CMSG_UPDATE_ACCOUNT_DATA(Box::new(c))
    }
}

impl From<CMSG_GMTICKET_GETTICKET> for ClientOpcodeMessage {
    fn from(_: CMSG_GMTICKET_GETTICKET) -> Self {
        Self::CMSG_GMTICKET_GETTICKET
    }
}

impl From<CMSG_UNLEARN_TALENTS> for ClientOpcodeMessage {
    fn from(_: CMSG_UNLEARN_TALENTS) -> Self {
        Self::CMSG_UNLEARN_TALENTS
    }
}

impl From<MSG_CORPSE_QUERY_Client> for ClientOpcodeMessage {
    fn from(_: MSG_CORPSE_QUERY_Client) -> Self {
        Self::MSG_CORPSE_QUERY
    }
}

impl From<CMSG_GMTICKET_DELETETICKET> for ClientOpcodeMessage {
    fn from(_: CMSG_GMTICKET_DELETETICKET) -> Self {
        Self::CMSG_GMTICKET_DELETETICKET
    }
}

impl From<CMSG_GMTICKET_SYSTEMSTATUS> for ClientOpcodeMessage {
    fn from(_: CMSG_GMTICKET_SYSTEMSTATUS) -> Self {
        Self::CMSG_GMTICKET_SYSTEMSTATUS
    }
}

impl From<CMSG_SPIRIT_HEALER_ACTIVATE> for ClientOpcodeMessage {
    fn from(c: CMSG_SPIRIT_HEALER_ACTIVATE) -> Self {
        Self::CMSG_SPIRIT_HEALER_ACTIVATE(c)
    }
}

impl From<CMSG_CHAT_IGNORED> for ClientOpcodeMessage {
    fn from(c: CMSG_CHAT_IGNORED) -> Self {
        Self::CMSG_CHAT_IGNORED(Box::new(c))
    }
}

impl From<CMSG_GUILD_RANK> for ClientOpcodeMessage {
    fn from(c: CMSG_GUILD_RANK) -> Self {
        Self::CMSG_GUILD_RANK(Box::new(c))
    }
}

impl From<CMSG_GUILD_ADD_RANK> for ClientOpcodeMessage {
    fn from(c: CMSG_GUILD_ADD_RANK) -> Self {
        Self::CMSG_GUILD_ADD_RANK(Box::new(c))
    }
}

impl From<CMSG_GUILD_DEL_RANK> for ClientOpcodeMessage {
    fn from(_: CMSG_GUILD_DEL_RANK) -> Self {
        Self::CMSG_GUILD_DEL_RANK
    }
}

impl From<CMSG_GUILD_SET_PUBLIC_NOTE> for ClientOpcodeMessage {
    fn from(c: CMSG_GUILD_SET_PUBLIC_NOTE) -> Self {
        Self::CMSG_GUILD_SET_PUBLIC_NOTE(Box::new(c))
    }
}

impl From<CMSG_GUILD_SET_OFFICER_NOTE> for ClientOpcodeMessage {
    fn from(c: CMSG_GUILD_SET_OFFICER_NOTE) -> Self {
        Self::CMSG_GUILD_SET_OFFICER_NOTE(Box::new(c))
    }
}

impl From<CMSG_SEND_MAIL> for ClientOpcodeMessage {
    fn from(c: CMSG_SEND_MAIL) -> Self {
        Self::CMSG_SEND_MAIL(Box::new(c))
    }
}

impl From<CMSG_GET_MAIL_LIST> for ClientOpcodeMessage {
    fn from(c: CMSG_GET_MAIL_LIST) -> Self {
        Self::CMSG_GET_MAIL_LIST(c)
    }
}

impl From<CMSG_BATTLEFIELD_LIST> for ClientOpcodeMessage {
    fn from(c: CMSG_BATTLEFIELD_LIST) -> Self {
        Self::CMSG_BATTLEFIELD_LIST(c)
    }
}

impl From<CMSG_ITEM_TEXT_QUERY> for ClientOpcodeMessage {
    fn from(c: CMSG_ITEM_TEXT_QUERY) -> Self {
        Self::CMSG_ITEM_TEXT_QUERY(c)
    }
}

impl From<CMSG_MAIL_TAKE_MONEY> for ClientOpcodeMessage {
    fn from(c: CMSG_MAIL_TAKE_MONEY) -> Self {
        Self::CMSG_MAIL_TAKE_MONEY(Box::new(c))
    }
}

impl From<CMSG_MAIL_TAKE_ITEM> for ClientOpcodeMessage {
    fn from(c: CMSG_MAIL_TAKE_ITEM) -> Self {
        Self::CMSG_MAIL_TAKE_ITEM(Box::new(c))
    }
}

impl From<CMSG_MAIL_MARK_AS_READ> for ClientOpcodeMessage {
    fn from(c: CMSG_MAIL_MARK_AS_READ) -> Self {
        Self::CMSG_MAIL_MARK_AS_READ(Box::new(c))
    }
}

impl From<CMSG_MAIL_RETURN_TO_SENDER> for ClientOpcodeMessage {
    fn from(c: CMSG_MAIL_RETURN_TO_SENDER) -> Self {
        Self::CMSG_MAIL_RETURN_TO_SENDER(Box::new(c))
    }
}

impl From<CMSG_MAIL_DELETE> for ClientOpcodeMessage {
    fn from(c: CMSG_MAIL_DELETE) -> Self {
        Self::CMSG_MAIL_DELETE(Box::new(c))
    }
}

impl From<CMSG_MAIL_CREATE_TEXT_ITEM> for ClientOpcodeMessage {
    fn from(c: CMSG_MAIL_CREATE_TEXT_ITEM) -> Self {
        Self::CMSG_MAIL_CREATE_TEXT_ITEM(Box::new(c))
    }
}

impl From<CMSG_LEARN_TALENT> for ClientOpcodeMessage {
    fn from(c: CMSG_LEARN_TALENT) -> Self {
        Self::CMSG_LEARN_TALENT(c)
    }
}

impl From<CMSG_TOGGLE_PVP> for ClientOpcodeMessage {
    fn from(c: CMSG_TOGGLE_PVP) -> Self {
        Self::CMSG_TOGGLE_PVP(c)
    }
}

impl From<MSG_AUCTION_HELLO_Client> for ClientOpcodeMessage {
    fn from(c: MSG_AUCTION_HELLO_Client) -> Self {
        Self::MSG_AUCTION_HELLO(c)
    }
}

impl From<CMSG_AUCTION_SELL_ITEM> for ClientOpcodeMessage {
    fn from(c: CMSG_AUCTION_SELL_ITEM) -> Self {
        Self::CMSG_AUCTION_SELL_ITEM(Box::new(c))
    }
}

impl From<CMSG_AUCTION_REMOVE_ITEM> for ClientOpcodeMessage {
    fn from(c: CMSG_AUCTION_REMOVE_ITEM) -> Self {
        Self::CMSG_AUCTION_REMOVE_ITEM(Box::new(c))
    }
}

impl From<CMSG_AUCTION_LIST_ITEMS> for ClientOpcodeMessage {
    fn from(c: CMSG_AUCTION_LIST_ITEMS) -> Self {
        Self::CMSG_AUCTION_LIST_ITEMS(Box::new(c))
    }
}

impl From<CMSG_AUCTION_LIST_OWNER_ITEMS> for ClientOpcodeMessage {
    fn from(c: CMSG_AUCTION_LIST_OWNER_ITEMS) -> Self {
        Self::CMSG_AUCTION_LIST_OWNER_ITEMS(Box::new(c))
    }
}

impl From<CMSG_AUCTION_PLACE_BID> for ClientOpcodeMessage {
    fn from(c: CMSG_AUCTION_PLACE_BID) -> Self {
        Self::CMSG_AUCTION_PLACE_BID(Box::new(c))
    }
}

impl From<CMSG_AUCTION_LIST_BIDDER_ITEMS> for ClientOpcodeMessage {
    fn from(c: CMSG_AUCTION_LIST_BIDDER_ITEMS) -> Self {
        Self::CMSG_AUCTION_LIST_BIDDER_ITEMS(Box::new(c))
    }
}

impl From<CMSG_SET_AMMO> for ClientOpcodeMessage {
    fn from(c: CMSG_SET_AMMO) -> Self {
        Self::CMSG_SET_AMMO(c)
    }
}

impl From<CMSG_SET_ACTIVE_MOVER> for ClientOpcodeMessage {
    fn from(c: CMSG_SET_ACTIVE_MOVER) -> Self {
        Self::CMSG_SET_ACTIVE_MOVER(c)
    }
}

impl From<CMSG_PET_CANCEL_AURA> for ClientOpcodeMessage {
    fn from(c: CMSG_PET_CANCEL_AURA) -> Self {
        Self::CMSG_PET_CANCEL_AURA(Box::new(c))
    }
}

impl From<CMSG_CANCEL_AUTO_REPEAT_SPELL> for ClientOpcodeMessage {
    fn from(_: CMSG_CANCEL_AUTO_REPEAT_SPELL) -> Self {
        Self::CMSG_CANCEL_AUTO_REPEAT_SPELL
    }
}

impl From<MSG_LIST_STABLED_PETS_Client> for ClientOpcodeMessage {
    fn from(c: MSG_LIST_STABLED_PETS_Client) -> Self {
        Self::MSG_LIST_STABLED_PETS(c)
    }
}

impl From<CMSG_STABLE_PET> for ClientOpcodeMessage {
    fn from(c: CMSG_STABLE_PET) -> Self {
        Self::CMSG_STABLE_PET(c)
    }
}

impl From<CMSG_UNSTABLE_PET> for ClientOpcodeMessage {
    fn from(c: CMSG_UNSTABLE_PET) -> Self {
        Self::CMSG_UNSTABLE_PET(Box::new(c))
    }
}

impl From<CMSG_BUY_STABLE_SLOT> for ClientOpcodeMessage {
    fn from(c: CMSG_BUY_STABLE_SLOT) -> Self {
        Self::CMSG_BUY_STABLE_SLOT(c)
    }
}

impl From<CMSG_STABLE_SWAP_PET> for ClientOpcodeMessage {
    fn from(c: CMSG_STABLE_SWAP_PET) -> Self {
        Self::CMSG_STABLE_SWAP_PET(Box::new(c))
    }
}

impl From<CMSG_REQUEST_PET_INFO> for ClientOpcodeMessage {
    fn from(_: CMSG_REQUEST_PET_INFO) -> Self {
        Self::CMSG_REQUEST_PET_INFO
    }
}

impl From<CMSG_FAR_SIGHT> for ClientOpcodeMessage {
    fn from(c: CMSG_FAR_SIGHT) -> Self {
        Self::CMSG_FAR_SIGHT(c)
    }
}

impl From<CMSG_GROUP_CHANGE_SUB_GROUP> for ClientOpcodeMessage {
    fn from(c: CMSG_GROUP_CHANGE_SUB_GROUP) -> Self {
        Self::CMSG_GROUP_CHANGE_SUB_GROUP(Box::new(c))
    }
}

impl From<CMSG_REQUEST_PARTY_MEMBER_STATS> for ClientOpcodeMessage {
    fn from(c: CMSG_REQUEST_PARTY_MEMBER_STATS) -> Self {
        Self::CMSG_REQUEST_PARTY_MEMBER_STATS(c)
    }
}

impl From<CMSG_GROUP_SWAP_SUB_GROUP> for ClientOpcodeMessage {
    fn from(c: CMSG_GROUP_SWAP_SUB_GROUP) -> Self {
        Self::CMSG_GROUP_SWAP_SUB_GROUP(Box::new(c))
    }
}

impl From<CMSG_AUTOSTORE_BANK_ITEM> for ClientOpcodeMessage {
    fn from(c: CMSG_AUTOSTORE_BANK_ITEM) -> Self {
        Self::CMSG_AUTOSTORE_BANK_ITEM(c)
    }
}

impl From<CMSG_AUTOBANK_ITEM> for ClientOpcodeMessage {
    fn from(c: CMSG_AUTOBANK_ITEM) -> Self {
        Self::CMSG_AUTOBANK_ITEM(c)
    }
}

impl From<MSG_QUERY_NEXT_MAIL_TIME_Client> for ClientOpcodeMessage {
    fn from(_: MSG_QUERY_NEXT_MAIL_TIME_Client) -> Self {
        Self::MSG_QUERY_NEXT_MAIL_TIME
    }
}

impl From<CMSG_GROUP_RAID_CONVERT> for ClientOpcodeMessage {
    fn from(_: CMSG_GROUP_RAID_CONVERT) -> Self {
        Self::CMSG_GROUP_RAID_CONVERT
    }
}

impl From<CMSG_GROUP_ASSISTANT_LEADER> for ClientOpcodeMessage {
    fn from(c: CMSG_GROUP_ASSISTANT_LEADER) -> Self {
        Self::CMSG_GROUP_ASSISTANT_LEADER(Box::new(c))
    }
}

impl From<CMSG_BUYBACK_ITEM> for ClientOpcodeMessage {
    fn from(c: CMSG_BUYBACK_ITEM) -> Self {
        Self::CMSG_BUYBACK_ITEM(Box::new(c))
    }
}

impl From<CMSG_SET_SAVED_INSTANCE_EXTEND> for ClientOpcodeMessage {
    fn from(c: CMSG_SET_SAVED_INSTANCE_EXTEND) -> Self {
        Self::CMSG_SET_SAVED_INSTANCE_EXTEND(c)
    }
}

impl From<CMSG_LFG_GET_STATUS> for ClientOpcodeMessage {
    fn from(_: CMSG_LFG_GET_STATUS) -> Self {
        Self::CMSG_LFG_GET_STATUS
    }
}

impl From<CMSG_GMTICKETSYSTEM_TOGGLE> for ClientOpcodeMessage {
    fn from(_: CMSG_GMTICKETSYSTEM_TOGGLE) -> Self {
        Self::CMSG_GMTICKETSYSTEM_TOGGLE
    }
}

impl From<CMSG_CANCEL_GROWTH_AURA> for ClientOpcodeMessage {
    fn from(_: CMSG_CANCEL_GROWTH_AURA) -> Self {
        Self::CMSG_CANCEL_GROWTH_AURA
    }
}

impl From<CMSG_LOOT_ROLL> for ClientOpcodeMessage {
    fn from(c: CMSG_LOOT_ROLL) -> Self {
        Self::CMSG_LOOT_ROLL(Box::new(c))
    }
}

impl From<CMSG_LOOT_MASTER_GIVE> for ClientOpcodeMessage {
    fn from(c: CMSG_LOOT_MASTER_GIVE) -> Self {
        Self::CMSG_LOOT_MASTER_GIVE(Box::new(c))
    }
}

impl From<CMSG_REPAIR_ITEM> for ClientOpcodeMessage {
    fn from(c: CMSG_REPAIR_ITEM) -> Self {
        Self::CMSG_REPAIR_ITEM(Box::new(c))
    }
}

impl From<MSG_TALENT_WIPE_CONFIRM_Client> for ClientOpcodeMessage {
    fn from(c: MSG_TALENT_WIPE_CONFIRM_Client) -> Self {
        Self::MSG_TALENT_WIPE_CONFIRM(c)
    }
}

impl From<CMSG_SUMMON_RESPONSE> for ClientOpcodeMessage {
    fn from(c: CMSG_SUMMON_RESPONSE) -> Self {
        Self::CMSG_SUMMON_RESPONSE(Box::new(c))
    }
}

impl From<CMSG_SELF_RES> for ClientOpcodeMessage {
    fn from(_: CMSG_SELF_RES) -> Self {
        Self::CMSG_SELF_RES
    }
}

impl From<CMSG_TOGGLE_HELM> for ClientOpcodeMessage {
    fn from(_: CMSG_TOGGLE_HELM) -> Self {
        Self::CMSG_TOGGLE_HELM
    }
}

impl From<CMSG_TOGGLE_CLOAK> for ClientOpcodeMessage {
    fn from(_: CMSG_TOGGLE_CLOAK) -> Self {
        Self::CMSG_TOGGLE_CLOAK
    }
}

impl From<CMSG_SET_ACTIONBAR_TOGGLES> for ClientOpcodeMessage {
    fn from(c: CMSG_SET_ACTIONBAR_TOGGLES) -> Self {
        Self::CMSG_SET_ACTIONBAR_TOGGLES(c)
    }
}

impl From<CMSG_ITEM_NAME_QUERY> for ClientOpcodeMessage {
    fn from(c: CMSG_ITEM_NAME_QUERY) -> Self {
        Self::CMSG_ITEM_NAME_QUERY(Box::new(c))
    }
}

impl From<CMSG_CHAR_RENAME> for ClientOpcodeMessage {
    fn from(c: CMSG_CHAR_RENAME) -> Self {
        Self::CMSG_CHAR_RENAME(Box::new(c))
    }
}

impl From<CMSG_MOVE_SPLINE_DONE> for ClientOpcodeMessage {
    fn from(c: CMSG_MOVE_SPLINE_DONE) -> Self {
        Self::CMSG_MOVE_SPLINE_DONE(Box::new(c))
    }
}

impl From<CMSG_MOVE_FALL_RESET> for ClientOpcodeMessage {
    fn from(c: CMSG_MOVE_FALL_RESET) -> Self {
        Self::CMSG_MOVE_FALL_RESET(Box::new(c))
    }
}

impl From<CMSG_REQUEST_RAID_INFO> for ClientOpcodeMessage {
    fn from(_: CMSG_REQUEST_RAID_INFO) -> Self {
        Self::CMSG_REQUEST_RAID_INFO
    }
}

impl From<CMSG_MOVE_TIME_SKIPPED> for ClientOpcodeMessage {
    fn from(c: CMSG_MOVE_TIME_SKIPPED) -> Self {
        Self::CMSG_MOVE_TIME_SKIPPED(Box::new(c))
    }
}

impl From<CMSG_MOVE_FEATHER_FALL_ACK> for ClientOpcodeMessage {
    fn from(c: CMSG_MOVE_FEATHER_FALL_ACK) -> Self {
        Self::CMSG_MOVE_FEATHER_FALL_ACK(Box::new(c))
    }
}

impl From<CMSG_MOVE_WATER_WALK_ACK> for ClientOpcodeMessage {
    fn from(c: CMSG_MOVE_WATER_WALK_ACK) -> Self {
        Self::CMSG_MOVE_WATER_WALK_ACK(Box::new(c))
    }
}

impl From<CMSG_MOVE_NOT_ACTIVE_MOVER> for ClientOpcodeMessage {
    fn from(c: CMSG_MOVE_NOT_ACTIVE_MOVER) -> Self {
        Self::CMSG_MOVE_NOT_ACTIVE_MOVER(Box::new(c))
    }
}

impl From<CMSG_BATTLEFIELD_STATUS> for ClientOpcodeMessage {
    fn from(_: CMSG_BATTLEFIELD_STATUS) -> Self {
        Self::CMSG_BATTLEFIELD_STATUS
    }
}

impl From<CMSG_BATTLEFIELD_PORT> for ClientOpcodeMessage {
    fn from(c: CMSG_BATTLEFIELD_PORT) -> Self {
        Self::CMSG_BATTLEFIELD_PORT(Box::new(c))
    }
}

impl From<MSG_INSPECT_HONOR_STATS_Client> for ClientOpcodeMessage {
    fn from(c: MSG_INSPECT_HONOR_STATS_Client) -> Self {
        Self::MSG_INSPECT_HONOR_STATS(c)
    }
}

impl From<CMSG_BATTLEMASTER_HELLO> for ClientOpcodeMessage {
    fn from(c: CMSG_BATTLEMASTER_HELLO) -> Self {
        Self::CMSG_BATTLEMASTER_HELLO(c)
    }
}

impl From<CMSG_FORCE_WALK_SPEED_CHANGE_ACK> for ClientOpcodeMessage {
    fn from(c: CMSG_FORCE_WALK_SPEED_CHANGE_ACK) -> Self {
        Self::CMSG_FORCE_WALK_SPEED_CHANGE_ACK(Box::new(c))
    }
}

impl From<CMSG_FORCE_SWIM_BACK_SPEED_CHANGE_ACK> for ClientOpcodeMessage {
    fn from(c: CMSG_FORCE_SWIM_BACK_SPEED_CHANGE_ACK) -> Self {
        Self::CMSG_FORCE_SWIM_BACK_SPEED_CHANGE_ACK(Box::new(c))
    }
}

impl From<CMSG_FORCE_TURN_RATE_CHANGE_ACK> for ClientOpcodeMessage {
    fn from(c: CMSG_FORCE_TURN_RATE_CHANGE_ACK) -> Self {
        Self::CMSG_FORCE_TURN_RATE_CHANGE_ACK(Box::new(c))
    }
}

impl From<MSG_PVP_LOG_DATA_Client> for ClientOpcodeMessage {
    fn from(_: MSG_PVP_LOG_DATA_Client) -> Self {
        Self::MSG_PVP_LOG_DATA
    }
}

impl From<CMSG_LEAVE_BATTLEFIELD> for ClientOpcodeMessage {
    fn from(c: CMSG_LEAVE_BATTLEFIELD) -> Self {
        Self::CMSG_LEAVE_BATTLEFIELD(c)
    }
}

impl From<CMSG_AREA_SPIRIT_HEALER_QUERY> for ClientOpcodeMessage {
    fn from(c: CMSG_AREA_SPIRIT_HEALER_QUERY) -> Self {
        Self::CMSG_AREA_SPIRIT_HEALER_QUERY(c)
    }
}

impl From<CMSG_AREA_SPIRIT_HEALER_QUEUE> for ClientOpcodeMessage {
    fn from(c: CMSG_AREA_SPIRIT_HEALER_QUEUE) -> Self {
        Self::CMSG_AREA_SPIRIT_HEALER_QUEUE(c)
    }
}

impl From<CMSG_WARDEN_DATA> for ClientOpcodeMessage {
    fn from(c: CMSG_WARDEN_DATA) -> Self {
        Self::CMSG_WARDEN_DATA(Box::new(c))
    }
}

impl From<MSG_BATTLEGROUND_PLAYER_POSITIONS_Client> for ClientOpcodeMessage {
    fn from(_: MSG_BATTLEGROUND_PLAYER_POSITIONS_Client) -> Self {
        Self::MSG_BATTLEGROUND_PLAYER_POSITIONS
    }
}

impl From<CMSG_PET_STOP_ATTACK> for ClientOpcodeMessage {
    fn from(c: CMSG_PET_STOP_ATTACK) -> Self {
        Self::CMSG_PET_STOP_ATTACK(c)
    }
}

impl From<CMSG_BATTLEMASTER_JOIN> for ClientOpcodeMessage {
    fn from(c: CMSG_BATTLEMASTER_JOIN) -> Self {
        Self::CMSG_BATTLEMASTER_JOIN(Box::new(c))
    }
}

impl From<CMSG_PET_UNLEARN> for ClientOpcodeMessage {
    fn from(c: CMSG_PET_UNLEARN) -> Self {
        Self::CMSG_PET_UNLEARN(c)
    }
}

impl From<CMSG_PET_SPELL_AUTOCAST> for ClientOpcodeMessage {
    fn from(c: CMSG_PET_SPELL_AUTOCAST) -> Self {
        Self::CMSG_PET_SPELL_AUTOCAST(Box::new(c))
    }
}

impl From<CMSG_GUILD_INFO_TEXT> for ClientOpcodeMessage {
    fn from(c: CMSG_GUILD_INFO_TEXT) -> Self {
        Self::CMSG_GUILD_INFO_TEXT(Box::new(c))
    }
}

impl From<CMSG_ACTIVATETAXIEXPRESS> for ClientOpcodeMessage {
    fn from(c: CMSG_ACTIVATETAXIEXPRESS) -> Self {
        Self::CMSG_ACTIVATETAXIEXPRESS(Box::new(c))
    }
}

impl From<CMSG_SET_FACTION_INACTIVE> for ClientOpcodeMessage {
    fn from(c: CMSG_SET_FACTION_INACTIVE) -> Self {
        Self::CMSG_SET_FACTION_INACTIVE(c)
    }
}

impl From<CMSG_SET_WATCHED_FACTION> for ClientOpcodeMessage {
    fn from(c: CMSG_SET_WATCHED_FACTION) -> Self {
        Self::CMSG_SET_WATCHED_FACTION(c)
    }
}

impl From<CMSG_RESET_INSTANCES> for ClientOpcodeMessage {
    fn from(_: CMSG_RESET_INSTANCES) -> Self {
        Self::CMSG_RESET_INSTANCES
    }
}

impl From<MSG_RAID_TARGET_UPDATE_Client> for ClientOpcodeMessage {
    fn from(c: MSG_RAID_TARGET_UPDATE_Client) -> Self {
        Self::MSG_RAID_TARGET_UPDATE(Box::new(c))
    }
}

impl From<MSG_RAID_READY_CHECK_Client> for ClientOpcodeMessage {
    fn from(c: MSG_RAID_READY_CHECK_Client) -> Self {
        Self::MSG_RAID_READY_CHECK(c)
    }
}

impl From<MSG_SET_DUNGEON_DIFFICULTY_Client> for ClientOpcodeMessage {
    fn from(c: MSG_SET_DUNGEON_DIFFICULTY_Client) -> Self {
        Self::MSG_SET_DUNGEON_DIFFICULTY(c)
    }
}

impl From<CMSG_GMSURVEY_SUBMIT> for ClientOpcodeMessage {
    fn from(c: CMSG_GMSURVEY_SUBMIT) -> Self {
        Self::CMSG_GMSURVEY_SUBMIT(Box::new(c))
    }
}

impl From<CMSG_MOVE_SET_CAN_TRANSITION_BETWEEN_SWIM_AND_FLY_ACK> for ClientOpcodeMessage {
    fn from(c: CMSG_MOVE_SET_CAN_TRANSITION_BETWEEN_SWIM_AND_FLY_ACK) -> Self {
        Self::CMSG_MOVE_SET_CAN_TRANSITION_BETWEEN_SWIM_AND_FLY_ACK(Box::new(c))
    }
}

impl From<CMSG_MOVE_SET_CAN_FLY_ACK> for ClientOpcodeMessage {
    fn from(c: CMSG_MOVE_SET_CAN_FLY_ACK) -> Self {
        Self::CMSG_MOVE_SET_CAN_FLY_ACK(Box::new(c))
    }
}

impl From<CMSG_MOVE_SET_FLY> for ClientOpcodeMessage {
    fn from(c: CMSG_MOVE_SET_FLY) -> Self {
        Self::CMSG_MOVE_SET_FLY(Box::new(c))
    }
}

impl From<CMSG_SOCKET_GEMS> for ClientOpcodeMessage {
    fn from(c: CMSG_SOCKET_GEMS) -> Self {
        Self::CMSG_SOCKET_GEMS(Box::new(c))
    }
}

impl From<CMSG_ARENA_TEAM_ROSTER> for ClientOpcodeMessage {
    fn from(c: CMSG_ARENA_TEAM_ROSTER) -> Self {
        Self::CMSG_ARENA_TEAM_ROSTER(c)
    }
}

impl From<CMSG_ARENA_TEAM_INVITE> for ClientOpcodeMessage {
    fn from(c: CMSG_ARENA_TEAM_INVITE) -> Self {
        Self::CMSG_ARENA_TEAM_INVITE(Box::new(c))
    }
}

impl From<CMSG_ARENA_TEAM_ACCEPT> for ClientOpcodeMessage {
    fn from(_: CMSG_ARENA_TEAM_ACCEPT) -> Self {
        Self::CMSG_ARENA_TEAM_ACCEPT
    }
}

impl From<CMSG_ARENA_TEAM_DECLINE> for ClientOpcodeMessage {
    fn from(_: CMSG_ARENA_TEAM_DECLINE) -> Self {
        Self::CMSG_ARENA_TEAM_DECLINE
    }
}

impl From<CMSG_ARENA_TEAM_LEAVE> for ClientOpcodeMessage {
    fn from(c: CMSG_ARENA_TEAM_LEAVE) -> Self {
        Self::CMSG_ARENA_TEAM_LEAVE(c)
    }
}

impl From<CMSG_ARENA_TEAM_REMOVE> for ClientOpcodeMessage {
    fn from(c: CMSG_ARENA_TEAM_REMOVE) -> Self {
        Self::CMSG_ARENA_TEAM_REMOVE(Box::new(c))
    }
}

impl From<CMSG_ARENA_TEAM_DISBAND> for ClientOpcodeMessage {
    fn from(c: CMSG_ARENA_TEAM_DISBAND) -> Self {
        Self::CMSG_ARENA_TEAM_DISBAND(c)
    }
}

impl From<CMSG_ARENA_TEAM_LEADER> for ClientOpcodeMessage {
    fn from(c: CMSG_ARENA_TEAM_LEADER) -> Self {
        Self::CMSG_ARENA_TEAM_LEADER(Box::new(c))
    }
}

impl From<CMSG_BATTLEMASTER_JOIN_ARENA> for ClientOpcodeMessage {
    fn from(c: CMSG_BATTLEMASTER_JOIN_ARENA) -> Self {
        Self::CMSG_BATTLEMASTER_JOIN_ARENA(Box::new(c))
    }
}

impl From<CMSG_LFG_JOIN> for ClientOpcodeMessage {
    fn from(c: CMSG_LFG_JOIN) -> Self {
        Self::CMSG_LFG_JOIN(Box::new(c))
    }
}

impl From<CMSG_LFG_LEAVE> for ClientOpcodeMessage {
    fn from(_: CMSG_LFG_LEAVE) -> Self {
        Self::CMSG_LFG_LEAVE
    }
}

impl From<CMSG_SEARCH_LFG_JOIN> for ClientOpcodeMessage {
    fn from(c: CMSG_SEARCH_LFG_JOIN) -> Self {
        Self::CMSG_SEARCH_LFG_JOIN(c)
    }
}

impl From<CMSG_SEARCH_LFG_LEAVE> for ClientOpcodeMessage {
    fn from(c: CMSG_SEARCH_LFG_LEAVE) -> Self {
        Self::CMSG_SEARCH_LFG_LEAVE(c)
    }
}

impl From<CMSG_LFG_PROPOSAL_RESULT> for ClientOpcodeMessage {
    fn from(c: CMSG_LFG_PROPOSAL_RESULT) -> Self {
        Self::CMSG_LFG_PROPOSAL_RESULT(c)
    }
}

impl From<CMSG_SET_LFG_COMMENT> for ClientOpcodeMessage {
    fn from(c: CMSG_SET_LFG_COMMENT) -> Self {
        Self::CMSG_SET_LFG_COMMENT(Box::new(c))
    }
}

impl From<CMSG_LFG_SET_ROLES> for ClientOpcodeMessage {
    fn from(c: CMSG_LFG_SET_ROLES) -> Self {
        Self::CMSG_LFG_SET_ROLES(c)
    }
}

impl From<CMSG_LFG_SET_BOOT_VOTE> for ClientOpcodeMessage {
    fn from(c: CMSG_LFG_SET_BOOT_VOTE) -> Self {
        Self::CMSG_LFG_SET_BOOT_VOTE(c)
    }
}

impl From<CMSG_LFD_PLAYER_LOCK_INFO_REQUEST> for ClientOpcodeMessage {
    fn from(_: CMSG_LFD_PLAYER_LOCK_INFO_REQUEST) -> Self {
        Self::CMSG_LFD_PLAYER_LOCK_INFO_REQUEST
    }
}

impl From<CMSG_LFG_TELEPORT> for ClientOpcodeMessage {
    fn from(c: CMSG_LFG_TELEPORT) -> Self {
        Self::CMSG_LFG_TELEPORT(c)
    }
}

impl From<CMSG_LFD_PARTY_LOCK_INFO_REQUEST> for ClientOpcodeMessage {
    fn from(_: CMSG_LFD_PARTY_LOCK_INFO_REQUEST) -> Self {
        Self::CMSG_LFD_PARTY_LOCK_INFO_REQUEST
    }
}

impl From<CMSG_SET_TITLE> for ClientOpcodeMessage {
    fn from(c: CMSG_SET_TITLE) -> Self {
        Self::CMSG_SET_TITLE(c)
    }
}

impl From<CMSG_CANCEL_MOUNT_AURA> for ClientOpcodeMessage {
    fn from(_: CMSG_CANCEL_MOUNT_AURA) -> Self {
        Self::CMSG_CANCEL_MOUNT_AURA
    }
}

impl From<MSG_INSPECT_ARENA_TEAMS_Client> for ClientOpcodeMessage {
    fn from(c: MSG_INSPECT_ARENA_TEAMS_Client) -> Self {
        Self::MSG_INSPECT_ARENA_TEAMS(c)
    }
}

impl From<CMSG_CANCEL_TEMP_ENCHANTMENT> for ClientOpcodeMessage {
    fn from(c: CMSG_CANCEL_TEMP_ENCHANTMENT) -> Self {
        Self::CMSG_CANCEL_TEMP_ENCHANTMENT(c)
    }
}

impl From<CMSG_FORCE_FLIGHT_SPEED_CHANGE_ACK> for ClientOpcodeMessage {
    fn from(c: CMSG_FORCE_FLIGHT_SPEED_CHANGE_ACK) -> Self {
        Self::CMSG_FORCE_FLIGHT_SPEED_CHANGE_ACK(Box::new(c))
    }
}

impl From<CMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE_ACK> for ClientOpcodeMessage {
    fn from(c: CMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE_ACK) -> Self {
        Self::CMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE_ACK(Box::new(c))
    }
}

impl From<CMSG_SET_TAXI_BENCHMARK_MODE> for ClientOpcodeMessage {
    fn from(c: CMSG_SET_TAXI_BENCHMARK_MODE) -> Self {
        Self::CMSG_SET_TAXI_BENCHMARK_MODE(c)
    }
}

impl From<CMSG_REALM_SPLIT> for ClientOpcodeMessage {
    fn from(c: CMSG_REALM_SPLIT) -> Self {
        Self::CMSG_REALM_SPLIT(c)
    }
}

impl From<CMSG_MOVE_CHNG_TRANSPORT> for ClientOpcodeMessage {
    fn from(c: CMSG_MOVE_CHNG_TRANSPORT) -> Self {
        Self::CMSG_MOVE_CHNG_TRANSPORT(Box::new(c))
    }
}

impl From<MSG_PARTY_ASSIGNMENT_Client> for ClientOpcodeMessage {
    fn from(c: MSG_PARTY_ASSIGNMENT_Client) -> Self {
        Self::MSG_PARTY_ASSIGNMENT(Box::new(c))
    }
}

impl From<CMSG_TIME_SYNC_RESP> for ClientOpcodeMessage {
    fn from(c: CMSG_TIME_SYNC_RESP) -> Self {
        Self::CMSG_TIME_SYNC_RESP(c)
    }
}

impl From<MSG_RAID_READY_CHECK_CONFIRM_Client> for ClientOpcodeMessage {
    fn from(c: MSG_RAID_READY_CHECK_CONFIRM_Client) -> Self {
        Self::MSG_RAID_READY_CHECK_CONFIRM(c)
    }
}

impl From<CMSG_VOICE_SESSION_ENABLE> for ClientOpcodeMessage {
    fn from(c: CMSG_VOICE_SESSION_ENABLE) -> Self {
        Self::CMSG_VOICE_SESSION_ENABLE(c)
    }
}

impl From<CMSG_COMMENTATOR_ENABLE> for ClientOpcodeMessage {
    fn from(c: CMSG_COMMENTATOR_ENABLE) -> Self {
        Self::CMSG_COMMENTATOR_ENABLE(c)
    }
}

impl From<MSG_RAID_READY_CHECK_FINISHED_Client> for ClientOpcodeMessage {
    fn from(_: MSG_RAID_READY_CHECK_FINISHED_Client) -> Self {
        Self::MSG_RAID_READY_CHECK_FINISHED
    }
}

impl From<CMSG_COMPLAIN> for ClientOpcodeMessage {
    fn from(c: CMSG_COMPLAIN) -> Self {
        Self::CMSG_COMPLAIN(Box::new(c))
    }
}

impl From<CMSG_CHANNEL_DISPLAY_LIST> for ClientOpcodeMessage {
    fn from(c: CMSG_CHANNEL_DISPLAY_LIST) -> Self {
        Self::CMSG_CHANNEL_DISPLAY_LIST(Box::new(c))
    }
}

impl From<CMSG_SET_ACTIVE_VOICE_CHANNEL> for ClientOpcodeMessage {
    fn from(c: CMSG_SET_ACTIVE_VOICE_CHANNEL) -> Self {
        Self::CMSG_SET_ACTIVE_VOICE_CHANNEL(Box::new(c))
    }
}

impl From<CMSG_GET_CHANNEL_MEMBER_COUNT> for ClientOpcodeMessage {
    fn from(c: CMSG_GET_CHANNEL_MEMBER_COUNT) -> Self {
        Self::CMSG_GET_CHANNEL_MEMBER_COUNT(Box::new(c))
    }
}

impl From<CMSG_CHANNEL_VOICE_ON> for ClientOpcodeMessage {
    fn from(_: CMSG_CHANNEL_VOICE_ON) -> Self {
        Self::CMSG_CHANNEL_VOICE_ON
    }
}

impl From<CMSG_REPORT_PVP_AFK> for ClientOpcodeMessage {
    fn from(c: CMSG_REPORT_PVP_AFK) -> Self {
        Self::CMSG_REPORT_PVP_AFK(c)
    }
}

impl From<CMSG_GUILD_BANKER_ACTIVATE> for ClientOpcodeMessage {
    fn from(c: CMSG_GUILD_BANKER_ACTIVATE) -> Self {
        Self::CMSG_GUILD_BANKER_ACTIVATE(Box::new(c))
    }
}

impl From<CMSG_GUILD_BANK_QUERY_TAB> for ClientOpcodeMessage {
    fn from(c: CMSG_GUILD_BANK_QUERY_TAB) -> Self {
        Self::CMSG_GUILD_BANK_QUERY_TAB(Box::new(c))
    }
}

impl From<CMSG_GUILD_BANK_SWAP_ITEMS> for ClientOpcodeMessage {
    fn from(c: CMSG_GUILD_BANK_SWAP_ITEMS) -> Self {
        Self::CMSG_GUILD_BANK_SWAP_ITEMS(Box::new(c))
    }
}

impl From<CMSG_GUILD_BANK_BUY_TAB> for ClientOpcodeMessage {
    fn from(c: CMSG_GUILD_BANK_BUY_TAB) -> Self {
        Self::CMSG_GUILD_BANK_BUY_TAB(Box::new(c))
    }
}

impl From<CMSG_GUILD_BANK_UPDATE_TAB> for ClientOpcodeMessage {
    fn from(c: CMSG_GUILD_BANK_UPDATE_TAB) -> Self {
        Self::CMSG_GUILD_BANK_UPDATE_TAB(Box::new(c))
    }
}

impl From<CMSG_GUILD_BANK_DEPOSIT_MONEY> for ClientOpcodeMessage {
    fn from(c: CMSG_GUILD_BANK_DEPOSIT_MONEY) -> Self {
        Self::CMSG_GUILD_BANK_DEPOSIT_MONEY(Box::new(c))
    }
}

impl From<CMSG_GUILD_BANK_WITHDRAW_MONEY> for ClientOpcodeMessage {
    fn from(c: CMSG_GUILD_BANK_WITHDRAW_MONEY) -> Self {
        Self::CMSG_GUILD_BANK_WITHDRAW_MONEY(Box::new(c))
    }
}

impl From<MSG_GUILD_BANK_LOG_QUERY_Client> for ClientOpcodeMessage {
    fn from(c: MSG_GUILD_BANK_LOG_QUERY_Client) -> Self {
        Self::MSG_GUILD_BANK_LOG_QUERY(c)
    }
}

impl From<CMSG_SET_CHANNEL_WATCH> for ClientOpcodeMessage {
    fn from(c: CMSG_SET_CHANNEL_WATCH) -> Self {
        Self::CMSG_SET_CHANNEL_WATCH(Box::new(c))
    }
}

impl From<CMSG_CLEAR_CHANNEL_WATCH> for ClientOpcodeMessage {
    fn from(c: CMSG_CLEAR_CHANNEL_WATCH) -> Self {
        Self::CMSG_CLEAR_CHANNEL_WATCH(Box::new(c))
    }
}

impl From<CMSG_SPELLCLICK> for ClientOpcodeMessage {
    fn from(c: CMSG_SPELLCLICK) -> Self {
        Self::CMSG_SPELLCLICK(c)
    }
}

impl From<MSG_GUILD_PERMISSIONS_Client> for ClientOpcodeMessage {
    fn from(_: MSG_GUILD_PERMISSIONS_Client) -> Self {
        Self::MSG_GUILD_PERMISSIONS
    }
}

impl From<MSG_GUILD_BANK_MONEY_WITHDRAWN_Client> for ClientOpcodeMessage {
    fn from(_: MSG_GUILD_BANK_MONEY_WITHDRAWN_Client) -> Self {
        Self::MSG_GUILD_BANK_MONEY_WITHDRAWN
    }
}

impl From<MSG_GUILD_EVENT_LOG_QUERY_Client> for ClientOpcodeMessage {
    fn from(_: MSG_GUILD_EVENT_LOG_QUERY_Client) -> Self {
        Self::MSG_GUILD_EVENT_LOG_QUERY
    }
}

impl From<CMSG_GET_MIRRORIMAGE_DATA> for ClientOpcodeMessage {
    fn from(c: CMSG_GET_MIRRORIMAGE_DATA) -> Self {
        Self::CMSG_GET_MIRRORIMAGE_DATA(c)
    }
}

impl From<CMSG_KEEP_ALIVE> for ClientOpcodeMessage {
    fn from(_: CMSG_KEEP_ALIVE) -> Self {
        Self::CMSG_KEEP_ALIVE
    }
}

impl From<CMSG_OPT_OUT_OF_LOOT> for ClientOpcodeMessage {
    fn from(c: CMSG_OPT_OUT_OF_LOOT) -> Self {
        Self::CMSG_OPT_OUT_OF_LOOT(c)
    }
}

impl From<MSG_QUERY_GUILD_BANK_TEXT_Client> for ClientOpcodeMessage {
    fn from(c: MSG_QUERY_GUILD_BANK_TEXT_Client) -> Self {
        Self::MSG_QUERY_GUILD_BANK_TEXT(c)
    }
}

impl From<CMSG_SET_GUILD_BANK_TEXT> for ClientOpcodeMessage {
    fn from(c: CMSG_SET_GUILD_BANK_TEXT) -> Self {
        Self::CMSG_SET_GUILD_BANK_TEXT(Box::new(c))
    }
}

impl From<CMSG_GRANT_LEVEL> for ClientOpcodeMessage {
    fn from(c: CMSG_GRANT_LEVEL) -> Self {
        Self::CMSG_GRANT_LEVEL(c)
    }
}

impl From<CMSG_TOTEM_DESTROYED> for ClientOpcodeMessage {
    fn from(c: CMSG_TOTEM_DESTROYED) -> Self {
        Self::CMSG_TOTEM_DESTROYED(c)
    }
}

impl From<CMSG_QUESTGIVER_STATUS_MULTIPLE_QUERY> for ClientOpcodeMessage {
    fn from(_: CMSG_QUESTGIVER_STATUS_MULTIPLE_QUERY) -> Self {
        Self::CMSG_QUESTGIVER_STATUS_MULTIPLE_QUERY
    }
}

impl From<CMSG_SET_PLAYER_DECLINED_NAMES> for ClientOpcodeMessage {
    fn from(c: CMSG_SET_PLAYER_DECLINED_NAMES) -> Self {
        Self::CMSG_SET_PLAYER_DECLINED_NAMES(Box::new(c))
    }
}

impl From<CMSG_ACCEPT_LEVEL_GRANT> for ClientOpcodeMessage {
    fn from(c: CMSG_ACCEPT_LEVEL_GRANT) -> Self {
        Self::CMSG_ACCEPT_LEVEL_GRANT(c)
    }
}

impl From<CMSG_ALTER_APPEARANCE> for ClientOpcodeMessage {
    fn from(c: CMSG_ALTER_APPEARANCE) -> Self {
        Self::CMSG_ALTER_APPEARANCE(Box::new(c))
    }
}

impl From<CMSG_CALENDAR_GET_CALENDAR> for ClientOpcodeMessage {
    fn from(_: CMSG_CALENDAR_GET_CALENDAR) -> Self {
        Self::CMSG_CALENDAR_GET_CALENDAR
    }
}

impl From<CMSG_CALENDAR_GET_EVENT> for ClientOpcodeMessage {
    fn from(c: CMSG_CALENDAR_GET_EVENT) -> Self {
        Self::CMSG_CALENDAR_GET_EVENT(c)
    }
}

impl From<CMSG_CALENDAR_GUILD_FILTER> for ClientOpcodeMessage {
    fn from(c: CMSG_CALENDAR_GUILD_FILTER) -> Self {
        Self::CMSG_CALENDAR_GUILD_FILTER(Box::new(c))
    }
}

impl From<CMSG_CALENDAR_ARENA_TEAM> for ClientOpcodeMessage {
    fn from(c: CMSG_CALENDAR_ARENA_TEAM) -> Self {
        Self::CMSG_CALENDAR_ARENA_TEAM(c)
    }
}

impl From<CMSG_CALENDAR_ADD_EVENT> for ClientOpcodeMessage {
    fn from(c: CMSG_CALENDAR_ADD_EVENT) -> Self {
        Self::CMSG_CALENDAR_ADD_EVENT(Box::new(c))
    }
}

impl From<CMSG_CALENDAR_UPDATE_EVENT> for ClientOpcodeMessage {
    fn from(c: CMSG_CALENDAR_UPDATE_EVENT) -> Self {
        Self::CMSG_CALENDAR_UPDATE_EVENT(Box::new(c))
    }
}

impl From<CMSG_CALENDAR_REMOVE_EVENT> for ClientOpcodeMessage {
    fn from(c: CMSG_CALENDAR_REMOVE_EVENT) -> Self {
        Self::CMSG_CALENDAR_REMOVE_EVENT(Box::new(c))
    }
}

impl From<CMSG_CALENDAR_COPY_EVENT> for ClientOpcodeMessage {
    fn from(c: CMSG_CALENDAR_COPY_EVENT) -> Self {
        Self::CMSG_CALENDAR_COPY_EVENT(Box::new(c))
    }
}

impl From<CMSG_CALENDAR_EVENT_INVITE> for ClientOpcodeMessage {
    fn from(c: CMSG_CALENDAR_EVENT_INVITE) -> Self {
        Self::CMSG_CALENDAR_EVENT_INVITE(Box::new(c))
    }
}

impl From<CMSG_CALENDAR_EVENT_RSVP> for ClientOpcodeMessage {
    fn from(c: CMSG_CALENDAR_EVENT_RSVP) -> Self {
        Self::CMSG_CALENDAR_EVENT_RSVP(Box::new(c))
    }
}

impl From<CMSG_CALENDAR_EVENT_REMOVE_INVITE> for ClientOpcodeMessage {
    fn from(c: CMSG_CALENDAR_EVENT_REMOVE_INVITE) -> Self {
        Self::CMSG_CALENDAR_EVENT_REMOVE_INVITE(Box::new(c))
    }
}

impl From<CMSG_CALENDAR_EVENT_STATUS> for ClientOpcodeMessage {
    fn from(c: CMSG_CALENDAR_EVENT_STATUS) -> Self {
        Self::CMSG_CALENDAR_EVENT_STATUS(Box::new(c))
    }
}

impl From<CMSG_CALENDAR_EVENT_MODERATOR_STATUS> for ClientOpcodeMessage {
    fn from(c: CMSG_CALENDAR_EVENT_MODERATOR_STATUS) -> Self {
        Self::CMSG_CALENDAR_EVENT_MODERATOR_STATUS(Box::new(c))
    }
}

impl From<CMSG_CALENDAR_COMPLAIN> for ClientOpcodeMessage {
    fn from(c: CMSG_CALENDAR_COMPLAIN) -> Self {
        Self::CMSG_CALENDAR_COMPLAIN(Box::new(c))
    }
}

impl From<CMSG_UPDATE_MISSILE_TRAJECTORY> for ClientOpcodeMessage {
    fn from(c: CMSG_UPDATE_MISSILE_TRAJECTORY) -> Self {
        Self::CMSG_UPDATE_MISSILE_TRAJECTORY(Box::new(c))
    }
}

impl From<CMSG_COMPLETE_MOVIE> for ClientOpcodeMessage {
    fn from(_: CMSG_COMPLETE_MOVIE) -> Self {
        Self::CMSG_COMPLETE_MOVIE
    }
}

impl From<CMSG_QUERY_INSPECT_ACHIEVEMENTS> for ClientOpcodeMessage {
    fn from(c: CMSG_QUERY_INSPECT_ACHIEVEMENTS) -> Self {
        Self::CMSG_QUERY_INSPECT_ACHIEVEMENTS(c)
    }
}

impl From<CMSG_DISMISS_CONTROLLED_VEHICLE> for ClientOpcodeMessage {
    fn from(_: CMSG_DISMISS_CONTROLLED_VEHICLE) -> Self {
        Self::CMSG_DISMISS_CONTROLLED_VEHICLE
    }
}

impl From<CMSG_CHAR_CUSTOMIZE> for ClientOpcodeMessage {
    fn from(c: CMSG_CHAR_CUSTOMIZE) -> Self {
        Self::CMSG_CHAR_CUSTOMIZE(Box::new(c))
    }
}

impl From<CMSG_REQUEST_VEHICLE_EXIT> for ClientOpcodeMessage {
    fn from(_: CMSG_REQUEST_VEHICLE_EXIT) -> Self {
        Self::CMSG_REQUEST_VEHICLE_EXIT
    }
}

impl From<CMSG_REQUEST_VEHICLE_PREV_SEAT> for ClientOpcodeMessage {
    fn from(_: CMSG_REQUEST_VEHICLE_PREV_SEAT) -> Self {
        Self::CMSG_REQUEST_VEHICLE_PREV_SEAT
    }
}

impl From<CMSG_REQUEST_VEHICLE_NEXT_SEAT> for ClientOpcodeMessage {
    fn from(_: CMSG_REQUEST_VEHICLE_NEXT_SEAT) -> Self {
        Self::CMSG_REQUEST_VEHICLE_NEXT_SEAT
    }
}

impl From<CMSG_REQUEST_VEHICLE_SWITCH_SEAT> for ClientOpcodeMessage {
    fn from(c: CMSG_REQUEST_VEHICLE_SWITCH_SEAT) -> Self {
        Self::CMSG_REQUEST_VEHICLE_SWITCH_SEAT(Box::new(c))
    }
}

impl From<CMSG_PET_LEARN_TALENT> for ClientOpcodeMessage {
    fn from(c: CMSG_PET_LEARN_TALENT) -> Self {
        Self::CMSG_PET_LEARN_TALENT(Box::new(c))
    }
}

impl From<CMSG_GAMEOBJ_REPORT_USE> for ClientOpcodeMessage {
    fn from(c: CMSG_GAMEOBJ_REPORT_USE) -> Self {
        Self::CMSG_GAMEOBJ_REPORT_USE(c)
    }
}

impl From<CMSG_REMOVE_GLYPH> for ClientOpcodeMessage {
    fn from(c: CMSG_REMOVE_GLYPH) -> Self {
        Self::CMSG_REMOVE_GLYPH(c)
    }
}

impl From<CMSG_DISMISS_CRITTER> for ClientOpcodeMessage {
    fn from(c: CMSG_DISMISS_CRITTER) -> Self {
        Self::CMSG_DISMISS_CRITTER(c)
    }
}

impl From<CMSG_AUCTION_LIST_PENDING_SALES> for ClientOpcodeMessage {
    fn from(c: CMSG_AUCTION_LIST_PENDING_SALES) -> Self {
        Self::CMSG_AUCTION_LIST_PENDING_SALES(c)
    }
}

impl From<CMSG_ENABLETAXI> for ClientOpcodeMessage {
    fn from(c: CMSG_ENABLETAXI) -> Self {
        Self::CMSG_ENABLETAXI(c)
    }
}

impl From<CMSG_CHANGE_SEATS_ON_CONTROLLED_VEHICLE> for ClientOpcodeMessage {
    fn from(c: CMSG_CHANGE_SEATS_ON_CONTROLLED_VEHICLE) -> Self {
        Self::CMSG_CHANGE_SEATS_ON_CONTROLLED_VEHICLE(Box::new(c))
    }
}

impl From<CMSG_HEARTH_AND_RESURRECT> for ClientOpcodeMessage {
    fn from(_: CMSG_HEARTH_AND_RESURRECT) -> Self {
        Self::CMSG_HEARTH_AND_RESURRECT
    }
}

impl From<CMSG_PLAYER_VEHICLE_ENTER> for ClientOpcodeMessage {
    fn from(c: CMSG_PLAYER_VEHICLE_ENTER) -> Self {
        Self::CMSG_PLAYER_VEHICLE_ENTER(c)
    }
}

impl From<CMSG_CONTROLLER_EJECT_PASSENGER> for ClientOpcodeMessage {
    fn from(c: CMSG_CONTROLLER_EJECT_PASSENGER) -> Self {
        Self::CMSG_CONTROLLER_EJECT_PASSENGER(c)
    }
}

impl From<CMSG_ITEM_REFUND_INFO> for ClientOpcodeMessage {
    fn from(c: CMSG_ITEM_REFUND_INFO) -> Self {
        Self::CMSG_ITEM_REFUND_INFO(c)
    }
}

impl From<CMSG_ITEM_REFUND> for ClientOpcodeMessage {
    fn from(c: CMSG_ITEM_REFUND) -> Self {
        Self::CMSG_ITEM_REFUND(c)
    }
}

impl From<CMSG_CORPSE_MAP_POSITION_QUERY> for ClientOpcodeMessage {
    fn from(c: CMSG_CORPSE_MAP_POSITION_QUERY) -> Self {
        Self::CMSG_CORPSE_MAP_POSITION_QUERY(c)
    }
}

impl From<CMSG_CALENDAR_EVENT_SIGNUP> for ClientOpcodeMessage {
    fn from(c: CMSG_CALENDAR_EVENT_SIGNUP) -> Self {
        Self::CMSG_CALENDAR_EVENT_SIGNUP(Box::new(c))
    }
}

impl From<CMSG_EQUIPMENT_SET_SAVE> for ClientOpcodeMessage {
    fn from(c: CMSG_EQUIPMENT_SET_SAVE) -> Self {
        Self::CMSG_EQUIPMENT_SET_SAVE(Box::new(c))
    }
}

impl From<CMSG_UPDATE_PROJECTILE_POSITION> for ClientOpcodeMessage {
    fn from(c: CMSG_UPDATE_PROJECTILE_POSITION) -> Self {
        Self::CMSG_UPDATE_PROJECTILE_POSITION(Box::new(c))
    }
}

impl From<CMSG_LEARN_PREVIEW_TALENTS> for ClientOpcodeMessage {
    fn from(c: CMSG_LEARN_PREVIEW_TALENTS) -> Self {
        Self::CMSG_LEARN_PREVIEW_TALENTS(Box::new(c))
    }
}

impl From<CMSG_LEARN_PREVIEW_TALENTS_PET> for ClientOpcodeMessage {
    fn from(c: CMSG_LEARN_PREVIEW_TALENTS_PET) -> Self {
        Self::CMSG_LEARN_PREVIEW_TALENTS_PET(Box::new(c))
    }
}

impl From<CMSG_MOVE_GRAVITY_DISABLE_ACK> for ClientOpcodeMessage {
    fn from(c: CMSG_MOVE_GRAVITY_DISABLE_ACK) -> Self {
        Self::CMSG_MOVE_GRAVITY_DISABLE_ACK(Box::new(c))
    }
}

impl From<CMSG_MOVE_GRAVITY_ENABLE_ACK> for ClientOpcodeMessage {
    fn from(c: CMSG_MOVE_GRAVITY_ENABLE_ACK) -> Self {
        Self::CMSG_MOVE_GRAVITY_ENABLE_ACK(Box::new(c))
    }
}

impl From<CMSG_EQUIPMENT_SET_USE> for ClientOpcodeMessage {
    fn from(c: CMSG_EQUIPMENT_SET_USE) -> Self {
        Self::CMSG_EQUIPMENT_SET_USE(Box::new(c))
    }
}

impl From<CMSG_CHAR_FACTION_CHANGE> for ClientOpcodeMessage {
    fn from(c: CMSG_CHAR_FACTION_CHANGE) -> Self {
        Self::CMSG_CHAR_FACTION_CHANGE(Box::new(c))
    }
}

impl From<CMSG_BATTLEFIELD_MGR_ENTRY_INVITE_RESPONSE> for ClientOpcodeMessage {
    fn from(c: CMSG_BATTLEFIELD_MGR_ENTRY_INVITE_RESPONSE) -> Self {
        Self::CMSG_BATTLEFIELD_MGR_ENTRY_INVITE_RESPONSE(c)
    }
}

impl From<CMSG_BATTLEFIELD_MGR_QUEUE_INVITE_RESPONSE> for ClientOpcodeMessage {
    fn from(c: CMSG_BATTLEFIELD_MGR_QUEUE_INVITE_RESPONSE) -> Self {
        Self::CMSG_BATTLEFIELD_MGR_QUEUE_INVITE_RESPONSE(c)
    }
}

impl From<CMSG_BATTLEFIELD_MGR_EXIT_REQUEST> for ClientOpcodeMessage {
    fn from(c: CMSG_BATTLEFIELD_MGR_EXIT_REQUEST) -> Self {
        Self::CMSG_BATTLEFIELD_MGR_EXIT_REQUEST(c)
    }
}

impl From<MSG_SET_RAID_DIFFICULTY_Client> for ClientOpcodeMessage {
    fn from(c: MSG_SET_RAID_DIFFICULTY_Client) -> Self {
        Self::MSG_SET_RAID_DIFFICULTY(c)
    }
}

impl From<CMSG_GMRESPONSE_RESOLVE> for ClientOpcodeMessage {
    fn from(_: CMSG_GMRESPONSE_RESOLVE) -> Self {
        Self::CMSG_GMRESPONSE_RESOLVE
    }
}

impl From<CMSG_WORLD_STATE_UI_TIMER_UPDATE> for ClientOpcodeMessage {
    fn from(_: CMSG_WORLD_STATE_UI_TIMER_UPDATE) -> Self {
        Self::CMSG_WORLD_STATE_UI_TIMER_UPDATE
    }
}

impl From<CMSG_CHAR_RACE_CHANGE> for ClientOpcodeMessage {
    fn from(c: CMSG_CHAR_RACE_CHANGE) -> Self {
        Self::CMSG_CHAR_RACE_CHANGE(Box::new(c))
    }
}

impl From<CMSG_READY_FOR_ACCOUNT_DATA_TIMES> for ClientOpcodeMessage {
    fn from(_: CMSG_READY_FOR_ACCOUNT_DATA_TIMES) -> Self {
        Self::CMSG_READY_FOR_ACCOUNT_DATA_TIMES
    }
}

impl From<CMSG_QUERY_QUESTS_COMPLETED> for ClientOpcodeMessage {
    fn from(_: CMSG_QUERY_QUESTS_COMPLETED) -> Self {
        Self::CMSG_QUERY_QUESTS_COMPLETED
    }
}

impl From<CMSG_GM_REPORT_LAG> for ClientOpcodeMessage {
    fn from(c: CMSG_GM_REPORT_LAG) -> Self {
        Self::CMSG_GM_REPORT_LAG(Box::new(c))
    }
}

impl From<CMSG_MOVE_SET_COLLISION_HGT_ACK> for ClientOpcodeMessage {
    fn from(c: CMSG_MOVE_SET_COLLISION_HGT_ACK) -> Self {
        Self::CMSG_MOVE_SET_COLLISION_HGT_ACK(Box::new(c))
    }
}


#[derive(Debug, Clone, PartialEq)]
pub enum ServerOpcodeMessage {
    MSG_MOVE_START_FORWARD(Box<MSG_MOVE_START_FORWARD>),
    MSG_MOVE_START_BACKWARD(Box<MSG_MOVE_START_BACKWARD>),
    MSG_MOVE_STOP(Box<MSG_MOVE_STOP>),
    MSG_MOVE_START_STRAFE_LEFT(Box<MSG_MOVE_START_STRAFE_LEFT>),
    MSG_MOVE_START_STRAFE_RIGHT(Box<MSG_MOVE_START_STRAFE_RIGHT>),
    MSG_MOVE_STOP_STRAFE(Box<MSG_MOVE_STOP_STRAFE>),
    MSG_MOVE_JUMP(Box<MSG_MOVE_JUMP>),
    MSG_MOVE_START_TURN_LEFT(Box<MSG_MOVE_START_TURN_LEFT>),
    MSG_MOVE_START_TURN_RIGHT(Box<MSG_MOVE_START_TURN_RIGHT>),
    MSG_MOVE_STOP_TURN(Box<MSG_MOVE_STOP_TURN>),
    MSG_MOVE_START_PITCH_UP(Box<MSG_MOVE_START_PITCH_UP>),
    MSG_MOVE_START_PITCH_DOWN(Box<MSG_MOVE_START_PITCH_DOWN>),
    MSG_MOVE_STOP_PITCH(Box<MSG_MOVE_STOP_PITCH>),
    MSG_MOVE_SET_RUN_MODE(Box<MSG_MOVE_SET_RUN_MODE>),
    MSG_MOVE_SET_WALK_MODE(Box<MSG_MOVE_SET_WALK_MODE>),
    MSG_MOVE_FALL_LAND(Box<MSG_MOVE_FALL_LAND>),
    MSG_MOVE_START_SWIM(Box<MSG_MOVE_START_SWIM>),
    MSG_MOVE_STOP_SWIM(Box<MSG_MOVE_STOP_SWIM>),
    MSG_MOVE_SET_FACING(Box<MSG_MOVE_SET_FACING>),
    MSG_MOVE_SET_PITCH(Box<MSG_MOVE_SET_PITCH>),
    MSG_MOVE_WORLDPORT_ACK,
    MSG_MOVE_HEARTBEAT(Box<MSG_MOVE_HEARTBEAT>),
    MSG_MOVE_HOVER(Box<MSG_MOVE_HOVER>),
    MSG_PETITION_DECLINE(MSG_PETITION_DECLINE),
    MSG_TABARDVENDOR_ACTIVATE(MSG_TABARDVENDOR_ACTIVATE),
    MSG_QUEST_PUSH_RESULT(Box<MSG_QUEST_PUSH_RESULT>),
    MSG_MOVE_WATER_WALK(Box<MSG_MOVE_WATER_WALK>),
    MSG_PETITION_RENAME(Box<MSG_PETITION_RENAME>),
    MSG_MOVE_START_ASCEND(Box<MSG_MOVE_START_ASCEND>),
    MSG_MOVE_STOP_ASCEND(Box<MSG_MOVE_STOP_ASCEND>),
    MSG_MOVE_SET_FLIGHT_BACK_SPEED(Box<MSG_MOVE_SET_FLIGHT_BACK_SPEED>),
    MSG_MOVE_START_DESCEND(Box<MSG_MOVE_START_DESCEND>),
    CMSG_CALENDAR_GET_NUM_PENDING,
    SMSG_CHAR_CREATE(SMSG_CHAR_CREATE),
    SMSG_CHAR_ENUM(Box<SMSG_CHAR_ENUM>),
    SMSG_CHAR_DELETE(SMSG_CHAR_DELETE),
    SMSG_NEW_WORLD(Box<SMSG_NEW_WORLD>),
    SMSG_TRANSFER_PENDING(Box<SMSG_TRANSFER_PENDING>),
    SMSG_TRANSFER_ABORTED(SMSG_TRANSFER_ABORTED),
    SMSG_CHARACTER_LOGIN_FAILED(SMSG_CHARACTER_LOGIN_FAILED),
    SMSG_LOGIN_SETTIMESPEED(Box<SMSG_LOGIN_SETTIMESPEED>),
    SMSG_LOGOUT_RESPONSE(SMSG_LOGOUT_RESPONSE),
    SMSG_LOGOUT_COMPLETE,
    SMSG_LOGOUT_CANCEL_ACK,
    SMSG_NAME_QUERY_RESPONSE(Box<SMSG_NAME_QUERY_RESPONSE>),
    SMSG_PET_NAME_QUERY_RESPONSE(Box<SMSG_PET_NAME_QUERY_RESPONSE>),
    SMSG_GUILD_QUERY_RESPONSE(Box<SMSG_GUILD_QUERY_RESPONSE>),
    SMSG_ITEM_QUERY_SINGLE_RESPONSE(Box<SMSG_ITEM_QUERY_SINGLE_RESPONSE>),
    SMSG_PAGE_TEXT_QUERY_RESPONSE(Box<SMSG_PAGE_TEXT_QUERY_RESPONSE>),
    SMSG_QUEST_QUERY_RESPONSE(Box<SMSG_QUEST_QUERY_RESPONSE>),
    SMSG_GAMEOBJECT_QUERY_RESPONSE(Box<SMSG_GAMEOBJECT_QUERY_RESPONSE>),
    SMSG_CREATURE_QUERY_RESPONSE(Box<SMSG_CREATURE_QUERY_RESPONSE>),
    SMSG_WHO(Box<SMSG_WHO>),
    SMSG_WHOIS(Box<SMSG_WHOIS>),
    SMSG_CONTACT_LIST(Box<SMSG_CONTACT_LIST>),
    SMSG_FRIEND_STATUS(Box<SMSG_FRIEND_STATUS>),
    SMSG_GROUP_INVITE(Box<SMSG_GROUP_INVITE>),
    SMSG_GROUP_DECLINE(Box<SMSG_GROUP_DECLINE>),
    SMSG_GROUP_UNINVITE,
    SMSG_GROUP_SET_LEADER(Box<SMSG_GROUP_SET_LEADER>),
    SMSG_GROUP_DESTROYED,
    SMSG_GROUP_LIST(Box<SMSG_GROUP_LIST>),
    SMSG_PARTY_MEMBER_STATS(Box<SMSG_PARTY_MEMBER_STATS>),
    SMSG_PARTY_COMMAND_RESULT(Box<SMSG_PARTY_COMMAND_RESULT>),
    SMSG_GUILD_INVITE(Box<SMSG_GUILD_INVITE>),
    SMSG_GUILD_DECLINE(Box<SMSG_GUILD_DECLINE>),
    SMSG_GUILD_INFO(Box<SMSG_GUILD_INFO>),
    SMSG_GUILD_ROSTER(Box<SMSG_GUILD_ROSTER>),
    SMSG_GUILD_EVENT(Box<SMSG_GUILD_EVENT>),
    SMSG_GUILD_COMMAND_RESULT(Box<SMSG_GUILD_COMMAND_RESULT>),
    SMSG_MESSAGECHAT(Box<SMSG_MESSAGECHAT>),
    SMSG_CHANNEL_NOTIFY(Box<SMSG_CHANNEL_NOTIFY>),
    SMSG_CHANNEL_LIST(Box<SMSG_CHANNEL_LIST>),
    SMSG_UPDATE_OBJECT(Box<SMSG_UPDATE_OBJECT>),
    SMSG_DESTROY_OBJECT(Box<SMSG_DESTROY_OBJECT>),
    SMSG_READ_ITEM_OK(SMSG_READ_ITEM_OK),
    SMSG_READ_ITEM_FAILED(SMSG_READ_ITEM_FAILED),
    SMSG_ITEM_COOLDOWN(Box<SMSG_ITEM_COOLDOWN>),
    SMSG_GAMEOBJECT_CUSTOM_ANIM(Box<SMSG_GAMEOBJECT_CUSTOM_ANIM>),
    MSG_MOVE_TELEPORT_CHEAT(Box<MSG_MOVE_TELEPORT_CHEAT_Server>),
    MSG_MOVE_TELEPORT_ACK(Box<MSG_MOVE_TELEPORT_ACK_Server>),
    SMSG_MONSTER_MOVE(Box<SMSG_MONSTER_MOVE>),
    SMSG_MOVE_WATER_WALK(Box<SMSG_MOVE_WATER_WALK>),
    SMSG_MOVE_LAND_WALK(Box<SMSG_MOVE_LAND_WALK>),
    SMSG_FORCE_RUN_SPEED_CHANGE(Box<SMSG_FORCE_RUN_SPEED_CHANGE>),
    SMSG_FORCE_RUN_BACK_SPEED_CHANGE(Box<SMSG_FORCE_RUN_BACK_SPEED_CHANGE>),
    SMSG_FORCE_SWIM_SPEED_CHANGE(Box<SMSG_FORCE_SWIM_SPEED_CHANGE>),
    SMSG_FORCE_MOVE_ROOT(Box<SMSG_FORCE_MOVE_ROOT>),
    SMSG_FORCE_MOVE_UNROOT(Box<SMSG_FORCE_MOVE_UNROOT>),
    MSG_MOVE_ROOT(Box<MSG_MOVE_ROOT_Server>),
    MSG_MOVE_UNROOT(Box<MSG_MOVE_UNROOT_Server>),
    SMSG_MOVE_KNOCK_BACK(Box<SMSG_MOVE_KNOCK_BACK>),
    MSG_MOVE_KNOCK_BACK(Box<MSG_MOVE_KNOCK_BACK_Server>),
    SMSG_MOVE_FEATHER_FALL(Box<SMSG_MOVE_FEATHER_FALL>),
    SMSG_MOVE_NORMAL_FALL(Box<SMSG_MOVE_NORMAL_FALL>),
    SMSG_MOVE_SET_HOVER(Box<SMSG_MOVE_SET_HOVER>),
    SMSG_MOVE_UNSET_HOVER(Box<SMSG_MOVE_UNSET_HOVER>),
    SMSG_TRIGGER_CINEMATIC(SMSG_TRIGGER_CINEMATIC),
    SMSG_TUTORIAL_FLAGS(Box<SMSG_TUTORIAL_FLAGS>),
    SMSG_EMOTE(Box<SMSG_EMOTE>),
    SMSG_TEXT_EMOTE(Box<SMSG_TEXT_EMOTE>),
    SMSG_INVENTORY_CHANGE_FAILURE(Box<SMSG_INVENTORY_CHANGE_FAILURE>),
    SMSG_TRADE_STATUS(Box<SMSG_TRADE_STATUS>),
    SMSG_TRADE_STATUS_EXTENDED(Box<SMSG_TRADE_STATUS_EXTENDED>),
    SMSG_INITIALIZE_FACTIONS(Box<SMSG_INITIALIZE_FACTIONS>),
    SMSG_SET_FACTION_VISIBLE(SMSG_SET_FACTION_VISIBLE),
    SMSG_SET_FACTION_STANDING(Box<SMSG_SET_FACTION_STANDING>),
    SMSG_SET_PROFICIENCY(SMSG_SET_PROFICIENCY),
    SMSG_ACTION_BUTTONS(Box<SMSG_ACTION_BUTTONS>),
    SMSG_INITIAL_SPELLS(Box<SMSG_INITIAL_SPELLS>),
    SMSG_LEARNED_SPELL(SMSG_LEARNED_SPELL),
    SMSG_SUPERCEDED_SPELL(SMSG_SUPERCEDED_SPELL),
    SMSG_CAST_FAILED(Box<SMSG_CAST_FAILED>),
    SMSG_SPELL_START(Box<SMSG_SPELL_START>),
    SMSG_SPELL_GO(Box<SMSG_SPELL_GO>),
    SMSG_SPELL_FAILURE(Box<SMSG_SPELL_FAILURE>),
    SMSG_SPELL_COOLDOWN(Box<SMSG_SPELL_COOLDOWN>),
    SMSG_COOLDOWN_EVENT(Box<SMSG_COOLDOWN_EVENT>),
    SMSG_PET_CAST_FAILED(Box<SMSG_PET_CAST_FAILED>),
    MSG_CHANNEL_START(Box<MSG_CHANNEL_START_Server>),
    MSG_CHANNEL_UPDATE(Box<MSG_CHANNEL_UPDATE_Server>),
    SMSG_AI_REACTION(Box<SMSG_AI_REACTION>),
    SMSG_ATTACKSTART(Box<SMSG_ATTACKSTART>),
    SMSG_ATTACKSTOP(Box<SMSG_ATTACKSTOP>),
    SMSG_ATTACKSWING_NOTINRANGE,
    SMSG_ATTACKSWING_BADFACING,
    SMSG_INSTANCE_LOCK_WARNING_QUERY(Box<SMSG_INSTANCE_LOCK_WARNING_QUERY>),
    SMSG_ATTACKSWING_DEADTARGET,
    SMSG_ATTACKSWING_CANT_ATTACK,
    SMSG_ATTACKERSTATEUPDATE(Box<SMSG_ATTACKERSTATEUPDATE>),
    SMSG_CANCEL_COMBAT,
    SMSG_SPELLHEALLOG(Box<SMSG_SPELLHEALLOG>),
    SMSG_SPELLENERGIZELOG(Box<SMSG_SPELLENERGIZELOG>),
    SMSG_BREAK_TARGET(SMSG_BREAK_TARGET),
    SMSG_BINDPOINTUPDATE(Box<SMSG_BINDPOINTUPDATE>),
    SMSG_PLAYERBOUND(Box<SMSG_PLAYERBOUND>),
    SMSG_CLIENT_CONTROL_UPDATE(Box<SMSG_CLIENT_CONTROL_UPDATE>),
    SMSG_RESURRECT_REQUEST(Box<SMSG_RESURRECT_REQUEST>),
    SMSG_LOOT_RESPONSE(Box<SMSG_LOOT_RESPONSE>),
    SMSG_LOOT_RELEASE_RESPONSE(Box<SMSG_LOOT_RELEASE_RESPONSE>),
    SMSG_LOOT_REMOVED(SMSG_LOOT_REMOVED),
    SMSG_LOOT_MONEY_NOTIFY(SMSG_LOOT_MONEY_NOTIFY),
    SMSG_LOOT_CLEAR_MONEY,
    SMSG_ITEM_PUSH_RESULT(Box<SMSG_ITEM_PUSH_RESULT>),
    SMSG_DUEL_REQUESTED(Box<SMSG_DUEL_REQUESTED>),
    SMSG_DUEL_OUTOFBOUNDS,
    SMSG_DUEL_INBOUNDS,
    SMSG_DUEL_COMPLETE(SMSG_DUEL_COMPLETE),
    SMSG_DUEL_WINNER(Box<SMSG_DUEL_WINNER>),
    SMSG_MOUNTRESULT(SMSG_MOUNTRESULT),
    SMSG_MOUNTSPECIAL_ANIM(SMSG_MOUNTSPECIAL_ANIM),
    SMSG_PET_TAME_FAILURE(SMSG_PET_TAME_FAILURE),
    SMSG_PET_NAME_INVALID(Box<SMSG_PET_NAME_INVALID>),
    SMSG_PET_SPELLS(Box<SMSG_PET_SPELLS>),
    SMSG_PET_MODE(Box<SMSG_PET_MODE>),
    SMSG_GOSSIP_MESSAGE(Box<SMSG_GOSSIP_MESSAGE>),
    SMSG_GOSSIP_COMPLETE,
    SMSG_NPC_TEXT_UPDATE(Box<SMSG_NPC_TEXT_UPDATE>),
    SMSG_QUESTGIVER_STATUS(Box<SMSG_QUESTGIVER_STATUS>),
    SMSG_QUESTGIVER_QUEST_LIST(Box<SMSG_QUESTGIVER_QUEST_LIST>),
    SMSG_QUESTGIVER_QUEST_DETAILS(Box<SMSG_QUESTGIVER_QUEST_DETAILS>),
    SMSG_QUESTGIVER_REQUEST_ITEMS(Box<SMSG_QUESTGIVER_REQUEST_ITEMS>),
    SMSG_QUESTGIVER_OFFER_REWARD(Box<SMSG_QUESTGIVER_OFFER_REWARD>),
    SMSG_QUESTGIVER_QUEST_INVALID(SMSG_QUESTGIVER_QUEST_INVALID),
    SMSG_QUESTGIVER_QUEST_COMPLETE(Box<SMSG_QUESTGIVER_QUEST_COMPLETE>),
    SMSG_QUESTGIVER_QUEST_FAILED(SMSG_QUESTGIVER_QUEST_FAILED),
    SMSG_QUESTLOG_FULL,
    SMSG_QUESTUPDATE_FAILED(SMSG_QUESTUPDATE_FAILED),
    SMSG_QUESTUPDATE_FAILEDTIMER(SMSG_QUESTUPDATE_FAILEDTIMER),
    SMSG_QUESTUPDATE_COMPLETE(SMSG_QUESTUPDATE_COMPLETE),
    SMSG_QUESTUPDATE_ADD_KILL(Box<SMSG_QUESTUPDATE_ADD_KILL>),
    SMSG_QUESTUPDATE_ADD_ITEM(SMSG_QUESTUPDATE_ADD_ITEM),
    SMSG_QUEST_CONFIRM_ACCEPT(Box<SMSG_QUEST_CONFIRM_ACCEPT>),
    SMSG_LIST_INVENTORY(Box<SMSG_LIST_INVENTORY>),
    SMSG_SELL_ITEM(Box<SMSG_SELL_ITEM>),
    SMSG_BUY_ITEM(Box<SMSG_BUY_ITEM>),
    SMSG_BUY_FAILED(Box<SMSG_BUY_FAILED>),
    SMSG_SHOWTAXINODES(Box<SMSG_SHOWTAXINODES>),
    SMSG_TAXINODE_STATUS(Box<SMSG_TAXINODE_STATUS>),
    SMSG_ACTIVATETAXIREPLY(SMSG_ACTIVATETAXIREPLY),
    SMSG_NEW_TAXI_PATH,
    SMSG_TRAINER_LIST(Box<SMSG_TRAINER_LIST>),
    SMSG_TRAINER_BUY_SUCCEEDED(Box<SMSG_TRAINER_BUY_SUCCEEDED>),
    SMSG_TRAINER_BUY_FAILED(Box<SMSG_TRAINER_BUY_FAILED>),
    SMSG_SHOW_BANK(SMSG_SHOW_BANK),
    SMSG_BUY_BANK_SLOT_RESULT(SMSG_BUY_BANK_SLOT_RESULT),
    SMSG_PETITION_SHOWLIST(Box<SMSG_PETITION_SHOWLIST>),
    SMSG_PETITION_SHOW_SIGNATURES(Box<SMSG_PETITION_SHOW_SIGNATURES>),
    SMSG_PETITION_SIGN_RESULTS(Box<SMSG_PETITION_SIGN_RESULTS>),
    SMSG_TURN_IN_PETITION_RESULTS(SMSG_TURN_IN_PETITION_RESULTS),
    SMSG_PETITION_QUERY_RESPONSE(Box<SMSG_PETITION_QUERY_RESPONSE>),
    SMSG_FISH_NOT_HOOKED,
    SMSG_FISH_ESCAPED,
    SMSG_NOTIFICATION(Box<SMSG_NOTIFICATION>),
    SMSG_PLAYED_TIME(Box<SMSG_PLAYED_TIME>),
    SMSG_QUERY_TIME_RESPONSE(SMSG_QUERY_TIME_RESPONSE),
    SMSG_LOG_XPGAIN(Box<SMSG_LOG_XPGAIN>),
    SMSG_LEVELUP_INFO(Box<SMSG_LEVELUP_INFO>),
    MSG_MINIMAP_PING(Box<MSG_MINIMAP_PING_Server>),
    SMSG_ENCHANTMENTLOG(Box<SMSG_ENCHANTMENTLOG>),
    SMSG_START_MIRROR_TIMER(Box<SMSG_START_MIRROR_TIMER>),
    SMSG_PAUSE_MIRROR_TIMER(SMSG_PAUSE_MIRROR_TIMER),
    SMSG_STOP_MIRROR_TIMER(SMSG_STOP_MIRROR_TIMER),
    SMSG_PONG(SMSG_PONG),
    SMSG_CLEAR_COOLDOWN(Box<SMSG_CLEAR_COOLDOWN>),
    SMSG_GAMEOBJECT_PAGETEXT(SMSG_GAMEOBJECT_PAGETEXT),
    SMSG_SPELL_DELAYED(Box<SMSG_SPELL_DELAYED>),
    SMSG_QUEST_POI_QUERY_RESPONSE(Box<SMSG_QUEST_POI_QUERY_RESPONSE>),
    SMSG_ITEM_TIME_UPDATE(Box<SMSG_ITEM_TIME_UPDATE>),
    SMSG_ITEM_ENCHANT_TIME_UPDATE(Box<SMSG_ITEM_ENCHANT_TIME_UPDATE>),
    SMSG_AUTH_CHALLENGE(Box<SMSG_AUTH_CHALLENGE>),
    SMSG_AUTH_RESPONSE(Box<SMSG_AUTH_RESPONSE>),
    MSG_SAVE_GUILD_EMBLEM(MSG_SAVE_GUILD_EMBLEM_Server),
    SMSG_PLAY_SPELL_VISUAL(Box<SMSG_PLAY_SPELL_VISUAL>),
    SMSG_PARTYKILLLOG(Box<SMSG_PARTYKILLLOG>),
    SMSG_COMPRESSED_UPDATE_OBJECT(Box<SMSG_COMPRESSED_UPDATE_OBJECT>),
    SMSG_PLAY_SPELL_IMPACT(Box<SMSG_PLAY_SPELL_IMPACT>),
    SMSG_EXPLORATION_EXPERIENCE(SMSG_EXPLORATION_EXPERIENCE),
    MSG_RANDOM_ROLL(Box<MSG_RANDOM_ROLL_Server>),
    SMSG_ENVIRONMENTAL_DAMAGE_LOG(Box<SMSG_ENVIRONMENTAL_DAMAGE_LOG>),
    SMSG_LFG_PLAYER_REWARD(Box<SMSG_LFG_PLAYER_REWARD>),
    SMSG_LFG_TELEPORT_DENIED(SMSG_LFG_TELEPORT_DENIED),
    SMSG_REMOVED_SPELL(SMSG_REMOVED_SPELL),
    SMSG_GMTICKET_CREATE(SMSG_GMTICKET_CREATE),
    SMSG_GMTICKET_UPDATETEXT(SMSG_GMTICKET_UPDATETEXT),
    SMSG_ACCOUNT_DATA_TIMES(Box<SMSG_ACCOUNT_DATA_TIMES>),
    SMSG_UPDATE_ACCOUNT_DATA(Box<SMSG_UPDATE_ACCOUNT_DATA>),
    SMSG_GMTICKET_GETTICKET(Box<SMSG_GMTICKET_GETTICKET>),
    SMSG_UPDATE_INSTANCE_ENCOUNTER_UNIT(Box<SMSG_UPDATE_INSTANCE_ENCOUNTER_UNIT>),
    SMSG_GAMEOBJECT_DESPAWN_ANIM(SMSG_GAMEOBJECT_DESPAWN_ANIM),
    MSG_CORPSE_QUERY(Box<MSG_CORPSE_QUERY_Server>),
    SMSG_GMTICKET_DELETETICKET(SMSG_GMTICKET_DELETETICKET),
    SMSG_CHAT_WRONG_FACTION,
    SMSG_GMTICKET_SYSTEMSTATUS(SMSG_GMTICKET_SYSTEMSTATUS),
    SMSG_QUEST_FORCE_REMOVE(SMSG_QUEST_FORCE_REMOVE),
    SMSG_SPIRIT_HEALER_CONFIRM(SMSG_SPIRIT_HEALER_CONFIRM),
    SMSG_GOSSIP_POI(Box<SMSG_GOSSIP_POI>),
    SMSG_LOGIN_VERIFY_WORLD(Box<SMSG_LOGIN_VERIFY_WORLD>),
    SMSG_SEND_MAIL_RESULT(Box<SMSG_SEND_MAIL_RESULT>),
    SMSG_MAIL_LIST_RESULT(Box<SMSG_MAIL_LIST_RESULT>),
    SMSG_BATTLEFIELD_LIST(Box<SMSG_BATTLEFIELD_LIST>),
    SMSG_ITEM_TEXT_QUERY_RESPONSE(Box<SMSG_ITEM_TEXT_QUERY_RESPONSE>),
    SMSG_SPELLLOGMISS(Box<SMSG_SPELLLOGMISS>),
    SMSG_SPELLLOGEXECUTE(Box<SMSG_SPELLLOGEXECUTE>),
    SMSG_PERIODICAURALOG(Box<SMSG_PERIODICAURALOG>),
    SMSG_SPELLDAMAGESHIELD(Box<SMSG_SPELLDAMAGESHIELD>),
    SMSG_SPELLNONMELEEDAMAGELOG(Box<SMSG_SPELLNONMELEEDAMAGELOG>),
    SMSG_RESURRECT_FAILED(SMSG_RESURRECT_FAILED),
    SMSG_ZONE_UNDER_ATTACK(SMSG_ZONE_UNDER_ATTACK),
    MSG_AUCTION_HELLO(Box<MSG_AUCTION_HELLO_Server>),
    SMSG_AUCTION_COMMAND_RESULT(Box<SMSG_AUCTION_COMMAND_RESULT>),
    SMSG_AUCTION_LIST_RESULT(Box<SMSG_AUCTION_LIST_RESULT>),
    SMSG_AUCTION_OWNER_LIST_RESULT(Box<SMSG_AUCTION_OWNER_LIST_RESULT>),
    SMSG_AUCTION_BIDDER_NOTIFICATION(Box<SMSG_AUCTION_BIDDER_NOTIFICATION>),
    SMSG_AUCTION_OWNER_NOTIFICATION(Box<SMSG_AUCTION_OWNER_NOTIFICATION>),
    SMSG_PROCRESIST(Box<SMSG_PROCRESIST>),
    SMSG_DISPEL_FAILED(Box<SMSG_DISPEL_FAILED>),
    SMSG_SPELLORDAMAGE_IMMUNE(Box<SMSG_SPELLORDAMAGE_IMMUNE>),
    SMSG_AUCTION_BIDDER_LIST_RESULT(Box<SMSG_AUCTION_BIDDER_LIST_RESULT>),
    SMSG_SET_FLAT_SPELL_MODIFIER(SMSG_SET_FLAT_SPELL_MODIFIER),
    SMSG_SET_PCT_SPELL_MODIFIER(SMSG_SET_PCT_SPELL_MODIFIER),
    SMSG_CORPSE_RECLAIM_DELAY(SMSG_CORPSE_RECLAIM_DELAY),
    MSG_LIST_STABLED_PETS(Box<MSG_LIST_STABLED_PETS_Server>),
    SMSG_STABLE_RESULT(SMSG_STABLE_RESULT),
    SMSG_PLAY_MUSIC(SMSG_PLAY_MUSIC),
    SMSG_PLAY_OBJECT_SOUND(Box<SMSG_PLAY_OBJECT_SOUND>),
    SMSG_SPELLDISPELLOG(Box<SMSG_SPELLDISPELLOG>),
    MSG_QUERY_NEXT_MAIL_TIME(Box<MSG_QUERY_NEXT_MAIL_TIME_Server>),
    SMSG_RECEIVED_MAIL(SMSG_RECEIVED_MAIL),
    SMSG_RAID_GROUP_ONLY(SMSG_RAID_GROUP_ONLY),
    SMSG_PVP_CREDIT(Box<SMSG_PVP_CREDIT>),
    SMSG_AUCTION_REMOVED_NOTIFICATION(Box<SMSG_AUCTION_REMOVED_NOTIFICATION>),
    SMSG_SERVER_MESSAGE(Box<SMSG_SERVER_MESSAGE>),
    SMSG_LFG_OFFER_CONTINUE(SMSG_LFG_OFFER_CONTINUE),
    SMSG_SHOW_MAILBOX(SMSG_SHOW_MAILBOX),
    SMSG_CANCEL_AUTO_REPEAT(SMSG_CANCEL_AUTO_REPEAT),
    SMSG_STANDSTATE_UPDATE(SMSG_STANDSTATE_UPDATE),
    SMSG_LOOT_ALL_PASSED(Box<SMSG_LOOT_ALL_PASSED>),
    SMSG_LOOT_ROLL_WON(Box<SMSG_LOOT_ROLL_WON>),
    SMSG_LOOT_START_ROLL(Box<SMSG_LOOT_START_ROLL>),
    SMSG_LOOT_ROLL(Box<SMSG_LOOT_ROLL>),
    SMSG_LOOT_MASTER_LIST(Box<SMSG_LOOT_MASTER_LIST>),
    SMSG_SET_FORCED_REACTIONS(Box<SMSG_SET_FORCED_REACTIONS>),
    SMSG_SPELL_FAILED_OTHER(Box<SMSG_SPELL_FAILED_OTHER>),
    SMSG_CHAT_PLAYER_NOT_FOUND(Box<SMSG_CHAT_PLAYER_NOT_FOUND>),
    MSG_TALENT_WIPE_CONFIRM(Box<MSG_TALENT_WIPE_CONFIRM_Server>),
    SMSG_SUMMON_REQUEST(Box<SMSG_SUMMON_REQUEST>),
    SMSG_MONSTER_MOVE_TRANSPORT(Box<SMSG_MONSTER_MOVE_TRANSPORT>),
    SMSG_PET_BROKEN,
    MSG_MOVE_FEATHER_FALL(Box<MSG_MOVE_FEATHER_FALL_Server>),
    SMSG_FEIGN_DEATH_RESISTED,
    SMSG_DUEL_COUNTDOWN(SMSG_DUEL_COUNTDOWN),
    SMSG_AREA_TRIGGER_MESSAGE(Box<SMSG_AREA_TRIGGER_MESSAGE>),
    SMSG_LFG_ROLE_CHOSEN(Box<SMSG_LFG_ROLE_CHOSEN>),
    SMSG_PLAYER_SKINNED(SMSG_PLAYER_SKINNED),
    SMSG_DURABILITY_DAMAGE_DEATH,
    SMSG_INIT_WORLD_STATES(Box<SMSG_INIT_WORLD_STATES>),
    SMSG_UPDATE_WORLD_STATE(SMSG_UPDATE_WORLD_STATE),
    SMSG_ITEM_NAME_QUERY_RESPONSE(Box<SMSG_ITEM_NAME_QUERY_RESPONSE>),
    SMSG_PET_ACTION_FEEDBACK(SMSG_PET_ACTION_FEEDBACK),
    SMSG_CHAR_RENAME(Box<SMSG_CHAR_RENAME>),
    SMSG_INSTANCE_SAVE_CREATED(SMSG_INSTANCE_SAVE_CREATED),
    SMSG_RAID_INSTANCE_INFO(Box<SMSG_RAID_INSTANCE_INFO>),
    SMSG_PLAY_SOUND(SMSG_PLAY_SOUND),
    SMSG_BATTLEFIELD_STATUS(Box<SMSG_BATTLEFIELD_STATUS>),
    MSG_INSPECT_HONOR_STATS(Box<MSG_INSPECT_HONOR_STATS_Server>),
    SMSG_FORCE_WALK_SPEED_CHANGE(Box<SMSG_FORCE_WALK_SPEED_CHANGE>),
    SMSG_FORCE_SWIM_BACK_SPEED_CHANGE(Box<SMSG_FORCE_SWIM_BACK_SPEED_CHANGE>),
    SMSG_FORCE_TURN_RATE_CHANGE(Box<SMSG_FORCE_TURN_RATE_CHANGE>),
    SMSG_AREA_SPIRIT_HEALER_TIME(Box<SMSG_AREA_SPIRIT_HEALER_TIME>),
    SMSG_WARDEN_DATA(Box<SMSG_WARDEN_DATA>),
    SMSG_GROUP_JOINED_BATTLEGROUND(SMSG_GROUP_JOINED_BATTLEGROUND),
    MSG_BATTLEGROUND_PLAYER_POSITIONS(Box<MSG_BATTLEGROUND_PLAYER_POSITIONS_Server>),
    SMSG_BINDER_CONFIRM(Box<SMSG_BINDER_CONFIRM>),
    SMSG_BATTLEGROUND_PLAYER_JOINED(SMSG_BATTLEGROUND_PLAYER_JOINED),
    SMSG_BATTLEGROUND_PLAYER_LEFT(SMSG_BATTLEGROUND_PLAYER_LEFT),
    SMSG_ADDON_INFO(Box<SMSG_ADDON_INFO>),
    SMSG_PET_UNLEARN_CONFIRM(Box<SMSG_PET_UNLEARN_CONFIRM>),
    SMSG_PARTY_MEMBER_STATS_FULL(Box<SMSG_PARTY_MEMBER_STATS_FULL>),
    SMSG_WEATHER(Box<SMSG_WEATHER>),
    SMSG_RAID_INSTANCE_MESSAGE(Box<SMSG_RAID_INSTANCE_MESSAGE>),
    SMSG_COMPRESSED_MOVES(Box<SMSG_COMPRESSED_MOVES>),
    SMSG_CHAT_RESTRICTED(SMSG_CHAT_RESTRICTED),
    SMSG_SPLINE_SET_RUN_SPEED(Box<SMSG_SPLINE_SET_RUN_SPEED>),
    SMSG_SPLINE_SET_RUN_BACK_SPEED(Box<SMSG_SPLINE_SET_RUN_BACK_SPEED>),
    SMSG_SPLINE_SET_SWIM_SPEED(Box<SMSG_SPLINE_SET_SWIM_SPEED>),
    SMSG_SPLINE_SET_WALK_SPEED(Box<SMSG_SPLINE_SET_WALK_SPEED>),
    SMSG_SPLINE_SET_SWIM_BACK_SPEED(Box<SMSG_SPLINE_SET_SWIM_BACK_SPEED>),
    SMSG_SPLINE_SET_TURN_RATE(Box<SMSG_SPLINE_SET_TURN_RATE>),
    SMSG_SPLINE_MOVE_UNROOT(SMSG_SPLINE_MOVE_UNROOT),
    SMSG_SPLINE_MOVE_FEATHER_FALL(SMSG_SPLINE_MOVE_FEATHER_FALL),
    SMSG_SPLINE_MOVE_NORMAL_FALL(SMSG_SPLINE_MOVE_NORMAL_FALL),
    SMSG_SPLINE_MOVE_SET_HOVER(SMSG_SPLINE_MOVE_SET_HOVER),
    SMSG_SPLINE_MOVE_UNSET_HOVER(SMSG_SPLINE_MOVE_UNSET_HOVER),
    SMSG_SPLINE_MOVE_WATER_WALK(SMSG_SPLINE_MOVE_WATER_WALK),
    SMSG_SPLINE_MOVE_LAND_WALK(SMSG_SPLINE_MOVE_LAND_WALK),
    SMSG_SPLINE_MOVE_START_SWIM(SMSG_SPLINE_MOVE_START_SWIM),
    SMSG_SPLINE_MOVE_STOP_SWIM(SMSG_SPLINE_MOVE_STOP_SWIM),
    SMSG_SPLINE_MOVE_SET_RUN_MODE(SMSG_SPLINE_MOVE_SET_RUN_MODE),
    SMSG_SPLINE_MOVE_SET_WALK_MODE(SMSG_SPLINE_MOVE_SET_WALK_MODE),
    MSG_MOVE_TIME_SKIPPED(Box<MSG_MOVE_TIME_SKIPPED_Server>),
    SMSG_SPLINE_MOVE_ROOT(SMSG_SPLINE_MOVE_ROOT),
    SMSG_INVALIDATE_PLAYER(SMSG_INVALIDATE_PLAYER),
    SMSG_INSTANCE_RESET(SMSG_INSTANCE_RESET),
    SMSG_INSTANCE_RESET_FAILED(SMSG_INSTANCE_RESET_FAILED),
    SMSG_UPDATE_LAST_INSTANCE(SMSG_UPDATE_LAST_INSTANCE),
    MSG_RAID_TARGET_UPDATE(Box<MSG_RAID_TARGET_UPDATE_Server>),
    MSG_RAID_READY_CHECK(Box<MSG_RAID_READY_CHECK_Server>),
    SMSG_PET_ACTION_SOUND(Box<SMSG_PET_ACTION_SOUND>),
    SMSG_PET_DISMISS_SOUND(Box<SMSG_PET_DISMISS_SOUND>),
    SMSG_GM_TICKET_STATUS_UPDATE(SMSG_GM_TICKET_STATUS_UPDATE),
    MSG_SET_DUNGEON_DIFFICULTY(MSG_SET_DUNGEON_DIFFICULTY_Server),
    SMSG_UPDATE_INSTANCE_OWNERSHIP(SMSG_UPDATE_INSTANCE_OWNERSHIP),
    SMSG_CHAT_PLAYER_AMBIGUOUS(Box<SMSG_CHAT_PLAYER_AMBIGUOUS>),
    SMSG_SPELLINSTAKILLLOG(Box<SMSG_SPELLINSTAKILLLOG>),
    SMSG_SPELL_UPDATE_CHAIN_TARGETS(Box<SMSG_SPELL_UPDATE_CHAIN_TARGETS>),
    SMSG_SPELLSTEALLOG(Box<SMSG_SPELLSTEALLOG>),
    SMSG_DEFENSE_MESSAGE(Box<SMSG_DEFENSE_MESSAGE>),
    SMSG_INSTANCE_DIFFICULTY(SMSG_INSTANCE_DIFFICULTY),
    SMSG_MOTD(Box<SMSG_MOTD>),
    SMSG_MOVE_SET_CAN_FLY(Box<SMSG_MOVE_SET_CAN_FLY>),
    SMSG_MOVE_UNSET_CAN_FLY(Box<SMSG_MOVE_UNSET_CAN_FLY>),
    SMSG_ARENA_TEAM_COMMAND_RESULT(Box<SMSG_ARENA_TEAM_COMMAND_RESULT>),
    SMSG_ARENA_TEAM_QUERY_RESPONSE(Box<SMSG_ARENA_TEAM_QUERY_RESPONSE>),
    SMSG_ARENA_TEAM_ROSTER(Box<SMSG_ARENA_TEAM_ROSTER>),
    SMSG_ARENA_TEAM_INVITE(Box<SMSG_ARENA_TEAM_INVITE>),
    SMSG_ARENA_TEAM_EVENT(Box<SMSG_ARENA_TEAM_EVENT>),
    SMSG_ARENA_TEAM_STATS(Box<SMSG_ARENA_TEAM_STATS>),
    SMSG_UPDATE_LFG_LIST(Box<SMSG_UPDATE_LFG_LIST>),
    SMSG_LFG_PROPOSAL_UPDATE(Box<SMSG_LFG_PROPOSAL_UPDATE>),
    SMSG_LFG_ROLE_CHECK_UPDATE(Box<SMSG_LFG_ROLE_CHECK_UPDATE>),
    SMSG_LFG_JOIN_RESULT(Box<SMSG_LFG_JOIN_RESULT>),
    SMSG_LFG_QUEUE_STATUS(Box<SMSG_LFG_QUEUE_STATUS>),
    SMSG_LFG_UPDATE_PLAYER(Box<SMSG_LFG_UPDATE_PLAYER>),
    SMSG_LFG_UPDATE_PARTY(Box<SMSG_LFG_UPDATE_PARTY>),
    SMSG_LFG_UPDATE_SEARCH(SMSG_LFG_UPDATE_SEARCH),
    SMSG_LFG_BOOT_PROPOSAL_UPDATE(Box<SMSG_LFG_BOOT_PROPOSAL_UPDATE>),
    SMSG_LFG_PLAYER_INFO(Box<SMSG_LFG_PLAYER_INFO>),
    SMSG_LFG_PARTY_INFO(Box<SMSG_LFG_PARTY_INFO>),
    SMSG_TITLE_EARNED(SMSG_TITLE_EARNED),
    SMSG_ARENA_ERROR(SMSG_ARENA_ERROR),
    MSG_INSPECT_ARENA_TEAMS(Box<MSG_INSPECT_ARENA_TEAMS_Server>),
    SMSG_DEATH_RELEASE_LOC(Box<SMSG_DEATH_RELEASE_LOC>),
    SMSG_FORCED_DEATH_UPDATE,
    MSG_MOVE_SET_FLIGHT_SPEED(Box<MSG_MOVE_SET_FLIGHT_SPEED_Server>),
    SMSG_FORCE_FLIGHT_SPEED_CHANGE(Box<SMSG_FORCE_FLIGHT_SPEED_CHANGE>),
    SMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE(Box<SMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE>),
    SMSG_SPLINE_SET_FLIGHT_SPEED(Box<SMSG_SPLINE_SET_FLIGHT_SPEED>),
    SMSG_SPLINE_SET_FLIGHT_BACK_SPEED(Box<SMSG_SPLINE_SET_FLIGHT_BACK_SPEED>),
    SMSG_FLIGHT_SPLINE_SYNC(Box<SMSG_FLIGHT_SPLINE_SYNC>),
    SMSG_REALM_SPLIT(Box<SMSG_REALM_SPLIT>),
    SMSG_TIME_SYNC_REQ(SMSG_TIME_SYNC_REQ),
    SMSG_RESET_FAILED_NOTIFY(SMSG_RESET_FAILED_NOTIFY),
    SMSG_LFG_DISABLED,
    SMSG_UPDATE_COMBO_POINTS(Box<SMSG_UPDATE_COMBO_POINTS>),
    SMSG_DISMOUNT(SMSG_DISMOUNT),
    MSG_MOVE_UPDATE_CAN_FLY(Box<MSG_MOVE_UPDATE_CAN_FLY_Server>),
    MSG_RAID_READY_CHECK_CONFIRM(Box<MSG_RAID_READY_CHECK_CONFIRM_Server>),
    SMSG_GM_MESSAGECHAT(Box<SMSG_GM_MESSAGECHAT>),
    SMSG_CLEAR_TARGET(SMSG_CLEAR_TARGET),
    SMSG_CROSSED_INEBRIATION_THRESHOLD(Box<SMSG_CROSSED_INEBRIATION_THRESHOLD>),
    SMSG_KICK_REASON(Box<SMSG_KICK_REASON>),
    SMSG_COMPLAIN_RESULT(SMSG_COMPLAIN_RESULT),
    SMSG_FEATURE_SYSTEM_STATUS(SMSG_FEATURE_SYSTEM_STATUS),
    SMSG_CHANNEL_MEMBER_COUNT(Box<SMSG_CHANNEL_MEMBER_COUNT>),
    SMSG_GUILD_BANK_LIST(Box<SMSG_GUILD_BANK_LIST>),
    MSG_GUILD_BANK_LOG_QUERY(Box<MSG_GUILD_BANK_LOG_QUERY_Server>),
    SMSG_USERLIST_ADD(Box<SMSG_USERLIST_ADD>),
    SMSG_USERLIST_REMOVE(Box<SMSG_USERLIST_REMOVE>),
    SMSG_USERLIST_UPDATE(Box<SMSG_USERLIST_UPDATE>),
    SMSG_INSPECT_TALENT(Box<SMSG_INSPECT_TALENT>),
    SMSG_LOOT_LIST(Box<SMSG_LOOT_LIST>),
    MSG_GUILD_PERMISSIONS(Box<MSG_GUILD_PERMISSIONS_Server>),
    MSG_GUILD_BANK_MONEY_WITHDRAWN(MSG_GUILD_BANK_MONEY_WITHDRAWN_Server),
    MSG_GUILD_EVENT_LOG_QUERY(Box<MSG_GUILD_EVENT_LOG_QUERY_Server>),
    SMSG_MIRRORIMAGE_DATA(Box<SMSG_MIRRORIMAGE_DATA>),
    MSG_QUERY_GUILD_BANK_TEXT(Box<MSG_QUERY_GUILD_BANK_TEXT_Server>),
    SMSG_OVERRIDE_LIGHT(Box<SMSG_OVERRIDE_LIGHT>),
    SMSG_TOTEM_CREATED(Box<SMSG_TOTEM_CREATED>),
    SMSG_QUESTGIVER_STATUS_MULTIPLE(Box<SMSG_QUESTGIVER_STATUS_MULTIPLE>),
    SMSG_SET_PLAYER_DECLINED_NAMES_RESULT(Box<SMSG_SET_PLAYER_DECLINED_NAMES_RESULT>),
    SMSG_SEND_UNLEARN_SPELLS(Box<SMSG_SEND_UNLEARN_SPELLS>),
    SMSG_PROPOSE_LEVEL_GRANT(SMSG_PROPOSE_LEVEL_GRANT),
    SMSG_REFER_A_FRIEND_FAILURE(Box<SMSG_REFER_A_FRIEND_FAILURE>),
    SMSG_SPLINE_MOVE_SET_FLYING(SMSG_SPLINE_MOVE_SET_FLYING),
    SMSG_SPLINE_MOVE_UNSET_FLYING(SMSG_SPLINE_MOVE_UNSET_FLYING),
    SMSG_ENABLE_BARBER_SHOP,
    SMSG_BARBER_SHOP_RESULT(SMSG_BARBER_SHOP_RESULT),
    SMSG_CALENDAR_SEND_CALENDAR(Box<SMSG_CALENDAR_SEND_CALENDAR>),
    SMSG_CALENDAR_SEND_EVENT(Box<SMSG_CALENDAR_SEND_EVENT>),
    SMSG_CALENDAR_FILTER_GUILD(Box<SMSG_CALENDAR_FILTER_GUILD>),
    SMSG_CALENDAR_ARENA_TEAM(Box<SMSG_CALENDAR_ARENA_TEAM>),
    SMSG_CALENDAR_EVENT_INVITE(Box<SMSG_CALENDAR_EVENT_INVITE>),
    SMSG_CALENDAR_EVENT_INVITE_REMOVED(Box<SMSG_CALENDAR_EVENT_INVITE_REMOVED>),
    SMSG_CALENDAR_EVENT_STATUS(Box<SMSG_CALENDAR_EVENT_STATUS>),
    SMSG_CALENDAR_COMMAND_RESULT(Box<SMSG_CALENDAR_COMMAND_RESULT>),
    SMSG_CALENDAR_RAID_LOCKOUT_ADDED(Box<SMSG_CALENDAR_RAID_LOCKOUT_ADDED>),
    SMSG_CALENDAR_RAID_LOCKOUT_REMOVED(Box<SMSG_CALENDAR_RAID_LOCKOUT_REMOVED>),
    SMSG_CALENDAR_EVENT_INVITE_ALERT(Box<SMSG_CALENDAR_EVENT_INVITE_ALERT>),
    SMSG_CALENDAR_EVENT_INVITE_REMOVED_ALERT(Box<SMSG_CALENDAR_EVENT_INVITE_REMOVED_ALERT>),
    SMSG_CALENDAR_EVENT_REMOVED_ALERT(Box<SMSG_CALENDAR_EVENT_REMOVED_ALERT>),
    SMSG_CALENDAR_EVENT_UPDATED_ALERT(Box<SMSG_CALENDAR_EVENT_UPDATED_ALERT>),
    SMSG_CALENDAR_EVENT_MODERATOR_STATUS_ALERT(Box<SMSG_CALENDAR_EVENT_MODERATOR_STATUS_ALERT>),
    SMSG_CALENDAR_SEND_NUM_PENDING(SMSG_CALENDAR_SEND_NUM_PENDING),
    MSG_MOVE_SET_PITCH_RATE(Box<MSG_MOVE_SET_PITCH_RATE_Server>),
    SMSG_FORCE_PITCH_RATE_CHANGE(Box<SMSG_FORCE_PITCH_RATE_CHANGE>),
    SMSG_CALENDAR_EVENT_INVITE_NOTES(Box<SMSG_CALENDAR_EVENT_INVITE_NOTES>),
    SMSG_CALENDAR_EVENT_INVITE_NOTES_ALERT(Box<SMSG_CALENDAR_EVENT_INVITE_NOTES_ALERT>),
    SMSG_UPDATE_ACCOUNT_DATA_COMPLETE(SMSG_UPDATE_ACCOUNT_DATA_COMPLETE),
    SMSG_TRIGGER_MOVIE(SMSG_TRIGGER_MOVIE),
    SMSG_ACHIEVEMENT_EARNED(Box<SMSG_ACHIEVEMENT_EARNED>),
    SMSG_CRITERIA_UPDATE(Box<SMSG_CRITERIA_UPDATE>),
    SMSG_RESPOND_INSPECT_ACHIEVEMENTS(Box<SMSG_RESPOND_INSPECT_ACHIEVEMENTS>),
    SMSG_QUESTUPDATE_ADD_PVP_KILL(Box<SMSG_QUESTUPDATE_ADD_PVP_KILL>),
    SMSG_CALENDAR_RAID_LOCKOUT_UPDATED(Box<SMSG_CALENDAR_RAID_LOCKOUT_UPDATED>),
    SMSG_CHAR_CUSTOMIZE(Box<SMSG_CHAR_CUSTOMIZE>),
    SMSG_SET_PHASE_SHIFT(SMSG_SET_PHASE_SHIFT),
    SMSG_ALL_ACHIEVEMENT_DATA(Box<SMSG_ALL_ACHIEVEMENT_DATA>),
    SMSG_POWER_UPDATE(Box<SMSG_POWER_UPDATE>),
    SMSG_HIGHEST_THREAT_UPDATE(Box<SMSG_HIGHEST_THREAT_UPDATE>),
    SMSG_THREAT_UPDATE(Box<SMSG_THREAT_UPDATE>),
    SMSG_THREAT_REMOVE(Box<SMSG_THREAT_REMOVE>),
    SMSG_THREAT_CLEAR(SMSG_THREAT_CLEAR),
    SMSG_CONVERT_RUNE(SMSG_CONVERT_RUNE),
    SMSG_RESYNC_RUNES(Box<SMSG_RESYNC_RUNES>),
    SMSG_ADD_RUNE_POWER(SMSG_ADD_RUNE_POWER),
    SMSG_AUCTION_LIST_PENDING_SALES(Box<SMSG_AUCTION_LIST_PENDING_SALES>),
    SMSG_MODIFY_COOLDOWN(Box<SMSG_MODIFY_COOLDOWN>),
    SMSG_PET_UPDATE_COMBO_POINTS(Box<SMSG_PET_UPDATE_COMBO_POINTS>),
    SMSG_PRE_RESURRECT(SMSG_PRE_RESURRECT),
    SMSG_AURA_UPDATE_ALL(Box<SMSG_AURA_UPDATE_ALL>),
    SMSG_AURA_UPDATE(Box<SMSG_AURA_UPDATE>),
    SMSG_SERVER_FIRST_ACHIEVEMENT(Box<SMSG_SERVER_FIRST_ACHIEVEMENT>),
    SMSG_PET_LEARNED_SPELL(SMSG_PET_LEARNED_SPELL),
    SMSG_PET_UNLEARNED_SPELL(SMSG_PET_UNLEARNED_SPELL),
    SMSG_ON_CANCEL_EXPECTED_RIDE_VEHICLE_AURA,
    SMSG_CRITERIA_DELETED(SMSG_CRITERIA_DELETED),
    SMSG_ACHIEVEMENT_DELETED(SMSG_ACHIEVEMENT_DELETED),
    SMSG_BATTLEGROUND_INFO_THROTTLED,
    SMSG_PLAYER_VEHICLE_DATA(Box<SMSG_PLAYER_VEHICLE_DATA>),
    SMSG_PET_GUIDS(Box<SMSG_PET_GUIDS>),
    SMSG_CLIENTCACHE_VERSION(SMSG_CLIENTCACHE_VERSION),
    SMSG_ITEM_REFUND_INFO_RESPONSE(Box<SMSG_ITEM_REFUND_INFO_RESPONSE>),
    SMSG_ITEM_REFUND_RESULT(Box<SMSG_ITEM_REFUND_RESULT>),
    SMSG_CORPSE_MAP_POSITION_QUERY_RESPONSE(Box<SMSG_CORPSE_MAP_POSITION_QUERY_RESPONSE>),
    SMSG_CALENDAR_CLEAR_PENDING_ACTION,
    SMSG_EQUIPMENT_SET_LIST(Box<SMSG_EQUIPMENT_SET_LIST>),
    SMSG_SET_PROJECTILE_POSITION(Box<SMSG_SET_PROJECTILE_POSITION>),
    SMSG_TALENTS_INFO(Box<SMSG_TALENTS_INFO>),
    SMSG_ARENA_UNIT_DESTROYED(SMSG_ARENA_UNIT_DESTROYED),
    SMSG_ARENA_TEAM_CHANGE_FAILED_QUEUED(SMSG_ARENA_TEAM_CHANGE_FAILED_QUEUED),
    SMSG_MOVE_GRAVITY_DISABLE(Box<SMSG_MOVE_GRAVITY_DISABLE>),
    SMSG_MOVE_GRAVITY_ENABLE(Box<SMSG_MOVE_GRAVITY_ENABLE>),
    MSG_MOVE_GRAVITY_CHNG(Box<MSG_MOVE_GRAVITY_CHNG_Server>),
    SMSG_SPLINE_MOVE_GRAVITY_DISABLE(SMSG_SPLINE_MOVE_GRAVITY_DISABLE),
    SMSG_SPLINE_MOVE_GRAVITY_ENABLE(SMSG_SPLINE_MOVE_GRAVITY_ENABLE),
    SMSG_EQUIPMENT_SET_USE_RESULT(SMSG_EQUIPMENT_SET_USE_RESULT),
    SMSG_CHAR_FACTION_CHANGE(Box<SMSG_CHAR_FACTION_CHANGE>),
    SMSG_BATTLEFIELD_MGR_ENTRY_INVITE(Box<SMSG_BATTLEFIELD_MGR_ENTRY_INVITE>),
    SMSG_BATTLEFIELD_MGR_ENTERED(SMSG_BATTLEFIELD_MGR_ENTERED),
    SMSG_BATTLEFIELD_MGR_QUEUE_INVITE(SMSG_BATTLEFIELD_MGR_QUEUE_INVITE),
    SMSG_BATTLEFIELD_MGR_QUEUE_REQUEST_RESPONSE(Box<SMSG_BATTLEFIELD_MGR_QUEUE_REQUEST_RESPONSE>),
    SMSG_BATTLEFIELD_MGR_EJECT_PENDING(SMSG_BATTLEFIELD_MGR_EJECT_PENDING),
    SMSG_BATTLEFIELD_MGR_EJECTED(SMSG_BATTLEFIELD_MGR_EJECTED),
    SMSG_BATTLEFIELD_MGR_STATE_CHANGE(SMSG_BATTLEFIELD_MGR_STATE_CHANGE),
    MSG_SET_RAID_DIFFICULTY(MSG_SET_RAID_DIFFICULTY_Server),
    SMSG_TOGGLE_XP_GAIN,
    SMSG_GMRESPONSE_DB_ERROR,
    SMSG_GMRESPONSE_RECEIVED(Box<SMSG_GMRESPONSE_RECEIVED>),
    SMSG_GMRESPONSE_STATUS_UPDATE(SMSG_GMRESPONSE_STATUS_UPDATE),
    SMSG_WORLD_STATE_UI_TIMER_UPDATE(SMSG_WORLD_STATE_UI_TIMER_UPDATE),
    SMSG_TALENTS_INVOLUNTARILY_RESET(SMSG_TALENTS_INVOLUNTARILY_RESET),
    SMSG_QUERY_QUESTS_COMPLETED_RESPONSE(Box<SMSG_QUERY_QUESTS_COMPLETED_RESPONSE>),
    SMSG_CORPSE_NOT_IN_INSTANCE,
    SMSG_CAMERA_SHAKE(SMSG_CAMERA_SHAKE),
    SMSG_SOCKET_GEMS_RESULT(Box<SMSG_SOCKET_GEMS_RESULT>),
    SMSG_REDIRECT_CLIENT(Box<SMSG_REDIRECT_CLIENT>),
    SMSG_MOVE_SET_COLLISION_HGT(Box<SMSG_MOVE_SET_COLLISION_HGT>),
    SMSG_MULTIPLE_MOVES(Box<SMSG_MULTIPLE_MOVES>),
}

impl ServerOpcodeMessage {
    fn read_opcodes(opcode: u16, body_size: u32, mut r: &[u8]) -> Result<Self, crate::errors::ExpectedOpcodeError> {
        match opcode {
            0x00B5 => Ok(Self::MSG_MOVE_START_FORWARD(Box::new(<MSG_MOVE_START_FORWARD as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x00B6 => Ok(Self::MSG_MOVE_START_BACKWARD(Box::new(<MSG_MOVE_START_BACKWARD as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x00B7 => Ok(Self::MSG_MOVE_STOP(Box::new(<MSG_MOVE_STOP as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x00B8 => Ok(Self::MSG_MOVE_START_STRAFE_LEFT(Box::new(<MSG_MOVE_START_STRAFE_LEFT as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x00B9 => Ok(Self::MSG_MOVE_START_STRAFE_RIGHT(Box::new(<MSG_MOVE_START_STRAFE_RIGHT as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x00BA => Ok(Self::MSG_MOVE_STOP_STRAFE(Box::new(<MSG_MOVE_STOP_STRAFE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x00BB => Ok(Self::MSG_MOVE_JUMP(Box::new(<MSG_MOVE_JUMP as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x00BC => Ok(Self::MSG_MOVE_START_TURN_LEFT(Box::new(<MSG_MOVE_START_TURN_LEFT as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x00BD => Ok(Self::MSG_MOVE_START_TURN_RIGHT(Box::new(<MSG_MOVE_START_TURN_RIGHT as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x00BE => Ok(Self::MSG_MOVE_STOP_TURN(Box::new(<MSG_MOVE_STOP_TURN as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x00BF => Ok(Self::MSG_MOVE_START_PITCH_UP(Box::new(<MSG_MOVE_START_PITCH_UP as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x00C0 => Ok(Self::MSG_MOVE_START_PITCH_DOWN(Box::new(<MSG_MOVE_START_PITCH_DOWN as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x00C1 => Ok(Self::MSG_MOVE_STOP_PITCH(Box::new(<MSG_MOVE_STOP_PITCH as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x00C2 => Ok(Self::MSG_MOVE_SET_RUN_MODE(Box::new(<MSG_MOVE_SET_RUN_MODE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x00C3 => Ok(Self::MSG_MOVE_SET_WALK_MODE(Box::new(<MSG_MOVE_SET_WALK_MODE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x00C9 => Ok(Self::MSG_MOVE_FALL_LAND(Box::new(<MSG_MOVE_FALL_LAND as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x00CA => Ok(Self::MSG_MOVE_START_SWIM(Box::new(<MSG_MOVE_START_SWIM as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x00CB => Ok(Self::MSG_MOVE_STOP_SWIM(Box::new(<MSG_MOVE_STOP_SWIM as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x00DA => Ok(Self::MSG_MOVE_SET_FACING(Box::new(<MSG_MOVE_SET_FACING as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x00DB => Ok(Self::MSG_MOVE_SET_PITCH(Box::new(<MSG_MOVE_SET_PITCH as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x00DC => crate::util::assert_empty(body_size, opcode, "MSG_MOVE_WORLDPORT_ACK").map(|_| Self::MSG_MOVE_WORLDPORT_ACK),
            0x00EE => Ok(Self::MSG_MOVE_HEARTBEAT(Box::new(<MSG_MOVE_HEARTBEAT as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x00F7 => Ok(Self::MSG_MOVE_HOVER(Box::new(<MSG_MOVE_HOVER as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x01C2 => Ok(Self::MSG_PETITION_DECLINE(<MSG_PETITION_DECLINE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x01F2 => Ok(Self::MSG_TABARDVENDOR_ACTIVATE(<MSG_TABARDVENDOR_ACTIVATE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x0276 => Ok(Self::MSG_QUEST_PUSH_RESULT(Box::new(<MSG_QUEST_PUSH_RESULT as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x02B1 => Ok(Self::MSG_MOVE_WATER_WALK(Box::new(<MSG_MOVE_WATER_WALK as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x02C1 => Ok(Self::MSG_PETITION_RENAME(Box::new(<MSG_PETITION_RENAME as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0359 => Ok(Self::MSG_MOVE_START_ASCEND(Box::new(<MSG_MOVE_START_ASCEND as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x035A => Ok(Self::MSG_MOVE_STOP_ASCEND(Box::new(<MSG_MOVE_STOP_ASCEND as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0380 => Ok(Self::MSG_MOVE_SET_FLIGHT_BACK_SPEED(Box::new(<MSG_MOVE_SET_FLIGHT_BACK_SPEED as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x03A7 => Ok(Self::MSG_MOVE_START_DESCEND(Box::new(<MSG_MOVE_START_DESCEND as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0447 => crate::util::assert_empty(body_size, opcode, "CMSG_CALENDAR_GET_NUM_PENDING").map(|_| Self::CMSG_CALENDAR_GET_NUM_PENDING),
            0x003A => Ok(Self::SMSG_CHAR_CREATE(<SMSG_CHAR_CREATE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x003B => Ok(Self::SMSG_CHAR_ENUM(Box::new(<SMSG_CHAR_ENUM as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x003C => Ok(Self::SMSG_CHAR_DELETE(<SMSG_CHAR_DELETE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x003E => Ok(Self::SMSG_NEW_WORLD(Box::new(<SMSG_NEW_WORLD as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x003F => Ok(Self::SMSG_TRANSFER_PENDING(Box::new(<SMSG_TRANSFER_PENDING as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0040 => Ok(Self::SMSG_TRANSFER_ABORTED(<SMSG_TRANSFER_ABORTED as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x0041 => Ok(Self::SMSG_CHARACTER_LOGIN_FAILED(<SMSG_CHARACTER_LOGIN_FAILED as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x0042 => Ok(Self::SMSG_LOGIN_SETTIMESPEED(Box::new(<SMSG_LOGIN_SETTIMESPEED as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x004C => Ok(Self::SMSG_LOGOUT_RESPONSE(<SMSG_LOGOUT_RESPONSE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x004D => crate::util::assert_empty(body_size, opcode, "SMSG_LOGOUT_COMPLETE").map(|_| Self::SMSG_LOGOUT_COMPLETE),
            0x004F => crate::util::assert_empty(body_size, opcode, "SMSG_LOGOUT_CANCEL_ACK").map(|_| Self::SMSG_LOGOUT_CANCEL_ACK),
            0x0051 => Ok(Self::SMSG_NAME_QUERY_RESPONSE(Box::new(<SMSG_NAME_QUERY_RESPONSE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0053 => Ok(Self::SMSG_PET_NAME_QUERY_RESPONSE(Box::new(<SMSG_PET_NAME_QUERY_RESPONSE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0055 => Ok(Self::SMSG_GUILD_QUERY_RESPONSE(Box::new(<SMSG_GUILD_QUERY_RESPONSE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0058 => Ok(Self::SMSG_ITEM_QUERY_SINGLE_RESPONSE(Box::new(<SMSG_ITEM_QUERY_SINGLE_RESPONSE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x005B => Ok(Self::SMSG_PAGE_TEXT_QUERY_RESPONSE(Box::new(<SMSG_PAGE_TEXT_QUERY_RESPONSE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x005D => Ok(Self::SMSG_QUEST_QUERY_RESPONSE(Box::new(<SMSG_QUEST_QUERY_RESPONSE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x005F => Ok(Self::SMSG_GAMEOBJECT_QUERY_RESPONSE(Box::new(<SMSG_GAMEOBJECT_QUERY_RESPONSE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0061 => Ok(Self::SMSG_CREATURE_QUERY_RESPONSE(Box::new(<SMSG_CREATURE_QUERY_RESPONSE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0063 => Ok(Self::SMSG_WHO(Box::new(<SMSG_WHO as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0065 => Ok(Self::SMSG_WHOIS(Box::new(<SMSG_WHOIS as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0067 => Ok(Self::SMSG_CONTACT_LIST(Box::new(<SMSG_CONTACT_LIST as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0068 => Ok(Self::SMSG_FRIEND_STATUS(Box::new(<SMSG_FRIEND_STATUS as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x006F => Ok(Self::SMSG_GROUP_INVITE(Box::new(<SMSG_GROUP_INVITE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0074 => Ok(Self::SMSG_GROUP_DECLINE(Box::new(<SMSG_GROUP_DECLINE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0077 => crate::util::assert_empty(body_size, opcode, "SMSG_GROUP_UNINVITE").map(|_| Self::SMSG_GROUP_UNINVITE),
            0x0079 => Ok(Self::SMSG_GROUP_SET_LEADER(Box::new(<SMSG_GROUP_SET_LEADER as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x007C => crate::util::assert_empty(body_size, opcode, "SMSG_GROUP_DESTROYED").map(|_| Self::SMSG_GROUP_DESTROYED),
            0x007D => Ok(Self::SMSG_GROUP_LIST(Box::new(<SMSG_GROUP_LIST as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x007E => Ok(Self::SMSG_PARTY_MEMBER_STATS(Box::new(<SMSG_PARTY_MEMBER_STATS as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x007F => Ok(Self::SMSG_PARTY_COMMAND_RESULT(Box::new(<SMSG_PARTY_COMMAND_RESULT as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0083 => Ok(Self::SMSG_GUILD_INVITE(Box::new(<SMSG_GUILD_INVITE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0086 => Ok(Self::SMSG_GUILD_DECLINE(Box::new(<SMSG_GUILD_DECLINE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0088 => Ok(Self::SMSG_GUILD_INFO(Box::new(<SMSG_GUILD_INFO as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x008A => Ok(Self::SMSG_GUILD_ROSTER(Box::new(<SMSG_GUILD_ROSTER as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0092 => Ok(Self::SMSG_GUILD_EVENT(Box::new(<SMSG_GUILD_EVENT as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0093 => Ok(Self::SMSG_GUILD_COMMAND_RESULT(Box::new(<SMSG_GUILD_COMMAND_RESULT as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0096 => Ok(Self::SMSG_MESSAGECHAT(Box::new(<SMSG_MESSAGECHAT as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0099 => Ok(Self::SMSG_CHANNEL_NOTIFY(Box::new(<SMSG_CHANNEL_NOTIFY as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x009B => Ok(Self::SMSG_CHANNEL_LIST(Box::new(<SMSG_CHANNEL_LIST as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x00A9 => Ok(Self::SMSG_UPDATE_OBJECT(Box::new(<SMSG_UPDATE_OBJECT as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x00AA => Ok(Self::SMSG_DESTROY_OBJECT(Box::new(<SMSG_DESTROY_OBJECT as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x00AE => Ok(Self::SMSG_READ_ITEM_OK(<SMSG_READ_ITEM_OK as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x00AF => Ok(Self::SMSG_READ_ITEM_FAILED(<SMSG_READ_ITEM_FAILED as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x00B0 => Ok(Self::SMSG_ITEM_COOLDOWN(Box::new(<SMSG_ITEM_COOLDOWN as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x00B3 => Ok(Self::SMSG_GAMEOBJECT_CUSTOM_ANIM(Box::new(<SMSG_GAMEOBJECT_CUSTOM_ANIM as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x00C6 => Ok(Self::MSG_MOVE_TELEPORT_CHEAT(Box::new(<MSG_MOVE_TELEPORT_CHEAT_Server as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x00C7 => Ok(Self::MSG_MOVE_TELEPORT_ACK(Box::new(<MSG_MOVE_TELEPORT_ACK_Server as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x00DD => Ok(Self::SMSG_MONSTER_MOVE(Box::new(<SMSG_MONSTER_MOVE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x00DE => Ok(Self::SMSG_MOVE_WATER_WALK(Box::new(<SMSG_MOVE_WATER_WALK as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x00DF => Ok(Self::SMSG_MOVE_LAND_WALK(Box::new(<SMSG_MOVE_LAND_WALK as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x00E2 => Ok(Self::SMSG_FORCE_RUN_SPEED_CHANGE(Box::new(<SMSG_FORCE_RUN_SPEED_CHANGE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x00E4 => Ok(Self::SMSG_FORCE_RUN_BACK_SPEED_CHANGE(Box::new(<SMSG_FORCE_RUN_BACK_SPEED_CHANGE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x00E6 => Ok(Self::SMSG_FORCE_SWIM_SPEED_CHANGE(Box::new(<SMSG_FORCE_SWIM_SPEED_CHANGE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x00E8 => Ok(Self::SMSG_FORCE_MOVE_ROOT(Box::new(<SMSG_FORCE_MOVE_ROOT as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x00EA => Ok(Self::SMSG_FORCE_MOVE_UNROOT(Box::new(<SMSG_FORCE_MOVE_UNROOT as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x00EC => Ok(Self::MSG_MOVE_ROOT(Box::new(<MSG_MOVE_ROOT_Server as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x00ED => Ok(Self::MSG_MOVE_UNROOT(Box::new(<MSG_MOVE_UNROOT_Server as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x00EF => Ok(Self::SMSG_MOVE_KNOCK_BACK(Box::new(<SMSG_MOVE_KNOCK_BACK as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x00F1 => Ok(Self::MSG_MOVE_KNOCK_BACK(Box::new(<MSG_MOVE_KNOCK_BACK_Server as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x00F2 => Ok(Self::SMSG_MOVE_FEATHER_FALL(Box::new(<SMSG_MOVE_FEATHER_FALL as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x00F3 => Ok(Self::SMSG_MOVE_NORMAL_FALL(Box::new(<SMSG_MOVE_NORMAL_FALL as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x00F4 => Ok(Self::SMSG_MOVE_SET_HOVER(Box::new(<SMSG_MOVE_SET_HOVER as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x00F5 => Ok(Self::SMSG_MOVE_UNSET_HOVER(Box::new(<SMSG_MOVE_UNSET_HOVER as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x00FA => Ok(Self::SMSG_TRIGGER_CINEMATIC(<SMSG_TRIGGER_CINEMATIC as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x00FD => Ok(Self::SMSG_TUTORIAL_FLAGS(Box::new(<SMSG_TUTORIAL_FLAGS as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0103 => Ok(Self::SMSG_EMOTE(Box::new(<SMSG_EMOTE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0105 => Ok(Self::SMSG_TEXT_EMOTE(Box::new(<SMSG_TEXT_EMOTE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0112 => Ok(Self::SMSG_INVENTORY_CHANGE_FAILURE(Box::new(<SMSG_INVENTORY_CHANGE_FAILURE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0120 => Ok(Self::SMSG_TRADE_STATUS(Box::new(<SMSG_TRADE_STATUS as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0121 => Ok(Self::SMSG_TRADE_STATUS_EXTENDED(Box::new(<SMSG_TRADE_STATUS_EXTENDED as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0122 => Ok(Self::SMSG_INITIALIZE_FACTIONS(Box::new(<SMSG_INITIALIZE_FACTIONS as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0123 => Ok(Self::SMSG_SET_FACTION_VISIBLE(<SMSG_SET_FACTION_VISIBLE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x0124 => Ok(Self::SMSG_SET_FACTION_STANDING(Box::new(<SMSG_SET_FACTION_STANDING as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0127 => Ok(Self::SMSG_SET_PROFICIENCY(<SMSG_SET_PROFICIENCY as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x0129 => Ok(Self::SMSG_ACTION_BUTTONS(Box::new(<SMSG_ACTION_BUTTONS as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x012A => Ok(Self::SMSG_INITIAL_SPELLS(Box::new(<SMSG_INITIAL_SPELLS as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x012B => Ok(Self::SMSG_LEARNED_SPELL(<SMSG_LEARNED_SPELL as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x012C => Ok(Self::SMSG_SUPERCEDED_SPELL(<SMSG_SUPERCEDED_SPELL as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x0130 => Ok(Self::SMSG_CAST_FAILED(Box::new(<SMSG_CAST_FAILED as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0131 => Ok(Self::SMSG_SPELL_START(Box::new(<SMSG_SPELL_START as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0132 => Ok(Self::SMSG_SPELL_GO(Box::new(<SMSG_SPELL_GO as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0133 => Ok(Self::SMSG_SPELL_FAILURE(Box::new(<SMSG_SPELL_FAILURE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0134 => Ok(Self::SMSG_SPELL_COOLDOWN(Box::new(<SMSG_SPELL_COOLDOWN as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0135 => Ok(Self::SMSG_COOLDOWN_EVENT(Box::new(<SMSG_COOLDOWN_EVENT as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0138 => Ok(Self::SMSG_PET_CAST_FAILED(Box::new(<SMSG_PET_CAST_FAILED as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0139 => Ok(Self::MSG_CHANNEL_START(Box::new(<MSG_CHANNEL_START_Server as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x013A => Ok(Self::MSG_CHANNEL_UPDATE(Box::new(<MSG_CHANNEL_UPDATE_Server as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x013C => Ok(Self::SMSG_AI_REACTION(Box::new(<SMSG_AI_REACTION as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0143 => Ok(Self::SMSG_ATTACKSTART(Box::new(<SMSG_ATTACKSTART as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0144 => Ok(Self::SMSG_ATTACKSTOP(Box::new(<SMSG_ATTACKSTOP as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0145 => crate::util::assert_empty(body_size, opcode, "SMSG_ATTACKSWING_NOTINRANGE").map(|_| Self::SMSG_ATTACKSWING_NOTINRANGE),
            0x0146 => crate::util::assert_empty(body_size, opcode, "SMSG_ATTACKSWING_BADFACING").map(|_| Self::SMSG_ATTACKSWING_BADFACING),
            0x0147 => Ok(Self::SMSG_INSTANCE_LOCK_WARNING_QUERY(Box::new(<SMSG_INSTANCE_LOCK_WARNING_QUERY as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0148 => crate::util::assert_empty(body_size, opcode, "SMSG_ATTACKSWING_DEADTARGET").map(|_| Self::SMSG_ATTACKSWING_DEADTARGET),
            0x0149 => crate::util::assert_empty(body_size, opcode, "SMSG_ATTACKSWING_CANT_ATTACK").map(|_| Self::SMSG_ATTACKSWING_CANT_ATTACK),
            0x014A => Ok(Self::SMSG_ATTACKERSTATEUPDATE(Box::new(<SMSG_ATTACKERSTATEUPDATE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x014E => crate::util::assert_empty(body_size, opcode, "SMSG_CANCEL_COMBAT").map(|_| Self::SMSG_CANCEL_COMBAT),
            0x0150 => Ok(Self::SMSG_SPELLHEALLOG(Box::new(<SMSG_SPELLHEALLOG as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0151 => Ok(Self::SMSG_SPELLENERGIZELOG(Box::new(<SMSG_SPELLENERGIZELOG as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0152 => Ok(Self::SMSG_BREAK_TARGET(<SMSG_BREAK_TARGET as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x0155 => Ok(Self::SMSG_BINDPOINTUPDATE(Box::new(<SMSG_BINDPOINTUPDATE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0158 => Ok(Self::SMSG_PLAYERBOUND(Box::new(<SMSG_PLAYERBOUND as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0159 => Ok(Self::SMSG_CLIENT_CONTROL_UPDATE(Box::new(<SMSG_CLIENT_CONTROL_UPDATE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x015B => Ok(Self::SMSG_RESURRECT_REQUEST(Box::new(<SMSG_RESURRECT_REQUEST as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0160 => Ok(Self::SMSG_LOOT_RESPONSE(Box::new(<SMSG_LOOT_RESPONSE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0161 => Ok(Self::SMSG_LOOT_RELEASE_RESPONSE(Box::new(<SMSG_LOOT_RELEASE_RESPONSE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0162 => Ok(Self::SMSG_LOOT_REMOVED(<SMSG_LOOT_REMOVED as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x0163 => Ok(Self::SMSG_LOOT_MONEY_NOTIFY(<SMSG_LOOT_MONEY_NOTIFY as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x0165 => crate::util::assert_empty(body_size, opcode, "SMSG_LOOT_CLEAR_MONEY").map(|_| Self::SMSG_LOOT_CLEAR_MONEY),
            0x0166 => Ok(Self::SMSG_ITEM_PUSH_RESULT(Box::new(<SMSG_ITEM_PUSH_RESULT as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0167 => Ok(Self::SMSG_DUEL_REQUESTED(Box::new(<SMSG_DUEL_REQUESTED as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0168 => crate::util::assert_empty(body_size, opcode, "SMSG_DUEL_OUTOFBOUNDS").map(|_| Self::SMSG_DUEL_OUTOFBOUNDS),
            0x0169 => crate::util::assert_empty(body_size, opcode, "SMSG_DUEL_INBOUNDS").map(|_| Self::SMSG_DUEL_INBOUNDS),
            0x016A => Ok(Self::SMSG_DUEL_COMPLETE(<SMSG_DUEL_COMPLETE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x016B => Ok(Self::SMSG_DUEL_WINNER(Box::new(<SMSG_DUEL_WINNER as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x016E => Ok(Self::SMSG_MOUNTRESULT(<SMSG_MOUNTRESULT as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x0172 => Ok(Self::SMSG_MOUNTSPECIAL_ANIM(<SMSG_MOUNTSPECIAL_ANIM as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x0173 => Ok(Self::SMSG_PET_TAME_FAILURE(<SMSG_PET_TAME_FAILURE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x0178 => Ok(Self::SMSG_PET_NAME_INVALID(Box::new(<SMSG_PET_NAME_INVALID as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0179 => Ok(Self::SMSG_PET_SPELLS(Box::new(<SMSG_PET_SPELLS as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x017A => Ok(Self::SMSG_PET_MODE(Box::new(<SMSG_PET_MODE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x017D => Ok(Self::SMSG_GOSSIP_MESSAGE(Box::new(<SMSG_GOSSIP_MESSAGE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x017E => crate::util::assert_empty(body_size, opcode, "SMSG_GOSSIP_COMPLETE").map(|_| Self::SMSG_GOSSIP_COMPLETE),
            0x0180 => Ok(Self::SMSG_NPC_TEXT_UPDATE(Box::new(<SMSG_NPC_TEXT_UPDATE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0183 => Ok(Self::SMSG_QUESTGIVER_STATUS(Box::new(<SMSG_QUESTGIVER_STATUS as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0185 => Ok(Self::SMSG_QUESTGIVER_QUEST_LIST(Box::new(<SMSG_QUESTGIVER_QUEST_LIST as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0188 => Ok(Self::SMSG_QUESTGIVER_QUEST_DETAILS(Box::new(<SMSG_QUESTGIVER_QUEST_DETAILS as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x018B => Ok(Self::SMSG_QUESTGIVER_REQUEST_ITEMS(Box::new(<SMSG_QUESTGIVER_REQUEST_ITEMS as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x018D => Ok(Self::SMSG_QUESTGIVER_OFFER_REWARD(Box::new(<SMSG_QUESTGIVER_OFFER_REWARD as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x018F => Ok(Self::SMSG_QUESTGIVER_QUEST_INVALID(<SMSG_QUESTGIVER_QUEST_INVALID as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x0191 => Ok(Self::SMSG_QUESTGIVER_QUEST_COMPLETE(Box::new(<SMSG_QUESTGIVER_QUEST_COMPLETE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0192 => Ok(Self::SMSG_QUESTGIVER_QUEST_FAILED(<SMSG_QUESTGIVER_QUEST_FAILED as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x0195 => crate::util::assert_empty(body_size, opcode, "SMSG_QUESTLOG_FULL").map(|_| Self::SMSG_QUESTLOG_FULL),
            0x0196 => Ok(Self::SMSG_QUESTUPDATE_FAILED(<SMSG_QUESTUPDATE_FAILED as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x0197 => Ok(Self::SMSG_QUESTUPDATE_FAILEDTIMER(<SMSG_QUESTUPDATE_FAILEDTIMER as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x0198 => Ok(Self::SMSG_QUESTUPDATE_COMPLETE(<SMSG_QUESTUPDATE_COMPLETE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x0199 => Ok(Self::SMSG_QUESTUPDATE_ADD_KILL(Box::new(<SMSG_QUESTUPDATE_ADD_KILL as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x019A => Ok(Self::SMSG_QUESTUPDATE_ADD_ITEM(<SMSG_QUESTUPDATE_ADD_ITEM as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x019C => Ok(Self::SMSG_QUEST_CONFIRM_ACCEPT(Box::new(<SMSG_QUEST_CONFIRM_ACCEPT as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x019F => Ok(Self::SMSG_LIST_INVENTORY(Box::new(<SMSG_LIST_INVENTORY as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x01A1 => Ok(Self::SMSG_SELL_ITEM(Box::new(<SMSG_SELL_ITEM as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x01A4 => Ok(Self::SMSG_BUY_ITEM(Box::new(<SMSG_BUY_ITEM as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x01A5 => Ok(Self::SMSG_BUY_FAILED(Box::new(<SMSG_BUY_FAILED as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x01A9 => Ok(Self::SMSG_SHOWTAXINODES(Box::new(<SMSG_SHOWTAXINODES as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x01AB => Ok(Self::SMSG_TAXINODE_STATUS(Box::new(<SMSG_TAXINODE_STATUS as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x01AE => Ok(Self::SMSG_ACTIVATETAXIREPLY(<SMSG_ACTIVATETAXIREPLY as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x01AF => crate::util::assert_empty(body_size, opcode, "SMSG_NEW_TAXI_PATH").map(|_| Self::SMSG_NEW_TAXI_PATH),
            0x01B1 => Ok(Self::SMSG_TRAINER_LIST(Box::new(<SMSG_TRAINER_LIST as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x01B3 => Ok(Self::SMSG_TRAINER_BUY_SUCCEEDED(Box::new(<SMSG_TRAINER_BUY_SUCCEEDED as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x01B4 => Ok(Self::SMSG_TRAINER_BUY_FAILED(Box::new(<SMSG_TRAINER_BUY_FAILED as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x01B8 => Ok(Self::SMSG_SHOW_BANK(<SMSG_SHOW_BANK as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x01BA => Ok(Self::SMSG_BUY_BANK_SLOT_RESULT(<SMSG_BUY_BANK_SLOT_RESULT as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x01BC => Ok(Self::SMSG_PETITION_SHOWLIST(Box::new(<SMSG_PETITION_SHOWLIST as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x01BF => Ok(Self::SMSG_PETITION_SHOW_SIGNATURES(Box::new(<SMSG_PETITION_SHOW_SIGNATURES as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x01C1 => Ok(Self::SMSG_PETITION_SIGN_RESULTS(Box::new(<SMSG_PETITION_SIGN_RESULTS as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x01C5 => Ok(Self::SMSG_TURN_IN_PETITION_RESULTS(<SMSG_TURN_IN_PETITION_RESULTS as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x01C7 => Ok(Self::SMSG_PETITION_QUERY_RESPONSE(Box::new(<SMSG_PETITION_QUERY_RESPONSE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x01C8 => crate::util::assert_empty(body_size, opcode, "SMSG_FISH_NOT_HOOKED").map(|_| Self::SMSG_FISH_NOT_HOOKED),
            0x01C9 => crate::util::assert_empty(body_size, opcode, "SMSG_FISH_ESCAPED").map(|_| Self::SMSG_FISH_ESCAPED),
            0x01CB => Ok(Self::SMSG_NOTIFICATION(Box::new(<SMSG_NOTIFICATION as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x01CD => Ok(Self::SMSG_PLAYED_TIME(Box::new(<SMSG_PLAYED_TIME as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x01CF => Ok(Self::SMSG_QUERY_TIME_RESPONSE(<SMSG_QUERY_TIME_RESPONSE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x01D0 => Ok(Self::SMSG_LOG_XPGAIN(Box::new(<SMSG_LOG_XPGAIN as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x01D4 => Ok(Self::SMSG_LEVELUP_INFO(Box::new(<SMSG_LEVELUP_INFO as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x01D5 => Ok(Self::MSG_MINIMAP_PING(Box::new(<MSG_MINIMAP_PING_Server as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x01D7 => Ok(Self::SMSG_ENCHANTMENTLOG(Box::new(<SMSG_ENCHANTMENTLOG as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x01D9 => Ok(Self::SMSG_START_MIRROR_TIMER(Box::new(<SMSG_START_MIRROR_TIMER as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x01DA => Ok(Self::SMSG_PAUSE_MIRROR_TIMER(<SMSG_PAUSE_MIRROR_TIMER as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x01DB => Ok(Self::SMSG_STOP_MIRROR_TIMER(<SMSG_STOP_MIRROR_TIMER as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x01DD => Ok(Self::SMSG_PONG(<SMSG_PONG as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x01DE => Ok(Self::SMSG_CLEAR_COOLDOWN(Box::new(<SMSG_CLEAR_COOLDOWN as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x01DF => Ok(Self::SMSG_GAMEOBJECT_PAGETEXT(<SMSG_GAMEOBJECT_PAGETEXT as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x01E2 => Ok(Self::SMSG_SPELL_DELAYED(Box::new(<SMSG_SPELL_DELAYED as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x01E4 => Ok(Self::SMSG_QUEST_POI_QUERY_RESPONSE(Box::new(<SMSG_QUEST_POI_QUERY_RESPONSE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x01EA => Ok(Self::SMSG_ITEM_TIME_UPDATE(Box::new(<SMSG_ITEM_TIME_UPDATE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x01EB => Ok(Self::SMSG_ITEM_ENCHANT_TIME_UPDATE(Box::new(<SMSG_ITEM_ENCHANT_TIME_UPDATE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x01EC => Ok(Self::SMSG_AUTH_CHALLENGE(Box::new(<SMSG_AUTH_CHALLENGE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x01EE => Ok(Self::SMSG_AUTH_RESPONSE(Box::new(<SMSG_AUTH_RESPONSE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x01F1 => Ok(Self::MSG_SAVE_GUILD_EMBLEM(<MSG_SAVE_GUILD_EMBLEM_Server as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x01F3 => Ok(Self::SMSG_PLAY_SPELL_VISUAL(Box::new(<SMSG_PLAY_SPELL_VISUAL as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x01F5 => Ok(Self::SMSG_PARTYKILLLOG(Box::new(<SMSG_PARTYKILLLOG as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x01F6 => Ok(Self::SMSG_COMPRESSED_UPDATE_OBJECT(Box::new(<SMSG_COMPRESSED_UPDATE_OBJECT as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x01F7 => Ok(Self::SMSG_PLAY_SPELL_IMPACT(Box::new(<SMSG_PLAY_SPELL_IMPACT as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x01F8 => Ok(Self::SMSG_EXPLORATION_EXPERIENCE(<SMSG_EXPLORATION_EXPERIENCE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x01FB => Ok(Self::MSG_RANDOM_ROLL(Box::new(<MSG_RANDOM_ROLL_Server as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x01FC => Ok(Self::SMSG_ENVIRONMENTAL_DAMAGE_LOG(Box::new(<SMSG_ENVIRONMENTAL_DAMAGE_LOG as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x01FF => Ok(Self::SMSG_LFG_PLAYER_REWARD(Box::new(<SMSG_LFG_PLAYER_REWARD as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0200 => Ok(Self::SMSG_LFG_TELEPORT_DENIED(<SMSG_LFG_TELEPORT_DENIED as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x0203 => Ok(Self::SMSG_REMOVED_SPELL(<SMSG_REMOVED_SPELL as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x0206 => Ok(Self::SMSG_GMTICKET_CREATE(<SMSG_GMTICKET_CREATE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x0208 => Ok(Self::SMSG_GMTICKET_UPDATETEXT(<SMSG_GMTICKET_UPDATETEXT as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x0209 => Ok(Self::SMSG_ACCOUNT_DATA_TIMES(Box::new(<SMSG_ACCOUNT_DATA_TIMES as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x020C => Ok(Self::SMSG_UPDATE_ACCOUNT_DATA(Box::new(<SMSG_UPDATE_ACCOUNT_DATA as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0212 => Ok(Self::SMSG_GMTICKET_GETTICKET(Box::new(<SMSG_GMTICKET_GETTICKET as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0214 => Ok(Self::SMSG_UPDATE_INSTANCE_ENCOUNTER_UNIT(Box::new(<SMSG_UPDATE_INSTANCE_ENCOUNTER_UNIT as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0215 => Ok(Self::SMSG_GAMEOBJECT_DESPAWN_ANIM(<SMSG_GAMEOBJECT_DESPAWN_ANIM as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x0216 => Ok(Self::MSG_CORPSE_QUERY(Box::new(<MSG_CORPSE_QUERY_Server as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0218 => Ok(Self::SMSG_GMTICKET_DELETETICKET(<SMSG_GMTICKET_DELETETICKET as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x0219 => crate::util::assert_empty(body_size, opcode, "SMSG_CHAT_WRONG_FACTION").map(|_| Self::SMSG_CHAT_WRONG_FACTION),
            0x021B => Ok(Self::SMSG_GMTICKET_SYSTEMSTATUS(<SMSG_GMTICKET_SYSTEMSTATUS as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x021E => Ok(Self::SMSG_QUEST_FORCE_REMOVE(<SMSG_QUEST_FORCE_REMOVE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x0222 => Ok(Self::SMSG_SPIRIT_HEALER_CONFIRM(<SMSG_SPIRIT_HEALER_CONFIRM as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x0224 => Ok(Self::SMSG_GOSSIP_POI(Box::new(<SMSG_GOSSIP_POI as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0236 => Ok(Self::SMSG_LOGIN_VERIFY_WORLD(Box::new(<SMSG_LOGIN_VERIFY_WORLD as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0239 => Ok(Self::SMSG_SEND_MAIL_RESULT(Box::new(<SMSG_SEND_MAIL_RESULT as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x023B => Ok(Self::SMSG_MAIL_LIST_RESULT(Box::new(<SMSG_MAIL_LIST_RESULT as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x023D => Ok(Self::SMSG_BATTLEFIELD_LIST(Box::new(<SMSG_BATTLEFIELD_LIST as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0244 => Ok(Self::SMSG_ITEM_TEXT_QUERY_RESPONSE(Box::new(<SMSG_ITEM_TEXT_QUERY_RESPONSE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x024B => Ok(Self::SMSG_SPELLLOGMISS(Box::new(<SMSG_SPELLLOGMISS as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x024C => Ok(Self::SMSG_SPELLLOGEXECUTE(Box::new(<SMSG_SPELLLOGEXECUTE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x024E => Ok(Self::SMSG_PERIODICAURALOG(Box::new(<SMSG_PERIODICAURALOG as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x024F => Ok(Self::SMSG_SPELLDAMAGESHIELD(Box::new(<SMSG_SPELLDAMAGESHIELD as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0250 => Ok(Self::SMSG_SPELLNONMELEEDAMAGELOG(Box::new(<SMSG_SPELLNONMELEEDAMAGELOG as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0252 => Ok(Self::SMSG_RESURRECT_FAILED(<SMSG_RESURRECT_FAILED as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x0254 => Ok(Self::SMSG_ZONE_UNDER_ATTACK(<SMSG_ZONE_UNDER_ATTACK as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x0255 => Ok(Self::MSG_AUCTION_HELLO(Box::new(<MSG_AUCTION_HELLO_Server as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x025B => Ok(Self::SMSG_AUCTION_COMMAND_RESULT(Box::new(<SMSG_AUCTION_COMMAND_RESULT as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x025C => Ok(Self::SMSG_AUCTION_LIST_RESULT(Box::new(<SMSG_AUCTION_LIST_RESULT as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x025D => Ok(Self::SMSG_AUCTION_OWNER_LIST_RESULT(Box::new(<SMSG_AUCTION_OWNER_LIST_RESULT as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x025E => Ok(Self::SMSG_AUCTION_BIDDER_NOTIFICATION(Box::new(<SMSG_AUCTION_BIDDER_NOTIFICATION as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x025F => Ok(Self::SMSG_AUCTION_OWNER_NOTIFICATION(Box::new(<SMSG_AUCTION_OWNER_NOTIFICATION as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0260 => Ok(Self::SMSG_PROCRESIST(Box::new(<SMSG_PROCRESIST as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0262 => Ok(Self::SMSG_DISPEL_FAILED(Box::new(<SMSG_DISPEL_FAILED as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0263 => Ok(Self::SMSG_SPELLORDAMAGE_IMMUNE(Box::new(<SMSG_SPELLORDAMAGE_IMMUNE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0265 => Ok(Self::SMSG_AUCTION_BIDDER_LIST_RESULT(Box::new(<SMSG_AUCTION_BIDDER_LIST_RESULT as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0266 => Ok(Self::SMSG_SET_FLAT_SPELL_MODIFIER(<SMSG_SET_FLAT_SPELL_MODIFIER as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x0267 => Ok(Self::SMSG_SET_PCT_SPELL_MODIFIER(<SMSG_SET_PCT_SPELL_MODIFIER as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x0269 => Ok(Self::SMSG_CORPSE_RECLAIM_DELAY(<SMSG_CORPSE_RECLAIM_DELAY as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x026F => Ok(Self::MSG_LIST_STABLED_PETS(Box::new(<MSG_LIST_STABLED_PETS_Server as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0273 => Ok(Self::SMSG_STABLE_RESULT(<SMSG_STABLE_RESULT as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x0277 => Ok(Self::SMSG_PLAY_MUSIC(<SMSG_PLAY_MUSIC as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x0278 => Ok(Self::SMSG_PLAY_OBJECT_SOUND(Box::new(<SMSG_PLAY_OBJECT_SOUND as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x027B => Ok(Self::SMSG_SPELLDISPELLOG(Box::new(<SMSG_SPELLDISPELLOG as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0284 => Ok(Self::MSG_QUERY_NEXT_MAIL_TIME(Box::new(<MSG_QUERY_NEXT_MAIL_TIME_Server as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0285 => Ok(Self::SMSG_RECEIVED_MAIL(<SMSG_RECEIVED_MAIL as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x0286 => Ok(Self::SMSG_RAID_GROUP_ONLY(<SMSG_RAID_GROUP_ONLY as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x028C => Ok(Self::SMSG_PVP_CREDIT(Box::new(<SMSG_PVP_CREDIT as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x028D => Ok(Self::SMSG_AUCTION_REMOVED_NOTIFICATION(Box::new(<SMSG_AUCTION_REMOVED_NOTIFICATION as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0291 => Ok(Self::SMSG_SERVER_MESSAGE(Box::new(<SMSG_SERVER_MESSAGE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0293 => Ok(Self::SMSG_LFG_OFFER_CONTINUE(<SMSG_LFG_OFFER_CONTINUE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x0297 => Ok(Self::SMSG_SHOW_MAILBOX(<SMSG_SHOW_MAILBOX as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x029C => Ok(Self::SMSG_CANCEL_AUTO_REPEAT(<SMSG_CANCEL_AUTO_REPEAT as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x029D => Ok(Self::SMSG_STANDSTATE_UPDATE(<SMSG_STANDSTATE_UPDATE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x029E => Ok(Self::SMSG_LOOT_ALL_PASSED(Box::new(<SMSG_LOOT_ALL_PASSED as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x029F => Ok(Self::SMSG_LOOT_ROLL_WON(Box::new(<SMSG_LOOT_ROLL_WON as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x02A1 => Ok(Self::SMSG_LOOT_START_ROLL(Box::new(<SMSG_LOOT_START_ROLL as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x02A2 => Ok(Self::SMSG_LOOT_ROLL(Box::new(<SMSG_LOOT_ROLL as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x02A4 => Ok(Self::SMSG_LOOT_MASTER_LIST(Box::new(<SMSG_LOOT_MASTER_LIST as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x02A5 => Ok(Self::SMSG_SET_FORCED_REACTIONS(Box::new(<SMSG_SET_FORCED_REACTIONS as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x02A6 => Ok(Self::SMSG_SPELL_FAILED_OTHER(Box::new(<SMSG_SPELL_FAILED_OTHER as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x02A9 => Ok(Self::SMSG_CHAT_PLAYER_NOT_FOUND(Box::new(<SMSG_CHAT_PLAYER_NOT_FOUND as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x02AA => Ok(Self::MSG_TALENT_WIPE_CONFIRM(Box::new(<MSG_TALENT_WIPE_CONFIRM_Server as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x02AB => Ok(Self::SMSG_SUMMON_REQUEST(Box::new(<SMSG_SUMMON_REQUEST as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x02AE => Ok(Self::SMSG_MONSTER_MOVE_TRANSPORT(Box::new(<SMSG_MONSTER_MOVE_TRANSPORT as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x02AF => crate::util::assert_empty(body_size, opcode, "SMSG_PET_BROKEN").map(|_| Self::SMSG_PET_BROKEN),
            0x02B0 => Ok(Self::MSG_MOVE_FEATHER_FALL(Box::new(<MSG_MOVE_FEATHER_FALL_Server as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x02B4 => crate::util::assert_empty(body_size, opcode, "SMSG_FEIGN_DEATH_RESISTED").map(|_| Self::SMSG_FEIGN_DEATH_RESISTED),
            0x02B7 => Ok(Self::SMSG_DUEL_COUNTDOWN(<SMSG_DUEL_COUNTDOWN as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x02B8 => Ok(Self::SMSG_AREA_TRIGGER_MESSAGE(Box::new(<SMSG_AREA_TRIGGER_MESSAGE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x02BB => Ok(Self::SMSG_LFG_ROLE_CHOSEN(Box::new(<SMSG_LFG_ROLE_CHOSEN as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x02BC => Ok(Self::SMSG_PLAYER_SKINNED(<SMSG_PLAYER_SKINNED as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x02BD => crate::util::assert_empty(body_size, opcode, "SMSG_DURABILITY_DAMAGE_DEATH").map(|_| Self::SMSG_DURABILITY_DAMAGE_DEATH),
            0x02C2 => Ok(Self::SMSG_INIT_WORLD_STATES(Box::new(<SMSG_INIT_WORLD_STATES as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x02C3 => Ok(Self::SMSG_UPDATE_WORLD_STATE(<SMSG_UPDATE_WORLD_STATE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x02C5 => Ok(Self::SMSG_ITEM_NAME_QUERY_RESPONSE(Box::new(<SMSG_ITEM_NAME_QUERY_RESPONSE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x02C6 => Ok(Self::SMSG_PET_ACTION_FEEDBACK(<SMSG_PET_ACTION_FEEDBACK as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x02C8 => Ok(Self::SMSG_CHAR_RENAME(Box::new(<SMSG_CHAR_RENAME as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x02CB => Ok(Self::SMSG_INSTANCE_SAVE_CREATED(<SMSG_INSTANCE_SAVE_CREATED as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x02CC => Ok(Self::SMSG_RAID_INSTANCE_INFO(Box::new(<SMSG_RAID_INSTANCE_INFO as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x02D2 => Ok(Self::SMSG_PLAY_SOUND(<SMSG_PLAY_SOUND as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x02D4 => Ok(Self::SMSG_BATTLEFIELD_STATUS(Box::new(<SMSG_BATTLEFIELD_STATUS as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x02D6 => Ok(Self::MSG_INSPECT_HONOR_STATS(Box::new(<MSG_INSPECT_HONOR_STATS_Server as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x02DA => Ok(Self::SMSG_FORCE_WALK_SPEED_CHANGE(Box::new(<SMSG_FORCE_WALK_SPEED_CHANGE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x02DC => Ok(Self::SMSG_FORCE_SWIM_BACK_SPEED_CHANGE(Box::new(<SMSG_FORCE_SWIM_BACK_SPEED_CHANGE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x02DE => Ok(Self::SMSG_FORCE_TURN_RATE_CHANGE(Box::new(<SMSG_FORCE_TURN_RATE_CHANGE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x02E4 => Ok(Self::SMSG_AREA_SPIRIT_HEALER_TIME(Box::new(<SMSG_AREA_SPIRIT_HEALER_TIME as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x02E6 => Ok(Self::SMSG_WARDEN_DATA(Box::new(<SMSG_WARDEN_DATA as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x02E8 => Ok(Self::SMSG_GROUP_JOINED_BATTLEGROUND(<SMSG_GROUP_JOINED_BATTLEGROUND as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x02E9 => Ok(Self::MSG_BATTLEGROUND_PLAYER_POSITIONS(Box::new(<MSG_BATTLEGROUND_PLAYER_POSITIONS_Server as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x02EB => Ok(Self::SMSG_BINDER_CONFIRM(Box::new(<SMSG_BINDER_CONFIRM as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x02EC => Ok(Self::SMSG_BATTLEGROUND_PLAYER_JOINED(<SMSG_BATTLEGROUND_PLAYER_JOINED as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x02ED => Ok(Self::SMSG_BATTLEGROUND_PLAYER_LEFT(<SMSG_BATTLEGROUND_PLAYER_LEFT as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x02EF => Ok(Self::SMSG_ADDON_INFO(Box::new(<SMSG_ADDON_INFO as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x02F1 => Ok(Self::SMSG_PET_UNLEARN_CONFIRM(Box::new(<SMSG_PET_UNLEARN_CONFIRM as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x02F2 => Ok(Self::SMSG_PARTY_MEMBER_STATS_FULL(Box::new(<SMSG_PARTY_MEMBER_STATS_FULL as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x02F4 => Ok(Self::SMSG_WEATHER(Box::new(<SMSG_WEATHER as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x02FA => Ok(Self::SMSG_RAID_INSTANCE_MESSAGE(Box::new(<SMSG_RAID_INSTANCE_MESSAGE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x02FB => Ok(Self::SMSG_COMPRESSED_MOVES(Box::new(<SMSG_COMPRESSED_MOVES as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x02FD => Ok(Self::SMSG_CHAT_RESTRICTED(<SMSG_CHAT_RESTRICTED as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x02FE => Ok(Self::SMSG_SPLINE_SET_RUN_SPEED(Box::new(<SMSG_SPLINE_SET_RUN_SPEED as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x02FF => Ok(Self::SMSG_SPLINE_SET_RUN_BACK_SPEED(Box::new(<SMSG_SPLINE_SET_RUN_BACK_SPEED as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0300 => Ok(Self::SMSG_SPLINE_SET_SWIM_SPEED(Box::new(<SMSG_SPLINE_SET_SWIM_SPEED as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0301 => Ok(Self::SMSG_SPLINE_SET_WALK_SPEED(Box::new(<SMSG_SPLINE_SET_WALK_SPEED as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0302 => Ok(Self::SMSG_SPLINE_SET_SWIM_BACK_SPEED(Box::new(<SMSG_SPLINE_SET_SWIM_BACK_SPEED as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0303 => Ok(Self::SMSG_SPLINE_SET_TURN_RATE(Box::new(<SMSG_SPLINE_SET_TURN_RATE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0304 => Ok(Self::SMSG_SPLINE_MOVE_UNROOT(<SMSG_SPLINE_MOVE_UNROOT as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x0305 => Ok(Self::SMSG_SPLINE_MOVE_FEATHER_FALL(<SMSG_SPLINE_MOVE_FEATHER_FALL as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x0306 => Ok(Self::SMSG_SPLINE_MOVE_NORMAL_FALL(<SMSG_SPLINE_MOVE_NORMAL_FALL as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x0307 => Ok(Self::SMSG_SPLINE_MOVE_SET_HOVER(<SMSG_SPLINE_MOVE_SET_HOVER as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x0308 => Ok(Self::SMSG_SPLINE_MOVE_UNSET_HOVER(<SMSG_SPLINE_MOVE_UNSET_HOVER as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x0309 => Ok(Self::SMSG_SPLINE_MOVE_WATER_WALK(<SMSG_SPLINE_MOVE_WATER_WALK as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x030A => Ok(Self::SMSG_SPLINE_MOVE_LAND_WALK(<SMSG_SPLINE_MOVE_LAND_WALK as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x030B => Ok(Self::SMSG_SPLINE_MOVE_START_SWIM(<SMSG_SPLINE_MOVE_START_SWIM as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x030C => Ok(Self::SMSG_SPLINE_MOVE_STOP_SWIM(<SMSG_SPLINE_MOVE_STOP_SWIM as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x030D => Ok(Self::SMSG_SPLINE_MOVE_SET_RUN_MODE(<SMSG_SPLINE_MOVE_SET_RUN_MODE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x030E => Ok(Self::SMSG_SPLINE_MOVE_SET_WALK_MODE(<SMSG_SPLINE_MOVE_SET_WALK_MODE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x0319 => Ok(Self::MSG_MOVE_TIME_SKIPPED(Box::new(<MSG_MOVE_TIME_SKIPPED_Server as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x031A => Ok(Self::SMSG_SPLINE_MOVE_ROOT(<SMSG_SPLINE_MOVE_ROOT as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x031C => Ok(Self::SMSG_INVALIDATE_PLAYER(<SMSG_INVALIDATE_PLAYER as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x031E => Ok(Self::SMSG_INSTANCE_RESET(<SMSG_INSTANCE_RESET as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x031F => Ok(Self::SMSG_INSTANCE_RESET_FAILED(<SMSG_INSTANCE_RESET_FAILED as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x0320 => Ok(Self::SMSG_UPDATE_LAST_INSTANCE(<SMSG_UPDATE_LAST_INSTANCE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x0321 => Ok(Self::MSG_RAID_TARGET_UPDATE(Box::new(<MSG_RAID_TARGET_UPDATE_Server as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0322 => Ok(Self::MSG_RAID_READY_CHECK(Box::new(<MSG_RAID_READY_CHECK_Server as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0324 => Ok(Self::SMSG_PET_ACTION_SOUND(Box::new(<SMSG_PET_ACTION_SOUND as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0325 => Ok(Self::SMSG_PET_DISMISS_SOUND(Box::new(<SMSG_PET_DISMISS_SOUND as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0328 => Ok(Self::SMSG_GM_TICKET_STATUS_UPDATE(<SMSG_GM_TICKET_STATUS_UPDATE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x0329 => Ok(Self::MSG_SET_DUNGEON_DIFFICULTY(<MSG_SET_DUNGEON_DIFFICULTY_Server as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x032B => Ok(Self::SMSG_UPDATE_INSTANCE_OWNERSHIP(<SMSG_UPDATE_INSTANCE_OWNERSHIP as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x032D => Ok(Self::SMSG_CHAT_PLAYER_AMBIGUOUS(Box::new(<SMSG_CHAT_PLAYER_AMBIGUOUS as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x032F => Ok(Self::SMSG_SPELLINSTAKILLLOG(Box::new(<SMSG_SPELLINSTAKILLLOG as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0330 => Ok(Self::SMSG_SPELL_UPDATE_CHAIN_TARGETS(Box::new(<SMSG_SPELL_UPDATE_CHAIN_TARGETS as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0333 => Ok(Self::SMSG_SPELLSTEALLOG(Box::new(<SMSG_SPELLSTEALLOG as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x033A => Ok(Self::SMSG_DEFENSE_MESSAGE(Box::new(<SMSG_DEFENSE_MESSAGE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x033B => Ok(Self::SMSG_INSTANCE_DIFFICULTY(<SMSG_INSTANCE_DIFFICULTY as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x033D => Ok(Self::SMSG_MOTD(Box::new(<SMSG_MOTD as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0343 => Ok(Self::SMSG_MOVE_SET_CAN_FLY(Box::new(<SMSG_MOVE_SET_CAN_FLY as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0344 => Ok(Self::SMSG_MOVE_UNSET_CAN_FLY(Box::new(<SMSG_MOVE_UNSET_CAN_FLY as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0349 => Ok(Self::SMSG_ARENA_TEAM_COMMAND_RESULT(Box::new(<SMSG_ARENA_TEAM_COMMAND_RESULT as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x034C => Ok(Self::SMSG_ARENA_TEAM_QUERY_RESPONSE(Box::new(<SMSG_ARENA_TEAM_QUERY_RESPONSE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x034E => Ok(Self::SMSG_ARENA_TEAM_ROSTER(Box::new(<SMSG_ARENA_TEAM_ROSTER as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0350 => Ok(Self::SMSG_ARENA_TEAM_INVITE(Box::new(<SMSG_ARENA_TEAM_INVITE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0357 => Ok(Self::SMSG_ARENA_TEAM_EVENT(Box::new(<SMSG_ARENA_TEAM_EVENT as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x035B => Ok(Self::SMSG_ARENA_TEAM_STATS(Box::new(<SMSG_ARENA_TEAM_STATS as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0360 => Ok(Self::SMSG_UPDATE_LFG_LIST(Box::new(<SMSG_UPDATE_LFG_LIST as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0361 => Ok(Self::SMSG_LFG_PROPOSAL_UPDATE(Box::new(<SMSG_LFG_PROPOSAL_UPDATE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0363 => Ok(Self::SMSG_LFG_ROLE_CHECK_UPDATE(Box::new(<SMSG_LFG_ROLE_CHECK_UPDATE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0364 => Ok(Self::SMSG_LFG_JOIN_RESULT(Box::new(<SMSG_LFG_JOIN_RESULT as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0365 => Ok(Self::SMSG_LFG_QUEUE_STATUS(Box::new(<SMSG_LFG_QUEUE_STATUS as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0367 => Ok(Self::SMSG_LFG_UPDATE_PLAYER(Box::new(<SMSG_LFG_UPDATE_PLAYER as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0368 => Ok(Self::SMSG_LFG_UPDATE_PARTY(Box::new(<SMSG_LFG_UPDATE_PARTY as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0369 => Ok(Self::SMSG_LFG_UPDATE_SEARCH(<SMSG_LFG_UPDATE_SEARCH as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x036D => Ok(Self::SMSG_LFG_BOOT_PROPOSAL_UPDATE(Box::new(<SMSG_LFG_BOOT_PROPOSAL_UPDATE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x036F => Ok(Self::SMSG_LFG_PLAYER_INFO(Box::new(<SMSG_LFG_PLAYER_INFO as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0372 => Ok(Self::SMSG_LFG_PARTY_INFO(Box::new(<SMSG_LFG_PARTY_INFO as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0373 => Ok(Self::SMSG_TITLE_EARNED(<SMSG_TITLE_EARNED as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x0376 => Ok(Self::SMSG_ARENA_ERROR(<SMSG_ARENA_ERROR as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x0377 => Ok(Self::MSG_INSPECT_ARENA_TEAMS(Box::new(<MSG_INSPECT_ARENA_TEAMS_Server as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0378 => Ok(Self::SMSG_DEATH_RELEASE_LOC(Box::new(<SMSG_DEATH_RELEASE_LOC as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x037A => crate::util::assert_empty(body_size, opcode, "SMSG_FORCED_DEATH_UPDATE").map(|_| Self::SMSG_FORCED_DEATH_UPDATE),
            0x037E => Ok(Self::MSG_MOVE_SET_FLIGHT_SPEED(Box::new(<MSG_MOVE_SET_FLIGHT_SPEED_Server as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0381 => Ok(Self::SMSG_FORCE_FLIGHT_SPEED_CHANGE(Box::new(<SMSG_FORCE_FLIGHT_SPEED_CHANGE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0383 => Ok(Self::SMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE(Box::new(<SMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0385 => Ok(Self::SMSG_SPLINE_SET_FLIGHT_SPEED(Box::new(<SMSG_SPLINE_SET_FLIGHT_SPEED as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0386 => Ok(Self::SMSG_SPLINE_SET_FLIGHT_BACK_SPEED(Box::new(<SMSG_SPLINE_SET_FLIGHT_BACK_SPEED as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0388 => Ok(Self::SMSG_FLIGHT_SPLINE_SYNC(Box::new(<SMSG_FLIGHT_SPLINE_SYNC as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x038B => Ok(Self::SMSG_REALM_SPLIT(Box::new(<SMSG_REALM_SPLIT as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0390 => Ok(Self::SMSG_TIME_SYNC_REQ(<SMSG_TIME_SYNC_REQ as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x0396 => Ok(Self::SMSG_RESET_FAILED_NOTIFY(<SMSG_RESET_FAILED_NOTIFY as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x0398 => crate::util::assert_empty(body_size, opcode, "SMSG_LFG_DISABLED").map(|_| Self::SMSG_LFG_DISABLED),
            0x039D => Ok(Self::SMSG_UPDATE_COMBO_POINTS(Box::new(<SMSG_UPDATE_COMBO_POINTS as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x03AC => Ok(Self::SMSG_DISMOUNT(<SMSG_DISMOUNT as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x03AD => Ok(Self::MSG_MOVE_UPDATE_CAN_FLY(Box::new(<MSG_MOVE_UPDATE_CAN_FLY_Server as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x03AE => Ok(Self::MSG_RAID_READY_CHECK_CONFIRM(Box::new(<MSG_RAID_READY_CHECK_CONFIRM_Server as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x03B3 => Ok(Self::SMSG_GM_MESSAGECHAT(Box::new(<SMSG_GM_MESSAGECHAT as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x03BF => Ok(Self::SMSG_CLEAR_TARGET(<SMSG_CLEAR_TARGET as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x03C1 => Ok(Self::SMSG_CROSSED_INEBRIATION_THRESHOLD(Box::new(<SMSG_CROSSED_INEBRIATION_THRESHOLD as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x03C5 => Ok(Self::SMSG_KICK_REASON(Box::new(<SMSG_KICK_REASON as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x03C8 => Ok(Self::SMSG_COMPLAIN_RESULT(<SMSG_COMPLAIN_RESULT as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x03C9 => Ok(Self::SMSG_FEATURE_SYSTEM_STATUS(<SMSG_FEATURE_SYSTEM_STATUS as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x03D5 => Ok(Self::SMSG_CHANNEL_MEMBER_COUNT(Box::new(<SMSG_CHANNEL_MEMBER_COUNT as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x03E8 => Ok(Self::SMSG_GUILD_BANK_LIST(Box::new(<SMSG_GUILD_BANK_LIST as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x03EE => Ok(Self::MSG_GUILD_BANK_LOG_QUERY(Box::new(<MSG_GUILD_BANK_LOG_QUERY_Server as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x03F0 => Ok(Self::SMSG_USERLIST_ADD(Box::new(<SMSG_USERLIST_ADD as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x03F1 => Ok(Self::SMSG_USERLIST_REMOVE(Box::new(<SMSG_USERLIST_REMOVE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x03F2 => Ok(Self::SMSG_USERLIST_UPDATE(Box::new(<SMSG_USERLIST_UPDATE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x03F4 => Ok(Self::SMSG_INSPECT_TALENT(Box::new(<SMSG_INSPECT_TALENT as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x03F9 => Ok(Self::SMSG_LOOT_LIST(Box::new(<SMSG_LOOT_LIST as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x03FD => Ok(Self::MSG_GUILD_PERMISSIONS(Box::new(<MSG_GUILD_PERMISSIONS_Server as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x03FE => Ok(Self::MSG_GUILD_BANK_MONEY_WITHDRAWN(<MSG_GUILD_BANK_MONEY_WITHDRAWN_Server as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x03FF => Ok(Self::MSG_GUILD_EVENT_LOG_QUERY(Box::new(<MSG_GUILD_EVENT_LOG_QUERY_Server as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0402 => Ok(Self::SMSG_MIRRORIMAGE_DATA(Box::new(<SMSG_MIRRORIMAGE_DATA as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x040A => Ok(Self::MSG_QUERY_GUILD_BANK_TEXT(Box::new(<MSG_QUERY_GUILD_BANK_TEXT_Server as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0412 => Ok(Self::SMSG_OVERRIDE_LIGHT(Box::new(<SMSG_OVERRIDE_LIGHT as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0413 => Ok(Self::SMSG_TOTEM_CREATED(Box::new(<SMSG_TOTEM_CREATED as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0418 => Ok(Self::SMSG_QUESTGIVER_STATUS_MULTIPLE(Box::new(<SMSG_QUESTGIVER_STATUS_MULTIPLE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x041A => Ok(Self::SMSG_SET_PLAYER_DECLINED_NAMES_RESULT(Box::new(<SMSG_SET_PLAYER_DECLINED_NAMES_RESULT as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x041E => Ok(Self::SMSG_SEND_UNLEARN_SPELLS(Box::new(<SMSG_SEND_UNLEARN_SPELLS as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x041F => Ok(Self::SMSG_PROPOSE_LEVEL_GRANT(<SMSG_PROPOSE_LEVEL_GRANT as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x0421 => Ok(Self::SMSG_REFER_A_FRIEND_FAILURE(Box::new(<SMSG_REFER_A_FRIEND_FAILURE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0422 => Ok(Self::SMSG_SPLINE_MOVE_SET_FLYING(<SMSG_SPLINE_MOVE_SET_FLYING as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x0423 => Ok(Self::SMSG_SPLINE_MOVE_UNSET_FLYING(<SMSG_SPLINE_MOVE_UNSET_FLYING as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x0427 => crate::util::assert_empty(body_size, opcode, "SMSG_ENABLE_BARBER_SHOP").map(|_| Self::SMSG_ENABLE_BARBER_SHOP),
            0x0428 => Ok(Self::SMSG_BARBER_SHOP_RESULT(<SMSG_BARBER_SHOP_RESULT as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x0436 => Ok(Self::SMSG_CALENDAR_SEND_CALENDAR(Box::new(<SMSG_CALENDAR_SEND_CALENDAR as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0437 => Ok(Self::SMSG_CALENDAR_SEND_EVENT(Box::new(<SMSG_CALENDAR_SEND_EVENT as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0438 => Ok(Self::SMSG_CALENDAR_FILTER_GUILD(Box::new(<SMSG_CALENDAR_FILTER_GUILD as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0439 => Ok(Self::SMSG_CALENDAR_ARENA_TEAM(Box::new(<SMSG_CALENDAR_ARENA_TEAM as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x043A => Ok(Self::SMSG_CALENDAR_EVENT_INVITE(Box::new(<SMSG_CALENDAR_EVENT_INVITE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x043B => Ok(Self::SMSG_CALENDAR_EVENT_INVITE_REMOVED(Box::new(<SMSG_CALENDAR_EVENT_INVITE_REMOVED as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x043C => Ok(Self::SMSG_CALENDAR_EVENT_STATUS(Box::new(<SMSG_CALENDAR_EVENT_STATUS as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x043D => Ok(Self::SMSG_CALENDAR_COMMAND_RESULT(Box::new(<SMSG_CALENDAR_COMMAND_RESULT as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x043E => Ok(Self::SMSG_CALENDAR_RAID_LOCKOUT_ADDED(Box::new(<SMSG_CALENDAR_RAID_LOCKOUT_ADDED as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x043F => Ok(Self::SMSG_CALENDAR_RAID_LOCKOUT_REMOVED(Box::new(<SMSG_CALENDAR_RAID_LOCKOUT_REMOVED as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0440 => Ok(Self::SMSG_CALENDAR_EVENT_INVITE_ALERT(Box::new(<SMSG_CALENDAR_EVENT_INVITE_ALERT as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0441 => Ok(Self::SMSG_CALENDAR_EVENT_INVITE_REMOVED_ALERT(Box::new(<SMSG_CALENDAR_EVENT_INVITE_REMOVED_ALERT as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0443 => Ok(Self::SMSG_CALENDAR_EVENT_REMOVED_ALERT(Box::new(<SMSG_CALENDAR_EVENT_REMOVED_ALERT as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0444 => Ok(Self::SMSG_CALENDAR_EVENT_UPDATED_ALERT(Box::new(<SMSG_CALENDAR_EVENT_UPDATED_ALERT as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0445 => Ok(Self::SMSG_CALENDAR_EVENT_MODERATOR_STATUS_ALERT(Box::new(<SMSG_CALENDAR_EVENT_MODERATOR_STATUS_ALERT as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0448 => Ok(Self::SMSG_CALENDAR_SEND_NUM_PENDING(<SMSG_CALENDAR_SEND_NUM_PENDING as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x045B => Ok(Self::MSG_MOVE_SET_PITCH_RATE(Box::new(<MSG_MOVE_SET_PITCH_RATE_Server as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x045C => Ok(Self::SMSG_FORCE_PITCH_RATE_CHANGE(Box::new(<SMSG_FORCE_PITCH_RATE_CHANGE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0460 => Ok(Self::SMSG_CALENDAR_EVENT_INVITE_NOTES(Box::new(<SMSG_CALENDAR_EVENT_INVITE_NOTES as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0461 => Ok(Self::SMSG_CALENDAR_EVENT_INVITE_NOTES_ALERT(Box::new(<SMSG_CALENDAR_EVENT_INVITE_NOTES_ALERT as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0463 => Ok(Self::SMSG_UPDATE_ACCOUNT_DATA_COMPLETE(<SMSG_UPDATE_ACCOUNT_DATA_COMPLETE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x0464 => Ok(Self::SMSG_TRIGGER_MOVIE(<SMSG_TRIGGER_MOVIE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x0468 => Ok(Self::SMSG_ACHIEVEMENT_EARNED(Box::new(<SMSG_ACHIEVEMENT_EARNED as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x046A => Ok(Self::SMSG_CRITERIA_UPDATE(Box::new(<SMSG_CRITERIA_UPDATE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x046C => Ok(Self::SMSG_RESPOND_INSPECT_ACHIEVEMENTS(Box::new(<SMSG_RESPOND_INSPECT_ACHIEVEMENTS as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x046F => Ok(Self::SMSG_QUESTUPDATE_ADD_PVP_KILL(Box::new(<SMSG_QUESTUPDATE_ADD_PVP_KILL as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0471 => Ok(Self::SMSG_CALENDAR_RAID_LOCKOUT_UPDATED(Box::new(<SMSG_CALENDAR_RAID_LOCKOUT_UPDATED as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0474 => Ok(Self::SMSG_CHAR_CUSTOMIZE(Box::new(<SMSG_CHAR_CUSTOMIZE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x047C => Ok(Self::SMSG_SET_PHASE_SHIFT(<SMSG_SET_PHASE_SHIFT as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x047D => Ok(Self::SMSG_ALL_ACHIEVEMENT_DATA(Box::new(<SMSG_ALL_ACHIEVEMENT_DATA as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0480 => Ok(Self::SMSG_POWER_UPDATE(Box::new(<SMSG_POWER_UPDATE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0482 => Ok(Self::SMSG_HIGHEST_THREAT_UPDATE(Box::new(<SMSG_HIGHEST_THREAT_UPDATE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0483 => Ok(Self::SMSG_THREAT_UPDATE(Box::new(<SMSG_THREAT_UPDATE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0484 => Ok(Self::SMSG_THREAT_REMOVE(Box::new(<SMSG_THREAT_REMOVE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0485 => Ok(Self::SMSG_THREAT_CLEAR(<SMSG_THREAT_CLEAR as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x0486 => Ok(Self::SMSG_CONVERT_RUNE(<SMSG_CONVERT_RUNE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x0487 => Ok(Self::SMSG_RESYNC_RUNES(Box::new(<SMSG_RESYNC_RUNES as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0488 => Ok(Self::SMSG_ADD_RUNE_POWER(<SMSG_ADD_RUNE_POWER as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x0490 => Ok(Self::SMSG_AUCTION_LIST_PENDING_SALES(Box::new(<SMSG_AUCTION_LIST_PENDING_SALES as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0491 => Ok(Self::SMSG_MODIFY_COOLDOWN(Box::new(<SMSG_MODIFY_COOLDOWN as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0492 => Ok(Self::SMSG_PET_UPDATE_COMBO_POINTS(Box::new(<SMSG_PET_UPDATE_COMBO_POINTS as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0494 => Ok(Self::SMSG_PRE_RESURRECT(<SMSG_PRE_RESURRECT as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x0495 => Ok(Self::SMSG_AURA_UPDATE_ALL(Box::new(<SMSG_AURA_UPDATE_ALL as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0496 => Ok(Self::SMSG_AURA_UPDATE(Box::new(<SMSG_AURA_UPDATE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0498 => Ok(Self::SMSG_SERVER_FIRST_ACHIEVEMENT(Box::new(<SMSG_SERVER_FIRST_ACHIEVEMENT as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0499 => Ok(Self::SMSG_PET_LEARNED_SPELL(<SMSG_PET_LEARNED_SPELL as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x049A => Ok(Self::SMSG_PET_UNLEARNED_SPELL(<SMSG_PET_UNLEARNED_SPELL as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x049D => crate::util::assert_empty(body_size, opcode, "SMSG_ON_CANCEL_EXPECTED_RIDE_VEHICLE_AURA").map(|_| Self::SMSG_ON_CANCEL_EXPECTED_RIDE_VEHICLE_AURA),
            0x049E => Ok(Self::SMSG_CRITERIA_DELETED(<SMSG_CRITERIA_DELETED as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x049F => Ok(Self::SMSG_ACHIEVEMENT_DELETED(<SMSG_ACHIEVEMENT_DELETED as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x04A6 => crate::util::assert_empty(body_size, opcode, "SMSG_BATTLEGROUND_INFO_THROTTLED").map(|_| Self::SMSG_BATTLEGROUND_INFO_THROTTLED),
            0x04A7 => Ok(Self::SMSG_PLAYER_VEHICLE_DATA(Box::new(<SMSG_PLAYER_VEHICLE_DATA as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x04AA => Ok(Self::SMSG_PET_GUIDS(Box::new(<SMSG_PET_GUIDS as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x04AB => Ok(Self::SMSG_CLIENTCACHE_VERSION(<SMSG_CLIENTCACHE_VERSION as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x04B2 => Ok(Self::SMSG_ITEM_REFUND_INFO_RESPONSE(Box::new(<SMSG_ITEM_REFUND_INFO_RESPONSE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x04B5 => Ok(Self::SMSG_ITEM_REFUND_RESULT(Box::new(<SMSG_ITEM_REFUND_RESULT as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x04B7 => Ok(Self::SMSG_CORPSE_MAP_POSITION_QUERY_RESPONSE(Box::new(<SMSG_CORPSE_MAP_POSITION_QUERY_RESPONSE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x04BB => crate::util::assert_empty(body_size, opcode, "SMSG_CALENDAR_CLEAR_PENDING_ACTION").map(|_| Self::SMSG_CALENDAR_CLEAR_PENDING_ACTION),
            0x04BC => Ok(Self::SMSG_EQUIPMENT_SET_LIST(Box::new(<SMSG_EQUIPMENT_SET_LIST as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x04BF => Ok(Self::SMSG_SET_PROJECTILE_POSITION(Box::new(<SMSG_SET_PROJECTILE_POSITION as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x04C0 => Ok(Self::SMSG_TALENTS_INFO(Box::new(<SMSG_TALENTS_INFO as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x04C7 => Ok(Self::SMSG_ARENA_UNIT_DESTROYED(<SMSG_ARENA_UNIT_DESTROYED as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x04C8 => Ok(Self::SMSG_ARENA_TEAM_CHANGE_FAILED_QUEUED(<SMSG_ARENA_TEAM_CHANGE_FAILED_QUEUED as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x04CE => Ok(Self::SMSG_MOVE_GRAVITY_DISABLE(Box::new(<SMSG_MOVE_GRAVITY_DISABLE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x04D0 => Ok(Self::SMSG_MOVE_GRAVITY_ENABLE(Box::new(<SMSG_MOVE_GRAVITY_ENABLE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x04D2 => Ok(Self::MSG_MOVE_GRAVITY_CHNG(Box::new(<MSG_MOVE_GRAVITY_CHNG_Server as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x04D3 => Ok(Self::SMSG_SPLINE_MOVE_GRAVITY_DISABLE(<SMSG_SPLINE_MOVE_GRAVITY_DISABLE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x04D4 => Ok(Self::SMSG_SPLINE_MOVE_GRAVITY_ENABLE(<SMSG_SPLINE_MOVE_GRAVITY_ENABLE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x04D6 => Ok(Self::SMSG_EQUIPMENT_SET_USE_RESULT(<SMSG_EQUIPMENT_SET_USE_RESULT as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x04DA => Ok(Self::SMSG_CHAR_FACTION_CHANGE(Box::new(<SMSG_CHAR_FACTION_CHANGE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x04DE => Ok(Self::SMSG_BATTLEFIELD_MGR_ENTRY_INVITE(Box::new(<SMSG_BATTLEFIELD_MGR_ENTRY_INVITE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x04E0 => Ok(Self::SMSG_BATTLEFIELD_MGR_ENTERED(<SMSG_BATTLEFIELD_MGR_ENTERED as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x04E1 => Ok(Self::SMSG_BATTLEFIELD_MGR_QUEUE_INVITE(<SMSG_BATTLEFIELD_MGR_QUEUE_INVITE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x04E4 => Ok(Self::SMSG_BATTLEFIELD_MGR_QUEUE_REQUEST_RESPONSE(Box::new(<SMSG_BATTLEFIELD_MGR_QUEUE_REQUEST_RESPONSE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x04E5 => Ok(Self::SMSG_BATTLEFIELD_MGR_EJECT_PENDING(<SMSG_BATTLEFIELD_MGR_EJECT_PENDING as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x04E6 => Ok(Self::SMSG_BATTLEFIELD_MGR_EJECTED(<SMSG_BATTLEFIELD_MGR_EJECTED as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x04E8 => Ok(Self::SMSG_BATTLEFIELD_MGR_STATE_CHANGE(<SMSG_BATTLEFIELD_MGR_STATE_CHANGE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x04EB => Ok(Self::MSG_SET_RAID_DIFFICULTY(<MSG_SET_RAID_DIFFICULTY_Server as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x04ED => crate::util::assert_empty(body_size, opcode, "SMSG_TOGGLE_XP_GAIN").map(|_| Self::SMSG_TOGGLE_XP_GAIN),
            0x04EE => crate::util::assert_empty(body_size, opcode, "SMSG_GMRESPONSE_DB_ERROR").map(|_| Self::SMSG_GMRESPONSE_DB_ERROR),
            0x04EF => Ok(Self::SMSG_GMRESPONSE_RECEIVED(Box::new(<SMSG_GMRESPONSE_RECEIVED as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x04F1 => Ok(Self::SMSG_GMRESPONSE_STATUS_UPDATE(<SMSG_GMRESPONSE_STATUS_UPDATE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x04F7 => Ok(Self::SMSG_WORLD_STATE_UI_TIMER_UPDATE(<SMSG_WORLD_STATE_UI_TIMER_UPDATE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x04FA => Ok(Self::SMSG_TALENTS_INVOLUNTARILY_RESET(<SMSG_TALENTS_INVOLUNTARILY_RESET as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x0501 => Ok(Self::SMSG_QUERY_QUESTS_COMPLETED_RESPONSE(Box::new(<SMSG_QUERY_QUESTS_COMPLETED_RESPONSE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0506 => crate::util::assert_empty(body_size, opcode, "SMSG_CORPSE_NOT_IN_INSTANCE").map(|_| Self::SMSG_CORPSE_NOT_IN_INSTANCE),
            0x050A => Ok(Self::SMSG_CAMERA_SHAKE(<SMSG_CAMERA_SHAKE as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?)),
            0x050B => Ok(Self::SMSG_SOCKET_GEMS_RESULT(Box::new(<SMSG_SOCKET_GEMS_RESULT as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x050D => Ok(Self::SMSG_REDIRECT_CLIENT(Box::new(<SMSG_REDIRECT_CLIENT as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x0516 => Ok(Self::SMSG_MOVE_SET_COLLISION_HGT(Box::new(<SMSG_MOVE_SET_COLLISION_HGT as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            0x051E => Ok(Self::SMSG_MULTIPLE_MOVES(Box::new(<SMSG_MULTIPLE_MOVES as crate::Message>::read_body::<crate::traits::private::Internal>(&mut r, body_size).map_err(|a| a.opcode_convert())?))),
            _ => Err(crate::errors::ExpectedOpcodeError::Opcode{ opcode: opcode.into(), name: opcode_to_name(opcode.into()), size: body_size }),
        }
    }

    #[cfg(feature = "sync")]
    pub fn read_unencrypted<R: std::io::Read>(mut r: R) -> Result<Self, crate::errors::ExpectedOpcodeError> {
        let mut header = [0_u8; 4];
        r.read_exact(&mut header)?;

        let (size, opcode) = if header[0] & 0x80 != 0 {
            let size = u32::from_be_bytes([0x00, header[0] & 0x7F, header[1], header[2]]).saturating_sub(3);

            let mut last_byte = [0_u8; 1];
            r.read_exact(&mut last_byte)?;
            let opcode = u16::from_le_bytes([header[3], last_byte[0]]);
            (size, opcode)
        }
        else {
            let size = u16::from_be_bytes([header[0], header[1]]).saturating_sub(2).into();
            let opcode = u16::from_le_bytes([header[2], header[3]]);
            (size, opcode)
        };

        let mut buf = vec![0; size as usize];
        r.read_exact(&mut buf)?;
        Self::read_opcodes(opcode, size, &buf)
    }
    #[cfg(all(feature = "sync", feature = "encryption"))]
    pub fn read_encrypted<R: std::io::Read>(mut r: R, d: &mut ClientDecrypterHalf) -> Result<Self, crate::errors::ExpectedOpcodeError> {
        let mut header = [0_u8; 4];
        r.read_exact(&mut header)?;
        d.decrypt(&mut header);

        let (body_size, opcode) = if header[0] & 0x80 != 0 {
            let size = u32::from_be_bytes([0x00, header[0] & 0x7F, header[1], header[2]]).saturating_sub(3);

            let mut last_byte = [0_u8; 1];
            r.read_exact(&mut last_byte)?;
            d.decrypt(&mut last_byte);
            let opcode = u16::from_le_bytes([header[3], last_byte[0]]);
            (size, opcode)
        }
        else {
            let size = u16::from_be_bytes([header[0], header[1]]).saturating_sub(2).into();
            let opcode = u16::from_le_bytes([header[2], header[3]]);
            (size, opcode)
        };

        let mut buf = vec![0; body_size as usize];
        r.read_exact(&mut buf)?;
        Self::read_opcodes(opcode, body_size, &buf)
    }

    #[cfg(feature = "tokio")]
    pub async fn tokio_read_unencrypted<R: tokio::io::AsyncReadExt + Unpin + Send>(mut r: R) -> Result<Self, crate::errors::ExpectedOpcodeError> {
        let mut header = [0_u8; 4];
        r.read_exact(&mut header).await?;

        let (size, opcode) = if header[0] & 0x80 != 0 {
            let size = u32::from_be_bytes([0x00, header[0] & 0x7F, header[1], header[2]]).saturating_sub(3);

            let mut last_byte = [0_u8; 1];
            r.read_exact(&mut last_byte).await?;
            let opcode = u16::from_le_bytes([header[3], last_byte[0]]);
            (size, opcode)
        }
        else {
            let size = u16::from_be_bytes([header[0], header[1]]).saturating_sub(2).into();
            let opcode = u16::from_le_bytes([header[2], header[3]]);
            (size, opcode)
        };

        let mut buf = vec![0; size as usize];
        r.read_exact(&mut buf).await?;
        Self::read_opcodes(opcode, size, &buf)
    }
    #[cfg(all(feature = "tokio", feature = "encryption"))]
    pub async fn tokio_read_encrypted<R: tokio::io::AsyncReadExt + Unpin + Send>(mut r: R, d: &mut ClientDecrypterHalf) -> Result<Self, crate::errors::ExpectedOpcodeError> {
        let mut header = [0_u8; 4];
        r.read_exact(&mut header).await?;
        d.decrypt(&mut header);

        let (body_size, opcode) = if header[0] & 0x80 != 0 {
            let size = u32::from_be_bytes([0x00, header[0] & 0x7F, header[1], header[2]]).saturating_sub(3);

            let mut last_byte = [0_u8; 1];
            r.read_exact(&mut last_byte).await?;
            d.decrypt(&mut last_byte);
            let opcode = u16::from_le_bytes([header[3], last_byte[0]]);
            (size, opcode)
        }
        else {
            let size = u16::from_be_bytes([header[0], header[1]]).saturating_sub(2).into();
            let opcode = u16::from_le_bytes([header[2], header[3]]);
            (size, opcode)
        };

        let mut buf = vec![0; body_size as usize];
        r.read_exact(&mut buf).await?;
        Self::read_opcodes(opcode, body_size, &buf)
    }

    #[cfg(feature = "async-std")]
    pub async fn astd_read_unencrypted<R: async_std::io::ReadExt + Unpin + Send>(mut r: R) -> Result<Self, crate::errors::ExpectedOpcodeError> {
        let mut header = [0_u8; 4];
        r.read_exact(&mut header).await?;

        let (size, opcode) = if header[0] & 0x80 != 0 {
            let size = u32::from_be_bytes([0x00, header[0] & 0x7F, header[1], header[2]]).saturating_sub(3);

            let mut last_byte = [0_u8; 1];
            r.read_exact(&mut last_byte).await?;
            let opcode = u16::from_le_bytes([header[3], last_byte[0]]);
            (size, opcode)
        }
        else {
            let size = u16::from_be_bytes([header[0], header[1]]).saturating_sub(2).into();
            let opcode = u16::from_le_bytes([header[2], header[3]]);
            (size, opcode)
        };

        let mut buf = vec![0; size as usize];
        r.read_exact(&mut buf).await?;
        Self::read_opcodes(opcode, size, &buf)
    }
    #[cfg(all(feature = "async-std", feature = "encryption"))]
    pub async fn astd_read_encrypted<R: async_std::io::ReadExt + Unpin + Send>(mut r: R, d: &mut ClientDecrypterHalf) -> Result<Self, crate::errors::ExpectedOpcodeError> {
        let mut header = [0_u8; 4];
        r.read_exact(&mut header).await?;
        d.decrypt(&mut header);

        let (body_size, opcode) = if header[0] & 0x80 != 0 {
            let size = u32::from_be_bytes([0x00, header[0] & 0x7F, header[1], header[2]]).saturating_sub(3);

            let mut last_byte = [0_u8; 1];
            r.read_exact(&mut last_byte).await?;
            d.decrypt(&mut last_byte);
            let opcode = u16::from_le_bytes([header[3], last_byte[0]]);
            (size, opcode)
        }
        else {
            let size = u16::from_be_bytes([header[0], header[1]]).saturating_sub(2).into();
            let opcode = u16::from_le_bytes([header[2], header[3]]);
            (size, opcode)
        };

        let mut buf = vec![0; body_size as usize];
        r.read_exact(&mut buf).await?;
        Self::read_opcodes(opcode, body_size, &buf)
    }

    #[cfg(all(feature = "sync", feature = "encryption"))]
    pub fn write_encrypted_server<W: std::io::Write>(&self, mut w: W, e: &mut ServerEncrypterHalf) -> Result<(), std::io::Error> {
        match self {
            Self::MSG_MOVE_START_FORWARD(c) => c.write_encrypted_server(w, e),
            Self::MSG_MOVE_START_BACKWARD(c) => c.write_encrypted_server(w, e),
            Self::MSG_MOVE_STOP(c) => c.write_encrypted_server(w, e),
            Self::MSG_MOVE_START_STRAFE_LEFT(c) => c.write_encrypted_server(w, e),
            Self::MSG_MOVE_START_STRAFE_RIGHT(c) => c.write_encrypted_server(w, e),
            Self::MSG_MOVE_STOP_STRAFE(c) => c.write_encrypted_server(w, e),
            Self::MSG_MOVE_JUMP(c) => c.write_encrypted_server(w, e),
            Self::MSG_MOVE_START_TURN_LEFT(c) => c.write_encrypted_server(w, e),
            Self::MSG_MOVE_START_TURN_RIGHT(c) => c.write_encrypted_server(w, e),
            Self::MSG_MOVE_STOP_TURN(c) => c.write_encrypted_server(w, e),
            Self::MSG_MOVE_START_PITCH_UP(c) => c.write_encrypted_server(w, e),
            Self::MSG_MOVE_START_PITCH_DOWN(c) => c.write_encrypted_server(w, e),
            Self::MSG_MOVE_STOP_PITCH(c) => c.write_encrypted_server(w, e),
            Self::MSG_MOVE_SET_RUN_MODE(c) => c.write_encrypted_server(w, e),
            Self::MSG_MOVE_SET_WALK_MODE(c) => c.write_encrypted_server(w, e),
            Self::MSG_MOVE_FALL_LAND(c) => c.write_encrypted_server(w, e),
            Self::MSG_MOVE_START_SWIM(c) => c.write_encrypted_server(w, e),
            Self::MSG_MOVE_STOP_SWIM(c) => c.write_encrypted_server(w, e),
            Self::MSG_MOVE_SET_FACING(c) => c.write_encrypted_server(w, e),
            Self::MSG_MOVE_SET_PITCH(c) => c.write_encrypted_server(w, e),
            Self::MSG_MOVE_WORLDPORT_ACK => MSG_MOVE_WORLDPORT_ACK{}.write_encrypted_server(w, e),
            Self::MSG_MOVE_HEARTBEAT(c) => c.write_encrypted_server(w, e),
            Self::MSG_MOVE_HOVER(c) => c.write_encrypted_server(w, e),
            Self::MSG_PETITION_DECLINE(c) => c.write_encrypted_server(w, e),
            Self::MSG_TABARDVENDOR_ACTIVATE(c) => c.write_encrypted_server(w, e),
            Self::MSG_QUEST_PUSH_RESULT(c) => c.write_encrypted_server(w, e),
            Self::MSG_MOVE_WATER_WALK(c) => c.write_encrypted_server(w, e),
            Self::MSG_PETITION_RENAME(c) => c.write_encrypted_server(w, e),
            Self::MSG_MOVE_START_ASCEND(c) => c.write_encrypted_server(w, e),
            Self::MSG_MOVE_STOP_ASCEND(c) => c.write_encrypted_server(w, e),
            Self::MSG_MOVE_SET_FLIGHT_BACK_SPEED(c) => c.write_encrypted_server(w, e),
            Self::MSG_MOVE_START_DESCEND(c) => c.write_encrypted_server(w, e),
            Self::CMSG_CALENDAR_GET_NUM_PENDING => CMSG_CALENDAR_GET_NUM_PENDING{}.write_encrypted_server(w, e),
            Self::SMSG_CHAR_CREATE(c) => c.write_encrypted_server(w, e),
            Self::SMSG_CHAR_ENUM(c) => c.write_encrypted_server(w, e),
            Self::SMSG_CHAR_DELETE(c) => c.write_encrypted_server(w, e),
            Self::SMSG_NEW_WORLD(c) => c.write_encrypted_server(w, e),
            Self::SMSG_TRANSFER_PENDING(c) => c.write_encrypted_server(w, e),
            Self::SMSG_TRANSFER_ABORTED(c) => c.write_encrypted_server(w, e),
            Self::SMSG_CHARACTER_LOGIN_FAILED(c) => c.write_encrypted_server(w, e),
            Self::SMSG_LOGIN_SETTIMESPEED(c) => c.write_encrypted_server(w, e),
            Self::SMSG_LOGOUT_RESPONSE(c) => c.write_encrypted_server(w, e),
            Self::SMSG_LOGOUT_COMPLETE => SMSG_LOGOUT_COMPLETE{}.write_encrypted_server(w, e),
            Self::SMSG_LOGOUT_CANCEL_ACK => SMSG_LOGOUT_CANCEL_ACK{}.write_encrypted_server(w, e),
            Self::SMSG_NAME_QUERY_RESPONSE(c) => c.write_encrypted_server(w, e),
            Self::SMSG_PET_NAME_QUERY_RESPONSE(c) => c.write_encrypted_server(w, e),
            Self::SMSG_GUILD_QUERY_RESPONSE(c) => c.write_encrypted_server(w, e),
            Self::SMSG_ITEM_QUERY_SINGLE_RESPONSE(c) => c.write_encrypted_server(w, e),
            Self::SMSG_PAGE_TEXT_QUERY_RESPONSE(c) => c.write_encrypted_server(w, e),
            Self::SMSG_QUEST_QUERY_RESPONSE(c) => c.write_encrypted_server(w, e),
            Self::SMSG_GAMEOBJECT_QUERY_RESPONSE(c) => c.write_encrypted_server(w, e),
            Self::SMSG_CREATURE_QUERY_RESPONSE(c) => c.write_encrypted_server(w, e),
            Self::SMSG_WHO(c) => c.write_encrypted_server(w, e),
            Self::SMSG_WHOIS(c) => c.write_encrypted_server(w, e),
            Self::SMSG_CONTACT_LIST(c) => c.write_encrypted_server(w, e),
            Self::SMSG_FRIEND_STATUS(c) => c.write_encrypted_server(w, e),
            Self::SMSG_GROUP_INVITE(c) => c.write_encrypted_server(w, e),
            Self::SMSG_GROUP_DECLINE(c) => c.write_encrypted_server(w, e),
            Self::SMSG_GROUP_UNINVITE => SMSG_GROUP_UNINVITE{}.write_encrypted_server(w, e),
            Self::SMSG_GROUP_SET_LEADER(c) => c.write_encrypted_server(w, e),
            Self::SMSG_GROUP_DESTROYED => SMSG_GROUP_DESTROYED{}.write_encrypted_server(w, e),
            Self::SMSG_GROUP_LIST(c) => c.write_encrypted_server(w, e),
            Self::SMSG_PARTY_MEMBER_STATS(c) => c.write_encrypted_server(w, e),
            Self::SMSG_PARTY_COMMAND_RESULT(c) => c.write_encrypted_server(w, e),
            Self::SMSG_GUILD_INVITE(c) => c.write_encrypted_server(w, e),
            Self::SMSG_GUILD_DECLINE(c) => c.write_encrypted_server(w, e),
            Self::SMSG_GUILD_INFO(c) => c.write_encrypted_server(w, e),
            Self::SMSG_GUILD_ROSTER(c) => c.write_encrypted_server(w, e),
            Self::SMSG_GUILD_EVENT(c) => c.write_encrypted_server(w, e),
            Self::SMSG_GUILD_COMMAND_RESULT(c) => c.write_encrypted_server(w, e),
            Self::SMSG_MESSAGECHAT(c) => c.write_encrypted_server(w, e),
            Self::SMSG_CHANNEL_NOTIFY(c) => c.write_encrypted_server(w, e),
            Self::SMSG_CHANNEL_LIST(c) => c.write_encrypted_server(w, e),
            Self::SMSG_UPDATE_OBJECT(c) => c.write_encrypted_server(w, e),
            Self::SMSG_DESTROY_OBJECT(c) => c.write_encrypted_server(w, e),
            Self::SMSG_READ_ITEM_OK(c) => c.write_encrypted_server(w, e),
            Self::SMSG_READ_ITEM_FAILED(c) => c.write_encrypted_server(w, e),
            Self::SMSG_ITEM_COOLDOWN(c) => c.write_encrypted_server(w, e),
            Self::SMSG_GAMEOBJECT_CUSTOM_ANIM(c) => c.write_encrypted_server(w, e),
            Self::MSG_MOVE_TELEPORT_CHEAT(c) => c.write_encrypted_server(w, e),
            Self::MSG_MOVE_TELEPORT_ACK(c) => c.write_encrypted_server(w, e),
            Self::SMSG_MONSTER_MOVE(c) => c.write_encrypted_server(w, e),
            Self::SMSG_MOVE_WATER_WALK(c) => c.write_encrypted_server(w, e),
            Self::SMSG_MOVE_LAND_WALK(c) => c.write_encrypted_server(w, e),
            Self::SMSG_FORCE_RUN_SPEED_CHANGE(c) => c.write_encrypted_server(w, e),
            Self::SMSG_FORCE_RUN_BACK_SPEED_CHANGE(c) => c.write_encrypted_server(w, e),
            Self::SMSG_FORCE_SWIM_SPEED_CHANGE(c) => c.write_encrypted_server(w, e),
            Self::SMSG_FORCE_MOVE_ROOT(c) => c.write_encrypted_server(w, e),
            Self::SMSG_FORCE_MOVE_UNROOT(c) => c.write_encrypted_server(w, e),
            Self::MSG_MOVE_ROOT(c) => c.write_encrypted_server(w, e),
            Self::MSG_MOVE_UNROOT(c) => c.write_encrypted_server(w, e),
            Self::SMSG_MOVE_KNOCK_BACK(c) => c.write_encrypted_server(w, e),
            Self::MSG_MOVE_KNOCK_BACK(c) => c.write_encrypted_server(w, e),
            Self::SMSG_MOVE_FEATHER_FALL(c) => c.write_encrypted_server(w, e),
            Self::SMSG_MOVE_NORMAL_FALL(c) => c.write_encrypted_server(w, e),
            Self::SMSG_MOVE_SET_HOVER(c) => c.write_encrypted_server(w, e),
            Self::SMSG_MOVE_UNSET_HOVER(c) => c.write_encrypted_server(w, e),
            Self::SMSG_TRIGGER_CINEMATIC(c) => c.write_encrypted_server(w, e),
            Self::SMSG_TUTORIAL_FLAGS(c) => c.write_encrypted_server(w, e),
            Self::SMSG_EMOTE(c) => c.write_encrypted_server(w, e),
            Self::SMSG_TEXT_EMOTE(c) => c.write_encrypted_server(w, e),
            Self::SMSG_INVENTORY_CHANGE_FAILURE(c) => c.write_encrypted_server(w, e),
            Self::SMSG_TRADE_STATUS(c) => c.write_encrypted_server(w, e),
            Self::SMSG_TRADE_STATUS_EXTENDED(c) => c.write_encrypted_server(w, e),
            Self::SMSG_INITIALIZE_FACTIONS(c) => c.write_encrypted_server(w, e),
            Self::SMSG_SET_FACTION_VISIBLE(c) => c.write_encrypted_server(w, e),
            Self::SMSG_SET_FACTION_STANDING(c) => c.write_encrypted_server(w, e),
            Self::SMSG_SET_PROFICIENCY(c) => c.write_encrypted_server(w, e),
            Self::SMSG_ACTION_BUTTONS(c) => c.write_encrypted_server(w, e),
            Self::SMSG_INITIAL_SPELLS(c) => c.write_encrypted_server(w, e),
            Self::SMSG_LEARNED_SPELL(c) => c.write_encrypted_server(w, e),
            Self::SMSG_SUPERCEDED_SPELL(c) => c.write_encrypted_server(w, e),
            Self::SMSG_CAST_FAILED(c) => c.write_encrypted_server(w, e),
            Self::SMSG_SPELL_START(c) => c.write_encrypted_server(w, e),
            Self::SMSG_SPELL_GO(c) => c.write_encrypted_server(w, e),
            Self::SMSG_SPELL_FAILURE(c) => c.write_encrypted_server(w, e),
            Self::SMSG_SPELL_COOLDOWN(c) => c.write_encrypted_server(w, e),
            Self::SMSG_COOLDOWN_EVENT(c) => c.write_encrypted_server(w, e),
            Self::SMSG_PET_CAST_FAILED(c) => c.write_encrypted_server(w, e),
            Self::MSG_CHANNEL_START(c) => c.write_encrypted_server(w, e),
            Self::MSG_CHANNEL_UPDATE(c) => c.write_encrypted_server(w, e),
            Self::SMSG_AI_REACTION(c) => c.write_encrypted_server(w, e),
            Self::SMSG_ATTACKSTART(c) => c.write_encrypted_server(w, e),
            Self::SMSG_ATTACKSTOP(c) => c.write_encrypted_server(w, e),
            Self::SMSG_ATTACKSWING_NOTINRANGE => SMSG_ATTACKSWING_NOTINRANGE{}.write_encrypted_server(w, e),
            Self::SMSG_ATTACKSWING_BADFACING => SMSG_ATTACKSWING_BADFACING{}.write_encrypted_server(w, e),
            Self::SMSG_INSTANCE_LOCK_WARNING_QUERY(c) => c.write_encrypted_server(w, e),
            Self::SMSG_ATTACKSWING_DEADTARGET => SMSG_ATTACKSWING_DEADTARGET{}.write_encrypted_server(w, e),
            Self::SMSG_ATTACKSWING_CANT_ATTACK => SMSG_ATTACKSWING_CANT_ATTACK{}.write_encrypted_server(w, e),
            Self::SMSG_ATTACKERSTATEUPDATE(c) => c.write_encrypted_server(w, e),
            Self::SMSG_CANCEL_COMBAT => SMSG_CANCEL_COMBAT{}.write_encrypted_server(w, e),
            Self::SMSG_SPELLHEALLOG(c) => c.write_encrypted_server(w, e),
            Self::SMSG_SPELLENERGIZELOG(c) => c.write_encrypted_server(w, e),
            Self::SMSG_BREAK_TARGET(c) => c.write_encrypted_server(w, e),
            Self::SMSG_BINDPOINTUPDATE(c) => c.write_encrypted_server(w, e),
            Self::SMSG_PLAYERBOUND(c) => c.write_encrypted_server(w, e),
            Self::SMSG_CLIENT_CONTROL_UPDATE(c) => c.write_encrypted_server(w, e),
            Self::SMSG_RESURRECT_REQUEST(c) => c.write_encrypted_server(w, e),
            Self::SMSG_LOOT_RESPONSE(c) => c.write_encrypted_server(w, e),
            Self::SMSG_LOOT_RELEASE_RESPONSE(c) => c.write_encrypted_server(w, e),
            Self::SMSG_LOOT_REMOVED(c) => c.write_encrypted_server(w, e),
            Self::SMSG_LOOT_MONEY_NOTIFY(c) => c.write_encrypted_server(w, e),
            Self::SMSG_LOOT_CLEAR_MONEY => SMSG_LOOT_CLEAR_MONEY{}.write_encrypted_server(w, e),
            Self::SMSG_ITEM_PUSH_RESULT(c) => c.write_encrypted_server(w, e),
            Self::SMSG_DUEL_REQUESTED(c) => c.write_encrypted_server(w, e),
            Self::SMSG_DUEL_OUTOFBOUNDS => SMSG_DUEL_OUTOFBOUNDS{}.write_encrypted_server(w, e),
            Self::SMSG_DUEL_INBOUNDS => SMSG_DUEL_INBOUNDS{}.write_encrypted_server(w, e),
            Self::SMSG_DUEL_COMPLETE(c) => c.write_encrypted_server(w, e),
            Self::SMSG_DUEL_WINNER(c) => c.write_encrypted_server(w, e),
            Self::SMSG_MOUNTRESULT(c) => c.write_encrypted_server(w, e),
            Self::SMSG_MOUNTSPECIAL_ANIM(c) => c.write_encrypted_server(w, e),
            Self::SMSG_PET_TAME_FAILURE(c) => c.write_encrypted_server(w, e),
            Self::SMSG_PET_NAME_INVALID(c) => c.write_encrypted_server(w, e),
            Self::SMSG_PET_SPELLS(c) => c.write_encrypted_server(w, e),
            Self::SMSG_PET_MODE(c) => c.write_encrypted_server(w, e),
            Self::SMSG_GOSSIP_MESSAGE(c) => c.write_encrypted_server(w, e),
            Self::SMSG_GOSSIP_COMPLETE => SMSG_GOSSIP_COMPLETE{}.write_encrypted_server(w, e),
            Self::SMSG_NPC_TEXT_UPDATE(c) => c.write_encrypted_server(w, e),
            Self::SMSG_QUESTGIVER_STATUS(c) => c.write_encrypted_server(w, e),
            Self::SMSG_QUESTGIVER_QUEST_LIST(c) => c.write_encrypted_server(w, e),
            Self::SMSG_QUESTGIVER_QUEST_DETAILS(c) => c.write_encrypted_server(w, e),
            Self::SMSG_QUESTGIVER_REQUEST_ITEMS(c) => c.write_encrypted_server(w, e),
            Self::SMSG_QUESTGIVER_OFFER_REWARD(c) => c.write_encrypted_server(w, e),
            Self::SMSG_QUESTGIVER_QUEST_INVALID(c) => c.write_encrypted_server(w, e),
            Self::SMSG_QUESTGIVER_QUEST_COMPLETE(c) => c.write_encrypted_server(w, e),
            Self::SMSG_QUESTGIVER_QUEST_FAILED(c) => c.write_encrypted_server(w, e),
            Self::SMSG_QUESTLOG_FULL => SMSG_QUESTLOG_FULL{}.write_encrypted_server(w, e),
            Self::SMSG_QUESTUPDATE_FAILED(c) => c.write_encrypted_server(w, e),
            Self::SMSG_QUESTUPDATE_FAILEDTIMER(c) => c.write_encrypted_server(w, e),
            Self::SMSG_QUESTUPDATE_COMPLETE(c) => c.write_encrypted_server(w, e),
            Self::SMSG_QUESTUPDATE_ADD_KILL(c) => c.write_encrypted_server(w, e),
            Self::SMSG_QUESTUPDATE_ADD_ITEM(c) => c.write_encrypted_server(w, e),
            Self::SMSG_QUEST_CONFIRM_ACCEPT(c) => c.write_encrypted_server(w, e),
            Self::SMSG_LIST_INVENTORY(c) => c.write_encrypted_server(w, e),
            Self::SMSG_SELL_ITEM(c) => c.write_encrypted_server(w, e),
            Self::SMSG_BUY_ITEM(c) => c.write_encrypted_server(w, e),
            Self::SMSG_BUY_FAILED(c) => c.write_encrypted_server(w, e),
            Self::SMSG_SHOWTAXINODES(c) => c.write_encrypted_server(w, e),
            Self::SMSG_TAXINODE_STATUS(c) => c.write_encrypted_server(w, e),
            Self::SMSG_ACTIVATETAXIREPLY(c) => c.write_encrypted_server(w, e),
            Self::SMSG_NEW_TAXI_PATH => SMSG_NEW_TAXI_PATH{}.write_encrypted_server(w, e),
            Self::SMSG_TRAINER_LIST(c) => c.write_encrypted_server(w, e),
            Self::SMSG_TRAINER_BUY_SUCCEEDED(c) => c.write_encrypted_server(w, e),
            Self::SMSG_TRAINER_BUY_FAILED(c) => c.write_encrypted_server(w, e),
            Self::SMSG_SHOW_BANK(c) => c.write_encrypted_server(w, e),
            Self::SMSG_BUY_BANK_SLOT_RESULT(c) => c.write_encrypted_server(w, e),
            Self::SMSG_PETITION_SHOWLIST(c) => c.write_encrypted_server(w, e),
            Self::SMSG_PETITION_SHOW_SIGNATURES(c) => c.write_encrypted_server(w, e),
            Self::SMSG_PETITION_SIGN_RESULTS(c) => c.write_encrypted_server(w, e),
            Self::SMSG_TURN_IN_PETITION_RESULTS(c) => c.write_encrypted_server(w, e),
            Self::SMSG_PETITION_QUERY_RESPONSE(c) => c.write_encrypted_server(w, e),
            Self::SMSG_FISH_NOT_HOOKED => SMSG_FISH_NOT_HOOKED{}.write_encrypted_server(w, e),
            Self::SMSG_FISH_ESCAPED => SMSG_FISH_ESCAPED{}.write_encrypted_server(w, e),
            Self::SMSG_NOTIFICATION(c) => c.write_encrypted_server(w, e),
            Self::SMSG_PLAYED_TIME(c) => c.write_encrypted_server(w, e),
            Self::SMSG_QUERY_TIME_RESPONSE(c) => c.write_encrypted_server(w, e),
            Self::SMSG_LOG_XPGAIN(c) => c.write_encrypted_server(w, e),
            Self::SMSG_LEVELUP_INFO(c) => c.write_encrypted_server(w, e),
            Self::MSG_MINIMAP_PING(c) => c.write_encrypted_server(w, e),
            Self::SMSG_ENCHANTMENTLOG(c) => c.write_encrypted_server(w, e),
            Self::SMSG_START_MIRROR_TIMER(c) => c.write_encrypted_server(w, e),
            Self::SMSG_PAUSE_MIRROR_TIMER(c) => c.write_encrypted_server(w, e),
            Self::SMSG_STOP_MIRROR_TIMER(c) => c.write_encrypted_server(w, e),
            Self::SMSG_PONG(c) => c.write_encrypted_server(w, e),
            Self::SMSG_CLEAR_COOLDOWN(c) => c.write_encrypted_server(w, e),
            Self::SMSG_GAMEOBJECT_PAGETEXT(c) => c.write_encrypted_server(w, e),
            Self::SMSG_SPELL_DELAYED(c) => c.write_encrypted_server(w, e),
            Self::SMSG_QUEST_POI_QUERY_RESPONSE(c) => c.write_encrypted_server(w, e),
            Self::SMSG_ITEM_TIME_UPDATE(c) => c.write_encrypted_server(w, e),
            Self::SMSG_ITEM_ENCHANT_TIME_UPDATE(c) => c.write_encrypted_server(w, e),
            Self::SMSG_AUTH_CHALLENGE(c) => c.write_encrypted_server(w, e),
            Self::SMSG_AUTH_RESPONSE(c) => c.write_encrypted_server(w, e),
            Self::MSG_SAVE_GUILD_EMBLEM(c) => c.write_encrypted_server(w, e),
            Self::SMSG_PLAY_SPELL_VISUAL(c) => c.write_encrypted_server(w, e),
            Self::SMSG_PARTYKILLLOG(c) => c.write_encrypted_server(w, e),
            Self::SMSG_COMPRESSED_UPDATE_OBJECT(c) => c.write_encrypted_server(w, e),
            Self::SMSG_PLAY_SPELL_IMPACT(c) => c.write_encrypted_server(w, e),
            Self::SMSG_EXPLORATION_EXPERIENCE(c) => c.write_encrypted_server(w, e),
            Self::MSG_RANDOM_ROLL(c) => c.write_encrypted_server(w, e),
            Self::SMSG_ENVIRONMENTAL_DAMAGE_LOG(c) => c.write_encrypted_server(w, e),
            Self::SMSG_LFG_PLAYER_REWARD(c) => c.write_encrypted_server(w, e),
            Self::SMSG_LFG_TELEPORT_DENIED(c) => c.write_encrypted_server(w, e),
            Self::SMSG_REMOVED_SPELL(c) => c.write_encrypted_server(w, e),
            Self::SMSG_GMTICKET_CREATE(c) => c.write_encrypted_server(w, e),
            Self::SMSG_GMTICKET_UPDATETEXT(c) => c.write_encrypted_server(w, e),
            Self::SMSG_ACCOUNT_DATA_TIMES(c) => c.write_encrypted_server(w, e),
            Self::SMSG_UPDATE_ACCOUNT_DATA(c) => c.write_encrypted_server(w, e),
            Self::SMSG_GMTICKET_GETTICKET(c) => c.write_encrypted_server(w, e),
            Self::SMSG_UPDATE_INSTANCE_ENCOUNTER_UNIT(c) => c.write_encrypted_server(w, e),
            Self::SMSG_GAMEOBJECT_DESPAWN_ANIM(c) => c.write_encrypted_server(w, e),
            Self::MSG_CORPSE_QUERY(c) => c.write_encrypted_server(w, e),
            Self::SMSG_GMTICKET_DELETETICKET(c) => c.write_encrypted_server(w, e),
            Self::SMSG_CHAT_WRONG_FACTION => SMSG_CHAT_WRONG_FACTION{}.write_encrypted_server(w, e),
            Self::SMSG_GMTICKET_SYSTEMSTATUS(c) => c.write_encrypted_server(w, e),
            Self::SMSG_QUEST_FORCE_REMOVE(c) => c.write_encrypted_server(w, e),
            Self::SMSG_SPIRIT_HEALER_CONFIRM(c) => c.write_encrypted_server(w, e),
            Self::SMSG_GOSSIP_POI(c) => c.write_encrypted_server(w, e),
            Self::SMSG_LOGIN_VERIFY_WORLD(c) => c.write_encrypted_server(w, e),
            Self::SMSG_SEND_MAIL_RESULT(c) => c.write_encrypted_server(w, e),
            Self::SMSG_MAIL_LIST_RESULT(c) => c.write_encrypted_server(w, e),
            Self::SMSG_BATTLEFIELD_LIST(c) => c.write_encrypted_server(w, e),
            Self::SMSG_ITEM_TEXT_QUERY_RESPONSE(c) => c.write_encrypted_server(w, e),
            Self::SMSG_SPELLLOGMISS(c) => c.write_encrypted_server(w, e),
            Self::SMSG_SPELLLOGEXECUTE(c) => c.write_encrypted_server(w, e),
            Self::SMSG_PERIODICAURALOG(c) => c.write_encrypted_server(w, e),
            Self::SMSG_SPELLDAMAGESHIELD(c) => c.write_encrypted_server(w, e),
            Self::SMSG_SPELLNONMELEEDAMAGELOG(c) => c.write_encrypted_server(w, e),
            Self::SMSG_RESURRECT_FAILED(c) => c.write_encrypted_server(w, e),
            Self::SMSG_ZONE_UNDER_ATTACK(c) => c.write_encrypted_server(w, e),
            Self::MSG_AUCTION_HELLO(c) => c.write_encrypted_server(w, e),
            Self::SMSG_AUCTION_COMMAND_RESULT(c) => c.write_encrypted_server(w, e),
            Self::SMSG_AUCTION_LIST_RESULT(c) => c.write_encrypted_server(w, e),
            Self::SMSG_AUCTION_OWNER_LIST_RESULT(c) => c.write_encrypted_server(w, e),
            Self::SMSG_AUCTION_BIDDER_NOTIFICATION(c) => c.write_encrypted_server(w, e),
            Self::SMSG_AUCTION_OWNER_NOTIFICATION(c) => c.write_encrypted_server(w, e),
            Self::SMSG_PROCRESIST(c) => c.write_encrypted_server(w, e),
            Self::SMSG_DISPEL_FAILED(c) => c.write_encrypted_server(w, e),
            Self::SMSG_SPELLORDAMAGE_IMMUNE(c) => c.write_encrypted_server(w, e),
            Self::SMSG_AUCTION_BIDDER_LIST_RESULT(c) => c.write_encrypted_server(w, e),
            Self::SMSG_SET_FLAT_SPELL_MODIFIER(c) => c.write_encrypted_server(w, e),
            Self::SMSG_SET_PCT_SPELL_MODIFIER(c) => c.write_encrypted_server(w, e),
            Self::SMSG_CORPSE_RECLAIM_DELAY(c) => c.write_encrypted_server(w, e),
            Self::MSG_LIST_STABLED_PETS(c) => c.write_encrypted_server(w, e),
            Self::SMSG_STABLE_RESULT(c) => c.write_encrypted_server(w, e),
            Self::SMSG_PLAY_MUSIC(c) => c.write_encrypted_server(w, e),
            Self::SMSG_PLAY_OBJECT_SOUND(c) => c.write_encrypted_server(w, e),
            Self::SMSG_SPELLDISPELLOG(c) => c.write_encrypted_server(w, e),
            Self::MSG_QUERY_NEXT_MAIL_TIME(c) => c.write_encrypted_server(w, e),
            Self::SMSG_RECEIVED_MAIL(c) => c.write_encrypted_server(w, e),
            Self::SMSG_RAID_GROUP_ONLY(c) => c.write_encrypted_server(w, e),
            Self::SMSG_PVP_CREDIT(c) => c.write_encrypted_server(w, e),
            Self::SMSG_AUCTION_REMOVED_NOTIFICATION(c) => c.write_encrypted_server(w, e),
            Self::SMSG_SERVER_MESSAGE(c) => c.write_encrypted_server(w, e),
            Self::SMSG_LFG_OFFER_CONTINUE(c) => c.write_encrypted_server(w, e),
            Self::SMSG_SHOW_MAILBOX(c) => c.write_encrypted_server(w, e),
            Self::SMSG_CANCEL_AUTO_REPEAT(c) => c.write_encrypted_server(w, e),
            Self::SMSG_STANDSTATE_UPDATE(c) => c.write_encrypted_server(w, e),
            Self::SMSG_LOOT_ALL_PASSED(c) => c.write_encrypted_server(w, e),
            Self::SMSG_LOOT_ROLL_WON(c) => c.write_encrypted_server(w, e),
            Self::SMSG_LOOT_START_ROLL(c) => c.write_encrypted_server(w, e),
            Self::SMSG_LOOT_ROLL(c) => c.write_encrypted_server(w, e),
            Self::SMSG_LOOT_MASTER_LIST(c) => c.write_encrypted_server(w, e),
            Self::SMSG_SET_FORCED_REACTIONS(c) => c.write_encrypted_server(w, e),
            Self::SMSG_SPELL_FAILED_OTHER(c) => c.write_encrypted_server(w, e),
            Self::SMSG_CHAT_PLAYER_NOT_FOUND(c) => c.write_encrypted_server(w, e),
            Self::MSG_TALENT_WIPE_CONFIRM(c) => c.write_encrypted_server(w, e),
            Self::SMSG_SUMMON_REQUEST(c) => c.write_encrypted_server(w, e),
            Self::SMSG_MONSTER_MOVE_TRANSPORT(c) => c.write_encrypted_server(w, e),
            Self::SMSG_PET_BROKEN => SMSG_PET_BROKEN{}.write_encrypted_server(w, e),
            Self::MSG_MOVE_FEATHER_FALL(c) => c.write_encrypted_server(w, e),
            Self::SMSG_FEIGN_DEATH_RESISTED => SMSG_FEIGN_DEATH_RESISTED{}.write_encrypted_server(w, e),
            Self::SMSG_DUEL_COUNTDOWN(c) => c.write_encrypted_server(w, e),
            Self::SMSG_AREA_TRIGGER_MESSAGE(c) => c.write_encrypted_server(w, e),
            Self::SMSG_LFG_ROLE_CHOSEN(c) => c.write_encrypted_server(w, e),
            Self::SMSG_PLAYER_SKINNED(c) => c.write_encrypted_server(w, e),
            Self::SMSG_DURABILITY_DAMAGE_DEATH => SMSG_DURABILITY_DAMAGE_DEATH{}.write_encrypted_server(w, e),
            Self::SMSG_INIT_WORLD_STATES(c) => c.write_encrypted_server(w, e),
            Self::SMSG_UPDATE_WORLD_STATE(c) => c.write_encrypted_server(w, e),
            Self::SMSG_ITEM_NAME_QUERY_RESPONSE(c) => c.write_encrypted_server(w, e),
            Self::SMSG_PET_ACTION_FEEDBACK(c) => c.write_encrypted_server(w, e),
            Self::SMSG_CHAR_RENAME(c) => c.write_encrypted_server(w, e),
            Self::SMSG_INSTANCE_SAVE_CREATED(c) => c.write_encrypted_server(w, e),
            Self::SMSG_RAID_INSTANCE_INFO(c) => c.write_encrypted_server(w, e),
            Self::SMSG_PLAY_SOUND(c) => c.write_encrypted_server(w, e),
            Self::SMSG_BATTLEFIELD_STATUS(c) => c.write_encrypted_server(w, e),
            Self::MSG_INSPECT_HONOR_STATS(c) => c.write_encrypted_server(w, e),
            Self::SMSG_FORCE_WALK_SPEED_CHANGE(c) => c.write_encrypted_server(w, e),
            Self::SMSG_FORCE_SWIM_BACK_SPEED_CHANGE(c) => c.write_encrypted_server(w, e),
            Self::SMSG_FORCE_TURN_RATE_CHANGE(c) => c.write_encrypted_server(w, e),
            Self::SMSG_AREA_SPIRIT_HEALER_TIME(c) => c.write_encrypted_server(w, e),
            Self::SMSG_WARDEN_DATA(c) => c.write_encrypted_server(w, e),
            Self::SMSG_GROUP_JOINED_BATTLEGROUND(c) => c.write_encrypted_server(w, e),
            Self::MSG_BATTLEGROUND_PLAYER_POSITIONS(c) => c.write_encrypted_server(w, e),
            Self::SMSG_BINDER_CONFIRM(c) => c.write_encrypted_server(w, e),
            Self::SMSG_BATTLEGROUND_PLAYER_JOINED(c) => c.write_encrypted_server(w, e),
            Self::SMSG_BATTLEGROUND_PLAYER_LEFT(c) => c.write_encrypted_server(w, e),
            Self::SMSG_ADDON_INFO(c) => c.write_encrypted_server(w, e),
            Self::SMSG_PET_UNLEARN_CONFIRM(c) => c.write_encrypted_server(w, e),
            Self::SMSG_PARTY_MEMBER_STATS_FULL(c) => c.write_encrypted_server(w, e),
            Self::SMSG_WEATHER(c) => c.write_encrypted_server(w, e),
            Self::SMSG_RAID_INSTANCE_MESSAGE(c) => c.write_encrypted_server(w, e),
            Self::SMSG_COMPRESSED_MOVES(c) => c.write_encrypted_server(w, e),
            Self::SMSG_CHAT_RESTRICTED(c) => c.write_encrypted_server(w, e),
            Self::SMSG_SPLINE_SET_RUN_SPEED(c) => c.write_encrypted_server(w, e),
            Self::SMSG_SPLINE_SET_RUN_BACK_SPEED(c) => c.write_encrypted_server(w, e),
            Self::SMSG_SPLINE_SET_SWIM_SPEED(c) => c.write_encrypted_server(w, e),
            Self::SMSG_SPLINE_SET_WALK_SPEED(c) => c.write_encrypted_server(w, e),
            Self::SMSG_SPLINE_SET_SWIM_BACK_SPEED(c) => c.write_encrypted_server(w, e),
            Self::SMSG_SPLINE_SET_TURN_RATE(c) => c.write_encrypted_server(w, e),
            Self::SMSG_SPLINE_MOVE_UNROOT(c) => c.write_encrypted_server(w, e),
            Self::SMSG_SPLINE_MOVE_FEATHER_FALL(c) => c.write_encrypted_server(w, e),
            Self::SMSG_SPLINE_MOVE_NORMAL_FALL(c) => c.write_encrypted_server(w, e),
            Self::SMSG_SPLINE_MOVE_SET_HOVER(c) => c.write_encrypted_server(w, e),
            Self::SMSG_SPLINE_MOVE_UNSET_HOVER(c) => c.write_encrypted_server(w, e),
            Self::SMSG_SPLINE_MOVE_WATER_WALK(c) => c.write_encrypted_server(w, e),
            Self::SMSG_SPLINE_MOVE_LAND_WALK(c) => c.write_encrypted_server(w, e),
            Self::SMSG_SPLINE_MOVE_START_SWIM(c) => c.write_encrypted_server(w, e),
            Self::SMSG_SPLINE_MOVE_STOP_SWIM(c) => c.write_encrypted_server(w, e),
            Self::SMSG_SPLINE_MOVE_SET_RUN_MODE(c) => c.write_encrypted_server(w, e),
            Self::SMSG_SPLINE_MOVE_SET_WALK_MODE(c) => c.write_encrypted_server(w, e),
            Self::MSG_MOVE_TIME_SKIPPED(c) => c.write_encrypted_server(w, e),
            Self::SMSG_SPLINE_MOVE_ROOT(c) => c.write_encrypted_server(w, e),
            Self::SMSG_INVALIDATE_PLAYER(c) => c.write_encrypted_server(w, e),
            Self::SMSG_INSTANCE_RESET(c) => c.write_encrypted_server(w, e),
            Self::SMSG_INSTANCE_RESET_FAILED(c) => c.write_encrypted_server(w, e),
            Self::SMSG_UPDATE_LAST_INSTANCE(c) => c.write_encrypted_server(w, e),
            Self::MSG_RAID_TARGET_UPDATE(c) => c.write_encrypted_server(w, e),
            Self::MSG_RAID_READY_CHECK(c) => c.write_encrypted_server(w, e),
            Self::SMSG_PET_ACTION_SOUND(c) => c.write_encrypted_server(w, e),
            Self::SMSG_PET_DISMISS_SOUND(c) => c.write_encrypted_server(w, e),
            Self::SMSG_GM_TICKET_STATUS_UPDATE(c) => c.write_encrypted_server(w, e),
            Self::MSG_SET_DUNGEON_DIFFICULTY(c) => c.write_encrypted_server(w, e),
            Self::SMSG_UPDATE_INSTANCE_OWNERSHIP(c) => c.write_encrypted_server(w, e),
            Self::SMSG_CHAT_PLAYER_AMBIGUOUS(c) => c.write_encrypted_server(w, e),
            Self::SMSG_SPELLINSTAKILLLOG(c) => c.write_encrypted_server(w, e),
            Self::SMSG_SPELL_UPDATE_CHAIN_TARGETS(c) => c.write_encrypted_server(w, e),
            Self::SMSG_SPELLSTEALLOG(c) => c.write_encrypted_server(w, e),
            Self::SMSG_DEFENSE_MESSAGE(c) => c.write_encrypted_server(w, e),
            Self::SMSG_INSTANCE_DIFFICULTY(c) => c.write_encrypted_server(w, e),
            Self::SMSG_MOTD(c) => c.write_encrypted_server(w, e),
            Self::SMSG_MOVE_SET_CAN_FLY(c) => c.write_encrypted_server(w, e),
            Self::SMSG_MOVE_UNSET_CAN_FLY(c) => c.write_encrypted_server(w, e),
            Self::SMSG_ARENA_TEAM_COMMAND_RESULT(c) => c.write_encrypted_server(w, e),
            Self::SMSG_ARENA_TEAM_QUERY_RESPONSE(c) => c.write_encrypted_server(w, e),
            Self::SMSG_ARENA_TEAM_ROSTER(c) => c.write_encrypted_server(w, e),
            Self::SMSG_ARENA_TEAM_INVITE(c) => c.write_encrypted_server(w, e),
            Self::SMSG_ARENA_TEAM_EVENT(c) => c.write_encrypted_server(w, e),
            Self::SMSG_ARENA_TEAM_STATS(c) => c.write_encrypted_server(w, e),
            Self::SMSG_UPDATE_LFG_LIST(c) => c.write_encrypted_server(w, e),
            Self::SMSG_LFG_PROPOSAL_UPDATE(c) => c.write_encrypted_server(w, e),
            Self::SMSG_LFG_ROLE_CHECK_UPDATE(c) => c.write_encrypted_server(w, e),
            Self::SMSG_LFG_JOIN_RESULT(c) => c.write_encrypted_server(w, e),
            Self::SMSG_LFG_QUEUE_STATUS(c) => c.write_encrypted_server(w, e),
            Self::SMSG_LFG_UPDATE_PLAYER(c) => c.write_encrypted_server(w, e),
            Self::SMSG_LFG_UPDATE_PARTY(c) => c.write_encrypted_server(w, e),
            Self::SMSG_LFG_UPDATE_SEARCH(c) => c.write_encrypted_server(w, e),
            Self::SMSG_LFG_BOOT_PROPOSAL_UPDATE(c) => c.write_encrypted_server(w, e),
            Self::SMSG_LFG_PLAYER_INFO(c) => c.write_encrypted_server(w, e),
            Self::SMSG_LFG_PARTY_INFO(c) => c.write_encrypted_server(w, e),
            Self::SMSG_TITLE_EARNED(c) => c.write_encrypted_server(w, e),
            Self::SMSG_ARENA_ERROR(c) => c.write_encrypted_server(w, e),
            Self::MSG_INSPECT_ARENA_TEAMS(c) => c.write_encrypted_server(w, e),
            Self::SMSG_DEATH_RELEASE_LOC(c) => c.write_encrypted_server(w, e),
            Self::SMSG_FORCED_DEATH_UPDATE => SMSG_FORCED_DEATH_UPDATE{}.write_encrypted_server(w, e),
            Self::MSG_MOVE_SET_FLIGHT_SPEED(c) => c.write_encrypted_server(w, e),
            Self::SMSG_FORCE_FLIGHT_SPEED_CHANGE(c) => c.write_encrypted_server(w, e),
            Self::SMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE(c) => c.write_encrypted_server(w, e),
            Self::SMSG_SPLINE_SET_FLIGHT_SPEED(c) => c.write_encrypted_server(w, e),
            Self::SMSG_SPLINE_SET_FLIGHT_BACK_SPEED(c) => c.write_encrypted_server(w, e),
            Self::SMSG_FLIGHT_SPLINE_SYNC(c) => c.write_encrypted_server(w, e),
            Self::SMSG_REALM_SPLIT(c) => c.write_encrypted_server(w, e),
            Self::SMSG_TIME_SYNC_REQ(c) => c.write_encrypted_server(w, e),
            Self::SMSG_RESET_FAILED_NOTIFY(c) => c.write_encrypted_server(w, e),
            Self::SMSG_LFG_DISABLED => SMSG_LFG_DISABLED{}.write_encrypted_server(w, e),
            Self::SMSG_UPDATE_COMBO_POINTS(c) => c.write_encrypted_server(w, e),
            Self::SMSG_DISMOUNT(c) => c.write_encrypted_server(w, e),
            Self::MSG_MOVE_UPDATE_CAN_FLY(c) => c.write_encrypted_server(w, e),
            Self::MSG_RAID_READY_CHECK_CONFIRM(c) => c.write_encrypted_server(w, e),
            Self::SMSG_GM_MESSAGECHAT(c) => c.write_encrypted_server(w, e),
            Self::SMSG_CLEAR_TARGET(c) => c.write_encrypted_server(w, e),
            Self::SMSG_CROSSED_INEBRIATION_THRESHOLD(c) => c.write_encrypted_server(w, e),
            Self::SMSG_KICK_REASON(c) => c.write_encrypted_server(w, e),
            Self::SMSG_COMPLAIN_RESULT(c) => c.write_encrypted_server(w, e),
            Self::SMSG_FEATURE_SYSTEM_STATUS(c) => c.write_encrypted_server(w, e),
            Self::SMSG_CHANNEL_MEMBER_COUNT(c) => c.write_encrypted_server(w, e),
            Self::SMSG_GUILD_BANK_LIST(c) => c.write_encrypted_server(w, e),
            Self::MSG_GUILD_BANK_LOG_QUERY(c) => c.write_encrypted_server(w, e),
            Self::SMSG_USERLIST_ADD(c) => c.write_encrypted_server(w, e),
            Self::SMSG_USERLIST_REMOVE(c) => c.write_encrypted_server(w, e),
            Self::SMSG_USERLIST_UPDATE(c) => c.write_encrypted_server(w, e),
            Self::SMSG_INSPECT_TALENT(c) => c.write_encrypted_server(w, e),
            Self::SMSG_LOOT_LIST(c) => c.write_encrypted_server(w, e),
            Self::MSG_GUILD_PERMISSIONS(c) => c.write_encrypted_server(w, e),
            Self::MSG_GUILD_BANK_MONEY_WITHDRAWN(c) => c.write_encrypted_server(w, e),
            Self::MSG_GUILD_EVENT_LOG_QUERY(c) => c.write_encrypted_server(w, e),
            Self::SMSG_MIRRORIMAGE_DATA(c) => c.write_encrypted_server(w, e),
            Self::MSG_QUERY_GUILD_BANK_TEXT(c) => c.write_encrypted_server(w, e),
            Self::SMSG_OVERRIDE_LIGHT(c) => c.write_encrypted_server(w, e),
            Self::SMSG_TOTEM_CREATED(c) => c.write_encrypted_server(w, e),
            Self::SMSG_QUESTGIVER_STATUS_MULTIPLE(c) => c.write_encrypted_server(w, e),
            Self::SMSG_SET_PLAYER_DECLINED_NAMES_RESULT(c) => c.write_encrypted_server(w, e),
            Self::SMSG_SEND_UNLEARN_SPELLS(c) => c.write_encrypted_server(w, e),
            Self::SMSG_PROPOSE_LEVEL_GRANT(c) => c.write_encrypted_server(w, e),
            Self::SMSG_REFER_A_FRIEND_FAILURE(c) => c.write_encrypted_server(w, e),
            Self::SMSG_SPLINE_MOVE_SET_FLYING(c) => c.write_encrypted_server(w, e),
            Self::SMSG_SPLINE_MOVE_UNSET_FLYING(c) => c.write_encrypted_server(w, e),
            Self::SMSG_ENABLE_BARBER_SHOP => SMSG_ENABLE_BARBER_SHOP{}.write_encrypted_server(w, e),
            Self::SMSG_BARBER_SHOP_RESULT(c) => c.write_encrypted_server(w, e),
            Self::SMSG_CALENDAR_SEND_CALENDAR(c) => c.write_encrypted_server(w, e),
            Self::SMSG_CALENDAR_SEND_EVENT(c) => c.write_encrypted_server(w, e),
            Self::SMSG_CALENDAR_FILTER_GUILD(c) => c.write_encrypted_server(w, e),
            Self::SMSG_CALENDAR_ARENA_TEAM(c) => c.write_encrypted_server(w, e),
            Self::SMSG_CALENDAR_EVENT_INVITE(c) => c.write_encrypted_server(w, e),
            Self::SMSG_CALENDAR_EVENT_INVITE_REMOVED(c) => c.write_encrypted_server(w, e),
            Self::SMSG_CALENDAR_EVENT_STATUS(c) => c.write_encrypted_server(w, e),
            Self::SMSG_CALENDAR_COMMAND_RESULT(c) => c.write_encrypted_server(w, e),
            Self::SMSG_CALENDAR_RAID_LOCKOUT_ADDED(c) => c.write_encrypted_server(w, e),
            Self::SMSG_CALENDAR_RAID_LOCKOUT_REMOVED(c) => c.write_encrypted_server(w, e),
            Self::SMSG_CALENDAR_EVENT_INVITE_ALERT(c) => c.write_encrypted_server(w, e),
            Self::SMSG_CALENDAR_EVENT_INVITE_REMOVED_ALERT(c) => c.write_encrypted_server(w, e),
            Self::SMSG_CALENDAR_EVENT_REMOVED_ALERT(c) => c.write_encrypted_server(w, e),
            Self::SMSG_CALENDAR_EVENT_UPDATED_ALERT(c) => c.write_encrypted_server(w, e),
            Self::SMSG_CALENDAR_EVENT_MODERATOR_STATUS_ALERT(c) => c.write_encrypted_server(w, e),
            Self::SMSG_CALENDAR_SEND_NUM_PENDING(c) => c.write_encrypted_server(w, e),
            Self::MSG_MOVE_SET_PITCH_RATE(c) => c.write_encrypted_server(w, e),
            Self::SMSG_FORCE_PITCH_RATE_CHANGE(c) => c.write_encrypted_server(w, e),
            Self::SMSG_CALENDAR_EVENT_INVITE_NOTES(c) => c.write_encrypted_server(w, e),
            Self::SMSG_CALENDAR_EVENT_INVITE_NOTES_ALERT(c) => c.write_encrypted_server(w, e),
            Self::SMSG_UPDATE_ACCOUNT_DATA_COMPLETE(c) => c.write_encrypted_server(w, e),
            Self::SMSG_TRIGGER_MOVIE(c) => c.write_encrypted_server(w, e),
            Self::SMSG_ACHIEVEMENT_EARNED(c) => c.write_encrypted_server(w, e),
            Self::SMSG_CRITERIA_UPDATE(c) => c.write_encrypted_server(w, e),
            Self::SMSG_RESPOND_INSPECT_ACHIEVEMENTS(c) => c.write_encrypted_server(w, e),
            Self::SMSG_QUESTUPDATE_ADD_PVP_KILL(c) => c.write_encrypted_server(w, e),
            Self::SMSG_CALENDAR_RAID_LOCKOUT_UPDATED(c) => c.write_encrypted_server(w, e),
            Self::SMSG_CHAR_CUSTOMIZE(c) => c.write_encrypted_server(w, e),
            Self::SMSG_SET_PHASE_SHIFT(c) => c.write_encrypted_server(w, e),
            Self::SMSG_ALL_ACHIEVEMENT_DATA(c) => c.write_encrypted_server(w, e),
            Self::SMSG_POWER_UPDATE(c) => c.write_encrypted_server(w, e),
            Self::SMSG_HIGHEST_THREAT_UPDATE(c) => c.write_encrypted_server(w, e),
            Self::SMSG_THREAT_UPDATE(c) => c.write_encrypted_server(w, e),
            Self::SMSG_THREAT_REMOVE(c) => c.write_encrypted_server(w, e),
            Self::SMSG_THREAT_CLEAR(c) => c.write_encrypted_server(w, e),
            Self::SMSG_CONVERT_RUNE(c) => c.write_encrypted_server(w, e),
            Self::SMSG_RESYNC_RUNES(c) => c.write_encrypted_server(w, e),
            Self::SMSG_ADD_RUNE_POWER(c) => c.write_encrypted_server(w, e),
            Self::SMSG_AUCTION_LIST_PENDING_SALES(c) => c.write_encrypted_server(w, e),
            Self::SMSG_MODIFY_COOLDOWN(c) => c.write_encrypted_server(w, e),
            Self::SMSG_PET_UPDATE_COMBO_POINTS(c) => c.write_encrypted_server(w, e),
            Self::SMSG_PRE_RESURRECT(c) => c.write_encrypted_server(w, e),
            Self::SMSG_AURA_UPDATE_ALL(c) => c.write_encrypted_server(w, e),
            Self::SMSG_AURA_UPDATE(c) => c.write_encrypted_server(w, e),
            Self::SMSG_SERVER_FIRST_ACHIEVEMENT(c) => c.write_encrypted_server(w, e),
            Self::SMSG_PET_LEARNED_SPELL(c) => c.write_encrypted_server(w, e),
            Self::SMSG_PET_UNLEARNED_SPELL(c) => c.write_encrypted_server(w, e),
            Self::SMSG_ON_CANCEL_EXPECTED_RIDE_VEHICLE_AURA => SMSG_ON_CANCEL_EXPECTED_RIDE_VEHICLE_AURA{}.write_encrypted_server(w, e),
            Self::SMSG_CRITERIA_DELETED(c) => c.write_encrypted_server(w, e),
            Self::SMSG_ACHIEVEMENT_DELETED(c) => c.write_encrypted_server(w, e),
            Self::SMSG_BATTLEGROUND_INFO_THROTTLED => SMSG_BATTLEGROUND_INFO_THROTTLED{}.write_encrypted_server(w, e),
            Self::SMSG_PLAYER_VEHICLE_DATA(c) => c.write_encrypted_server(w, e),
            Self::SMSG_PET_GUIDS(c) => c.write_encrypted_server(w, e),
            Self::SMSG_CLIENTCACHE_VERSION(c) => c.write_encrypted_server(w, e),
            Self::SMSG_ITEM_REFUND_INFO_RESPONSE(c) => c.write_encrypted_server(w, e),
            Self::SMSG_ITEM_REFUND_RESULT(c) => c.write_encrypted_server(w, e),
            Self::SMSG_CORPSE_MAP_POSITION_QUERY_RESPONSE(c) => c.write_encrypted_server(w, e),
            Self::SMSG_CALENDAR_CLEAR_PENDING_ACTION => SMSG_CALENDAR_CLEAR_PENDING_ACTION{}.write_encrypted_server(w, e),
            Self::SMSG_EQUIPMENT_SET_LIST(c) => c.write_encrypted_server(w, e),
            Self::SMSG_SET_PROJECTILE_POSITION(c) => c.write_encrypted_server(w, e),
            Self::SMSG_TALENTS_INFO(c) => c.write_encrypted_server(w, e),
            Self::SMSG_ARENA_UNIT_DESTROYED(c) => c.write_encrypted_server(w, e),
            Self::SMSG_ARENA_TEAM_CHANGE_FAILED_QUEUED(c) => c.write_encrypted_server(w, e),
            Self::SMSG_MOVE_GRAVITY_DISABLE(c) => c.write_encrypted_server(w, e),
            Self::SMSG_MOVE_GRAVITY_ENABLE(c) => c.write_encrypted_server(w, e),
            Self::MSG_MOVE_GRAVITY_CHNG(c) => c.write_encrypted_server(w, e),
            Self::SMSG_SPLINE_MOVE_GRAVITY_DISABLE(c) => c.write_encrypted_server(w, e),
            Self::SMSG_SPLINE_MOVE_GRAVITY_ENABLE(c) => c.write_encrypted_server(w, e),
            Self::SMSG_EQUIPMENT_SET_USE_RESULT(c) => c.write_encrypted_server(w, e),
            Self::SMSG_CHAR_FACTION_CHANGE(c) => c.write_encrypted_server(w, e),
            Self::SMSG_BATTLEFIELD_MGR_ENTRY_INVITE(c) => c.write_encrypted_server(w, e),
            Self::SMSG_BATTLEFIELD_MGR_ENTERED(c) => c.write_encrypted_server(w, e),
            Self::SMSG_BATTLEFIELD_MGR_QUEUE_INVITE(c) => c.write_encrypted_server(w, e),
            Self::SMSG_BATTLEFIELD_MGR_QUEUE_REQUEST_RESPONSE(c) => c.write_encrypted_server(w, e),
            Self::SMSG_BATTLEFIELD_MGR_EJECT_PENDING(c) => c.write_encrypted_server(w, e),
            Self::SMSG_BATTLEFIELD_MGR_EJECTED(c) => c.write_encrypted_server(w, e),
            Self::SMSG_BATTLEFIELD_MGR_STATE_CHANGE(c) => c.write_encrypted_server(w, e),
            Self::MSG_SET_RAID_DIFFICULTY(c) => c.write_encrypted_server(w, e),
            Self::SMSG_TOGGLE_XP_GAIN => SMSG_TOGGLE_XP_GAIN{}.write_encrypted_server(w, e),
            Self::SMSG_GMRESPONSE_DB_ERROR => SMSG_GMRESPONSE_DB_ERROR{}.write_encrypted_server(w, e),
            Self::SMSG_GMRESPONSE_RECEIVED(c) => c.write_encrypted_server(w, e),
            Self::SMSG_GMRESPONSE_STATUS_UPDATE(c) => c.write_encrypted_server(w, e),
            Self::SMSG_WORLD_STATE_UI_TIMER_UPDATE(c) => c.write_encrypted_server(w, e),
            Self::SMSG_TALENTS_INVOLUNTARILY_RESET(c) => c.write_encrypted_server(w, e),
            Self::SMSG_QUERY_QUESTS_COMPLETED_RESPONSE(c) => c.write_encrypted_server(w, e),
            Self::SMSG_CORPSE_NOT_IN_INSTANCE => SMSG_CORPSE_NOT_IN_INSTANCE{}.write_encrypted_server(w, e),
            Self::SMSG_CAMERA_SHAKE(c) => c.write_encrypted_server(w, e),
            Self::SMSG_SOCKET_GEMS_RESULT(c) => c.write_encrypted_server(w, e),
            Self::SMSG_REDIRECT_CLIENT(c) => c.write_encrypted_server(w, e),
            Self::SMSG_MOVE_SET_COLLISION_HGT(c) => c.write_encrypted_server(w, e),
            Self::SMSG_MULTIPLE_MOVES(c) => c.write_encrypted_server(w, e),
        }
    }

    #[cfg(feature = "sync")]
    pub fn write_unencrypted_server<W: std::io::Write>(&self, mut w: W) -> Result<(), std::io::Error> {
        match self {
            Self::MSG_MOVE_START_FORWARD(c) => c.write_unencrypted_server(w),
            Self::MSG_MOVE_START_BACKWARD(c) => c.write_unencrypted_server(w),
            Self::MSG_MOVE_STOP(c) => c.write_unencrypted_server(w),
            Self::MSG_MOVE_START_STRAFE_LEFT(c) => c.write_unencrypted_server(w),
            Self::MSG_MOVE_START_STRAFE_RIGHT(c) => c.write_unencrypted_server(w),
            Self::MSG_MOVE_STOP_STRAFE(c) => c.write_unencrypted_server(w),
            Self::MSG_MOVE_JUMP(c) => c.write_unencrypted_server(w),
            Self::MSG_MOVE_START_TURN_LEFT(c) => c.write_unencrypted_server(w),
            Self::MSG_MOVE_START_TURN_RIGHT(c) => c.write_unencrypted_server(w),
            Self::MSG_MOVE_STOP_TURN(c) => c.write_unencrypted_server(w),
            Self::MSG_MOVE_START_PITCH_UP(c) => c.write_unencrypted_server(w),
            Self::MSG_MOVE_START_PITCH_DOWN(c) => c.write_unencrypted_server(w),
            Self::MSG_MOVE_STOP_PITCH(c) => c.write_unencrypted_server(w),
            Self::MSG_MOVE_SET_RUN_MODE(c) => c.write_unencrypted_server(w),
            Self::MSG_MOVE_SET_WALK_MODE(c) => c.write_unencrypted_server(w),
            Self::MSG_MOVE_FALL_LAND(c) => c.write_unencrypted_server(w),
            Self::MSG_MOVE_START_SWIM(c) => c.write_unencrypted_server(w),
            Self::MSG_MOVE_STOP_SWIM(c) => c.write_unencrypted_server(w),
            Self::MSG_MOVE_SET_FACING(c) => c.write_unencrypted_server(w),
            Self::MSG_MOVE_SET_PITCH(c) => c.write_unencrypted_server(w),
            Self::MSG_MOVE_WORLDPORT_ACK => MSG_MOVE_WORLDPORT_ACK{}.write_unencrypted_server(w),
            Self::MSG_MOVE_HEARTBEAT(c) => c.write_unencrypted_server(w),
            Self::MSG_MOVE_HOVER(c) => c.write_unencrypted_server(w),
            Self::MSG_PETITION_DECLINE(c) => c.write_unencrypted_server(w),
            Self::MSG_TABARDVENDOR_ACTIVATE(c) => c.write_unencrypted_server(w),
            Self::MSG_QUEST_PUSH_RESULT(c) => c.write_unencrypted_server(w),
            Self::MSG_MOVE_WATER_WALK(c) => c.write_unencrypted_server(w),
            Self::MSG_PETITION_RENAME(c) => c.write_unencrypted_server(w),
            Self::MSG_MOVE_START_ASCEND(c) => c.write_unencrypted_server(w),
            Self::MSG_MOVE_STOP_ASCEND(c) => c.write_unencrypted_server(w),
            Self::MSG_MOVE_SET_FLIGHT_BACK_SPEED(c) => c.write_unencrypted_server(w),
            Self::MSG_MOVE_START_DESCEND(c) => c.write_unencrypted_server(w),
            Self::CMSG_CALENDAR_GET_NUM_PENDING => CMSG_CALENDAR_GET_NUM_PENDING{}.write_unencrypted_server(w),
            Self::SMSG_CHAR_CREATE(c) => c.write_unencrypted_server(w),
            Self::SMSG_CHAR_ENUM(c) => c.write_unencrypted_server(w),
            Self::SMSG_CHAR_DELETE(c) => c.write_unencrypted_server(w),
            Self::SMSG_NEW_WORLD(c) => c.write_unencrypted_server(w),
            Self::SMSG_TRANSFER_PENDING(c) => c.write_unencrypted_server(w),
            Self::SMSG_TRANSFER_ABORTED(c) => c.write_unencrypted_server(w),
            Self::SMSG_CHARACTER_LOGIN_FAILED(c) => c.write_unencrypted_server(w),
            Self::SMSG_LOGIN_SETTIMESPEED(c) => c.write_unencrypted_server(w),
            Self::SMSG_LOGOUT_RESPONSE(c) => c.write_unencrypted_server(w),
            Self::SMSG_LOGOUT_COMPLETE => SMSG_LOGOUT_COMPLETE{}.write_unencrypted_server(w),
            Self::SMSG_LOGOUT_CANCEL_ACK => SMSG_LOGOUT_CANCEL_ACK{}.write_unencrypted_server(w),
            Self::SMSG_NAME_QUERY_RESPONSE(c) => c.write_unencrypted_server(w),
            Self::SMSG_PET_NAME_QUERY_RESPONSE(c) => c.write_unencrypted_server(w),
            Self::SMSG_GUILD_QUERY_RESPONSE(c) => c.write_unencrypted_server(w),
            Self::SMSG_ITEM_QUERY_SINGLE_RESPONSE(c) => c.write_unencrypted_server(w),
            Self::SMSG_PAGE_TEXT_QUERY_RESPONSE(c) => c.write_unencrypted_server(w),
            Self::SMSG_QUEST_QUERY_RESPONSE(c) => c.write_unencrypted_server(w),
            Self::SMSG_GAMEOBJECT_QUERY_RESPONSE(c) => c.write_unencrypted_server(w),
            Self::SMSG_CREATURE_QUERY_RESPONSE(c) => c.write_unencrypted_server(w),
            Self::SMSG_WHO(c) => c.write_unencrypted_server(w),
            Self::SMSG_WHOIS(c) => c.write_unencrypted_server(w),
            Self::SMSG_CONTACT_LIST(c) => c.write_unencrypted_server(w),
            Self::SMSG_FRIEND_STATUS(c) => c.write_unencrypted_server(w),
            Self::SMSG_GROUP_INVITE(c) => c.write_unencrypted_server(w),
            Self::SMSG_GROUP_DECLINE(c) => c.write_unencrypted_server(w),
            Self::SMSG_GROUP_UNINVITE => SMSG_GROUP_UNINVITE{}.write_unencrypted_server(w),
            Self::SMSG_GROUP_SET_LEADER(c) => c.write_unencrypted_server(w),
            Self::SMSG_GROUP_DESTROYED => SMSG_GROUP_DESTROYED{}.write_unencrypted_server(w),
            Self::SMSG_GROUP_LIST(c) => c.write_unencrypted_server(w),
            Self::SMSG_PARTY_MEMBER_STATS(c) => c.write_unencrypted_server(w),
            Self::SMSG_PARTY_COMMAND_RESULT(c) => c.write_unencrypted_server(w),
            Self::SMSG_GUILD_INVITE(c) => c.write_unencrypted_server(w),
            Self::SMSG_GUILD_DECLINE(c) => c.write_unencrypted_server(w),
            Self::SMSG_GUILD_INFO(c) => c.write_unencrypted_server(w),
            Self::SMSG_GUILD_ROSTER(c) => c.write_unencrypted_server(w),
            Self::SMSG_GUILD_EVENT(c) => c.write_unencrypted_server(w),
            Self::SMSG_GUILD_COMMAND_RESULT(c) => c.write_unencrypted_server(w),
            Self::SMSG_MESSAGECHAT(c) => c.write_unencrypted_server(w),
            Self::SMSG_CHANNEL_NOTIFY(c) => c.write_unencrypted_server(w),
            Self::SMSG_CHANNEL_LIST(c) => c.write_unencrypted_server(w),
            Self::SMSG_UPDATE_OBJECT(c) => c.write_unencrypted_server(w),
            Self::SMSG_DESTROY_OBJECT(c) => c.write_unencrypted_server(w),
            Self::SMSG_READ_ITEM_OK(c) => c.write_unencrypted_server(w),
            Self::SMSG_READ_ITEM_FAILED(c) => c.write_unencrypted_server(w),
            Self::SMSG_ITEM_COOLDOWN(c) => c.write_unencrypted_server(w),
            Self::SMSG_GAMEOBJECT_CUSTOM_ANIM(c) => c.write_unencrypted_server(w),
            Self::MSG_MOVE_TELEPORT_CHEAT(c) => c.write_unencrypted_server(w),
            Self::MSG_MOVE_TELEPORT_ACK(c) => c.write_unencrypted_server(w),
            Self::SMSG_MONSTER_MOVE(c) => c.write_unencrypted_server(w),
            Self::SMSG_MOVE_WATER_WALK(c) => c.write_unencrypted_server(w),
            Self::SMSG_MOVE_LAND_WALK(c) => c.write_unencrypted_server(w),
            Self::SMSG_FORCE_RUN_SPEED_CHANGE(c) => c.write_unencrypted_server(w),
            Self::SMSG_FORCE_RUN_BACK_SPEED_CHANGE(c) => c.write_unencrypted_server(w),
            Self::SMSG_FORCE_SWIM_SPEED_CHANGE(c) => c.write_unencrypted_server(w),
            Self::SMSG_FORCE_MOVE_ROOT(c) => c.write_unencrypted_server(w),
            Self::SMSG_FORCE_MOVE_UNROOT(c) => c.write_unencrypted_server(w),
            Self::MSG_MOVE_ROOT(c) => c.write_unencrypted_server(w),
            Self::MSG_MOVE_UNROOT(c) => c.write_unencrypted_server(w),
            Self::SMSG_MOVE_KNOCK_BACK(c) => c.write_unencrypted_server(w),
            Self::MSG_MOVE_KNOCK_BACK(c) => c.write_unencrypted_server(w),
            Self::SMSG_MOVE_FEATHER_FALL(c) => c.write_unencrypted_server(w),
            Self::SMSG_MOVE_NORMAL_FALL(c) => c.write_unencrypted_server(w),
            Self::SMSG_MOVE_SET_HOVER(c) => c.write_unencrypted_server(w),
            Self::SMSG_MOVE_UNSET_HOVER(c) => c.write_unencrypted_server(w),
            Self::SMSG_TRIGGER_CINEMATIC(c) => c.write_unencrypted_server(w),
            Self::SMSG_TUTORIAL_FLAGS(c) => c.write_unencrypted_server(w),
            Self::SMSG_EMOTE(c) => c.write_unencrypted_server(w),
            Self::SMSG_TEXT_EMOTE(c) => c.write_unencrypted_server(w),
            Self::SMSG_INVENTORY_CHANGE_FAILURE(c) => c.write_unencrypted_server(w),
            Self::SMSG_TRADE_STATUS(c) => c.write_unencrypted_server(w),
            Self::SMSG_TRADE_STATUS_EXTENDED(c) => c.write_unencrypted_server(w),
            Self::SMSG_INITIALIZE_FACTIONS(c) => c.write_unencrypted_server(w),
            Self::SMSG_SET_FACTION_VISIBLE(c) => c.write_unencrypted_server(w),
            Self::SMSG_SET_FACTION_STANDING(c) => c.write_unencrypted_server(w),
            Self::SMSG_SET_PROFICIENCY(c) => c.write_unencrypted_server(w),
            Self::SMSG_ACTION_BUTTONS(c) => c.write_unencrypted_server(w),
            Self::SMSG_INITIAL_SPELLS(c) => c.write_unencrypted_server(w),
            Self::SMSG_LEARNED_SPELL(c) => c.write_unencrypted_server(w),
            Self::SMSG_SUPERCEDED_SPELL(c) => c.write_unencrypted_server(w),
            Self::SMSG_CAST_FAILED(c) => c.write_unencrypted_server(w),
            Self::SMSG_SPELL_START(c) => c.write_unencrypted_server(w),
            Self::SMSG_SPELL_GO(c) => c.write_unencrypted_server(w),
            Self::SMSG_SPELL_FAILURE(c) => c.write_unencrypted_server(w),
            Self::SMSG_SPELL_COOLDOWN(c) => c.write_unencrypted_server(w),
            Self::SMSG_COOLDOWN_EVENT(c) => c.write_unencrypted_server(w),
            Self::SMSG_PET_CAST_FAILED(c) => c.write_unencrypted_server(w),
            Self::MSG_CHANNEL_START(c) => c.write_unencrypted_server(w),
            Self::MSG_CHANNEL_UPDATE(c) => c.write_unencrypted_server(w),
            Self::SMSG_AI_REACTION(c) => c.write_unencrypted_server(w),
            Self::SMSG_ATTACKSTART(c) => c.write_unencrypted_server(w),
            Self::SMSG_ATTACKSTOP(c) => c.write_unencrypted_server(w),
            Self::SMSG_ATTACKSWING_NOTINRANGE => SMSG_ATTACKSWING_NOTINRANGE{}.write_unencrypted_server(w),
            Self::SMSG_ATTACKSWING_BADFACING => SMSG_ATTACKSWING_BADFACING{}.write_unencrypted_server(w),
            Self::SMSG_INSTANCE_LOCK_WARNING_QUERY(c) => c.write_unencrypted_server(w),
            Self::SMSG_ATTACKSWING_DEADTARGET => SMSG_ATTACKSWING_DEADTARGET{}.write_unencrypted_server(w),
            Self::SMSG_ATTACKSWING_CANT_ATTACK => SMSG_ATTACKSWING_CANT_ATTACK{}.write_unencrypted_server(w),
            Self::SMSG_ATTACKERSTATEUPDATE(c) => c.write_unencrypted_server(w),
            Self::SMSG_CANCEL_COMBAT => SMSG_CANCEL_COMBAT{}.write_unencrypted_server(w),
            Self::SMSG_SPELLHEALLOG(c) => c.write_unencrypted_server(w),
            Self::SMSG_SPELLENERGIZELOG(c) => c.write_unencrypted_server(w),
            Self::SMSG_BREAK_TARGET(c) => c.write_unencrypted_server(w),
            Self::SMSG_BINDPOINTUPDATE(c) => c.write_unencrypted_server(w),
            Self::SMSG_PLAYERBOUND(c) => c.write_unencrypted_server(w),
            Self::SMSG_CLIENT_CONTROL_UPDATE(c) => c.write_unencrypted_server(w),
            Self::SMSG_RESURRECT_REQUEST(c) => c.write_unencrypted_server(w),
            Self::SMSG_LOOT_RESPONSE(c) => c.write_unencrypted_server(w),
            Self::SMSG_LOOT_RELEASE_RESPONSE(c) => c.write_unencrypted_server(w),
            Self::SMSG_LOOT_REMOVED(c) => c.write_unencrypted_server(w),
            Self::SMSG_LOOT_MONEY_NOTIFY(c) => c.write_unencrypted_server(w),
            Self::SMSG_LOOT_CLEAR_MONEY => SMSG_LOOT_CLEAR_MONEY{}.write_unencrypted_server(w),
            Self::SMSG_ITEM_PUSH_RESULT(c) => c.write_unencrypted_server(w),
            Self::SMSG_DUEL_REQUESTED(c) => c.write_unencrypted_server(w),
            Self::SMSG_DUEL_OUTOFBOUNDS => SMSG_DUEL_OUTOFBOUNDS{}.write_unencrypted_server(w),
            Self::SMSG_DUEL_INBOUNDS => SMSG_DUEL_INBOUNDS{}.write_unencrypted_server(w),
            Self::SMSG_DUEL_COMPLETE(c) => c.write_unencrypted_server(w),
            Self::SMSG_DUEL_WINNER(c) => c.write_unencrypted_server(w),
            Self::SMSG_MOUNTRESULT(c) => c.write_unencrypted_server(w),
            Self::SMSG_MOUNTSPECIAL_ANIM(c) => c.write_unencrypted_server(w),
            Self::SMSG_PET_TAME_FAILURE(c) => c.write_unencrypted_server(w),
            Self::SMSG_PET_NAME_INVALID(c) => c.write_unencrypted_server(w),
            Self::SMSG_PET_SPELLS(c) => c.write_unencrypted_server(w),
            Self::SMSG_PET_MODE(c) => c.write_unencrypted_server(w),
            Self::SMSG_GOSSIP_MESSAGE(c) => c.write_unencrypted_server(w),
            Self::SMSG_GOSSIP_COMPLETE => SMSG_GOSSIP_COMPLETE{}.write_unencrypted_server(w),
            Self::SMSG_NPC_TEXT_UPDATE(c) => c.write_unencrypted_server(w),
            Self::SMSG_QUESTGIVER_STATUS(c) => c.write_unencrypted_server(w),
            Self::SMSG_QUESTGIVER_QUEST_LIST(c) => c.write_unencrypted_server(w),
            Self::SMSG_QUESTGIVER_QUEST_DETAILS(c) => c.write_unencrypted_server(w),
            Self::SMSG_QUESTGIVER_REQUEST_ITEMS(c) => c.write_unencrypted_server(w),
            Self::SMSG_QUESTGIVER_OFFER_REWARD(c) => c.write_unencrypted_server(w),
            Self::SMSG_QUESTGIVER_QUEST_INVALID(c) => c.write_unencrypted_server(w),
            Self::SMSG_QUESTGIVER_QUEST_COMPLETE(c) => c.write_unencrypted_server(w),
            Self::SMSG_QUESTGIVER_QUEST_FAILED(c) => c.write_unencrypted_server(w),
            Self::SMSG_QUESTLOG_FULL => SMSG_QUESTLOG_FULL{}.write_unencrypted_server(w),
            Self::SMSG_QUESTUPDATE_FAILED(c) => c.write_unencrypted_server(w),
            Self::SMSG_QUESTUPDATE_FAILEDTIMER(c) => c.write_unencrypted_server(w),
            Self::SMSG_QUESTUPDATE_COMPLETE(c) => c.write_unencrypted_server(w),
            Self::SMSG_QUESTUPDATE_ADD_KILL(c) => c.write_unencrypted_server(w),
            Self::SMSG_QUESTUPDATE_ADD_ITEM(c) => c.write_unencrypted_server(w),
            Self::SMSG_QUEST_CONFIRM_ACCEPT(c) => c.write_unencrypted_server(w),
            Self::SMSG_LIST_INVENTORY(c) => c.write_unencrypted_server(w),
            Self::SMSG_SELL_ITEM(c) => c.write_unencrypted_server(w),
            Self::SMSG_BUY_ITEM(c) => c.write_unencrypted_server(w),
            Self::SMSG_BUY_FAILED(c) => c.write_unencrypted_server(w),
            Self::SMSG_SHOWTAXINODES(c) => c.write_unencrypted_server(w),
            Self::SMSG_TAXINODE_STATUS(c) => c.write_unencrypted_server(w),
            Self::SMSG_ACTIVATETAXIREPLY(c) => c.write_unencrypted_server(w),
            Self::SMSG_NEW_TAXI_PATH => SMSG_NEW_TAXI_PATH{}.write_unencrypted_server(w),
            Self::SMSG_TRAINER_LIST(c) => c.write_unencrypted_server(w),
            Self::SMSG_TRAINER_BUY_SUCCEEDED(c) => c.write_unencrypted_server(w),
            Self::SMSG_TRAINER_BUY_FAILED(c) => c.write_unencrypted_server(w),
            Self::SMSG_SHOW_BANK(c) => c.write_unencrypted_server(w),
            Self::SMSG_BUY_BANK_SLOT_RESULT(c) => c.write_unencrypted_server(w),
            Self::SMSG_PETITION_SHOWLIST(c) => c.write_unencrypted_server(w),
            Self::SMSG_PETITION_SHOW_SIGNATURES(c) => c.write_unencrypted_server(w),
            Self::SMSG_PETITION_SIGN_RESULTS(c) => c.write_unencrypted_server(w),
            Self::SMSG_TURN_IN_PETITION_RESULTS(c) => c.write_unencrypted_server(w),
            Self::SMSG_PETITION_QUERY_RESPONSE(c) => c.write_unencrypted_server(w),
            Self::SMSG_FISH_NOT_HOOKED => SMSG_FISH_NOT_HOOKED{}.write_unencrypted_server(w),
            Self::SMSG_FISH_ESCAPED => SMSG_FISH_ESCAPED{}.write_unencrypted_server(w),
            Self::SMSG_NOTIFICATION(c) => c.write_unencrypted_server(w),
            Self::SMSG_PLAYED_TIME(c) => c.write_unencrypted_server(w),
            Self::SMSG_QUERY_TIME_RESPONSE(c) => c.write_unencrypted_server(w),
            Self::SMSG_LOG_XPGAIN(c) => c.write_unencrypted_server(w),
            Self::SMSG_LEVELUP_INFO(c) => c.write_unencrypted_server(w),
            Self::MSG_MINIMAP_PING(c) => c.write_unencrypted_server(w),
            Self::SMSG_ENCHANTMENTLOG(c) => c.write_unencrypted_server(w),
            Self::SMSG_START_MIRROR_TIMER(c) => c.write_unencrypted_server(w),
            Self::SMSG_PAUSE_MIRROR_TIMER(c) => c.write_unencrypted_server(w),
            Self::SMSG_STOP_MIRROR_TIMER(c) => c.write_unencrypted_server(w),
            Self::SMSG_PONG(c) => c.write_unencrypted_server(w),
            Self::SMSG_CLEAR_COOLDOWN(c) => c.write_unencrypted_server(w),
            Self::SMSG_GAMEOBJECT_PAGETEXT(c) => c.write_unencrypted_server(w),
            Self::SMSG_SPELL_DELAYED(c) => c.write_unencrypted_server(w),
            Self::SMSG_QUEST_POI_QUERY_RESPONSE(c) => c.write_unencrypted_server(w),
            Self::SMSG_ITEM_TIME_UPDATE(c) => c.write_unencrypted_server(w),
            Self::SMSG_ITEM_ENCHANT_TIME_UPDATE(c) => c.write_unencrypted_server(w),
            Self::SMSG_AUTH_CHALLENGE(c) => c.write_unencrypted_server(w),
            Self::SMSG_AUTH_RESPONSE(c) => c.write_unencrypted_server(w),
            Self::MSG_SAVE_GUILD_EMBLEM(c) => c.write_unencrypted_server(w),
            Self::SMSG_PLAY_SPELL_VISUAL(c) => c.write_unencrypted_server(w),
            Self::SMSG_PARTYKILLLOG(c) => c.write_unencrypted_server(w),
            Self::SMSG_COMPRESSED_UPDATE_OBJECT(c) => c.write_unencrypted_server(w),
            Self::SMSG_PLAY_SPELL_IMPACT(c) => c.write_unencrypted_server(w),
            Self::SMSG_EXPLORATION_EXPERIENCE(c) => c.write_unencrypted_server(w),
            Self::MSG_RANDOM_ROLL(c) => c.write_unencrypted_server(w),
            Self::SMSG_ENVIRONMENTAL_DAMAGE_LOG(c) => c.write_unencrypted_server(w),
            Self::SMSG_LFG_PLAYER_REWARD(c) => c.write_unencrypted_server(w),
            Self::SMSG_LFG_TELEPORT_DENIED(c) => c.write_unencrypted_server(w),
            Self::SMSG_REMOVED_SPELL(c) => c.write_unencrypted_server(w),
            Self::SMSG_GMTICKET_CREATE(c) => c.write_unencrypted_server(w),
            Self::SMSG_GMTICKET_UPDATETEXT(c) => c.write_unencrypted_server(w),
            Self::SMSG_ACCOUNT_DATA_TIMES(c) => c.write_unencrypted_server(w),
            Self::SMSG_UPDATE_ACCOUNT_DATA(c) => c.write_unencrypted_server(w),
            Self::SMSG_GMTICKET_GETTICKET(c) => c.write_unencrypted_server(w),
            Self::SMSG_UPDATE_INSTANCE_ENCOUNTER_UNIT(c) => c.write_unencrypted_server(w),
            Self::SMSG_GAMEOBJECT_DESPAWN_ANIM(c) => c.write_unencrypted_server(w),
            Self::MSG_CORPSE_QUERY(c) => c.write_unencrypted_server(w),
            Self::SMSG_GMTICKET_DELETETICKET(c) => c.write_unencrypted_server(w),
            Self::SMSG_CHAT_WRONG_FACTION => SMSG_CHAT_WRONG_FACTION{}.write_unencrypted_server(w),
            Self::SMSG_GMTICKET_SYSTEMSTATUS(c) => c.write_unencrypted_server(w),
            Self::SMSG_QUEST_FORCE_REMOVE(c) => c.write_unencrypted_server(w),
            Self::SMSG_SPIRIT_HEALER_CONFIRM(c) => c.write_unencrypted_server(w),
            Self::SMSG_GOSSIP_POI(c) => c.write_unencrypted_server(w),
            Self::SMSG_LOGIN_VERIFY_WORLD(c) => c.write_unencrypted_server(w),
            Self::SMSG_SEND_MAIL_RESULT(c) => c.write_unencrypted_server(w),
            Self::SMSG_MAIL_LIST_RESULT(c) => c.write_unencrypted_server(w),
            Self::SMSG_BATTLEFIELD_LIST(c) => c.write_unencrypted_server(w),
            Self::SMSG_ITEM_TEXT_QUERY_RESPONSE(c) => c.write_unencrypted_server(w),
            Self::SMSG_SPELLLOGMISS(c) => c.write_unencrypted_server(w),
            Self::SMSG_SPELLLOGEXECUTE(c) => c.write_unencrypted_server(w),
            Self::SMSG_PERIODICAURALOG(c) => c.write_unencrypted_server(w),
            Self::SMSG_SPELLDAMAGESHIELD(c) => c.write_unencrypted_server(w),
            Self::SMSG_SPELLNONMELEEDAMAGELOG(c) => c.write_unencrypted_server(w),
            Self::SMSG_RESURRECT_FAILED(c) => c.write_unencrypted_server(w),
            Self::SMSG_ZONE_UNDER_ATTACK(c) => c.write_unencrypted_server(w),
            Self::MSG_AUCTION_HELLO(c) => c.write_unencrypted_server(w),
            Self::SMSG_AUCTION_COMMAND_RESULT(c) => c.write_unencrypted_server(w),
            Self::SMSG_AUCTION_LIST_RESULT(c) => c.write_unencrypted_server(w),
            Self::SMSG_AUCTION_OWNER_LIST_RESULT(c) => c.write_unencrypted_server(w),
            Self::SMSG_AUCTION_BIDDER_NOTIFICATION(c) => c.write_unencrypted_server(w),
            Self::SMSG_AUCTION_OWNER_NOTIFICATION(c) => c.write_unencrypted_server(w),
            Self::SMSG_PROCRESIST(c) => c.write_unencrypted_server(w),
            Self::SMSG_DISPEL_FAILED(c) => c.write_unencrypted_server(w),
            Self::SMSG_SPELLORDAMAGE_IMMUNE(c) => c.write_unencrypted_server(w),
            Self::SMSG_AUCTION_BIDDER_LIST_RESULT(c) => c.write_unencrypted_server(w),
            Self::SMSG_SET_FLAT_SPELL_MODIFIER(c) => c.write_unencrypted_server(w),
            Self::SMSG_SET_PCT_SPELL_MODIFIER(c) => c.write_unencrypted_server(w),
            Self::SMSG_CORPSE_RECLAIM_DELAY(c) => c.write_unencrypted_server(w),
            Self::MSG_LIST_STABLED_PETS(c) => c.write_unencrypted_server(w),
            Self::SMSG_STABLE_RESULT(c) => c.write_unencrypted_server(w),
            Self::SMSG_PLAY_MUSIC(c) => c.write_unencrypted_server(w),
            Self::SMSG_PLAY_OBJECT_SOUND(c) => c.write_unencrypted_server(w),
            Self::SMSG_SPELLDISPELLOG(c) => c.write_unencrypted_server(w),
            Self::MSG_QUERY_NEXT_MAIL_TIME(c) => c.write_unencrypted_server(w),
            Self::SMSG_RECEIVED_MAIL(c) => c.write_unencrypted_server(w),
            Self::SMSG_RAID_GROUP_ONLY(c) => c.write_unencrypted_server(w),
            Self::SMSG_PVP_CREDIT(c) => c.write_unencrypted_server(w),
            Self::SMSG_AUCTION_REMOVED_NOTIFICATION(c) => c.write_unencrypted_server(w),
            Self::SMSG_SERVER_MESSAGE(c) => c.write_unencrypted_server(w),
            Self::SMSG_LFG_OFFER_CONTINUE(c) => c.write_unencrypted_server(w),
            Self::SMSG_SHOW_MAILBOX(c) => c.write_unencrypted_server(w),
            Self::SMSG_CANCEL_AUTO_REPEAT(c) => c.write_unencrypted_server(w),
            Self::SMSG_STANDSTATE_UPDATE(c) => c.write_unencrypted_server(w),
            Self::SMSG_LOOT_ALL_PASSED(c) => c.write_unencrypted_server(w),
            Self::SMSG_LOOT_ROLL_WON(c) => c.write_unencrypted_server(w),
            Self::SMSG_LOOT_START_ROLL(c) => c.write_unencrypted_server(w),
            Self::SMSG_LOOT_ROLL(c) => c.write_unencrypted_server(w),
            Self::SMSG_LOOT_MASTER_LIST(c) => c.write_unencrypted_server(w),
            Self::SMSG_SET_FORCED_REACTIONS(c) => c.write_unencrypted_server(w),
            Self::SMSG_SPELL_FAILED_OTHER(c) => c.write_unencrypted_server(w),
            Self::SMSG_CHAT_PLAYER_NOT_FOUND(c) => c.write_unencrypted_server(w),
            Self::MSG_TALENT_WIPE_CONFIRM(c) => c.write_unencrypted_server(w),
            Self::SMSG_SUMMON_REQUEST(c) => c.write_unencrypted_server(w),
            Self::SMSG_MONSTER_MOVE_TRANSPORT(c) => c.write_unencrypted_server(w),
            Self::SMSG_PET_BROKEN => SMSG_PET_BROKEN{}.write_unencrypted_server(w),
            Self::MSG_MOVE_FEATHER_FALL(c) => c.write_unencrypted_server(w),
            Self::SMSG_FEIGN_DEATH_RESISTED => SMSG_FEIGN_DEATH_RESISTED{}.write_unencrypted_server(w),
            Self::SMSG_DUEL_COUNTDOWN(c) => c.write_unencrypted_server(w),
            Self::SMSG_AREA_TRIGGER_MESSAGE(c) => c.write_unencrypted_server(w),
            Self::SMSG_LFG_ROLE_CHOSEN(c) => c.write_unencrypted_server(w),
            Self::SMSG_PLAYER_SKINNED(c) => c.write_unencrypted_server(w),
            Self::SMSG_DURABILITY_DAMAGE_DEATH => SMSG_DURABILITY_DAMAGE_DEATH{}.write_unencrypted_server(w),
            Self::SMSG_INIT_WORLD_STATES(c) => c.write_unencrypted_server(w),
            Self::SMSG_UPDATE_WORLD_STATE(c) => c.write_unencrypted_server(w),
            Self::SMSG_ITEM_NAME_QUERY_RESPONSE(c) => c.write_unencrypted_server(w),
            Self::SMSG_PET_ACTION_FEEDBACK(c) => c.write_unencrypted_server(w),
            Self::SMSG_CHAR_RENAME(c) => c.write_unencrypted_server(w),
            Self::SMSG_INSTANCE_SAVE_CREATED(c) => c.write_unencrypted_server(w),
            Self::SMSG_RAID_INSTANCE_INFO(c) => c.write_unencrypted_server(w),
            Self::SMSG_PLAY_SOUND(c) => c.write_unencrypted_server(w),
            Self::SMSG_BATTLEFIELD_STATUS(c) => c.write_unencrypted_server(w),
            Self::MSG_INSPECT_HONOR_STATS(c) => c.write_unencrypted_server(w),
            Self::SMSG_FORCE_WALK_SPEED_CHANGE(c) => c.write_unencrypted_server(w),
            Self::SMSG_FORCE_SWIM_BACK_SPEED_CHANGE(c) => c.write_unencrypted_server(w),
            Self::SMSG_FORCE_TURN_RATE_CHANGE(c) => c.write_unencrypted_server(w),
            Self::SMSG_AREA_SPIRIT_HEALER_TIME(c) => c.write_unencrypted_server(w),
            Self::SMSG_WARDEN_DATA(c) => c.write_unencrypted_server(w),
            Self::SMSG_GROUP_JOINED_BATTLEGROUND(c) => c.write_unencrypted_server(w),
            Self::MSG_BATTLEGROUND_PLAYER_POSITIONS(c) => c.write_unencrypted_server(w),
            Self::SMSG_BINDER_CONFIRM(c) => c.write_unencrypted_server(w),
            Self::SMSG_BATTLEGROUND_PLAYER_JOINED(c) => c.write_unencrypted_server(w),
            Self::SMSG_BATTLEGROUND_PLAYER_LEFT(c) => c.write_unencrypted_server(w),
            Self::SMSG_ADDON_INFO(c) => c.write_unencrypted_server(w),
            Self::SMSG_PET_UNLEARN_CONFIRM(c) => c.write_unencrypted_server(w),
            Self::SMSG_PARTY_MEMBER_STATS_FULL(c) => c.write_unencrypted_server(w),
            Self::SMSG_WEATHER(c) => c.write_unencrypted_server(w),
            Self::SMSG_RAID_INSTANCE_MESSAGE(c) => c.write_unencrypted_server(w),
            Self::SMSG_COMPRESSED_MOVES(c) => c.write_unencrypted_server(w),
            Self::SMSG_CHAT_RESTRICTED(c) => c.write_unencrypted_server(w),
            Self::SMSG_SPLINE_SET_RUN_SPEED(c) => c.write_unencrypted_server(w),
            Self::SMSG_SPLINE_SET_RUN_BACK_SPEED(c) => c.write_unencrypted_server(w),
            Self::SMSG_SPLINE_SET_SWIM_SPEED(c) => c.write_unencrypted_server(w),
            Self::SMSG_SPLINE_SET_WALK_SPEED(c) => c.write_unencrypted_server(w),
            Self::SMSG_SPLINE_SET_SWIM_BACK_SPEED(c) => c.write_unencrypted_server(w),
            Self::SMSG_SPLINE_SET_TURN_RATE(c) => c.write_unencrypted_server(w),
            Self::SMSG_SPLINE_MOVE_UNROOT(c) => c.write_unencrypted_server(w),
            Self::SMSG_SPLINE_MOVE_FEATHER_FALL(c) => c.write_unencrypted_server(w),
            Self::SMSG_SPLINE_MOVE_NORMAL_FALL(c) => c.write_unencrypted_server(w),
            Self::SMSG_SPLINE_MOVE_SET_HOVER(c) => c.write_unencrypted_server(w),
            Self::SMSG_SPLINE_MOVE_UNSET_HOVER(c) => c.write_unencrypted_server(w),
            Self::SMSG_SPLINE_MOVE_WATER_WALK(c) => c.write_unencrypted_server(w),
            Self::SMSG_SPLINE_MOVE_LAND_WALK(c) => c.write_unencrypted_server(w),
            Self::SMSG_SPLINE_MOVE_START_SWIM(c) => c.write_unencrypted_server(w),
            Self::SMSG_SPLINE_MOVE_STOP_SWIM(c) => c.write_unencrypted_server(w),
            Self::SMSG_SPLINE_MOVE_SET_RUN_MODE(c) => c.write_unencrypted_server(w),
            Self::SMSG_SPLINE_MOVE_SET_WALK_MODE(c) => c.write_unencrypted_server(w),
            Self::MSG_MOVE_TIME_SKIPPED(c) => c.write_unencrypted_server(w),
            Self::SMSG_SPLINE_MOVE_ROOT(c) => c.write_unencrypted_server(w),
            Self::SMSG_INVALIDATE_PLAYER(c) => c.write_unencrypted_server(w),
            Self::SMSG_INSTANCE_RESET(c) => c.write_unencrypted_server(w),
            Self::SMSG_INSTANCE_RESET_FAILED(c) => c.write_unencrypted_server(w),
            Self::SMSG_UPDATE_LAST_INSTANCE(c) => c.write_unencrypted_server(w),
            Self::MSG_RAID_TARGET_UPDATE(c) => c.write_unencrypted_server(w),
            Self::MSG_RAID_READY_CHECK(c) => c.write_unencrypted_server(w),
            Self::SMSG_PET_ACTION_SOUND(c) => c.write_unencrypted_server(w),
            Self::SMSG_PET_DISMISS_SOUND(c) => c.write_unencrypted_server(w),
            Self::SMSG_GM_TICKET_STATUS_UPDATE(c) => c.write_unencrypted_server(w),
            Self::MSG_SET_DUNGEON_DIFFICULTY(c) => c.write_unencrypted_server(w),
            Self::SMSG_UPDATE_INSTANCE_OWNERSHIP(c) => c.write_unencrypted_server(w),
            Self::SMSG_CHAT_PLAYER_AMBIGUOUS(c) => c.write_unencrypted_server(w),
            Self::SMSG_SPELLINSTAKILLLOG(c) => c.write_unencrypted_server(w),
            Self::SMSG_SPELL_UPDATE_CHAIN_TARGETS(c) => c.write_unencrypted_server(w),
            Self::SMSG_SPELLSTEALLOG(c) => c.write_unencrypted_server(w),
            Self::SMSG_DEFENSE_MESSAGE(c) => c.write_unencrypted_server(w),
            Self::SMSG_INSTANCE_DIFFICULTY(c) => c.write_unencrypted_server(w),
            Self::SMSG_MOTD(c) => c.write_unencrypted_server(w),
            Self::SMSG_MOVE_SET_CAN_FLY(c) => c.write_unencrypted_server(w),
            Self::SMSG_MOVE_UNSET_CAN_FLY(c) => c.write_unencrypted_server(w),
            Self::SMSG_ARENA_TEAM_COMMAND_RESULT(c) => c.write_unencrypted_server(w),
            Self::SMSG_ARENA_TEAM_QUERY_RESPONSE(c) => c.write_unencrypted_server(w),
            Self::SMSG_ARENA_TEAM_ROSTER(c) => c.write_unencrypted_server(w),
            Self::SMSG_ARENA_TEAM_INVITE(c) => c.write_unencrypted_server(w),
            Self::SMSG_ARENA_TEAM_EVENT(c) => c.write_unencrypted_server(w),
            Self::SMSG_ARENA_TEAM_STATS(c) => c.write_unencrypted_server(w),
            Self::SMSG_UPDATE_LFG_LIST(c) => c.write_unencrypted_server(w),
            Self::SMSG_LFG_PROPOSAL_UPDATE(c) => c.write_unencrypted_server(w),
            Self::SMSG_LFG_ROLE_CHECK_UPDATE(c) => c.write_unencrypted_server(w),
            Self::SMSG_LFG_JOIN_RESULT(c) => c.write_unencrypted_server(w),
            Self::SMSG_LFG_QUEUE_STATUS(c) => c.write_unencrypted_server(w),
            Self::SMSG_LFG_UPDATE_PLAYER(c) => c.write_unencrypted_server(w),
            Self::SMSG_LFG_UPDATE_PARTY(c) => c.write_unencrypted_server(w),
            Self::SMSG_LFG_UPDATE_SEARCH(c) => c.write_unencrypted_server(w),
            Self::SMSG_LFG_BOOT_PROPOSAL_UPDATE(c) => c.write_unencrypted_server(w),
            Self::SMSG_LFG_PLAYER_INFO(c) => c.write_unencrypted_server(w),
            Self::SMSG_LFG_PARTY_INFO(c) => c.write_unencrypted_server(w),
            Self::SMSG_TITLE_EARNED(c) => c.write_unencrypted_server(w),
            Self::SMSG_ARENA_ERROR(c) => c.write_unencrypted_server(w),
            Self::MSG_INSPECT_ARENA_TEAMS(c) => c.write_unencrypted_server(w),
            Self::SMSG_DEATH_RELEASE_LOC(c) => c.write_unencrypted_server(w),
            Self::SMSG_FORCED_DEATH_UPDATE => SMSG_FORCED_DEATH_UPDATE{}.write_unencrypted_server(w),
            Self::MSG_MOVE_SET_FLIGHT_SPEED(c) => c.write_unencrypted_server(w),
            Self::SMSG_FORCE_FLIGHT_SPEED_CHANGE(c) => c.write_unencrypted_server(w),
            Self::SMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE(c) => c.write_unencrypted_server(w),
            Self::SMSG_SPLINE_SET_FLIGHT_SPEED(c) => c.write_unencrypted_server(w),
            Self::SMSG_SPLINE_SET_FLIGHT_BACK_SPEED(c) => c.write_unencrypted_server(w),
            Self::SMSG_FLIGHT_SPLINE_SYNC(c) => c.write_unencrypted_server(w),
            Self::SMSG_REALM_SPLIT(c) => c.write_unencrypted_server(w),
            Self::SMSG_TIME_SYNC_REQ(c) => c.write_unencrypted_server(w),
            Self::SMSG_RESET_FAILED_NOTIFY(c) => c.write_unencrypted_server(w),
            Self::SMSG_LFG_DISABLED => SMSG_LFG_DISABLED{}.write_unencrypted_server(w),
            Self::SMSG_UPDATE_COMBO_POINTS(c) => c.write_unencrypted_server(w),
            Self::SMSG_DISMOUNT(c) => c.write_unencrypted_server(w),
            Self::MSG_MOVE_UPDATE_CAN_FLY(c) => c.write_unencrypted_server(w),
            Self::MSG_RAID_READY_CHECK_CONFIRM(c) => c.write_unencrypted_server(w),
            Self::SMSG_GM_MESSAGECHAT(c) => c.write_unencrypted_server(w),
            Self::SMSG_CLEAR_TARGET(c) => c.write_unencrypted_server(w),
            Self::SMSG_CROSSED_INEBRIATION_THRESHOLD(c) => c.write_unencrypted_server(w),
            Self::SMSG_KICK_REASON(c) => c.write_unencrypted_server(w),
            Self::SMSG_COMPLAIN_RESULT(c) => c.write_unencrypted_server(w),
            Self::SMSG_FEATURE_SYSTEM_STATUS(c) => c.write_unencrypted_server(w),
            Self::SMSG_CHANNEL_MEMBER_COUNT(c) => c.write_unencrypted_server(w),
            Self::SMSG_GUILD_BANK_LIST(c) => c.write_unencrypted_server(w),
            Self::MSG_GUILD_BANK_LOG_QUERY(c) => c.write_unencrypted_server(w),
            Self::SMSG_USERLIST_ADD(c) => c.write_unencrypted_server(w),
            Self::SMSG_USERLIST_REMOVE(c) => c.write_unencrypted_server(w),
            Self::SMSG_USERLIST_UPDATE(c) => c.write_unencrypted_server(w),
            Self::SMSG_INSPECT_TALENT(c) => c.write_unencrypted_server(w),
            Self::SMSG_LOOT_LIST(c) => c.write_unencrypted_server(w),
            Self::MSG_GUILD_PERMISSIONS(c) => c.write_unencrypted_server(w),
            Self::MSG_GUILD_BANK_MONEY_WITHDRAWN(c) => c.write_unencrypted_server(w),
            Self::MSG_GUILD_EVENT_LOG_QUERY(c) => c.write_unencrypted_server(w),
            Self::SMSG_MIRRORIMAGE_DATA(c) => c.write_unencrypted_server(w),
            Self::MSG_QUERY_GUILD_BANK_TEXT(c) => c.write_unencrypted_server(w),
            Self::SMSG_OVERRIDE_LIGHT(c) => c.write_unencrypted_server(w),
            Self::SMSG_TOTEM_CREATED(c) => c.write_unencrypted_server(w),
            Self::SMSG_QUESTGIVER_STATUS_MULTIPLE(c) => c.write_unencrypted_server(w),
            Self::SMSG_SET_PLAYER_DECLINED_NAMES_RESULT(c) => c.write_unencrypted_server(w),
            Self::SMSG_SEND_UNLEARN_SPELLS(c) => c.write_unencrypted_server(w),
            Self::SMSG_PROPOSE_LEVEL_GRANT(c) => c.write_unencrypted_server(w),
            Self::SMSG_REFER_A_FRIEND_FAILURE(c) => c.write_unencrypted_server(w),
            Self::SMSG_SPLINE_MOVE_SET_FLYING(c) => c.write_unencrypted_server(w),
            Self::SMSG_SPLINE_MOVE_UNSET_FLYING(c) => c.write_unencrypted_server(w),
            Self::SMSG_ENABLE_BARBER_SHOP => SMSG_ENABLE_BARBER_SHOP{}.write_unencrypted_server(w),
            Self::SMSG_BARBER_SHOP_RESULT(c) => c.write_unencrypted_server(w),
            Self::SMSG_CALENDAR_SEND_CALENDAR(c) => c.write_unencrypted_server(w),
            Self::SMSG_CALENDAR_SEND_EVENT(c) => c.write_unencrypted_server(w),
            Self::SMSG_CALENDAR_FILTER_GUILD(c) => c.write_unencrypted_server(w),
            Self::SMSG_CALENDAR_ARENA_TEAM(c) => c.write_unencrypted_server(w),
            Self::SMSG_CALENDAR_EVENT_INVITE(c) => c.write_unencrypted_server(w),
            Self::SMSG_CALENDAR_EVENT_INVITE_REMOVED(c) => c.write_unencrypted_server(w),
            Self::SMSG_CALENDAR_EVENT_STATUS(c) => c.write_unencrypted_server(w),
            Self::SMSG_CALENDAR_COMMAND_RESULT(c) => c.write_unencrypted_server(w),
            Self::SMSG_CALENDAR_RAID_LOCKOUT_ADDED(c) => c.write_unencrypted_server(w),
            Self::SMSG_CALENDAR_RAID_LOCKOUT_REMOVED(c) => c.write_unencrypted_server(w),
            Self::SMSG_CALENDAR_EVENT_INVITE_ALERT(c) => c.write_unencrypted_server(w),
            Self::SMSG_CALENDAR_EVENT_INVITE_REMOVED_ALERT(c) => c.write_unencrypted_server(w),
            Self::SMSG_CALENDAR_EVENT_REMOVED_ALERT(c) => c.write_unencrypted_server(w),
            Self::SMSG_CALENDAR_EVENT_UPDATED_ALERT(c) => c.write_unencrypted_server(w),
            Self::SMSG_CALENDAR_EVENT_MODERATOR_STATUS_ALERT(c) => c.write_unencrypted_server(w),
            Self::SMSG_CALENDAR_SEND_NUM_PENDING(c) => c.write_unencrypted_server(w),
            Self::MSG_MOVE_SET_PITCH_RATE(c) => c.write_unencrypted_server(w),
            Self::SMSG_FORCE_PITCH_RATE_CHANGE(c) => c.write_unencrypted_server(w),
            Self::SMSG_CALENDAR_EVENT_INVITE_NOTES(c) => c.write_unencrypted_server(w),
            Self::SMSG_CALENDAR_EVENT_INVITE_NOTES_ALERT(c) => c.write_unencrypted_server(w),
            Self::SMSG_UPDATE_ACCOUNT_DATA_COMPLETE(c) => c.write_unencrypted_server(w),
            Self::SMSG_TRIGGER_MOVIE(c) => c.write_unencrypted_server(w),
            Self::SMSG_ACHIEVEMENT_EARNED(c) => c.write_unencrypted_server(w),
            Self::SMSG_CRITERIA_UPDATE(c) => c.write_unencrypted_server(w),
            Self::SMSG_RESPOND_INSPECT_ACHIEVEMENTS(c) => c.write_unencrypted_server(w),
            Self::SMSG_QUESTUPDATE_ADD_PVP_KILL(c) => c.write_unencrypted_server(w),
            Self::SMSG_CALENDAR_RAID_LOCKOUT_UPDATED(c) => c.write_unencrypted_server(w),
            Self::SMSG_CHAR_CUSTOMIZE(c) => c.write_unencrypted_server(w),
            Self::SMSG_SET_PHASE_SHIFT(c) => c.write_unencrypted_server(w),
            Self::SMSG_ALL_ACHIEVEMENT_DATA(c) => c.write_unencrypted_server(w),
            Self::SMSG_POWER_UPDATE(c) => c.write_unencrypted_server(w),
            Self::SMSG_HIGHEST_THREAT_UPDATE(c) => c.write_unencrypted_server(w),
            Self::SMSG_THREAT_UPDATE(c) => c.write_unencrypted_server(w),
            Self::SMSG_THREAT_REMOVE(c) => c.write_unencrypted_server(w),
            Self::SMSG_THREAT_CLEAR(c) => c.write_unencrypted_server(w),
            Self::SMSG_CONVERT_RUNE(c) => c.write_unencrypted_server(w),
            Self::SMSG_RESYNC_RUNES(c) => c.write_unencrypted_server(w),
            Self::SMSG_ADD_RUNE_POWER(c) => c.write_unencrypted_server(w),
            Self::SMSG_AUCTION_LIST_PENDING_SALES(c) => c.write_unencrypted_server(w),
            Self::SMSG_MODIFY_COOLDOWN(c) => c.write_unencrypted_server(w),
            Self::SMSG_PET_UPDATE_COMBO_POINTS(c) => c.write_unencrypted_server(w),
            Self::SMSG_PRE_RESURRECT(c) => c.write_unencrypted_server(w),
            Self::SMSG_AURA_UPDATE_ALL(c) => c.write_unencrypted_server(w),
            Self::SMSG_AURA_UPDATE(c) => c.write_unencrypted_server(w),
            Self::SMSG_SERVER_FIRST_ACHIEVEMENT(c) => c.write_unencrypted_server(w),
            Self::SMSG_PET_LEARNED_SPELL(c) => c.write_unencrypted_server(w),
            Self::SMSG_PET_UNLEARNED_SPELL(c) => c.write_unencrypted_server(w),
            Self::SMSG_ON_CANCEL_EXPECTED_RIDE_VEHICLE_AURA => SMSG_ON_CANCEL_EXPECTED_RIDE_VEHICLE_AURA{}.write_unencrypted_server(w),
            Self::SMSG_CRITERIA_DELETED(c) => c.write_unencrypted_server(w),
            Self::SMSG_ACHIEVEMENT_DELETED(c) => c.write_unencrypted_server(w),
            Self::SMSG_BATTLEGROUND_INFO_THROTTLED => SMSG_BATTLEGROUND_INFO_THROTTLED{}.write_unencrypted_server(w),
            Self::SMSG_PLAYER_VEHICLE_DATA(c) => c.write_unencrypted_server(w),
            Self::SMSG_PET_GUIDS(c) => c.write_unencrypted_server(w),
            Self::SMSG_CLIENTCACHE_VERSION(c) => c.write_unencrypted_server(w),
            Self::SMSG_ITEM_REFUND_INFO_RESPONSE(c) => c.write_unencrypted_server(w),
            Self::SMSG_ITEM_REFUND_RESULT(c) => c.write_unencrypted_server(w),
            Self::SMSG_CORPSE_MAP_POSITION_QUERY_RESPONSE(c) => c.write_unencrypted_server(w),
            Self::SMSG_CALENDAR_CLEAR_PENDING_ACTION => SMSG_CALENDAR_CLEAR_PENDING_ACTION{}.write_unencrypted_server(w),
            Self::SMSG_EQUIPMENT_SET_LIST(c) => c.write_unencrypted_server(w),
            Self::SMSG_SET_PROJECTILE_POSITION(c) => c.write_unencrypted_server(w),
            Self::SMSG_TALENTS_INFO(c) => c.write_unencrypted_server(w),
            Self::SMSG_ARENA_UNIT_DESTROYED(c) => c.write_unencrypted_server(w),
            Self::SMSG_ARENA_TEAM_CHANGE_FAILED_QUEUED(c) => c.write_unencrypted_server(w),
            Self::SMSG_MOVE_GRAVITY_DISABLE(c) => c.write_unencrypted_server(w),
            Self::SMSG_MOVE_GRAVITY_ENABLE(c) => c.write_unencrypted_server(w),
            Self::MSG_MOVE_GRAVITY_CHNG(c) => c.write_unencrypted_server(w),
            Self::SMSG_SPLINE_MOVE_GRAVITY_DISABLE(c) => c.write_unencrypted_server(w),
            Self::SMSG_SPLINE_MOVE_GRAVITY_ENABLE(c) => c.write_unencrypted_server(w),
            Self::SMSG_EQUIPMENT_SET_USE_RESULT(c) => c.write_unencrypted_server(w),
            Self::SMSG_CHAR_FACTION_CHANGE(c) => c.write_unencrypted_server(w),
            Self::SMSG_BATTLEFIELD_MGR_ENTRY_INVITE(c) => c.write_unencrypted_server(w),
            Self::SMSG_BATTLEFIELD_MGR_ENTERED(c) => c.write_unencrypted_server(w),
            Self::SMSG_BATTLEFIELD_MGR_QUEUE_INVITE(c) => c.write_unencrypted_server(w),
            Self::SMSG_BATTLEFIELD_MGR_QUEUE_REQUEST_RESPONSE(c) => c.write_unencrypted_server(w),
            Self::SMSG_BATTLEFIELD_MGR_EJECT_PENDING(c) => c.write_unencrypted_server(w),
            Self::SMSG_BATTLEFIELD_MGR_EJECTED(c) => c.write_unencrypted_server(w),
            Self::SMSG_BATTLEFIELD_MGR_STATE_CHANGE(c) => c.write_unencrypted_server(w),
            Self::MSG_SET_RAID_DIFFICULTY(c) => c.write_unencrypted_server(w),
            Self::SMSG_TOGGLE_XP_GAIN => SMSG_TOGGLE_XP_GAIN{}.write_unencrypted_server(w),
            Self::SMSG_GMRESPONSE_DB_ERROR => SMSG_GMRESPONSE_DB_ERROR{}.write_unencrypted_server(w),
            Self::SMSG_GMRESPONSE_RECEIVED(c) => c.write_unencrypted_server(w),
            Self::SMSG_GMRESPONSE_STATUS_UPDATE(c) => c.write_unencrypted_server(w),
            Self::SMSG_WORLD_STATE_UI_TIMER_UPDATE(c) => c.write_unencrypted_server(w),
            Self::SMSG_TALENTS_INVOLUNTARILY_RESET(c) => c.write_unencrypted_server(w),
            Self::SMSG_QUERY_QUESTS_COMPLETED_RESPONSE(c) => c.write_unencrypted_server(w),
            Self::SMSG_CORPSE_NOT_IN_INSTANCE => SMSG_CORPSE_NOT_IN_INSTANCE{}.write_unencrypted_server(w),
            Self::SMSG_CAMERA_SHAKE(c) => c.write_unencrypted_server(w),
            Self::SMSG_SOCKET_GEMS_RESULT(c) => c.write_unencrypted_server(w),
            Self::SMSG_REDIRECT_CLIENT(c) => c.write_unencrypted_server(w),
            Self::SMSG_MOVE_SET_COLLISION_HGT(c) => c.write_unencrypted_server(w),
            Self::SMSG_MULTIPLE_MOVES(c) => c.write_unencrypted_server(w),
        }
    }

    #[cfg(all(feature = "tokio", feature = "encryption"))]
    pub async fn tokio_write_encrypted_server<W: tokio::io::AsyncWriteExt + Unpin + Send>(&self, mut w: W, e: &mut ServerEncrypterHalf) -> Result<(), std::io::Error> {
        match self {
            Self::MSG_MOVE_START_FORWARD(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::MSG_MOVE_START_BACKWARD(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::MSG_MOVE_STOP(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::MSG_MOVE_START_STRAFE_LEFT(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::MSG_MOVE_START_STRAFE_RIGHT(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::MSG_MOVE_STOP_STRAFE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::MSG_MOVE_JUMP(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::MSG_MOVE_START_TURN_LEFT(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::MSG_MOVE_START_TURN_RIGHT(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::MSG_MOVE_STOP_TURN(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::MSG_MOVE_START_PITCH_UP(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::MSG_MOVE_START_PITCH_DOWN(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::MSG_MOVE_STOP_PITCH(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::MSG_MOVE_SET_RUN_MODE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::MSG_MOVE_SET_WALK_MODE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::MSG_MOVE_FALL_LAND(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::MSG_MOVE_START_SWIM(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::MSG_MOVE_STOP_SWIM(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::MSG_MOVE_SET_FACING(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::MSG_MOVE_SET_PITCH(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::MSG_MOVE_WORLDPORT_ACK => MSG_MOVE_WORLDPORT_ACK{}.tokio_write_encrypted_server(w, e).await,
            Self::MSG_MOVE_HEARTBEAT(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::MSG_MOVE_HOVER(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::MSG_PETITION_DECLINE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::MSG_TABARDVENDOR_ACTIVATE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::MSG_QUEST_PUSH_RESULT(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::MSG_MOVE_WATER_WALK(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::MSG_PETITION_RENAME(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::MSG_MOVE_START_ASCEND(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::MSG_MOVE_STOP_ASCEND(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::MSG_MOVE_SET_FLIGHT_BACK_SPEED(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::MSG_MOVE_START_DESCEND(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::CMSG_CALENDAR_GET_NUM_PENDING => CMSG_CALENDAR_GET_NUM_PENDING{}.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_CHAR_CREATE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_CHAR_ENUM(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_CHAR_DELETE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_NEW_WORLD(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_TRANSFER_PENDING(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_TRANSFER_ABORTED(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_CHARACTER_LOGIN_FAILED(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_LOGIN_SETTIMESPEED(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_LOGOUT_RESPONSE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_LOGOUT_COMPLETE => SMSG_LOGOUT_COMPLETE{}.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_LOGOUT_CANCEL_ACK => SMSG_LOGOUT_CANCEL_ACK{}.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_NAME_QUERY_RESPONSE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_PET_NAME_QUERY_RESPONSE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_GUILD_QUERY_RESPONSE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_ITEM_QUERY_SINGLE_RESPONSE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_PAGE_TEXT_QUERY_RESPONSE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_QUEST_QUERY_RESPONSE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_GAMEOBJECT_QUERY_RESPONSE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_CREATURE_QUERY_RESPONSE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_WHO(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_WHOIS(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_CONTACT_LIST(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_FRIEND_STATUS(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_GROUP_INVITE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_GROUP_DECLINE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_GROUP_UNINVITE => SMSG_GROUP_UNINVITE{}.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_GROUP_SET_LEADER(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_GROUP_DESTROYED => SMSG_GROUP_DESTROYED{}.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_GROUP_LIST(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_PARTY_MEMBER_STATS(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_PARTY_COMMAND_RESULT(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_GUILD_INVITE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_GUILD_DECLINE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_GUILD_INFO(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_GUILD_ROSTER(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_GUILD_EVENT(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_GUILD_COMMAND_RESULT(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_MESSAGECHAT(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_CHANNEL_NOTIFY(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_CHANNEL_LIST(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_UPDATE_OBJECT(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_DESTROY_OBJECT(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_READ_ITEM_OK(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_READ_ITEM_FAILED(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_ITEM_COOLDOWN(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_GAMEOBJECT_CUSTOM_ANIM(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::MSG_MOVE_TELEPORT_CHEAT(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::MSG_MOVE_TELEPORT_ACK(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_MONSTER_MOVE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_MOVE_WATER_WALK(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_MOVE_LAND_WALK(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_FORCE_RUN_SPEED_CHANGE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_FORCE_RUN_BACK_SPEED_CHANGE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_FORCE_SWIM_SPEED_CHANGE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_FORCE_MOVE_ROOT(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_FORCE_MOVE_UNROOT(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::MSG_MOVE_ROOT(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::MSG_MOVE_UNROOT(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_MOVE_KNOCK_BACK(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::MSG_MOVE_KNOCK_BACK(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_MOVE_FEATHER_FALL(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_MOVE_NORMAL_FALL(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_MOVE_SET_HOVER(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_MOVE_UNSET_HOVER(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_TRIGGER_CINEMATIC(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_TUTORIAL_FLAGS(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_EMOTE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_TEXT_EMOTE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_INVENTORY_CHANGE_FAILURE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_TRADE_STATUS(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_TRADE_STATUS_EXTENDED(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_INITIALIZE_FACTIONS(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_SET_FACTION_VISIBLE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_SET_FACTION_STANDING(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_SET_PROFICIENCY(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_ACTION_BUTTONS(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_INITIAL_SPELLS(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_LEARNED_SPELL(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_SUPERCEDED_SPELL(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_CAST_FAILED(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_SPELL_START(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_SPELL_GO(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_SPELL_FAILURE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_SPELL_COOLDOWN(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_COOLDOWN_EVENT(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_PET_CAST_FAILED(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::MSG_CHANNEL_START(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::MSG_CHANNEL_UPDATE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_AI_REACTION(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_ATTACKSTART(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_ATTACKSTOP(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_ATTACKSWING_NOTINRANGE => SMSG_ATTACKSWING_NOTINRANGE{}.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_ATTACKSWING_BADFACING => SMSG_ATTACKSWING_BADFACING{}.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_INSTANCE_LOCK_WARNING_QUERY(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_ATTACKSWING_DEADTARGET => SMSG_ATTACKSWING_DEADTARGET{}.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_ATTACKSWING_CANT_ATTACK => SMSG_ATTACKSWING_CANT_ATTACK{}.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_ATTACKERSTATEUPDATE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_CANCEL_COMBAT => SMSG_CANCEL_COMBAT{}.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_SPELLHEALLOG(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_SPELLENERGIZELOG(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_BREAK_TARGET(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_BINDPOINTUPDATE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_PLAYERBOUND(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_CLIENT_CONTROL_UPDATE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_RESURRECT_REQUEST(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_LOOT_RESPONSE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_LOOT_RELEASE_RESPONSE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_LOOT_REMOVED(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_LOOT_MONEY_NOTIFY(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_LOOT_CLEAR_MONEY => SMSG_LOOT_CLEAR_MONEY{}.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_ITEM_PUSH_RESULT(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_DUEL_REQUESTED(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_DUEL_OUTOFBOUNDS => SMSG_DUEL_OUTOFBOUNDS{}.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_DUEL_INBOUNDS => SMSG_DUEL_INBOUNDS{}.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_DUEL_COMPLETE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_DUEL_WINNER(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_MOUNTRESULT(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_MOUNTSPECIAL_ANIM(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_PET_TAME_FAILURE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_PET_NAME_INVALID(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_PET_SPELLS(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_PET_MODE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_GOSSIP_MESSAGE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_GOSSIP_COMPLETE => SMSG_GOSSIP_COMPLETE{}.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_NPC_TEXT_UPDATE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_QUESTGIVER_STATUS(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_QUESTGIVER_QUEST_LIST(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_QUESTGIVER_QUEST_DETAILS(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_QUESTGIVER_REQUEST_ITEMS(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_QUESTGIVER_OFFER_REWARD(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_QUESTGIVER_QUEST_INVALID(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_QUESTGIVER_QUEST_COMPLETE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_QUESTGIVER_QUEST_FAILED(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_QUESTLOG_FULL => SMSG_QUESTLOG_FULL{}.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_QUESTUPDATE_FAILED(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_QUESTUPDATE_FAILEDTIMER(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_QUESTUPDATE_COMPLETE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_QUESTUPDATE_ADD_KILL(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_QUESTUPDATE_ADD_ITEM(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_QUEST_CONFIRM_ACCEPT(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_LIST_INVENTORY(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_SELL_ITEM(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_BUY_ITEM(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_BUY_FAILED(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_SHOWTAXINODES(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_TAXINODE_STATUS(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_ACTIVATETAXIREPLY(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_NEW_TAXI_PATH => SMSG_NEW_TAXI_PATH{}.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_TRAINER_LIST(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_TRAINER_BUY_SUCCEEDED(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_TRAINER_BUY_FAILED(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_SHOW_BANK(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_BUY_BANK_SLOT_RESULT(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_PETITION_SHOWLIST(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_PETITION_SHOW_SIGNATURES(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_PETITION_SIGN_RESULTS(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_TURN_IN_PETITION_RESULTS(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_PETITION_QUERY_RESPONSE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_FISH_NOT_HOOKED => SMSG_FISH_NOT_HOOKED{}.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_FISH_ESCAPED => SMSG_FISH_ESCAPED{}.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_NOTIFICATION(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_PLAYED_TIME(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_QUERY_TIME_RESPONSE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_LOG_XPGAIN(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_LEVELUP_INFO(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::MSG_MINIMAP_PING(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_ENCHANTMENTLOG(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_START_MIRROR_TIMER(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_PAUSE_MIRROR_TIMER(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_STOP_MIRROR_TIMER(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_PONG(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_CLEAR_COOLDOWN(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_GAMEOBJECT_PAGETEXT(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_SPELL_DELAYED(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_QUEST_POI_QUERY_RESPONSE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_ITEM_TIME_UPDATE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_ITEM_ENCHANT_TIME_UPDATE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_AUTH_CHALLENGE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_AUTH_RESPONSE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::MSG_SAVE_GUILD_EMBLEM(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_PLAY_SPELL_VISUAL(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_PARTYKILLLOG(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_COMPRESSED_UPDATE_OBJECT(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_PLAY_SPELL_IMPACT(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_EXPLORATION_EXPERIENCE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::MSG_RANDOM_ROLL(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_ENVIRONMENTAL_DAMAGE_LOG(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_LFG_PLAYER_REWARD(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_LFG_TELEPORT_DENIED(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_REMOVED_SPELL(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_GMTICKET_CREATE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_GMTICKET_UPDATETEXT(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_ACCOUNT_DATA_TIMES(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_UPDATE_ACCOUNT_DATA(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_GMTICKET_GETTICKET(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_UPDATE_INSTANCE_ENCOUNTER_UNIT(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_GAMEOBJECT_DESPAWN_ANIM(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::MSG_CORPSE_QUERY(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_GMTICKET_DELETETICKET(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_CHAT_WRONG_FACTION => SMSG_CHAT_WRONG_FACTION{}.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_GMTICKET_SYSTEMSTATUS(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_QUEST_FORCE_REMOVE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_SPIRIT_HEALER_CONFIRM(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_GOSSIP_POI(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_LOGIN_VERIFY_WORLD(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_SEND_MAIL_RESULT(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_MAIL_LIST_RESULT(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_BATTLEFIELD_LIST(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_ITEM_TEXT_QUERY_RESPONSE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_SPELLLOGMISS(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_SPELLLOGEXECUTE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_PERIODICAURALOG(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_SPELLDAMAGESHIELD(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_SPELLNONMELEEDAMAGELOG(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_RESURRECT_FAILED(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_ZONE_UNDER_ATTACK(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::MSG_AUCTION_HELLO(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_AUCTION_COMMAND_RESULT(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_AUCTION_LIST_RESULT(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_AUCTION_OWNER_LIST_RESULT(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_AUCTION_BIDDER_NOTIFICATION(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_AUCTION_OWNER_NOTIFICATION(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_PROCRESIST(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_DISPEL_FAILED(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_SPELLORDAMAGE_IMMUNE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_AUCTION_BIDDER_LIST_RESULT(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_SET_FLAT_SPELL_MODIFIER(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_SET_PCT_SPELL_MODIFIER(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_CORPSE_RECLAIM_DELAY(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::MSG_LIST_STABLED_PETS(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_STABLE_RESULT(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_PLAY_MUSIC(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_PLAY_OBJECT_SOUND(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_SPELLDISPELLOG(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::MSG_QUERY_NEXT_MAIL_TIME(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_RECEIVED_MAIL(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_RAID_GROUP_ONLY(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_PVP_CREDIT(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_AUCTION_REMOVED_NOTIFICATION(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_SERVER_MESSAGE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_LFG_OFFER_CONTINUE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_SHOW_MAILBOX(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_CANCEL_AUTO_REPEAT(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_STANDSTATE_UPDATE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_LOOT_ALL_PASSED(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_LOOT_ROLL_WON(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_LOOT_START_ROLL(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_LOOT_ROLL(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_LOOT_MASTER_LIST(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_SET_FORCED_REACTIONS(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_SPELL_FAILED_OTHER(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_CHAT_PLAYER_NOT_FOUND(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::MSG_TALENT_WIPE_CONFIRM(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_SUMMON_REQUEST(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_MONSTER_MOVE_TRANSPORT(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_PET_BROKEN => SMSG_PET_BROKEN{}.tokio_write_encrypted_server(w, e).await,
            Self::MSG_MOVE_FEATHER_FALL(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_FEIGN_DEATH_RESISTED => SMSG_FEIGN_DEATH_RESISTED{}.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_DUEL_COUNTDOWN(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_AREA_TRIGGER_MESSAGE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_LFG_ROLE_CHOSEN(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_PLAYER_SKINNED(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_DURABILITY_DAMAGE_DEATH => SMSG_DURABILITY_DAMAGE_DEATH{}.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_INIT_WORLD_STATES(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_UPDATE_WORLD_STATE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_ITEM_NAME_QUERY_RESPONSE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_PET_ACTION_FEEDBACK(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_CHAR_RENAME(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_INSTANCE_SAVE_CREATED(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_RAID_INSTANCE_INFO(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_PLAY_SOUND(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_BATTLEFIELD_STATUS(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::MSG_INSPECT_HONOR_STATS(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_FORCE_WALK_SPEED_CHANGE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_FORCE_SWIM_BACK_SPEED_CHANGE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_FORCE_TURN_RATE_CHANGE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_AREA_SPIRIT_HEALER_TIME(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_WARDEN_DATA(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_GROUP_JOINED_BATTLEGROUND(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::MSG_BATTLEGROUND_PLAYER_POSITIONS(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_BINDER_CONFIRM(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_BATTLEGROUND_PLAYER_JOINED(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_BATTLEGROUND_PLAYER_LEFT(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_ADDON_INFO(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_PET_UNLEARN_CONFIRM(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_PARTY_MEMBER_STATS_FULL(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_WEATHER(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_RAID_INSTANCE_MESSAGE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_COMPRESSED_MOVES(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_CHAT_RESTRICTED(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_SPLINE_SET_RUN_SPEED(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_SPLINE_SET_RUN_BACK_SPEED(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_SPLINE_SET_SWIM_SPEED(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_SPLINE_SET_WALK_SPEED(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_SPLINE_SET_SWIM_BACK_SPEED(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_SPLINE_SET_TURN_RATE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_SPLINE_MOVE_UNROOT(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_SPLINE_MOVE_FEATHER_FALL(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_SPLINE_MOVE_NORMAL_FALL(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_SPLINE_MOVE_SET_HOVER(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_SPLINE_MOVE_UNSET_HOVER(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_SPLINE_MOVE_WATER_WALK(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_SPLINE_MOVE_LAND_WALK(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_SPLINE_MOVE_START_SWIM(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_SPLINE_MOVE_STOP_SWIM(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_SPLINE_MOVE_SET_RUN_MODE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_SPLINE_MOVE_SET_WALK_MODE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::MSG_MOVE_TIME_SKIPPED(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_SPLINE_MOVE_ROOT(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_INVALIDATE_PLAYER(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_INSTANCE_RESET(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_INSTANCE_RESET_FAILED(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_UPDATE_LAST_INSTANCE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::MSG_RAID_TARGET_UPDATE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::MSG_RAID_READY_CHECK(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_PET_ACTION_SOUND(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_PET_DISMISS_SOUND(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_GM_TICKET_STATUS_UPDATE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::MSG_SET_DUNGEON_DIFFICULTY(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_UPDATE_INSTANCE_OWNERSHIP(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_CHAT_PLAYER_AMBIGUOUS(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_SPELLINSTAKILLLOG(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_SPELL_UPDATE_CHAIN_TARGETS(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_SPELLSTEALLOG(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_DEFENSE_MESSAGE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_INSTANCE_DIFFICULTY(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_MOTD(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_MOVE_SET_CAN_FLY(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_MOVE_UNSET_CAN_FLY(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_ARENA_TEAM_COMMAND_RESULT(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_ARENA_TEAM_QUERY_RESPONSE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_ARENA_TEAM_ROSTER(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_ARENA_TEAM_INVITE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_ARENA_TEAM_EVENT(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_ARENA_TEAM_STATS(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_UPDATE_LFG_LIST(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_LFG_PROPOSAL_UPDATE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_LFG_ROLE_CHECK_UPDATE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_LFG_JOIN_RESULT(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_LFG_QUEUE_STATUS(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_LFG_UPDATE_PLAYER(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_LFG_UPDATE_PARTY(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_LFG_UPDATE_SEARCH(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_LFG_BOOT_PROPOSAL_UPDATE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_LFG_PLAYER_INFO(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_LFG_PARTY_INFO(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_TITLE_EARNED(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_ARENA_ERROR(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::MSG_INSPECT_ARENA_TEAMS(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_DEATH_RELEASE_LOC(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_FORCED_DEATH_UPDATE => SMSG_FORCED_DEATH_UPDATE{}.tokio_write_encrypted_server(w, e).await,
            Self::MSG_MOVE_SET_FLIGHT_SPEED(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_FORCE_FLIGHT_SPEED_CHANGE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_SPLINE_SET_FLIGHT_SPEED(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_SPLINE_SET_FLIGHT_BACK_SPEED(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_FLIGHT_SPLINE_SYNC(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_REALM_SPLIT(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_TIME_SYNC_REQ(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_RESET_FAILED_NOTIFY(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_LFG_DISABLED => SMSG_LFG_DISABLED{}.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_UPDATE_COMBO_POINTS(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_DISMOUNT(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::MSG_MOVE_UPDATE_CAN_FLY(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::MSG_RAID_READY_CHECK_CONFIRM(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_GM_MESSAGECHAT(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_CLEAR_TARGET(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_CROSSED_INEBRIATION_THRESHOLD(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_KICK_REASON(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_COMPLAIN_RESULT(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_FEATURE_SYSTEM_STATUS(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_CHANNEL_MEMBER_COUNT(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_GUILD_BANK_LIST(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::MSG_GUILD_BANK_LOG_QUERY(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_USERLIST_ADD(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_USERLIST_REMOVE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_USERLIST_UPDATE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_INSPECT_TALENT(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_LOOT_LIST(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::MSG_GUILD_PERMISSIONS(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::MSG_GUILD_BANK_MONEY_WITHDRAWN(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::MSG_GUILD_EVENT_LOG_QUERY(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_MIRRORIMAGE_DATA(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::MSG_QUERY_GUILD_BANK_TEXT(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_OVERRIDE_LIGHT(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_TOTEM_CREATED(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_QUESTGIVER_STATUS_MULTIPLE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_SET_PLAYER_DECLINED_NAMES_RESULT(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_SEND_UNLEARN_SPELLS(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_PROPOSE_LEVEL_GRANT(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_REFER_A_FRIEND_FAILURE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_SPLINE_MOVE_SET_FLYING(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_SPLINE_MOVE_UNSET_FLYING(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_ENABLE_BARBER_SHOP => SMSG_ENABLE_BARBER_SHOP{}.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_BARBER_SHOP_RESULT(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_CALENDAR_SEND_CALENDAR(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_CALENDAR_SEND_EVENT(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_CALENDAR_FILTER_GUILD(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_CALENDAR_ARENA_TEAM(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_CALENDAR_EVENT_INVITE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_CALENDAR_EVENT_INVITE_REMOVED(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_CALENDAR_EVENT_STATUS(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_CALENDAR_COMMAND_RESULT(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_CALENDAR_RAID_LOCKOUT_ADDED(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_CALENDAR_RAID_LOCKOUT_REMOVED(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_CALENDAR_EVENT_INVITE_ALERT(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_CALENDAR_EVENT_INVITE_REMOVED_ALERT(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_CALENDAR_EVENT_REMOVED_ALERT(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_CALENDAR_EVENT_UPDATED_ALERT(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_CALENDAR_EVENT_MODERATOR_STATUS_ALERT(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_CALENDAR_SEND_NUM_PENDING(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::MSG_MOVE_SET_PITCH_RATE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_FORCE_PITCH_RATE_CHANGE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_CALENDAR_EVENT_INVITE_NOTES(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_CALENDAR_EVENT_INVITE_NOTES_ALERT(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_UPDATE_ACCOUNT_DATA_COMPLETE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_TRIGGER_MOVIE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_ACHIEVEMENT_EARNED(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_CRITERIA_UPDATE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_RESPOND_INSPECT_ACHIEVEMENTS(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_QUESTUPDATE_ADD_PVP_KILL(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_CALENDAR_RAID_LOCKOUT_UPDATED(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_CHAR_CUSTOMIZE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_SET_PHASE_SHIFT(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_ALL_ACHIEVEMENT_DATA(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_POWER_UPDATE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_HIGHEST_THREAT_UPDATE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_THREAT_UPDATE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_THREAT_REMOVE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_THREAT_CLEAR(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_CONVERT_RUNE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_RESYNC_RUNES(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_ADD_RUNE_POWER(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_AUCTION_LIST_PENDING_SALES(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_MODIFY_COOLDOWN(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_PET_UPDATE_COMBO_POINTS(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_PRE_RESURRECT(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_AURA_UPDATE_ALL(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_AURA_UPDATE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_SERVER_FIRST_ACHIEVEMENT(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_PET_LEARNED_SPELL(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_PET_UNLEARNED_SPELL(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_ON_CANCEL_EXPECTED_RIDE_VEHICLE_AURA => SMSG_ON_CANCEL_EXPECTED_RIDE_VEHICLE_AURA{}.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_CRITERIA_DELETED(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_ACHIEVEMENT_DELETED(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_BATTLEGROUND_INFO_THROTTLED => SMSG_BATTLEGROUND_INFO_THROTTLED{}.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_PLAYER_VEHICLE_DATA(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_PET_GUIDS(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_CLIENTCACHE_VERSION(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_ITEM_REFUND_INFO_RESPONSE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_ITEM_REFUND_RESULT(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_CORPSE_MAP_POSITION_QUERY_RESPONSE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_CALENDAR_CLEAR_PENDING_ACTION => SMSG_CALENDAR_CLEAR_PENDING_ACTION{}.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_EQUIPMENT_SET_LIST(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_SET_PROJECTILE_POSITION(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_TALENTS_INFO(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_ARENA_UNIT_DESTROYED(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_ARENA_TEAM_CHANGE_FAILED_QUEUED(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_MOVE_GRAVITY_DISABLE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_MOVE_GRAVITY_ENABLE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::MSG_MOVE_GRAVITY_CHNG(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_SPLINE_MOVE_GRAVITY_DISABLE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_SPLINE_MOVE_GRAVITY_ENABLE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_EQUIPMENT_SET_USE_RESULT(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_CHAR_FACTION_CHANGE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_BATTLEFIELD_MGR_ENTRY_INVITE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_BATTLEFIELD_MGR_ENTERED(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_BATTLEFIELD_MGR_QUEUE_INVITE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_BATTLEFIELD_MGR_QUEUE_REQUEST_RESPONSE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_BATTLEFIELD_MGR_EJECT_PENDING(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_BATTLEFIELD_MGR_EJECTED(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_BATTLEFIELD_MGR_STATE_CHANGE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::MSG_SET_RAID_DIFFICULTY(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_TOGGLE_XP_GAIN => SMSG_TOGGLE_XP_GAIN{}.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_GMRESPONSE_DB_ERROR => SMSG_GMRESPONSE_DB_ERROR{}.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_GMRESPONSE_RECEIVED(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_GMRESPONSE_STATUS_UPDATE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_WORLD_STATE_UI_TIMER_UPDATE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_TALENTS_INVOLUNTARILY_RESET(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_QUERY_QUESTS_COMPLETED_RESPONSE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_CORPSE_NOT_IN_INSTANCE => SMSG_CORPSE_NOT_IN_INSTANCE{}.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_CAMERA_SHAKE(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_SOCKET_GEMS_RESULT(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_REDIRECT_CLIENT(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_MOVE_SET_COLLISION_HGT(c) => c.tokio_write_encrypted_server(w, e).await,
            Self::SMSG_MULTIPLE_MOVES(c) => c.tokio_write_encrypted_server(w, e).await,
        }
    }

    #[cfg(feature = "tokio")]
    pub async fn tokio_write_unencrypted_server<W: tokio::io::AsyncWriteExt + Unpin + Send>(&self, mut w: W) -> Result<(), std::io::Error> {
        match self {
            Self::MSG_MOVE_START_FORWARD(c) => c.tokio_write_unencrypted_server(w).await,
            Self::MSG_MOVE_START_BACKWARD(c) => c.tokio_write_unencrypted_server(w).await,
            Self::MSG_MOVE_STOP(c) => c.tokio_write_unencrypted_server(w).await,
            Self::MSG_MOVE_START_STRAFE_LEFT(c) => c.tokio_write_unencrypted_server(w).await,
            Self::MSG_MOVE_START_STRAFE_RIGHT(c) => c.tokio_write_unencrypted_server(w).await,
            Self::MSG_MOVE_STOP_STRAFE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::MSG_MOVE_JUMP(c) => c.tokio_write_unencrypted_server(w).await,
            Self::MSG_MOVE_START_TURN_LEFT(c) => c.tokio_write_unencrypted_server(w).await,
            Self::MSG_MOVE_START_TURN_RIGHT(c) => c.tokio_write_unencrypted_server(w).await,
            Self::MSG_MOVE_STOP_TURN(c) => c.tokio_write_unencrypted_server(w).await,
            Self::MSG_MOVE_START_PITCH_UP(c) => c.tokio_write_unencrypted_server(w).await,
            Self::MSG_MOVE_START_PITCH_DOWN(c) => c.tokio_write_unencrypted_server(w).await,
            Self::MSG_MOVE_STOP_PITCH(c) => c.tokio_write_unencrypted_server(w).await,
            Self::MSG_MOVE_SET_RUN_MODE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::MSG_MOVE_SET_WALK_MODE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::MSG_MOVE_FALL_LAND(c) => c.tokio_write_unencrypted_server(w).await,
            Self::MSG_MOVE_START_SWIM(c) => c.tokio_write_unencrypted_server(w).await,
            Self::MSG_MOVE_STOP_SWIM(c) => c.tokio_write_unencrypted_server(w).await,
            Self::MSG_MOVE_SET_FACING(c) => c.tokio_write_unencrypted_server(w).await,
            Self::MSG_MOVE_SET_PITCH(c) => c.tokio_write_unencrypted_server(w).await,
            Self::MSG_MOVE_WORLDPORT_ACK => MSG_MOVE_WORLDPORT_ACK{}.tokio_write_unencrypted_server(w).await,
            Self::MSG_MOVE_HEARTBEAT(c) => c.tokio_write_unencrypted_server(w).await,
            Self::MSG_MOVE_HOVER(c) => c.tokio_write_unencrypted_server(w).await,
            Self::MSG_PETITION_DECLINE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::MSG_TABARDVENDOR_ACTIVATE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::MSG_QUEST_PUSH_RESULT(c) => c.tokio_write_unencrypted_server(w).await,
            Self::MSG_MOVE_WATER_WALK(c) => c.tokio_write_unencrypted_server(w).await,
            Self::MSG_PETITION_RENAME(c) => c.tokio_write_unencrypted_server(w).await,
            Self::MSG_MOVE_START_ASCEND(c) => c.tokio_write_unencrypted_server(w).await,
            Self::MSG_MOVE_STOP_ASCEND(c) => c.tokio_write_unencrypted_server(w).await,
            Self::MSG_MOVE_SET_FLIGHT_BACK_SPEED(c) => c.tokio_write_unencrypted_server(w).await,
            Self::MSG_MOVE_START_DESCEND(c) => c.tokio_write_unencrypted_server(w).await,
            Self::CMSG_CALENDAR_GET_NUM_PENDING => CMSG_CALENDAR_GET_NUM_PENDING{}.tokio_write_unencrypted_server(w).await,
            Self::SMSG_CHAR_CREATE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_CHAR_ENUM(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_CHAR_DELETE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_NEW_WORLD(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_TRANSFER_PENDING(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_TRANSFER_ABORTED(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_CHARACTER_LOGIN_FAILED(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_LOGIN_SETTIMESPEED(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_LOGOUT_RESPONSE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_LOGOUT_COMPLETE => SMSG_LOGOUT_COMPLETE{}.tokio_write_unencrypted_server(w).await,
            Self::SMSG_LOGOUT_CANCEL_ACK => SMSG_LOGOUT_CANCEL_ACK{}.tokio_write_unencrypted_server(w).await,
            Self::SMSG_NAME_QUERY_RESPONSE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_PET_NAME_QUERY_RESPONSE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_GUILD_QUERY_RESPONSE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_ITEM_QUERY_SINGLE_RESPONSE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_PAGE_TEXT_QUERY_RESPONSE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_QUEST_QUERY_RESPONSE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_GAMEOBJECT_QUERY_RESPONSE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_CREATURE_QUERY_RESPONSE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_WHO(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_WHOIS(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_CONTACT_LIST(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_FRIEND_STATUS(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_GROUP_INVITE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_GROUP_DECLINE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_GROUP_UNINVITE => SMSG_GROUP_UNINVITE{}.tokio_write_unencrypted_server(w).await,
            Self::SMSG_GROUP_SET_LEADER(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_GROUP_DESTROYED => SMSG_GROUP_DESTROYED{}.tokio_write_unencrypted_server(w).await,
            Self::SMSG_GROUP_LIST(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_PARTY_MEMBER_STATS(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_PARTY_COMMAND_RESULT(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_GUILD_INVITE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_GUILD_DECLINE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_GUILD_INFO(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_GUILD_ROSTER(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_GUILD_EVENT(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_GUILD_COMMAND_RESULT(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_MESSAGECHAT(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_CHANNEL_NOTIFY(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_CHANNEL_LIST(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_UPDATE_OBJECT(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_DESTROY_OBJECT(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_READ_ITEM_OK(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_READ_ITEM_FAILED(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_ITEM_COOLDOWN(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_GAMEOBJECT_CUSTOM_ANIM(c) => c.tokio_write_unencrypted_server(w).await,
            Self::MSG_MOVE_TELEPORT_CHEAT(c) => c.tokio_write_unencrypted_server(w).await,
            Self::MSG_MOVE_TELEPORT_ACK(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_MONSTER_MOVE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_MOVE_WATER_WALK(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_MOVE_LAND_WALK(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_FORCE_RUN_SPEED_CHANGE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_FORCE_RUN_BACK_SPEED_CHANGE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_FORCE_SWIM_SPEED_CHANGE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_FORCE_MOVE_ROOT(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_FORCE_MOVE_UNROOT(c) => c.tokio_write_unencrypted_server(w).await,
            Self::MSG_MOVE_ROOT(c) => c.tokio_write_unencrypted_server(w).await,
            Self::MSG_MOVE_UNROOT(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_MOVE_KNOCK_BACK(c) => c.tokio_write_unencrypted_server(w).await,
            Self::MSG_MOVE_KNOCK_BACK(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_MOVE_FEATHER_FALL(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_MOVE_NORMAL_FALL(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_MOVE_SET_HOVER(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_MOVE_UNSET_HOVER(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_TRIGGER_CINEMATIC(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_TUTORIAL_FLAGS(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_EMOTE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_TEXT_EMOTE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_INVENTORY_CHANGE_FAILURE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_TRADE_STATUS(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_TRADE_STATUS_EXTENDED(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_INITIALIZE_FACTIONS(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_SET_FACTION_VISIBLE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_SET_FACTION_STANDING(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_SET_PROFICIENCY(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_ACTION_BUTTONS(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_INITIAL_SPELLS(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_LEARNED_SPELL(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_SUPERCEDED_SPELL(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_CAST_FAILED(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_SPELL_START(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_SPELL_GO(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_SPELL_FAILURE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_SPELL_COOLDOWN(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_COOLDOWN_EVENT(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_PET_CAST_FAILED(c) => c.tokio_write_unencrypted_server(w).await,
            Self::MSG_CHANNEL_START(c) => c.tokio_write_unencrypted_server(w).await,
            Self::MSG_CHANNEL_UPDATE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_AI_REACTION(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_ATTACKSTART(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_ATTACKSTOP(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_ATTACKSWING_NOTINRANGE => SMSG_ATTACKSWING_NOTINRANGE{}.tokio_write_unencrypted_server(w).await,
            Self::SMSG_ATTACKSWING_BADFACING => SMSG_ATTACKSWING_BADFACING{}.tokio_write_unencrypted_server(w).await,
            Self::SMSG_INSTANCE_LOCK_WARNING_QUERY(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_ATTACKSWING_DEADTARGET => SMSG_ATTACKSWING_DEADTARGET{}.tokio_write_unencrypted_server(w).await,
            Self::SMSG_ATTACKSWING_CANT_ATTACK => SMSG_ATTACKSWING_CANT_ATTACK{}.tokio_write_unencrypted_server(w).await,
            Self::SMSG_ATTACKERSTATEUPDATE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_CANCEL_COMBAT => SMSG_CANCEL_COMBAT{}.tokio_write_unencrypted_server(w).await,
            Self::SMSG_SPELLHEALLOG(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_SPELLENERGIZELOG(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_BREAK_TARGET(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_BINDPOINTUPDATE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_PLAYERBOUND(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_CLIENT_CONTROL_UPDATE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_RESURRECT_REQUEST(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_LOOT_RESPONSE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_LOOT_RELEASE_RESPONSE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_LOOT_REMOVED(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_LOOT_MONEY_NOTIFY(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_LOOT_CLEAR_MONEY => SMSG_LOOT_CLEAR_MONEY{}.tokio_write_unencrypted_server(w).await,
            Self::SMSG_ITEM_PUSH_RESULT(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_DUEL_REQUESTED(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_DUEL_OUTOFBOUNDS => SMSG_DUEL_OUTOFBOUNDS{}.tokio_write_unencrypted_server(w).await,
            Self::SMSG_DUEL_INBOUNDS => SMSG_DUEL_INBOUNDS{}.tokio_write_unencrypted_server(w).await,
            Self::SMSG_DUEL_COMPLETE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_DUEL_WINNER(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_MOUNTRESULT(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_MOUNTSPECIAL_ANIM(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_PET_TAME_FAILURE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_PET_NAME_INVALID(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_PET_SPELLS(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_PET_MODE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_GOSSIP_MESSAGE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_GOSSIP_COMPLETE => SMSG_GOSSIP_COMPLETE{}.tokio_write_unencrypted_server(w).await,
            Self::SMSG_NPC_TEXT_UPDATE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_QUESTGIVER_STATUS(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_QUESTGIVER_QUEST_LIST(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_QUESTGIVER_QUEST_DETAILS(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_QUESTGIVER_REQUEST_ITEMS(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_QUESTGIVER_OFFER_REWARD(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_QUESTGIVER_QUEST_INVALID(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_QUESTGIVER_QUEST_COMPLETE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_QUESTGIVER_QUEST_FAILED(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_QUESTLOG_FULL => SMSG_QUESTLOG_FULL{}.tokio_write_unencrypted_server(w).await,
            Self::SMSG_QUESTUPDATE_FAILED(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_QUESTUPDATE_FAILEDTIMER(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_QUESTUPDATE_COMPLETE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_QUESTUPDATE_ADD_KILL(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_QUESTUPDATE_ADD_ITEM(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_QUEST_CONFIRM_ACCEPT(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_LIST_INVENTORY(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_SELL_ITEM(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_BUY_ITEM(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_BUY_FAILED(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_SHOWTAXINODES(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_TAXINODE_STATUS(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_ACTIVATETAXIREPLY(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_NEW_TAXI_PATH => SMSG_NEW_TAXI_PATH{}.tokio_write_unencrypted_server(w).await,
            Self::SMSG_TRAINER_LIST(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_TRAINER_BUY_SUCCEEDED(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_TRAINER_BUY_FAILED(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_SHOW_BANK(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_BUY_BANK_SLOT_RESULT(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_PETITION_SHOWLIST(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_PETITION_SHOW_SIGNATURES(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_PETITION_SIGN_RESULTS(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_TURN_IN_PETITION_RESULTS(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_PETITION_QUERY_RESPONSE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_FISH_NOT_HOOKED => SMSG_FISH_NOT_HOOKED{}.tokio_write_unencrypted_server(w).await,
            Self::SMSG_FISH_ESCAPED => SMSG_FISH_ESCAPED{}.tokio_write_unencrypted_server(w).await,
            Self::SMSG_NOTIFICATION(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_PLAYED_TIME(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_QUERY_TIME_RESPONSE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_LOG_XPGAIN(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_LEVELUP_INFO(c) => c.tokio_write_unencrypted_server(w).await,
            Self::MSG_MINIMAP_PING(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_ENCHANTMENTLOG(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_START_MIRROR_TIMER(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_PAUSE_MIRROR_TIMER(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_STOP_MIRROR_TIMER(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_PONG(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_CLEAR_COOLDOWN(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_GAMEOBJECT_PAGETEXT(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_SPELL_DELAYED(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_QUEST_POI_QUERY_RESPONSE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_ITEM_TIME_UPDATE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_ITEM_ENCHANT_TIME_UPDATE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_AUTH_CHALLENGE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_AUTH_RESPONSE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::MSG_SAVE_GUILD_EMBLEM(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_PLAY_SPELL_VISUAL(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_PARTYKILLLOG(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_COMPRESSED_UPDATE_OBJECT(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_PLAY_SPELL_IMPACT(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_EXPLORATION_EXPERIENCE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::MSG_RANDOM_ROLL(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_ENVIRONMENTAL_DAMAGE_LOG(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_LFG_PLAYER_REWARD(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_LFG_TELEPORT_DENIED(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_REMOVED_SPELL(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_GMTICKET_CREATE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_GMTICKET_UPDATETEXT(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_ACCOUNT_DATA_TIMES(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_UPDATE_ACCOUNT_DATA(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_GMTICKET_GETTICKET(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_UPDATE_INSTANCE_ENCOUNTER_UNIT(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_GAMEOBJECT_DESPAWN_ANIM(c) => c.tokio_write_unencrypted_server(w).await,
            Self::MSG_CORPSE_QUERY(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_GMTICKET_DELETETICKET(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_CHAT_WRONG_FACTION => SMSG_CHAT_WRONG_FACTION{}.tokio_write_unencrypted_server(w).await,
            Self::SMSG_GMTICKET_SYSTEMSTATUS(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_QUEST_FORCE_REMOVE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_SPIRIT_HEALER_CONFIRM(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_GOSSIP_POI(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_LOGIN_VERIFY_WORLD(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_SEND_MAIL_RESULT(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_MAIL_LIST_RESULT(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_BATTLEFIELD_LIST(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_ITEM_TEXT_QUERY_RESPONSE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_SPELLLOGMISS(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_SPELLLOGEXECUTE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_PERIODICAURALOG(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_SPELLDAMAGESHIELD(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_SPELLNONMELEEDAMAGELOG(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_RESURRECT_FAILED(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_ZONE_UNDER_ATTACK(c) => c.tokio_write_unencrypted_server(w).await,
            Self::MSG_AUCTION_HELLO(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_AUCTION_COMMAND_RESULT(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_AUCTION_LIST_RESULT(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_AUCTION_OWNER_LIST_RESULT(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_AUCTION_BIDDER_NOTIFICATION(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_AUCTION_OWNER_NOTIFICATION(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_PROCRESIST(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_DISPEL_FAILED(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_SPELLORDAMAGE_IMMUNE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_AUCTION_BIDDER_LIST_RESULT(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_SET_FLAT_SPELL_MODIFIER(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_SET_PCT_SPELL_MODIFIER(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_CORPSE_RECLAIM_DELAY(c) => c.tokio_write_unencrypted_server(w).await,
            Self::MSG_LIST_STABLED_PETS(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_STABLE_RESULT(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_PLAY_MUSIC(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_PLAY_OBJECT_SOUND(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_SPELLDISPELLOG(c) => c.tokio_write_unencrypted_server(w).await,
            Self::MSG_QUERY_NEXT_MAIL_TIME(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_RECEIVED_MAIL(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_RAID_GROUP_ONLY(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_PVP_CREDIT(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_AUCTION_REMOVED_NOTIFICATION(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_SERVER_MESSAGE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_LFG_OFFER_CONTINUE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_SHOW_MAILBOX(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_CANCEL_AUTO_REPEAT(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_STANDSTATE_UPDATE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_LOOT_ALL_PASSED(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_LOOT_ROLL_WON(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_LOOT_START_ROLL(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_LOOT_ROLL(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_LOOT_MASTER_LIST(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_SET_FORCED_REACTIONS(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_SPELL_FAILED_OTHER(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_CHAT_PLAYER_NOT_FOUND(c) => c.tokio_write_unencrypted_server(w).await,
            Self::MSG_TALENT_WIPE_CONFIRM(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_SUMMON_REQUEST(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_MONSTER_MOVE_TRANSPORT(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_PET_BROKEN => SMSG_PET_BROKEN{}.tokio_write_unencrypted_server(w).await,
            Self::MSG_MOVE_FEATHER_FALL(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_FEIGN_DEATH_RESISTED => SMSG_FEIGN_DEATH_RESISTED{}.tokio_write_unencrypted_server(w).await,
            Self::SMSG_DUEL_COUNTDOWN(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_AREA_TRIGGER_MESSAGE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_LFG_ROLE_CHOSEN(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_PLAYER_SKINNED(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_DURABILITY_DAMAGE_DEATH => SMSG_DURABILITY_DAMAGE_DEATH{}.tokio_write_unencrypted_server(w).await,
            Self::SMSG_INIT_WORLD_STATES(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_UPDATE_WORLD_STATE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_ITEM_NAME_QUERY_RESPONSE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_PET_ACTION_FEEDBACK(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_CHAR_RENAME(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_INSTANCE_SAVE_CREATED(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_RAID_INSTANCE_INFO(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_PLAY_SOUND(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_BATTLEFIELD_STATUS(c) => c.tokio_write_unencrypted_server(w).await,
            Self::MSG_INSPECT_HONOR_STATS(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_FORCE_WALK_SPEED_CHANGE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_FORCE_SWIM_BACK_SPEED_CHANGE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_FORCE_TURN_RATE_CHANGE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_AREA_SPIRIT_HEALER_TIME(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_WARDEN_DATA(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_GROUP_JOINED_BATTLEGROUND(c) => c.tokio_write_unencrypted_server(w).await,
            Self::MSG_BATTLEGROUND_PLAYER_POSITIONS(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_BINDER_CONFIRM(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_BATTLEGROUND_PLAYER_JOINED(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_BATTLEGROUND_PLAYER_LEFT(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_ADDON_INFO(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_PET_UNLEARN_CONFIRM(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_PARTY_MEMBER_STATS_FULL(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_WEATHER(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_RAID_INSTANCE_MESSAGE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_COMPRESSED_MOVES(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_CHAT_RESTRICTED(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_SPLINE_SET_RUN_SPEED(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_SPLINE_SET_RUN_BACK_SPEED(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_SPLINE_SET_SWIM_SPEED(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_SPLINE_SET_WALK_SPEED(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_SPLINE_SET_SWIM_BACK_SPEED(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_SPLINE_SET_TURN_RATE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_SPLINE_MOVE_UNROOT(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_SPLINE_MOVE_FEATHER_FALL(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_SPLINE_MOVE_NORMAL_FALL(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_SPLINE_MOVE_SET_HOVER(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_SPLINE_MOVE_UNSET_HOVER(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_SPLINE_MOVE_WATER_WALK(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_SPLINE_MOVE_LAND_WALK(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_SPLINE_MOVE_START_SWIM(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_SPLINE_MOVE_STOP_SWIM(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_SPLINE_MOVE_SET_RUN_MODE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_SPLINE_MOVE_SET_WALK_MODE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::MSG_MOVE_TIME_SKIPPED(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_SPLINE_MOVE_ROOT(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_INVALIDATE_PLAYER(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_INSTANCE_RESET(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_INSTANCE_RESET_FAILED(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_UPDATE_LAST_INSTANCE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::MSG_RAID_TARGET_UPDATE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::MSG_RAID_READY_CHECK(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_PET_ACTION_SOUND(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_PET_DISMISS_SOUND(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_GM_TICKET_STATUS_UPDATE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::MSG_SET_DUNGEON_DIFFICULTY(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_UPDATE_INSTANCE_OWNERSHIP(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_CHAT_PLAYER_AMBIGUOUS(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_SPELLINSTAKILLLOG(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_SPELL_UPDATE_CHAIN_TARGETS(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_SPELLSTEALLOG(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_DEFENSE_MESSAGE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_INSTANCE_DIFFICULTY(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_MOTD(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_MOVE_SET_CAN_FLY(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_MOVE_UNSET_CAN_FLY(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_ARENA_TEAM_COMMAND_RESULT(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_ARENA_TEAM_QUERY_RESPONSE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_ARENA_TEAM_ROSTER(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_ARENA_TEAM_INVITE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_ARENA_TEAM_EVENT(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_ARENA_TEAM_STATS(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_UPDATE_LFG_LIST(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_LFG_PROPOSAL_UPDATE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_LFG_ROLE_CHECK_UPDATE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_LFG_JOIN_RESULT(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_LFG_QUEUE_STATUS(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_LFG_UPDATE_PLAYER(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_LFG_UPDATE_PARTY(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_LFG_UPDATE_SEARCH(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_LFG_BOOT_PROPOSAL_UPDATE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_LFG_PLAYER_INFO(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_LFG_PARTY_INFO(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_TITLE_EARNED(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_ARENA_ERROR(c) => c.tokio_write_unencrypted_server(w).await,
            Self::MSG_INSPECT_ARENA_TEAMS(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_DEATH_RELEASE_LOC(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_FORCED_DEATH_UPDATE => SMSG_FORCED_DEATH_UPDATE{}.tokio_write_unencrypted_server(w).await,
            Self::MSG_MOVE_SET_FLIGHT_SPEED(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_FORCE_FLIGHT_SPEED_CHANGE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_SPLINE_SET_FLIGHT_SPEED(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_SPLINE_SET_FLIGHT_BACK_SPEED(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_FLIGHT_SPLINE_SYNC(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_REALM_SPLIT(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_TIME_SYNC_REQ(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_RESET_FAILED_NOTIFY(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_LFG_DISABLED => SMSG_LFG_DISABLED{}.tokio_write_unencrypted_server(w).await,
            Self::SMSG_UPDATE_COMBO_POINTS(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_DISMOUNT(c) => c.tokio_write_unencrypted_server(w).await,
            Self::MSG_MOVE_UPDATE_CAN_FLY(c) => c.tokio_write_unencrypted_server(w).await,
            Self::MSG_RAID_READY_CHECK_CONFIRM(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_GM_MESSAGECHAT(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_CLEAR_TARGET(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_CROSSED_INEBRIATION_THRESHOLD(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_KICK_REASON(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_COMPLAIN_RESULT(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_FEATURE_SYSTEM_STATUS(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_CHANNEL_MEMBER_COUNT(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_GUILD_BANK_LIST(c) => c.tokio_write_unencrypted_server(w).await,
            Self::MSG_GUILD_BANK_LOG_QUERY(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_USERLIST_ADD(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_USERLIST_REMOVE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_USERLIST_UPDATE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_INSPECT_TALENT(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_LOOT_LIST(c) => c.tokio_write_unencrypted_server(w).await,
            Self::MSG_GUILD_PERMISSIONS(c) => c.tokio_write_unencrypted_server(w).await,
            Self::MSG_GUILD_BANK_MONEY_WITHDRAWN(c) => c.tokio_write_unencrypted_server(w).await,
            Self::MSG_GUILD_EVENT_LOG_QUERY(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_MIRRORIMAGE_DATA(c) => c.tokio_write_unencrypted_server(w).await,
            Self::MSG_QUERY_GUILD_BANK_TEXT(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_OVERRIDE_LIGHT(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_TOTEM_CREATED(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_QUESTGIVER_STATUS_MULTIPLE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_SET_PLAYER_DECLINED_NAMES_RESULT(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_SEND_UNLEARN_SPELLS(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_PROPOSE_LEVEL_GRANT(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_REFER_A_FRIEND_FAILURE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_SPLINE_MOVE_SET_FLYING(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_SPLINE_MOVE_UNSET_FLYING(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_ENABLE_BARBER_SHOP => SMSG_ENABLE_BARBER_SHOP{}.tokio_write_unencrypted_server(w).await,
            Self::SMSG_BARBER_SHOP_RESULT(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_CALENDAR_SEND_CALENDAR(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_CALENDAR_SEND_EVENT(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_CALENDAR_FILTER_GUILD(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_CALENDAR_ARENA_TEAM(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_CALENDAR_EVENT_INVITE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_CALENDAR_EVENT_INVITE_REMOVED(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_CALENDAR_EVENT_STATUS(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_CALENDAR_COMMAND_RESULT(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_CALENDAR_RAID_LOCKOUT_ADDED(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_CALENDAR_RAID_LOCKOUT_REMOVED(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_CALENDAR_EVENT_INVITE_ALERT(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_CALENDAR_EVENT_INVITE_REMOVED_ALERT(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_CALENDAR_EVENT_REMOVED_ALERT(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_CALENDAR_EVENT_UPDATED_ALERT(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_CALENDAR_EVENT_MODERATOR_STATUS_ALERT(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_CALENDAR_SEND_NUM_PENDING(c) => c.tokio_write_unencrypted_server(w).await,
            Self::MSG_MOVE_SET_PITCH_RATE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_FORCE_PITCH_RATE_CHANGE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_CALENDAR_EVENT_INVITE_NOTES(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_CALENDAR_EVENT_INVITE_NOTES_ALERT(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_UPDATE_ACCOUNT_DATA_COMPLETE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_TRIGGER_MOVIE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_ACHIEVEMENT_EARNED(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_CRITERIA_UPDATE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_RESPOND_INSPECT_ACHIEVEMENTS(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_QUESTUPDATE_ADD_PVP_KILL(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_CALENDAR_RAID_LOCKOUT_UPDATED(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_CHAR_CUSTOMIZE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_SET_PHASE_SHIFT(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_ALL_ACHIEVEMENT_DATA(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_POWER_UPDATE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_HIGHEST_THREAT_UPDATE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_THREAT_UPDATE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_THREAT_REMOVE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_THREAT_CLEAR(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_CONVERT_RUNE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_RESYNC_RUNES(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_ADD_RUNE_POWER(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_AUCTION_LIST_PENDING_SALES(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_MODIFY_COOLDOWN(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_PET_UPDATE_COMBO_POINTS(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_PRE_RESURRECT(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_AURA_UPDATE_ALL(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_AURA_UPDATE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_SERVER_FIRST_ACHIEVEMENT(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_PET_LEARNED_SPELL(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_PET_UNLEARNED_SPELL(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_ON_CANCEL_EXPECTED_RIDE_VEHICLE_AURA => SMSG_ON_CANCEL_EXPECTED_RIDE_VEHICLE_AURA{}.tokio_write_unencrypted_server(w).await,
            Self::SMSG_CRITERIA_DELETED(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_ACHIEVEMENT_DELETED(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_BATTLEGROUND_INFO_THROTTLED => SMSG_BATTLEGROUND_INFO_THROTTLED{}.tokio_write_unencrypted_server(w).await,
            Self::SMSG_PLAYER_VEHICLE_DATA(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_PET_GUIDS(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_CLIENTCACHE_VERSION(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_ITEM_REFUND_INFO_RESPONSE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_ITEM_REFUND_RESULT(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_CORPSE_MAP_POSITION_QUERY_RESPONSE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_CALENDAR_CLEAR_PENDING_ACTION => SMSG_CALENDAR_CLEAR_PENDING_ACTION{}.tokio_write_unencrypted_server(w).await,
            Self::SMSG_EQUIPMENT_SET_LIST(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_SET_PROJECTILE_POSITION(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_TALENTS_INFO(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_ARENA_UNIT_DESTROYED(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_ARENA_TEAM_CHANGE_FAILED_QUEUED(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_MOVE_GRAVITY_DISABLE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_MOVE_GRAVITY_ENABLE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::MSG_MOVE_GRAVITY_CHNG(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_SPLINE_MOVE_GRAVITY_DISABLE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_SPLINE_MOVE_GRAVITY_ENABLE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_EQUIPMENT_SET_USE_RESULT(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_CHAR_FACTION_CHANGE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_BATTLEFIELD_MGR_ENTRY_INVITE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_BATTLEFIELD_MGR_ENTERED(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_BATTLEFIELD_MGR_QUEUE_INVITE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_BATTLEFIELD_MGR_QUEUE_REQUEST_RESPONSE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_BATTLEFIELD_MGR_EJECT_PENDING(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_BATTLEFIELD_MGR_EJECTED(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_BATTLEFIELD_MGR_STATE_CHANGE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::MSG_SET_RAID_DIFFICULTY(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_TOGGLE_XP_GAIN => SMSG_TOGGLE_XP_GAIN{}.tokio_write_unencrypted_server(w).await,
            Self::SMSG_GMRESPONSE_DB_ERROR => SMSG_GMRESPONSE_DB_ERROR{}.tokio_write_unencrypted_server(w).await,
            Self::SMSG_GMRESPONSE_RECEIVED(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_GMRESPONSE_STATUS_UPDATE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_WORLD_STATE_UI_TIMER_UPDATE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_TALENTS_INVOLUNTARILY_RESET(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_QUERY_QUESTS_COMPLETED_RESPONSE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_CORPSE_NOT_IN_INSTANCE => SMSG_CORPSE_NOT_IN_INSTANCE{}.tokio_write_unencrypted_server(w).await,
            Self::SMSG_CAMERA_SHAKE(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_SOCKET_GEMS_RESULT(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_REDIRECT_CLIENT(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_MOVE_SET_COLLISION_HGT(c) => c.tokio_write_unencrypted_server(w).await,
            Self::SMSG_MULTIPLE_MOVES(c) => c.tokio_write_unencrypted_server(w).await,
        }
    }

    #[cfg(all(feature = "async-std", feature = "encryption"))]
    pub async fn astd_write_encrypted_server<W: async_std::io::WriteExt + Unpin + Send>(&self, mut w: W, e: &mut ServerEncrypterHalf) -> Result<(), std::io::Error> {
        match self {
            Self::MSG_MOVE_START_FORWARD(c) => c.astd_write_encrypted_server(w, e).await,
            Self::MSG_MOVE_START_BACKWARD(c) => c.astd_write_encrypted_server(w, e).await,
            Self::MSG_MOVE_STOP(c) => c.astd_write_encrypted_server(w, e).await,
            Self::MSG_MOVE_START_STRAFE_LEFT(c) => c.astd_write_encrypted_server(w, e).await,
            Self::MSG_MOVE_START_STRAFE_RIGHT(c) => c.astd_write_encrypted_server(w, e).await,
            Self::MSG_MOVE_STOP_STRAFE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::MSG_MOVE_JUMP(c) => c.astd_write_encrypted_server(w, e).await,
            Self::MSG_MOVE_START_TURN_LEFT(c) => c.astd_write_encrypted_server(w, e).await,
            Self::MSG_MOVE_START_TURN_RIGHT(c) => c.astd_write_encrypted_server(w, e).await,
            Self::MSG_MOVE_STOP_TURN(c) => c.astd_write_encrypted_server(w, e).await,
            Self::MSG_MOVE_START_PITCH_UP(c) => c.astd_write_encrypted_server(w, e).await,
            Self::MSG_MOVE_START_PITCH_DOWN(c) => c.astd_write_encrypted_server(w, e).await,
            Self::MSG_MOVE_STOP_PITCH(c) => c.astd_write_encrypted_server(w, e).await,
            Self::MSG_MOVE_SET_RUN_MODE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::MSG_MOVE_SET_WALK_MODE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::MSG_MOVE_FALL_LAND(c) => c.astd_write_encrypted_server(w, e).await,
            Self::MSG_MOVE_START_SWIM(c) => c.astd_write_encrypted_server(w, e).await,
            Self::MSG_MOVE_STOP_SWIM(c) => c.astd_write_encrypted_server(w, e).await,
            Self::MSG_MOVE_SET_FACING(c) => c.astd_write_encrypted_server(w, e).await,
            Self::MSG_MOVE_SET_PITCH(c) => c.astd_write_encrypted_server(w, e).await,
            Self::MSG_MOVE_WORLDPORT_ACK => MSG_MOVE_WORLDPORT_ACK{}.astd_write_encrypted_server(w, e).await,
            Self::MSG_MOVE_HEARTBEAT(c) => c.astd_write_encrypted_server(w, e).await,
            Self::MSG_MOVE_HOVER(c) => c.astd_write_encrypted_server(w, e).await,
            Self::MSG_PETITION_DECLINE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::MSG_TABARDVENDOR_ACTIVATE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::MSG_QUEST_PUSH_RESULT(c) => c.astd_write_encrypted_server(w, e).await,
            Self::MSG_MOVE_WATER_WALK(c) => c.astd_write_encrypted_server(w, e).await,
            Self::MSG_PETITION_RENAME(c) => c.astd_write_encrypted_server(w, e).await,
            Self::MSG_MOVE_START_ASCEND(c) => c.astd_write_encrypted_server(w, e).await,
            Self::MSG_MOVE_STOP_ASCEND(c) => c.astd_write_encrypted_server(w, e).await,
            Self::MSG_MOVE_SET_FLIGHT_BACK_SPEED(c) => c.astd_write_encrypted_server(w, e).await,
            Self::MSG_MOVE_START_DESCEND(c) => c.astd_write_encrypted_server(w, e).await,
            Self::CMSG_CALENDAR_GET_NUM_PENDING => CMSG_CALENDAR_GET_NUM_PENDING{}.astd_write_encrypted_server(w, e).await,
            Self::SMSG_CHAR_CREATE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_CHAR_ENUM(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_CHAR_DELETE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_NEW_WORLD(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_TRANSFER_PENDING(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_TRANSFER_ABORTED(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_CHARACTER_LOGIN_FAILED(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_LOGIN_SETTIMESPEED(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_LOGOUT_RESPONSE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_LOGOUT_COMPLETE => SMSG_LOGOUT_COMPLETE{}.astd_write_encrypted_server(w, e).await,
            Self::SMSG_LOGOUT_CANCEL_ACK => SMSG_LOGOUT_CANCEL_ACK{}.astd_write_encrypted_server(w, e).await,
            Self::SMSG_NAME_QUERY_RESPONSE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_PET_NAME_QUERY_RESPONSE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_GUILD_QUERY_RESPONSE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_ITEM_QUERY_SINGLE_RESPONSE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_PAGE_TEXT_QUERY_RESPONSE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_QUEST_QUERY_RESPONSE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_GAMEOBJECT_QUERY_RESPONSE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_CREATURE_QUERY_RESPONSE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_WHO(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_WHOIS(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_CONTACT_LIST(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_FRIEND_STATUS(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_GROUP_INVITE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_GROUP_DECLINE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_GROUP_UNINVITE => SMSG_GROUP_UNINVITE{}.astd_write_encrypted_server(w, e).await,
            Self::SMSG_GROUP_SET_LEADER(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_GROUP_DESTROYED => SMSG_GROUP_DESTROYED{}.astd_write_encrypted_server(w, e).await,
            Self::SMSG_GROUP_LIST(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_PARTY_MEMBER_STATS(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_PARTY_COMMAND_RESULT(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_GUILD_INVITE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_GUILD_DECLINE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_GUILD_INFO(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_GUILD_ROSTER(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_GUILD_EVENT(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_GUILD_COMMAND_RESULT(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_MESSAGECHAT(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_CHANNEL_NOTIFY(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_CHANNEL_LIST(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_UPDATE_OBJECT(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_DESTROY_OBJECT(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_READ_ITEM_OK(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_READ_ITEM_FAILED(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_ITEM_COOLDOWN(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_GAMEOBJECT_CUSTOM_ANIM(c) => c.astd_write_encrypted_server(w, e).await,
            Self::MSG_MOVE_TELEPORT_CHEAT(c) => c.astd_write_encrypted_server(w, e).await,
            Self::MSG_MOVE_TELEPORT_ACK(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_MONSTER_MOVE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_MOVE_WATER_WALK(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_MOVE_LAND_WALK(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_FORCE_RUN_SPEED_CHANGE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_FORCE_RUN_BACK_SPEED_CHANGE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_FORCE_SWIM_SPEED_CHANGE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_FORCE_MOVE_ROOT(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_FORCE_MOVE_UNROOT(c) => c.astd_write_encrypted_server(w, e).await,
            Self::MSG_MOVE_ROOT(c) => c.astd_write_encrypted_server(w, e).await,
            Self::MSG_MOVE_UNROOT(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_MOVE_KNOCK_BACK(c) => c.astd_write_encrypted_server(w, e).await,
            Self::MSG_MOVE_KNOCK_BACK(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_MOVE_FEATHER_FALL(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_MOVE_NORMAL_FALL(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_MOVE_SET_HOVER(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_MOVE_UNSET_HOVER(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_TRIGGER_CINEMATIC(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_TUTORIAL_FLAGS(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_EMOTE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_TEXT_EMOTE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_INVENTORY_CHANGE_FAILURE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_TRADE_STATUS(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_TRADE_STATUS_EXTENDED(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_INITIALIZE_FACTIONS(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_SET_FACTION_VISIBLE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_SET_FACTION_STANDING(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_SET_PROFICIENCY(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_ACTION_BUTTONS(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_INITIAL_SPELLS(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_LEARNED_SPELL(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_SUPERCEDED_SPELL(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_CAST_FAILED(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_SPELL_START(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_SPELL_GO(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_SPELL_FAILURE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_SPELL_COOLDOWN(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_COOLDOWN_EVENT(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_PET_CAST_FAILED(c) => c.astd_write_encrypted_server(w, e).await,
            Self::MSG_CHANNEL_START(c) => c.astd_write_encrypted_server(w, e).await,
            Self::MSG_CHANNEL_UPDATE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_AI_REACTION(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_ATTACKSTART(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_ATTACKSTOP(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_ATTACKSWING_NOTINRANGE => SMSG_ATTACKSWING_NOTINRANGE{}.astd_write_encrypted_server(w, e).await,
            Self::SMSG_ATTACKSWING_BADFACING => SMSG_ATTACKSWING_BADFACING{}.astd_write_encrypted_server(w, e).await,
            Self::SMSG_INSTANCE_LOCK_WARNING_QUERY(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_ATTACKSWING_DEADTARGET => SMSG_ATTACKSWING_DEADTARGET{}.astd_write_encrypted_server(w, e).await,
            Self::SMSG_ATTACKSWING_CANT_ATTACK => SMSG_ATTACKSWING_CANT_ATTACK{}.astd_write_encrypted_server(w, e).await,
            Self::SMSG_ATTACKERSTATEUPDATE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_CANCEL_COMBAT => SMSG_CANCEL_COMBAT{}.astd_write_encrypted_server(w, e).await,
            Self::SMSG_SPELLHEALLOG(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_SPELLENERGIZELOG(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_BREAK_TARGET(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_BINDPOINTUPDATE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_PLAYERBOUND(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_CLIENT_CONTROL_UPDATE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_RESURRECT_REQUEST(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_LOOT_RESPONSE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_LOOT_RELEASE_RESPONSE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_LOOT_REMOVED(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_LOOT_MONEY_NOTIFY(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_LOOT_CLEAR_MONEY => SMSG_LOOT_CLEAR_MONEY{}.astd_write_encrypted_server(w, e).await,
            Self::SMSG_ITEM_PUSH_RESULT(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_DUEL_REQUESTED(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_DUEL_OUTOFBOUNDS => SMSG_DUEL_OUTOFBOUNDS{}.astd_write_encrypted_server(w, e).await,
            Self::SMSG_DUEL_INBOUNDS => SMSG_DUEL_INBOUNDS{}.astd_write_encrypted_server(w, e).await,
            Self::SMSG_DUEL_COMPLETE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_DUEL_WINNER(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_MOUNTRESULT(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_MOUNTSPECIAL_ANIM(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_PET_TAME_FAILURE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_PET_NAME_INVALID(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_PET_SPELLS(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_PET_MODE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_GOSSIP_MESSAGE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_GOSSIP_COMPLETE => SMSG_GOSSIP_COMPLETE{}.astd_write_encrypted_server(w, e).await,
            Self::SMSG_NPC_TEXT_UPDATE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_QUESTGIVER_STATUS(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_QUESTGIVER_QUEST_LIST(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_QUESTGIVER_QUEST_DETAILS(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_QUESTGIVER_REQUEST_ITEMS(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_QUESTGIVER_OFFER_REWARD(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_QUESTGIVER_QUEST_INVALID(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_QUESTGIVER_QUEST_COMPLETE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_QUESTGIVER_QUEST_FAILED(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_QUESTLOG_FULL => SMSG_QUESTLOG_FULL{}.astd_write_encrypted_server(w, e).await,
            Self::SMSG_QUESTUPDATE_FAILED(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_QUESTUPDATE_FAILEDTIMER(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_QUESTUPDATE_COMPLETE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_QUESTUPDATE_ADD_KILL(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_QUESTUPDATE_ADD_ITEM(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_QUEST_CONFIRM_ACCEPT(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_LIST_INVENTORY(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_SELL_ITEM(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_BUY_ITEM(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_BUY_FAILED(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_SHOWTAXINODES(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_TAXINODE_STATUS(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_ACTIVATETAXIREPLY(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_NEW_TAXI_PATH => SMSG_NEW_TAXI_PATH{}.astd_write_encrypted_server(w, e).await,
            Self::SMSG_TRAINER_LIST(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_TRAINER_BUY_SUCCEEDED(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_TRAINER_BUY_FAILED(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_SHOW_BANK(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_BUY_BANK_SLOT_RESULT(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_PETITION_SHOWLIST(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_PETITION_SHOW_SIGNATURES(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_PETITION_SIGN_RESULTS(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_TURN_IN_PETITION_RESULTS(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_PETITION_QUERY_RESPONSE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_FISH_NOT_HOOKED => SMSG_FISH_NOT_HOOKED{}.astd_write_encrypted_server(w, e).await,
            Self::SMSG_FISH_ESCAPED => SMSG_FISH_ESCAPED{}.astd_write_encrypted_server(w, e).await,
            Self::SMSG_NOTIFICATION(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_PLAYED_TIME(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_QUERY_TIME_RESPONSE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_LOG_XPGAIN(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_LEVELUP_INFO(c) => c.astd_write_encrypted_server(w, e).await,
            Self::MSG_MINIMAP_PING(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_ENCHANTMENTLOG(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_START_MIRROR_TIMER(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_PAUSE_MIRROR_TIMER(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_STOP_MIRROR_TIMER(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_PONG(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_CLEAR_COOLDOWN(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_GAMEOBJECT_PAGETEXT(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_SPELL_DELAYED(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_QUEST_POI_QUERY_RESPONSE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_ITEM_TIME_UPDATE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_ITEM_ENCHANT_TIME_UPDATE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_AUTH_CHALLENGE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_AUTH_RESPONSE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::MSG_SAVE_GUILD_EMBLEM(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_PLAY_SPELL_VISUAL(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_PARTYKILLLOG(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_COMPRESSED_UPDATE_OBJECT(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_PLAY_SPELL_IMPACT(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_EXPLORATION_EXPERIENCE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::MSG_RANDOM_ROLL(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_ENVIRONMENTAL_DAMAGE_LOG(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_LFG_PLAYER_REWARD(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_LFG_TELEPORT_DENIED(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_REMOVED_SPELL(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_GMTICKET_CREATE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_GMTICKET_UPDATETEXT(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_ACCOUNT_DATA_TIMES(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_UPDATE_ACCOUNT_DATA(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_GMTICKET_GETTICKET(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_UPDATE_INSTANCE_ENCOUNTER_UNIT(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_GAMEOBJECT_DESPAWN_ANIM(c) => c.astd_write_encrypted_server(w, e).await,
            Self::MSG_CORPSE_QUERY(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_GMTICKET_DELETETICKET(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_CHAT_WRONG_FACTION => SMSG_CHAT_WRONG_FACTION{}.astd_write_encrypted_server(w, e).await,
            Self::SMSG_GMTICKET_SYSTEMSTATUS(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_QUEST_FORCE_REMOVE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_SPIRIT_HEALER_CONFIRM(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_GOSSIP_POI(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_LOGIN_VERIFY_WORLD(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_SEND_MAIL_RESULT(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_MAIL_LIST_RESULT(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_BATTLEFIELD_LIST(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_ITEM_TEXT_QUERY_RESPONSE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_SPELLLOGMISS(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_SPELLLOGEXECUTE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_PERIODICAURALOG(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_SPELLDAMAGESHIELD(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_SPELLNONMELEEDAMAGELOG(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_RESURRECT_FAILED(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_ZONE_UNDER_ATTACK(c) => c.astd_write_encrypted_server(w, e).await,
            Self::MSG_AUCTION_HELLO(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_AUCTION_COMMAND_RESULT(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_AUCTION_LIST_RESULT(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_AUCTION_OWNER_LIST_RESULT(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_AUCTION_BIDDER_NOTIFICATION(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_AUCTION_OWNER_NOTIFICATION(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_PROCRESIST(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_DISPEL_FAILED(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_SPELLORDAMAGE_IMMUNE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_AUCTION_BIDDER_LIST_RESULT(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_SET_FLAT_SPELL_MODIFIER(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_SET_PCT_SPELL_MODIFIER(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_CORPSE_RECLAIM_DELAY(c) => c.astd_write_encrypted_server(w, e).await,
            Self::MSG_LIST_STABLED_PETS(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_STABLE_RESULT(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_PLAY_MUSIC(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_PLAY_OBJECT_SOUND(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_SPELLDISPELLOG(c) => c.astd_write_encrypted_server(w, e).await,
            Self::MSG_QUERY_NEXT_MAIL_TIME(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_RECEIVED_MAIL(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_RAID_GROUP_ONLY(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_PVP_CREDIT(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_AUCTION_REMOVED_NOTIFICATION(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_SERVER_MESSAGE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_LFG_OFFER_CONTINUE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_SHOW_MAILBOX(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_CANCEL_AUTO_REPEAT(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_STANDSTATE_UPDATE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_LOOT_ALL_PASSED(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_LOOT_ROLL_WON(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_LOOT_START_ROLL(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_LOOT_ROLL(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_LOOT_MASTER_LIST(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_SET_FORCED_REACTIONS(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_SPELL_FAILED_OTHER(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_CHAT_PLAYER_NOT_FOUND(c) => c.astd_write_encrypted_server(w, e).await,
            Self::MSG_TALENT_WIPE_CONFIRM(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_SUMMON_REQUEST(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_MONSTER_MOVE_TRANSPORT(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_PET_BROKEN => SMSG_PET_BROKEN{}.astd_write_encrypted_server(w, e).await,
            Self::MSG_MOVE_FEATHER_FALL(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_FEIGN_DEATH_RESISTED => SMSG_FEIGN_DEATH_RESISTED{}.astd_write_encrypted_server(w, e).await,
            Self::SMSG_DUEL_COUNTDOWN(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_AREA_TRIGGER_MESSAGE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_LFG_ROLE_CHOSEN(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_PLAYER_SKINNED(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_DURABILITY_DAMAGE_DEATH => SMSG_DURABILITY_DAMAGE_DEATH{}.astd_write_encrypted_server(w, e).await,
            Self::SMSG_INIT_WORLD_STATES(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_UPDATE_WORLD_STATE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_ITEM_NAME_QUERY_RESPONSE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_PET_ACTION_FEEDBACK(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_CHAR_RENAME(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_INSTANCE_SAVE_CREATED(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_RAID_INSTANCE_INFO(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_PLAY_SOUND(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_BATTLEFIELD_STATUS(c) => c.astd_write_encrypted_server(w, e).await,
            Self::MSG_INSPECT_HONOR_STATS(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_FORCE_WALK_SPEED_CHANGE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_FORCE_SWIM_BACK_SPEED_CHANGE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_FORCE_TURN_RATE_CHANGE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_AREA_SPIRIT_HEALER_TIME(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_WARDEN_DATA(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_GROUP_JOINED_BATTLEGROUND(c) => c.astd_write_encrypted_server(w, e).await,
            Self::MSG_BATTLEGROUND_PLAYER_POSITIONS(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_BINDER_CONFIRM(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_BATTLEGROUND_PLAYER_JOINED(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_BATTLEGROUND_PLAYER_LEFT(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_ADDON_INFO(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_PET_UNLEARN_CONFIRM(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_PARTY_MEMBER_STATS_FULL(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_WEATHER(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_RAID_INSTANCE_MESSAGE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_COMPRESSED_MOVES(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_CHAT_RESTRICTED(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_SPLINE_SET_RUN_SPEED(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_SPLINE_SET_RUN_BACK_SPEED(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_SPLINE_SET_SWIM_SPEED(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_SPLINE_SET_WALK_SPEED(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_SPLINE_SET_SWIM_BACK_SPEED(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_SPLINE_SET_TURN_RATE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_SPLINE_MOVE_UNROOT(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_SPLINE_MOVE_FEATHER_FALL(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_SPLINE_MOVE_NORMAL_FALL(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_SPLINE_MOVE_SET_HOVER(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_SPLINE_MOVE_UNSET_HOVER(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_SPLINE_MOVE_WATER_WALK(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_SPLINE_MOVE_LAND_WALK(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_SPLINE_MOVE_START_SWIM(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_SPLINE_MOVE_STOP_SWIM(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_SPLINE_MOVE_SET_RUN_MODE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_SPLINE_MOVE_SET_WALK_MODE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::MSG_MOVE_TIME_SKIPPED(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_SPLINE_MOVE_ROOT(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_INVALIDATE_PLAYER(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_INSTANCE_RESET(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_INSTANCE_RESET_FAILED(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_UPDATE_LAST_INSTANCE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::MSG_RAID_TARGET_UPDATE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::MSG_RAID_READY_CHECK(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_PET_ACTION_SOUND(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_PET_DISMISS_SOUND(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_GM_TICKET_STATUS_UPDATE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::MSG_SET_DUNGEON_DIFFICULTY(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_UPDATE_INSTANCE_OWNERSHIP(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_CHAT_PLAYER_AMBIGUOUS(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_SPELLINSTAKILLLOG(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_SPELL_UPDATE_CHAIN_TARGETS(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_SPELLSTEALLOG(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_DEFENSE_MESSAGE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_INSTANCE_DIFFICULTY(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_MOTD(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_MOVE_SET_CAN_FLY(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_MOVE_UNSET_CAN_FLY(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_ARENA_TEAM_COMMAND_RESULT(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_ARENA_TEAM_QUERY_RESPONSE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_ARENA_TEAM_ROSTER(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_ARENA_TEAM_INVITE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_ARENA_TEAM_EVENT(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_ARENA_TEAM_STATS(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_UPDATE_LFG_LIST(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_LFG_PROPOSAL_UPDATE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_LFG_ROLE_CHECK_UPDATE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_LFG_JOIN_RESULT(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_LFG_QUEUE_STATUS(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_LFG_UPDATE_PLAYER(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_LFG_UPDATE_PARTY(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_LFG_UPDATE_SEARCH(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_LFG_BOOT_PROPOSAL_UPDATE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_LFG_PLAYER_INFO(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_LFG_PARTY_INFO(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_TITLE_EARNED(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_ARENA_ERROR(c) => c.astd_write_encrypted_server(w, e).await,
            Self::MSG_INSPECT_ARENA_TEAMS(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_DEATH_RELEASE_LOC(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_FORCED_DEATH_UPDATE => SMSG_FORCED_DEATH_UPDATE{}.astd_write_encrypted_server(w, e).await,
            Self::MSG_MOVE_SET_FLIGHT_SPEED(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_FORCE_FLIGHT_SPEED_CHANGE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_SPLINE_SET_FLIGHT_SPEED(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_SPLINE_SET_FLIGHT_BACK_SPEED(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_FLIGHT_SPLINE_SYNC(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_REALM_SPLIT(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_TIME_SYNC_REQ(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_RESET_FAILED_NOTIFY(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_LFG_DISABLED => SMSG_LFG_DISABLED{}.astd_write_encrypted_server(w, e).await,
            Self::SMSG_UPDATE_COMBO_POINTS(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_DISMOUNT(c) => c.astd_write_encrypted_server(w, e).await,
            Self::MSG_MOVE_UPDATE_CAN_FLY(c) => c.astd_write_encrypted_server(w, e).await,
            Self::MSG_RAID_READY_CHECK_CONFIRM(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_GM_MESSAGECHAT(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_CLEAR_TARGET(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_CROSSED_INEBRIATION_THRESHOLD(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_KICK_REASON(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_COMPLAIN_RESULT(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_FEATURE_SYSTEM_STATUS(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_CHANNEL_MEMBER_COUNT(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_GUILD_BANK_LIST(c) => c.astd_write_encrypted_server(w, e).await,
            Self::MSG_GUILD_BANK_LOG_QUERY(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_USERLIST_ADD(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_USERLIST_REMOVE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_USERLIST_UPDATE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_INSPECT_TALENT(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_LOOT_LIST(c) => c.astd_write_encrypted_server(w, e).await,
            Self::MSG_GUILD_PERMISSIONS(c) => c.astd_write_encrypted_server(w, e).await,
            Self::MSG_GUILD_BANK_MONEY_WITHDRAWN(c) => c.astd_write_encrypted_server(w, e).await,
            Self::MSG_GUILD_EVENT_LOG_QUERY(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_MIRRORIMAGE_DATA(c) => c.astd_write_encrypted_server(w, e).await,
            Self::MSG_QUERY_GUILD_BANK_TEXT(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_OVERRIDE_LIGHT(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_TOTEM_CREATED(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_QUESTGIVER_STATUS_MULTIPLE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_SET_PLAYER_DECLINED_NAMES_RESULT(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_SEND_UNLEARN_SPELLS(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_PROPOSE_LEVEL_GRANT(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_REFER_A_FRIEND_FAILURE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_SPLINE_MOVE_SET_FLYING(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_SPLINE_MOVE_UNSET_FLYING(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_ENABLE_BARBER_SHOP => SMSG_ENABLE_BARBER_SHOP{}.astd_write_encrypted_server(w, e).await,
            Self::SMSG_BARBER_SHOP_RESULT(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_CALENDAR_SEND_CALENDAR(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_CALENDAR_SEND_EVENT(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_CALENDAR_FILTER_GUILD(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_CALENDAR_ARENA_TEAM(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_CALENDAR_EVENT_INVITE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_CALENDAR_EVENT_INVITE_REMOVED(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_CALENDAR_EVENT_STATUS(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_CALENDAR_COMMAND_RESULT(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_CALENDAR_RAID_LOCKOUT_ADDED(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_CALENDAR_RAID_LOCKOUT_REMOVED(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_CALENDAR_EVENT_INVITE_ALERT(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_CALENDAR_EVENT_INVITE_REMOVED_ALERT(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_CALENDAR_EVENT_REMOVED_ALERT(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_CALENDAR_EVENT_UPDATED_ALERT(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_CALENDAR_EVENT_MODERATOR_STATUS_ALERT(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_CALENDAR_SEND_NUM_PENDING(c) => c.astd_write_encrypted_server(w, e).await,
            Self::MSG_MOVE_SET_PITCH_RATE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_FORCE_PITCH_RATE_CHANGE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_CALENDAR_EVENT_INVITE_NOTES(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_CALENDAR_EVENT_INVITE_NOTES_ALERT(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_UPDATE_ACCOUNT_DATA_COMPLETE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_TRIGGER_MOVIE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_ACHIEVEMENT_EARNED(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_CRITERIA_UPDATE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_RESPOND_INSPECT_ACHIEVEMENTS(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_QUESTUPDATE_ADD_PVP_KILL(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_CALENDAR_RAID_LOCKOUT_UPDATED(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_CHAR_CUSTOMIZE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_SET_PHASE_SHIFT(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_ALL_ACHIEVEMENT_DATA(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_POWER_UPDATE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_HIGHEST_THREAT_UPDATE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_THREAT_UPDATE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_THREAT_REMOVE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_THREAT_CLEAR(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_CONVERT_RUNE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_RESYNC_RUNES(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_ADD_RUNE_POWER(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_AUCTION_LIST_PENDING_SALES(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_MODIFY_COOLDOWN(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_PET_UPDATE_COMBO_POINTS(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_PRE_RESURRECT(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_AURA_UPDATE_ALL(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_AURA_UPDATE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_SERVER_FIRST_ACHIEVEMENT(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_PET_LEARNED_SPELL(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_PET_UNLEARNED_SPELL(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_ON_CANCEL_EXPECTED_RIDE_VEHICLE_AURA => SMSG_ON_CANCEL_EXPECTED_RIDE_VEHICLE_AURA{}.astd_write_encrypted_server(w, e).await,
            Self::SMSG_CRITERIA_DELETED(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_ACHIEVEMENT_DELETED(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_BATTLEGROUND_INFO_THROTTLED => SMSG_BATTLEGROUND_INFO_THROTTLED{}.astd_write_encrypted_server(w, e).await,
            Self::SMSG_PLAYER_VEHICLE_DATA(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_PET_GUIDS(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_CLIENTCACHE_VERSION(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_ITEM_REFUND_INFO_RESPONSE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_ITEM_REFUND_RESULT(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_CORPSE_MAP_POSITION_QUERY_RESPONSE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_CALENDAR_CLEAR_PENDING_ACTION => SMSG_CALENDAR_CLEAR_PENDING_ACTION{}.astd_write_encrypted_server(w, e).await,
            Self::SMSG_EQUIPMENT_SET_LIST(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_SET_PROJECTILE_POSITION(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_TALENTS_INFO(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_ARENA_UNIT_DESTROYED(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_ARENA_TEAM_CHANGE_FAILED_QUEUED(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_MOVE_GRAVITY_DISABLE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_MOVE_GRAVITY_ENABLE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::MSG_MOVE_GRAVITY_CHNG(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_SPLINE_MOVE_GRAVITY_DISABLE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_SPLINE_MOVE_GRAVITY_ENABLE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_EQUIPMENT_SET_USE_RESULT(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_CHAR_FACTION_CHANGE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_BATTLEFIELD_MGR_ENTRY_INVITE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_BATTLEFIELD_MGR_ENTERED(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_BATTLEFIELD_MGR_QUEUE_INVITE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_BATTLEFIELD_MGR_QUEUE_REQUEST_RESPONSE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_BATTLEFIELD_MGR_EJECT_PENDING(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_BATTLEFIELD_MGR_EJECTED(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_BATTLEFIELD_MGR_STATE_CHANGE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::MSG_SET_RAID_DIFFICULTY(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_TOGGLE_XP_GAIN => SMSG_TOGGLE_XP_GAIN{}.astd_write_encrypted_server(w, e).await,
            Self::SMSG_GMRESPONSE_DB_ERROR => SMSG_GMRESPONSE_DB_ERROR{}.astd_write_encrypted_server(w, e).await,
            Self::SMSG_GMRESPONSE_RECEIVED(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_GMRESPONSE_STATUS_UPDATE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_WORLD_STATE_UI_TIMER_UPDATE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_TALENTS_INVOLUNTARILY_RESET(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_QUERY_QUESTS_COMPLETED_RESPONSE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_CORPSE_NOT_IN_INSTANCE => SMSG_CORPSE_NOT_IN_INSTANCE{}.astd_write_encrypted_server(w, e).await,
            Self::SMSG_CAMERA_SHAKE(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_SOCKET_GEMS_RESULT(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_REDIRECT_CLIENT(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_MOVE_SET_COLLISION_HGT(c) => c.astd_write_encrypted_server(w, e).await,
            Self::SMSG_MULTIPLE_MOVES(c) => c.astd_write_encrypted_server(w, e).await,
        }
    }

    #[cfg(feature = "async-std")]
    pub async fn astd_write_unencrypted_server<W: async_std::io::WriteExt + Unpin + Send>(&self, mut w: W) -> Result<(), std::io::Error> {
        match self {
            Self::MSG_MOVE_START_FORWARD(c) => c.astd_write_unencrypted_server(w).await,
            Self::MSG_MOVE_START_BACKWARD(c) => c.astd_write_unencrypted_server(w).await,
            Self::MSG_MOVE_STOP(c) => c.astd_write_unencrypted_server(w).await,
            Self::MSG_MOVE_START_STRAFE_LEFT(c) => c.astd_write_unencrypted_server(w).await,
            Self::MSG_MOVE_START_STRAFE_RIGHT(c) => c.astd_write_unencrypted_server(w).await,
            Self::MSG_MOVE_STOP_STRAFE(c) => c.astd_write_unencrypted_server(w).await,
            Self::MSG_MOVE_JUMP(c) => c.astd_write_unencrypted_server(w).await,
            Self::MSG_MOVE_START_TURN_LEFT(c) => c.astd_write_unencrypted_server(w).await,
            Self::MSG_MOVE_START_TURN_RIGHT(c) => c.astd_write_unencrypted_server(w).await,
            Self::MSG_MOVE_STOP_TURN(c) => c.astd_write_unencrypted_server(w).await,
            Self::MSG_MOVE_START_PITCH_UP(c) => c.astd_write_unencrypted_server(w).await,
            Self::MSG_MOVE_START_PITCH_DOWN(c) => c.astd_write_unencrypted_server(w).await,
            Self::MSG_MOVE_STOP_PITCH(c) => c.astd_write_unencrypted_server(w).await,
            Self::MSG_MOVE_SET_RUN_MODE(c) => c.astd_write_unencrypted_server(w).await,
            Self::MSG_MOVE_SET_WALK_MODE(c) => c.astd_write_unencrypted_server(w).await,
            Self::MSG_MOVE_FALL_LAND(c) => c.astd_write_unencrypted_server(w).await,
            Self::MSG_MOVE_START_SWIM(c) => c.astd_write_unencrypted_server(w).await,
            Self::MSG_MOVE_STOP_SWIM(c) => c.astd_write_unencrypted_server(w).await,
            Self::MSG_MOVE_SET_FACING(c) => c.astd_write_unencrypted_server(w).await,
            Self::MSG_MOVE_SET_PITCH(c) => c.astd_write_unencrypted_server(w).await,
            Self::MSG_MOVE_WORLDPORT_ACK => MSG_MOVE_WORLDPORT_ACK{}.astd_write_unencrypted_server(w).await,
            Self::MSG_MOVE_HEARTBEAT(c) => c.astd_write_unencrypted_server(w).await,
            Self::MSG_MOVE_HOVER(c) => c.astd_write_unencrypted_server(w).await,
            Self::MSG_PETITION_DECLINE(c) => c.astd_write_unencrypted_server(w).await,
            Self::MSG_TABARDVENDOR_ACTIVATE(c) => c.astd_write_unencrypted_server(w).await,
            Self::MSG_QUEST_PUSH_RESULT(c) => c.astd_write_unencrypted_server(w).await,
            Self::MSG_MOVE_WATER_WALK(c) => c.astd_write_unencrypted_server(w).await,
            Self::MSG_PETITION_RENAME(c) => c.astd_write_unencrypted_server(w).await,
            Self::MSG_MOVE_START_ASCEND(c) => c.astd_write_unencrypted_server(w).await,
            Self::MSG_MOVE_STOP_ASCEND(c) => c.astd_write_unencrypted_server(w).await,
            Self::MSG_MOVE_SET_FLIGHT_BACK_SPEED(c) => c.astd_write_unencrypted_server(w).await,
            Self::MSG_MOVE_START_DESCEND(c) => c.astd_write_unencrypted_server(w).await,
            Self::CMSG_CALENDAR_GET_NUM_PENDING => CMSG_CALENDAR_GET_NUM_PENDING{}.astd_write_unencrypted_server(w).await,
            Self::SMSG_CHAR_CREATE(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_CHAR_ENUM(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_CHAR_DELETE(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_NEW_WORLD(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_TRANSFER_PENDING(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_TRANSFER_ABORTED(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_CHARACTER_LOGIN_FAILED(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_LOGIN_SETTIMESPEED(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_LOGOUT_RESPONSE(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_LOGOUT_COMPLETE => SMSG_LOGOUT_COMPLETE{}.astd_write_unencrypted_server(w).await,
            Self::SMSG_LOGOUT_CANCEL_ACK => SMSG_LOGOUT_CANCEL_ACK{}.astd_write_unencrypted_server(w).await,
            Self::SMSG_NAME_QUERY_RESPONSE(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_PET_NAME_QUERY_RESPONSE(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_GUILD_QUERY_RESPONSE(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_ITEM_QUERY_SINGLE_RESPONSE(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_PAGE_TEXT_QUERY_RESPONSE(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_QUEST_QUERY_RESPONSE(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_GAMEOBJECT_QUERY_RESPONSE(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_CREATURE_QUERY_RESPONSE(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_WHO(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_WHOIS(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_CONTACT_LIST(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_FRIEND_STATUS(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_GROUP_INVITE(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_GROUP_DECLINE(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_GROUP_UNINVITE => SMSG_GROUP_UNINVITE{}.astd_write_unencrypted_server(w).await,
            Self::SMSG_GROUP_SET_LEADER(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_GROUP_DESTROYED => SMSG_GROUP_DESTROYED{}.astd_write_unencrypted_server(w).await,
            Self::SMSG_GROUP_LIST(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_PARTY_MEMBER_STATS(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_PARTY_COMMAND_RESULT(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_GUILD_INVITE(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_GUILD_DECLINE(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_GUILD_INFO(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_GUILD_ROSTER(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_GUILD_EVENT(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_GUILD_COMMAND_RESULT(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_MESSAGECHAT(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_CHANNEL_NOTIFY(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_CHANNEL_LIST(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_UPDATE_OBJECT(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_DESTROY_OBJECT(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_READ_ITEM_OK(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_READ_ITEM_FAILED(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_ITEM_COOLDOWN(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_GAMEOBJECT_CUSTOM_ANIM(c) => c.astd_write_unencrypted_server(w).await,
            Self::MSG_MOVE_TELEPORT_CHEAT(c) => c.astd_write_unencrypted_server(w).await,
            Self::MSG_MOVE_TELEPORT_ACK(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_MONSTER_MOVE(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_MOVE_WATER_WALK(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_MOVE_LAND_WALK(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_FORCE_RUN_SPEED_CHANGE(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_FORCE_RUN_BACK_SPEED_CHANGE(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_FORCE_SWIM_SPEED_CHANGE(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_FORCE_MOVE_ROOT(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_FORCE_MOVE_UNROOT(c) => c.astd_write_unencrypted_server(w).await,
            Self::MSG_MOVE_ROOT(c) => c.astd_write_unencrypted_server(w).await,
            Self::MSG_MOVE_UNROOT(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_MOVE_KNOCK_BACK(c) => c.astd_write_unencrypted_server(w).await,
            Self::MSG_MOVE_KNOCK_BACK(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_MOVE_FEATHER_FALL(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_MOVE_NORMAL_FALL(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_MOVE_SET_HOVER(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_MOVE_UNSET_HOVER(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_TRIGGER_CINEMATIC(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_TUTORIAL_FLAGS(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_EMOTE(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_TEXT_EMOTE(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_INVENTORY_CHANGE_FAILURE(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_TRADE_STATUS(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_TRADE_STATUS_EXTENDED(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_INITIALIZE_FACTIONS(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_SET_FACTION_VISIBLE(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_SET_FACTION_STANDING(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_SET_PROFICIENCY(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_ACTION_BUTTONS(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_INITIAL_SPELLS(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_LEARNED_SPELL(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_SUPERCEDED_SPELL(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_CAST_FAILED(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_SPELL_START(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_SPELL_GO(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_SPELL_FAILURE(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_SPELL_COOLDOWN(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_COOLDOWN_EVENT(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_PET_CAST_FAILED(c) => c.astd_write_unencrypted_server(w).await,
            Self::MSG_CHANNEL_START(c) => c.astd_write_unencrypted_server(w).await,
            Self::MSG_CHANNEL_UPDATE(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_AI_REACTION(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_ATTACKSTART(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_ATTACKSTOP(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_ATTACKSWING_NOTINRANGE => SMSG_ATTACKSWING_NOTINRANGE{}.astd_write_unencrypted_server(w).await,
            Self::SMSG_ATTACKSWING_BADFACING => SMSG_ATTACKSWING_BADFACING{}.astd_write_unencrypted_server(w).await,
            Self::SMSG_INSTANCE_LOCK_WARNING_QUERY(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_ATTACKSWING_DEADTARGET => SMSG_ATTACKSWING_DEADTARGET{}.astd_write_unencrypted_server(w).await,
            Self::SMSG_ATTACKSWING_CANT_ATTACK => SMSG_ATTACKSWING_CANT_ATTACK{}.astd_write_unencrypted_server(w).await,
            Self::SMSG_ATTACKERSTATEUPDATE(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_CANCEL_COMBAT => SMSG_CANCEL_COMBAT{}.astd_write_unencrypted_server(w).await,
            Self::SMSG_SPELLHEALLOG(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_SPELLENERGIZELOG(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_BREAK_TARGET(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_BINDPOINTUPDATE(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_PLAYERBOUND(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_CLIENT_CONTROL_UPDATE(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_RESURRECT_REQUEST(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_LOOT_RESPONSE(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_LOOT_RELEASE_RESPONSE(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_LOOT_REMOVED(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_LOOT_MONEY_NOTIFY(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_LOOT_CLEAR_MONEY => SMSG_LOOT_CLEAR_MONEY{}.astd_write_unencrypted_server(w).await,
            Self::SMSG_ITEM_PUSH_RESULT(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_DUEL_REQUESTED(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_DUEL_OUTOFBOUNDS => SMSG_DUEL_OUTOFBOUNDS{}.astd_write_unencrypted_server(w).await,
            Self::SMSG_DUEL_INBOUNDS => SMSG_DUEL_INBOUNDS{}.astd_write_unencrypted_server(w).await,
            Self::SMSG_DUEL_COMPLETE(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_DUEL_WINNER(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_MOUNTRESULT(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_MOUNTSPECIAL_ANIM(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_PET_TAME_FAILURE(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_PET_NAME_INVALID(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_PET_SPELLS(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_PET_MODE(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_GOSSIP_MESSAGE(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_GOSSIP_COMPLETE => SMSG_GOSSIP_COMPLETE{}.astd_write_unencrypted_server(w).await,
            Self::SMSG_NPC_TEXT_UPDATE(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_QUESTGIVER_STATUS(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_QUESTGIVER_QUEST_LIST(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_QUESTGIVER_QUEST_DETAILS(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_QUESTGIVER_REQUEST_ITEMS(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_QUESTGIVER_OFFER_REWARD(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_QUESTGIVER_QUEST_INVALID(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_QUESTGIVER_QUEST_COMPLETE(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_QUESTGIVER_QUEST_FAILED(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_QUESTLOG_FULL => SMSG_QUESTLOG_FULL{}.astd_write_unencrypted_server(w).await,
            Self::SMSG_QUESTUPDATE_FAILED(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_QUESTUPDATE_FAILEDTIMER(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_QUESTUPDATE_COMPLETE(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_QUESTUPDATE_ADD_KILL(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_QUESTUPDATE_ADD_ITEM(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_QUEST_CONFIRM_ACCEPT(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_LIST_INVENTORY(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_SELL_ITEM(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_BUY_ITEM(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_BUY_FAILED(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_SHOWTAXINODES(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_TAXINODE_STATUS(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_ACTIVATETAXIREPLY(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_NEW_TAXI_PATH => SMSG_NEW_TAXI_PATH{}.astd_write_unencrypted_server(w).await,
            Self::SMSG_TRAINER_LIST(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_TRAINER_BUY_SUCCEEDED(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_TRAINER_BUY_FAILED(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_SHOW_BANK(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_BUY_BANK_SLOT_RESULT(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_PETITION_SHOWLIST(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_PETITION_SHOW_SIGNATURES(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_PETITION_SIGN_RESULTS(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_TURN_IN_PETITION_RESULTS(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_PETITION_QUERY_RESPONSE(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_FISH_NOT_HOOKED => SMSG_FISH_NOT_HOOKED{}.astd_write_unencrypted_server(w).await,
            Self::SMSG_FISH_ESCAPED => SMSG_FISH_ESCAPED{}.astd_write_unencrypted_server(w).await,
            Self::SMSG_NOTIFICATION(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_PLAYED_TIME(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_QUERY_TIME_RESPONSE(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_LOG_XPGAIN(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_LEVELUP_INFO(c) => c.astd_write_unencrypted_server(w).await,
            Self::MSG_MINIMAP_PING(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_ENCHANTMENTLOG(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_START_MIRROR_TIMER(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_PAUSE_MIRROR_TIMER(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_STOP_MIRROR_TIMER(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_PONG(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_CLEAR_COOLDOWN(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_GAMEOBJECT_PAGETEXT(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_SPELL_DELAYED(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_QUEST_POI_QUERY_RESPONSE(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_ITEM_TIME_UPDATE(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_ITEM_ENCHANT_TIME_UPDATE(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_AUTH_CHALLENGE(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_AUTH_RESPONSE(c) => c.astd_write_unencrypted_server(w).await,
            Self::MSG_SAVE_GUILD_EMBLEM(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_PLAY_SPELL_VISUAL(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_PARTYKILLLOG(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_COMPRESSED_UPDATE_OBJECT(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_PLAY_SPELL_IMPACT(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_EXPLORATION_EXPERIENCE(c) => c.astd_write_unencrypted_server(w).await,
            Self::MSG_RANDOM_ROLL(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_ENVIRONMENTAL_DAMAGE_LOG(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_LFG_PLAYER_REWARD(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_LFG_TELEPORT_DENIED(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_REMOVED_SPELL(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_GMTICKET_CREATE(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_GMTICKET_UPDATETEXT(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_ACCOUNT_DATA_TIMES(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_UPDATE_ACCOUNT_DATA(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_GMTICKET_GETTICKET(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_UPDATE_INSTANCE_ENCOUNTER_UNIT(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_GAMEOBJECT_DESPAWN_ANIM(c) => c.astd_write_unencrypted_server(w).await,
            Self::MSG_CORPSE_QUERY(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_GMTICKET_DELETETICKET(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_CHAT_WRONG_FACTION => SMSG_CHAT_WRONG_FACTION{}.astd_write_unencrypted_server(w).await,
            Self::SMSG_GMTICKET_SYSTEMSTATUS(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_QUEST_FORCE_REMOVE(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_SPIRIT_HEALER_CONFIRM(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_GOSSIP_POI(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_LOGIN_VERIFY_WORLD(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_SEND_MAIL_RESULT(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_MAIL_LIST_RESULT(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_BATTLEFIELD_LIST(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_ITEM_TEXT_QUERY_RESPONSE(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_SPELLLOGMISS(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_SPELLLOGEXECUTE(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_PERIODICAURALOG(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_SPELLDAMAGESHIELD(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_SPELLNONMELEEDAMAGELOG(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_RESURRECT_FAILED(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_ZONE_UNDER_ATTACK(c) => c.astd_write_unencrypted_server(w).await,
            Self::MSG_AUCTION_HELLO(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_AUCTION_COMMAND_RESULT(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_AUCTION_LIST_RESULT(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_AUCTION_OWNER_LIST_RESULT(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_AUCTION_BIDDER_NOTIFICATION(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_AUCTION_OWNER_NOTIFICATION(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_PROCRESIST(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_DISPEL_FAILED(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_SPELLORDAMAGE_IMMUNE(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_AUCTION_BIDDER_LIST_RESULT(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_SET_FLAT_SPELL_MODIFIER(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_SET_PCT_SPELL_MODIFIER(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_CORPSE_RECLAIM_DELAY(c) => c.astd_write_unencrypted_server(w).await,
            Self::MSG_LIST_STABLED_PETS(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_STABLE_RESULT(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_PLAY_MUSIC(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_PLAY_OBJECT_SOUND(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_SPELLDISPELLOG(c) => c.astd_write_unencrypted_server(w).await,
            Self::MSG_QUERY_NEXT_MAIL_TIME(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_RECEIVED_MAIL(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_RAID_GROUP_ONLY(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_PVP_CREDIT(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_AUCTION_REMOVED_NOTIFICATION(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_SERVER_MESSAGE(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_LFG_OFFER_CONTINUE(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_SHOW_MAILBOX(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_CANCEL_AUTO_REPEAT(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_STANDSTATE_UPDATE(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_LOOT_ALL_PASSED(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_LOOT_ROLL_WON(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_LOOT_START_ROLL(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_LOOT_ROLL(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_LOOT_MASTER_LIST(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_SET_FORCED_REACTIONS(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_SPELL_FAILED_OTHER(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_CHAT_PLAYER_NOT_FOUND(c) => c.astd_write_unencrypted_server(w).await,
            Self::MSG_TALENT_WIPE_CONFIRM(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_SUMMON_REQUEST(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_MONSTER_MOVE_TRANSPORT(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_PET_BROKEN => SMSG_PET_BROKEN{}.astd_write_unencrypted_server(w).await,
            Self::MSG_MOVE_FEATHER_FALL(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_FEIGN_DEATH_RESISTED => SMSG_FEIGN_DEATH_RESISTED{}.astd_write_unencrypted_server(w).await,
            Self::SMSG_DUEL_COUNTDOWN(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_AREA_TRIGGER_MESSAGE(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_LFG_ROLE_CHOSEN(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_PLAYER_SKINNED(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_DURABILITY_DAMAGE_DEATH => SMSG_DURABILITY_DAMAGE_DEATH{}.astd_write_unencrypted_server(w).await,
            Self::SMSG_INIT_WORLD_STATES(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_UPDATE_WORLD_STATE(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_ITEM_NAME_QUERY_RESPONSE(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_PET_ACTION_FEEDBACK(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_CHAR_RENAME(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_INSTANCE_SAVE_CREATED(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_RAID_INSTANCE_INFO(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_PLAY_SOUND(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_BATTLEFIELD_STATUS(c) => c.astd_write_unencrypted_server(w).await,
            Self::MSG_INSPECT_HONOR_STATS(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_FORCE_WALK_SPEED_CHANGE(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_FORCE_SWIM_BACK_SPEED_CHANGE(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_FORCE_TURN_RATE_CHANGE(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_AREA_SPIRIT_HEALER_TIME(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_WARDEN_DATA(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_GROUP_JOINED_BATTLEGROUND(c) => c.astd_write_unencrypted_server(w).await,
            Self::MSG_BATTLEGROUND_PLAYER_POSITIONS(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_BINDER_CONFIRM(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_BATTLEGROUND_PLAYER_JOINED(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_BATTLEGROUND_PLAYER_LEFT(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_ADDON_INFO(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_PET_UNLEARN_CONFIRM(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_PARTY_MEMBER_STATS_FULL(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_WEATHER(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_RAID_INSTANCE_MESSAGE(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_COMPRESSED_MOVES(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_CHAT_RESTRICTED(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_SPLINE_SET_RUN_SPEED(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_SPLINE_SET_RUN_BACK_SPEED(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_SPLINE_SET_SWIM_SPEED(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_SPLINE_SET_WALK_SPEED(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_SPLINE_SET_SWIM_BACK_SPEED(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_SPLINE_SET_TURN_RATE(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_SPLINE_MOVE_UNROOT(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_SPLINE_MOVE_FEATHER_FALL(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_SPLINE_MOVE_NORMAL_FALL(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_SPLINE_MOVE_SET_HOVER(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_SPLINE_MOVE_UNSET_HOVER(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_SPLINE_MOVE_WATER_WALK(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_SPLINE_MOVE_LAND_WALK(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_SPLINE_MOVE_START_SWIM(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_SPLINE_MOVE_STOP_SWIM(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_SPLINE_MOVE_SET_RUN_MODE(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_SPLINE_MOVE_SET_WALK_MODE(c) => c.astd_write_unencrypted_server(w).await,
            Self::MSG_MOVE_TIME_SKIPPED(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_SPLINE_MOVE_ROOT(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_INVALIDATE_PLAYER(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_INSTANCE_RESET(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_INSTANCE_RESET_FAILED(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_UPDATE_LAST_INSTANCE(c) => c.astd_write_unencrypted_server(w).await,
            Self::MSG_RAID_TARGET_UPDATE(c) => c.astd_write_unencrypted_server(w).await,
            Self::MSG_RAID_READY_CHECK(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_PET_ACTION_SOUND(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_PET_DISMISS_SOUND(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_GM_TICKET_STATUS_UPDATE(c) => c.astd_write_unencrypted_server(w).await,
            Self::MSG_SET_DUNGEON_DIFFICULTY(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_UPDATE_INSTANCE_OWNERSHIP(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_CHAT_PLAYER_AMBIGUOUS(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_SPELLINSTAKILLLOG(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_SPELL_UPDATE_CHAIN_TARGETS(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_SPELLSTEALLOG(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_DEFENSE_MESSAGE(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_INSTANCE_DIFFICULTY(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_MOTD(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_MOVE_SET_CAN_FLY(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_MOVE_UNSET_CAN_FLY(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_ARENA_TEAM_COMMAND_RESULT(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_ARENA_TEAM_QUERY_RESPONSE(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_ARENA_TEAM_ROSTER(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_ARENA_TEAM_INVITE(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_ARENA_TEAM_EVENT(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_ARENA_TEAM_STATS(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_UPDATE_LFG_LIST(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_LFG_PROPOSAL_UPDATE(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_LFG_ROLE_CHECK_UPDATE(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_LFG_JOIN_RESULT(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_LFG_QUEUE_STATUS(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_LFG_UPDATE_PLAYER(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_LFG_UPDATE_PARTY(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_LFG_UPDATE_SEARCH(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_LFG_BOOT_PROPOSAL_UPDATE(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_LFG_PLAYER_INFO(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_LFG_PARTY_INFO(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_TITLE_EARNED(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_ARENA_ERROR(c) => c.astd_write_unencrypted_server(w).await,
            Self::MSG_INSPECT_ARENA_TEAMS(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_DEATH_RELEASE_LOC(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_FORCED_DEATH_UPDATE => SMSG_FORCED_DEATH_UPDATE{}.astd_write_unencrypted_server(w).await,
            Self::MSG_MOVE_SET_FLIGHT_SPEED(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_FORCE_FLIGHT_SPEED_CHANGE(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_SPLINE_SET_FLIGHT_SPEED(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_SPLINE_SET_FLIGHT_BACK_SPEED(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_FLIGHT_SPLINE_SYNC(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_REALM_SPLIT(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_TIME_SYNC_REQ(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_RESET_FAILED_NOTIFY(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_LFG_DISABLED => SMSG_LFG_DISABLED{}.astd_write_unencrypted_server(w).await,
            Self::SMSG_UPDATE_COMBO_POINTS(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_DISMOUNT(c) => c.astd_write_unencrypted_server(w).await,
            Self::MSG_MOVE_UPDATE_CAN_FLY(c) => c.astd_write_unencrypted_server(w).await,
            Self::MSG_RAID_READY_CHECK_CONFIRM(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_GM_MESSAGECHAT(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_CLEAR_TARGET(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_CROSSED_INEBRIATION_THRESHOLD(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_KICK_REASON(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_COMPLAIN_RESULT(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_FEATURE_SYSTEM_STATUS(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_CHANNEL_MEMBER_COUNT(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_GUILD_BANK_LIST(c) => c.astd_write_unencrypted_server(w).await,
            Self::MSG_GUILD_BANK_LOG_QUERY(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_USERLIST_ADD(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_USERLIST_REMOVE(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_USERLIST_UPDATE(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_INSPECT_TALENT(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_LOOT_LIST(c) => c.astd_write_unencrypted_server(w).await,
            Self::MSG_GUILD_PERMISSIONS(c) => c.astd_write_unencrypted_server(w).await,
            Self::MSG_GUILD_BANK_MONEY_WITHDRAWN(c) => c.astd_write_unencrypted_server(w).await,
            Self::MSG_GUILD_EVENT_LOG_QUERY(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_MIRRORIMAGE_DATA(c) => c.astd_write_unencrypted_server(w).await,
            Self::MSG_QUERY_GUILD_BANK_TEXT(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_OVERRIDE_LIGHT(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_TOTEM_CREATED(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_QUESTGIVER_STATUS_MULTIPLE(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_SET_PLAYER_DECLINED_NAMES_RESULT(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_SEND_UNLEARN_SPELLS(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_PROPOSE_LEVEL_GRANT(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_REFER_A_FRIEND_FAILURE(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_SPLINE_MOVE_SET_FLYING(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_SPLINE_MOVE_UNSET_FLYING(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_ENABLE_BARBER_SHOP => SMSG_ENABLE_BARBER_SHOP{}.astd_write_unencrypted_server(w).await,
            Self::SMSG_BARBER_SHOP_RESULT(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_CALENDAR_SEND_CALENDAR(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_CALENDAR_SEND_EVENT(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_CALENDAR_FILTER_GUILD(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_CALENDAR_ARENA_TEAM(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_CALENDAR_EVENT_INVITE(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_CALENDAR_EVENT_INVITE_REMOVED(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_CALENDAR_EVENT_STATUS(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_CALENDAR_COMMAND_RESULT(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_CALENDAR_RAID_LOCKOUT_ADDED(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_CALENDAR_RAID_LOCKOUT_REMOVED(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_CALENDAR_EVENT_INVITE_ALERT(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_CALENDAR_EVENT_INVITE_REMOVED_ALERT(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_CALENDAR_EVENT_REMOVED_ALERT(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_CALENDAR_EVENT_UPDATED_ALERT(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_CALENDAR_EVENT_MODERATOR_STATUS_ALERT(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_CALENDAR_SEND_NUM_PENDING(c) => c.astd_write_unencrypted_server(w).await,
            Self::MSG_MOVE_SET_PITCH_RATE(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_FORCE_PITCH_RATE_CHANGE(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_CALENDAR_EVENT_INVITE_NOTES(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_CALENDAR_EVENT_INVITE_NOTES_ALERT(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_UPDATE_ACCOUNT_DATA_COMPLETE(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_TRIGGER_MOVIE(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_ACHIEVEMENT_EARNED(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_CRITERIA_UPDATE(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_RESPOND_INSPECT_ACHIEVEMENTS(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_QUESTUPDATE_ADD_PVP_KILL(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_CALENDAR_RAID_LOCKOUT_UPDATED(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_CHAR_CUSTOMIZE(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_SET_PHASE_SHIFT(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_ALL_ACHIEVEMENT_DATA(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_POWER_UPDATE(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_HIGHEST_THREAT_UPDATE(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_THREAT_UPDATE(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_THREAT_REMOVE(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_THREAT_CLEAR(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_CONVERT_RUNE(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_RESYNC_RUNES(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_ADD_RUNE_POWER(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_AUCTION_LIST_PENDING_SALES(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_MODIFY_COOLDOWN(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_PET_UPDATE_COMBO_POINTS(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_PRE_RESURRECT(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_AURA_UPDATE_ALL(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_AURA_UPDATE(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_SERVER_FIRST_ACHIEVEMENT(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_PET_LEARNED_SPELL(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_PET_UNLEARNED_SPELL(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_ON_CANCEL_EXPECTED_RIDE_VEHICLE_AURA => SMSG_ON_CANCEL_EXPECTED_RIDE_VEHICLE_AURA{}.astd_write_unencrypted_server(w).await,
            Self::SMSG_CRITERIA_DELETED(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_ACHIEVEMENT_DELETED(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_BATTLEGROUND_INFO_THROTTLED => SMSG_BATTLEGROUND_INFO_THROTTLED{}.astd_write_unencrypted_server(w).await,
            Self::SMSG_PLAYER_VEHICLE_DATA(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_PET_GUIDS(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_CLIENTCACHE_VERSION(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_ITEM_REFUND_INFO_RESPONSE(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_ITEM_REFUND_RESULT(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_CORPSE_MAP_POSITION_QUERY_RESPONSE(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_CALENDAR_CLEAR_PENDING_ACTION => SMSG_CALENDAR_CLEAR_PENDING_ACTION{}.astd_write_unencrypted_server(w).await,
            Self::SMSG_EQUIPMENT_SET_LIST(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_SET_PROJECTILE_POSITION(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_TALENTS_INFO(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_ARENA_UNIT_DESTROYED(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_ARENA_TEAM_CHANGE_FAILED_QUEUED(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_MOVE_GRAVITY_DISABLE(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_MOVE_GRAVITY_ENABLE(c) => c.astd_write_unencrypted_server(w).await,
            Self::MSG_MOVE_GRAVITY_CHNG(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_SPLINE_MOVE_GRAVITY_DISABLE(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_SPLINE_MOVE_GRAVITY_ENABLE(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_EQUIPMENT_SET_USE_RESULT(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_CHAR_FACTION_CHANGE(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_BATTLEFIELD_MGR_ENTRY_INVITE(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_BATTLEFIELD_MGR_ENTERED(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_BATTLEFIELD_MGR_QUEUE_INVITE(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_BATTLEFIELD_MGR_QUEUE_REQUEST_RESPONSE(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_BATTLEFIELD_MGR_EJECT_PENDING(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_BATTLEFIELD_MGR_EJECTED(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_BATTLEFIELD_MGR_STATE_CHANGE(c) => c.astd_write_unencrypted_server(w).await,
            Self::MSG_SET_RAID_DIFFICULTY(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_TOGGLE_XP_GAIN => SMSG_TOGGLE_XP_GAIN{}.astd_write_unencrypted_server(w).await,
            Self::SMSG_GMRESPONSE_DB_ERROR => SMSG_GMRESPONSE_DB_ERROR{}.astd_write_unencrypted_server(w).await,
            Self::SMSG_GMRESPONSE_RECEIVED(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_GMRESPONSE_STATUS_UPDATE(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_WORLD_STATE_UI_TIMER_UPDATE(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_TALENTS_INVOLUNTARILY_RESET(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_QUERY_QUESTS_COMPLETED_RESPONSE(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_CORPSE_NOT_IN_INSTANCE => SMSG_CORPSE_NOT_IN_INSTANCE{}.astd_write_unencrypted_server(w).await,
            Self::SMSG_CAMERA_SHAKE(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_SOCKET_GEMS_RESULT(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_REDIRECT_CLIENT(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_MOVE_SET_COLLISION_HGT(c) => c.astd_write_unencrypted_server(w).await,
            Self::SMSG_MULTIPLE_MOVES(c) => c.astd_write_unencrypted_server(w).await,
        }
    }

    pub const fn movement_info(&self) -> Option<&MovementInfo> {
        match self {
            Self::MSG_MOVE_ROOT(c) => Some(&c.info),
            Self::MSG_MOVE_UNROOT(c) => Some(&c.info),
            _ => None,
        }
    }

    #[cfg(feature = "print-testcase")]
    pub fn to_test_case_string(&self) -> Option<String> {
        match self {
            Self::MSG_MOVE_START_FORWARD(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::MSG_MOVE_START_BACKWARD(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::MSG_MOVE_STOP(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::MSG_MOVE_START_STRAFE_LEFT(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::MSG_MOVE_START_STRAFE_RIGHT(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::MSG_MOVE_STOP_STRAFE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::MSG_MOVE_JUMP(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::MSG_MOVE_START_TURN_LEFT(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::MSG_MOVE_START_TURN_RIGHT(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::MSG_MOVE_STOP_TURN(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::MSG_MOVE_START_PITCH_UP(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::MSG_MOVE_START_PITCH_DOWN(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::MSG_MOVE_STOP_PITCH(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::MSG_MOVE_SET_RUN_MODE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::MSG_MOVE_SET_WALK_MODE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::MSG_MOVE_FALL_LAND(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::MSG_MOVE_START_SWIM(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::MSG_MOVE_STOP_SWIM(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::MSG_MOVE_SET_FACING(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::MSG_MOVE_SET_PITCH(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::MSG_MOVE_WORLDPORT_ACK => crate::Message::to_test_case_string(&MSG_MOVE_WORLDPORT_ACK{}),
            Self::MSG_MOVE_HEARTBEAT(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::MSG_MOVE_HOVER(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::MSG_PETITION_DECLINE(c) => crate::Message::to_test_case_string(c),
            Self::MSG_TABARDVENDOR_ACTIVATE(c) => crate::Message::to_test_case_string(c),
            Self::MSG_QUEST_PUSH_RESULT(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::MSG_MOVE_WATER_WALK(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::MSG_PETITION_RENAME(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::MSG_MOVE_START_ASCEND(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::MSG_MOVE_STOP_ASCEND(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::MSG_MOVE_SET_FLIGHT_BACK_SPEED(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::MSG_MOVE_START_DESCEND(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::CMSG_CALENDAR_GET_NUM_PENDING => crate::Message::to_test_case_string(&CMSG_CALENDAR_GET_NUM_PENDING{}),
            Self::SMSG_CHAR_CREATE(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_CHAR_ENUM(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_CHAR_DELETE(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_NEW_WORLD(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_TRANSFER_PENDING(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_TRANSFER_ABORTED(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_CHARACTER_LOGIN_FAILED(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_LOGIN_SETTIMESPEED(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_LOGOUT_CANCEL_ACK => crate::Message::to_test_case_string(&SMSG_LOGOUT_CANCEL_ACK{}),
            Self::SMSG_NAME_QUERY_RESPONSE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_PET_NAME_QUERY_RESPONSE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_GUILD_QUERY_RESPONSE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_ITEM_QUERY_SINGLE_RESPONSE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_PAGE_TEXT_QUERY_RESPONSE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_QUEST_QUERY_RESPONSE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_GAMEOBJECT_QUERY_RESPONSE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_CREATURE_QUERY_RESPONSE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_WHO(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_WHOIS(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_CONTACT_LIST(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_FRIEND_STATUS(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_GROUP_INVITE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_GROUP_DECLINE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_GROUP_UNINVITE => crate::Message::to_test_case_string(&SMSG_GROUP_UNINVITE{}),
            Self::SMSG_GROUP_SET_LEADER(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_GROUP_DESTROYED => crate::Message::to_test_case_string(&SMSG_GROUP_DESTROYED{}),
            Self::SMSG_GROUP_LIST(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_PARTY_MEMBER_STATS(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_PARTY_COMMAND_RESULT(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_GUILD_INVITE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_GUILD_DECLINE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_GUILD_INFO(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_GUILD_ROSTER(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_GUILD_EVENT(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_GUILD_COMMAND_RESULT(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_MESSAGECHAT(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_CHANNEL_NOTIFY(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_CHANNEL_LIST(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_DESTROY_OBJECT(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_READ_ITEM_OK(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_READ_ITEM_FAILED(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_ITEM_COOLDOWN(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_GAMEOBJECT_CUSTOM_ANIM(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::MSG_MOVE_TELEPORT_CHEAT(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::MSG_MOVE_TELEPORT_ACK(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_MONSTER_MOVE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_MOVE_WATER_WALK(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_MOVE_LAND_WALK(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_FORCE_RUN_SPEED_CHANGE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_FORCE_RUN_BACK_SPEED_CHANGE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_FORCE_SWIM_SPEED_CHANGE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_FORCE_MOVE_ROOT(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_FORCE_MOVE_UNROOT(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::MSG_MOVE_ROOT(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::MSG_MOVE_UNROOT(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_MOVE_KNOCK_BACK(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::MSG_MOVE_KNOCK_BACK(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_MOVE_FEATHER_FALL(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_MOVE_NORMAL_FALL(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_MOVE_SET_HOVER(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_MOVE_UNSET_HOVER(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_TRIGGER_CINEMATIC(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_EMOTE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_TEXT_EMOTE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_INVENTORY_CHANGE_FAILURE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_TRADE_STATUS(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_TRADE_STATUS_EXTENDED(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_INITIALIZE_FACTIONS(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_SET_FACTION_VISIBLE(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_SET_FACTION_STANDING(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_SET_PROFICIENCY(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_ACTION_BUTTONS(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_INITIAL_SPELLS(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_LEARNED_SPELL(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_SUPERCEDED_SPELL(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_CAST_FAILED(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_SPELL_START(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_SPELL_GO(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_SPELL_FAILURE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_SPELL_COOLDOWN(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_COOLDOWN_EVENT(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_PET_CAST_FAILED(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::MSG_CHANNEL_START(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::MSG_CHANNEL_UPDATE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_AI_REACTION(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_ATTACKSWING_NOTINRANGE => crate::Message::to_test_case_string(&SMSG_ATTACKSWING_NOTINRANGE{}),
            Self::SMSG_ATTACKSWING_BADFACING => crate::Message::to_test_case_string(&SMSG_ATTACKSWING_BADFACING{}),
            Self::SMSG_INSTANCE_LOCK_WARNING_QUERY(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_ATTACKSWING_DEADTARGET => crate::Message::to_test_case_string(&SMSG_ATTACKSWING_DEADTARGET{}),
            Self::SMSG_ATTACKSWING_CANT_ATTACK => crate::Message::to_test_case_string(&SMSG_ATTACKSWING_CANT_ATTACK{}),
            Self::SMSG_ATTACKERSTATEUPDATE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_CANCEL_COMBAT => crate::Message::to_test_case_string(&SMSG_CANCEL_COMBAT{}),
            Self::SMSG_SPELLHEALLOG(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_SPELLENERGIZELOG(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_BREAK_TARGET(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_BINDPOINTUPDATE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_PLAYERBOUND(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_CLIENT_CONTROL_UPDATE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_RESURRECT_REQUEST(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_LOOT_RESPONSE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_LOOT_RELEASE_RESPONSE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_LOOT_REMOVED(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_LOOT_MONEY_NOTIFY(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_LOOT_CLEAR_MONEY => crate::Message::to_test_case_string(&SMSG_LOOT_CLEAR_MONEY{}),
            Self::SMSG_ITEM_PUSH_RESULT(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_DUEL_REQUESTED(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_DUEL_OUTOFBOUNDS => crate::Message::to_test_case_string(&SMSG_DUEL_OUTOFBOUNDS{}),
            Self::SMSG_DUEL_INBOUNDS => crate::Message::to_test_case_string(&SMSG_DUEL_INBOUNDS{}),
            Self::SMSG_DUEL_COMPLETE(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_DUEL_WINNER(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_MOUNTRESULT(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_MOUNTSPECIAL_ANIM(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_PET_TAME_FAILURE(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_PET_NAME_INVALID(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_PET_SPELLS(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_PET_MODE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_GOSSIP_MESSAGE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_GOSSIP_COMPLETE => crate::Message::to_test_case_string(&SMSG_GOSSIP_COMPLETE{}),
            Self::SMSG_NPC_TEXT_UPDATE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_QUESTGIVER_STATUS(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_QUESTGIVER_QUEST_LIST(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_QUESTGIVER_QUEST_DETAILS(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_QUESTGIVER_REQUEST_ITEMS(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_QUESTGIVER_OFFER_REWARD(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_QUESTGIVER_QUEST_INVALID(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_QUESTGIVER_QUEST_COMPLETE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_QUESTGIVER_QUEST_FAILED(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_QUESTLOG_FULL => crate::Message::to_test_case_string(&SMSG_QUESTLOG_FULL{}),
            Self::SMSG_QUESTUPDATE_FAILED(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_QUESTUPDATE_FAILEDTIMER(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_QUESTUPDATE_COMPLETE(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_QUESTUPDATE_ADD_KILL(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_QUESTUPDATE_ADD_ITEM(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_QUEST_CONFIRM_ACCEPT(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_LIST_INVENTORY(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_SELL_ITEM(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_BUY_ITEM(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_BUY_FAILED(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_SHOWTAXINODES(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_TAXINODE_STATUS(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_ACTIVATETAXIREPLY(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_NEW_TAXI_PATH => crate::Message::to_test_case_string(&SMSG_NEW_TAXI_PATH{}),
            Self::SMSG_TRAINER_LIST(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_TRAINER_BUY_SUCCEEDED(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_TRAINER_BUY_FAILED(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_SHOW_BANK(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_BUY_BANK_SLOT_RESULT(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_PETITION_SHOWLIST(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_PETITION_SHOW_SIGNATURES(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_PETITION_SIGN_RESULTS(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_TURN_IN_PETITION_RESULTS(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_PETITION_QUERY_RESPONSE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_FISH_NOT_HOOKED => crate::Message::to_test_case_string(&SMSG_FISH_NOT_HOOKED{}),
            Self::SMSG_FISH_ESCAPED => crate::Message::to_test_case_string(&SMSG_FISH_ESCAPED{}),
            Self::SMSG_NOTIFICATION(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_PLAYED_TIME(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_QUERY_TIME_RESPONSE(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_LOG_XPGAIN(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_LEVELUP_INFO(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::MSG_MINIMAP_PING(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_ENCHANTMENTLOG(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_START_MIRROR_TIMER(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_PAUSE_MIRROR_TIMER(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_STOP_MIRROR_TIMER(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_CLEAR_COOLDOWN(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_GAMEOBJECT_PAGETEXT(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_SPELL_DELAYED(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_QUEST_POI_QUERY_RESPONSE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_ITEM_TIME_UPDATE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_ITEM_ENCHANT_TIME_UPDATE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_AUTH_CHALLENGE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_AUTH_RESPONSE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::MSG_SAVE_GUILD_EMBLEM(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_PLAY_SPELL_VISUAL(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_PARTYKILLLOG(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_COMPRESSED_UPDATE_OBJECT(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_PLAY_SPELL_IMPACT(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_EXPLORATION_EXPERIENCE(c) => crate::Message::to_test_case_string(c),
            Self::MSG_RANDOM_ROLL(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_ENVIRONMENTAL_DAMAGE_LOG(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_LFG_PLAYER_REWARD(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_LFG_TELEPORT_DENIED(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_REMOVED_SPELL(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_GMTICKET_CREATE(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_GMTICKET_UPDATETEXT(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_ACCOUNT_DATA_TIMES(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_UPDATE_ACCOUNT_DATA(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_GMTICKET_GETTICKET(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_UPDATE_INSTANCE_ENCOUNTER_UNIT(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_GAMEOBJECT_DESPAWN_ANIM(c) => crate::Message::to_test_case_string(c),
            Self::MSG_CORPSE_QUERY(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_GMTICKET_DELETETICKET(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_CHAT_WRONG_FACTION => crate::Message::to_test_case_string(&SMSG_CHAT_WRONG_FACTION{}),
            Self::SMSG_GMTICKET_SYSTEMSTATUS(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_QUEST_FORCE_REMOVE(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_SPIRIT_HEALER_CONFIRM(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_GOSSIP_POI(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_LOGIN_VERIFY_WORLD(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_SEND_MAIL_RESULT(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_MAIL_LIST_RESULT(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_BATTLEFIELD_LIST(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_ITEM_TEXT_QUERY_RESPONSE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_SPELLLOGMISS(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_SPELLLOGEXECUTE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_PERIODICAURALOG(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_SPELLDAMAGESHIELD(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_SPELLNONMELEEDAMAGELOG(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_RESURRECT_FAILED(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_ZONE_UNDER_ATTACK(c) => crate::Message::to_test_case_string(c),
            Self::MSG_AUCTION_HELLO(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_AUCTION_COMMAND_RESULT(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_AUCTION_LIST_RESULT(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_AUCTION_OWNER_LIST_RESULT(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_AUCTION_BIDDER_NOTIFICATION(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_AUCTION_OWNER_NOTIFICATION(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_PROCRESIST(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_DISPEL_FAILED(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_SPELLORDAMAGE_IMMUNE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_AUCTION_BIDDER_LIST_RESULT(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_SET_FLAT_SPELL_MODIFIER(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_SET_PCT_SPELL_MODIFIER(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_CORPSE_RECLAIM_DELAY(c) => crate::Message::to_test_case_string(c),
            Self::MSG_LIST_STABLED_PETS(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_STABLE_RESULT(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_PLAY_MUSIC(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_PLAY_OBJECT_SOUND(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_SPELLDISPELLOG(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::MSG_QUERY_NEXT_MAIL_TIME(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_RECEIVED_MAIL(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_RAID_GROUP_ONLY(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_PVP_CREDIT(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_AUCTION_REMOVED_NOTIFICATION(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_SERVER_MESSAGE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_LFG_OFFER_CONTINUE(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_SHOW_MAILBOX(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_CANCEL_AUTO_REPEAT(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_STANDSTATE_UPDATE(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_LOOT_ALL_PASSED(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_LOOT_ROLL_WON(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_LOOT_START_ROLL(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_LOOT_ROLL(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_LOOT_MASTER_LIST(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_SET_FORCED_REACTIONS(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_SPELL_FAILED_OTHER(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_CHAT_PLAYER_NOT_FOUND(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::MSG_TALENT_WIPE_CONFIRM(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_SUMMON_REQUEST(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_MONSTER_MOVE_TRANSPORT(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_PET_BROKEN => crate::Message::to_test_case_string(&SMSG_PET_BROKEN{}),
            Self::MSG_MOVE_FEATHER_FALL(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_FEIGN_DEATH_RESISTED => crate::Message::to_test_case_string(&SMSG_FEIGN_DEATH_RESISTED{}),
            Self::SMSG_DUEL_COUNTDOWN(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_AREA_TRIGGER_MESSAGE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_LFG_ROLE_CHOSEN(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_PLAYER_SKINNED(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_DURABILITY_DAMAGE_DEATH => crate::Message::to_test_case_string(&SMSG_DURABILITY_DAMAGE_DEATH{}),
            Self::SMSG_INIT_WORLD_STATES(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_UPDATE_WORLD_STATE(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_ITEM_NAME_QUERY_RESPONSE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_PET_ACTION_FEEDBACK(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_CHAR_RENAME(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_INSTANCE_SAVE_CREATED(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_RAID_INSTANCE_INFO(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_PLAY_SOUND(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_BATTLEFIELD_STATUS(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::MSG_INSPECT_HONOR_STATS(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_FORCE_WALK_SPEED_CHANGE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_FORCE_SWIM_BACK_SPEED_CHANGE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_FORCE_TURN_RATE_CHANGE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_AREA_SPIRIT_HEALER_TIME(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_WARDEN_DATA(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_GROUP_JOINED_BATTLEGROUND(c) => crate::Message::to_test_case_string(c),
            Self::MSG_BATTLEGROUND_PLAYER_POSITIONS(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_BINDER_CONFIRM(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_BATTLEGROUND_PLAYER_JOINED(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_BATTLEGROUND_PLAYER_LEFT(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_ADDON_INFO(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_PET_UNLEARN_CONFIRM(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_PARTY_MEMBER_STATS_FULL(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_WEATHER(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_RAID_INSTANCE_MESSAGE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_COMPRESSED_MOVES(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_CHAT_RESTRICTED(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_SPLINE_SET_RUN_BACK_SPEED(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_SPLINE_SET_SWIM_SPEED(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_SPLINE_SET_WALK_SPEED(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_SPLINE_SET_SWIM_BACK_SPEED(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_SPLINE_SET_TURN_RATE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_SPLINE_MOVE_UNROOT(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_SPLINE_MOVE_FEATHER_FALL(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_SPLINE_MOVE_NORMAL_FALL(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_SPLINE_MOVE_SET_HOVER(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_SPLINE_MOVE_UNSET_HOVER(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_SPLINE_MOVE_WATER_WALK(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_SPLINE_MOVE_LAND_WALK(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_SPLINE_MOVE_START_SWIM(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_SPLINE_MOVE_STOP_SWIM(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_SPLINE_MOVE_SET_RUN_MODE(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_SPLINE_MOVE_SET_WALK_MODE(c) => crate::Message::to_test_case_string(c),
            Self::MSG_MOVE_TIME_SKIPPED(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_SPLINE_MOVE_ROOT(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_INVALIDATE_PLAYER(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_INSTANCE_RESET(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_INSTANCE_RESET_FAILED(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_UPDATE_LAST_INSTANCE(c) => crate::Message::to_test_case_string(c),
            Self::MSG_RAID_TARGET_UPDATE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::MSG_RAID_READY_CHECK(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_PET_ACTION_SOUND(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_PET_DISMISS_SOUND(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_GM_TICKET_STATUS_UPDATE(c) => crate::Message::to_test_case_string(c),
            Self::MSG_SET_DUNGEON_DIFFICULTY(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_UPDATE_INSTANCE_OWNERSHIP(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_CHAT_PLAYER_AMBIGUOUS(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_SPELLINSTAKILLLOG(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_SPELL_UPDATE_CHAIN_TARGETS(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_SPELLSTEALLOG(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_DEFENSE_MESSAGE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_INSTANCE_DIFFICULTY(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_MOVE_SET_CAN_FLY(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_MOVE_UNSET_CAN_FLY(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_ARENA_TEAM_COMMAND_RESULT(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_ARENA_TEAM_QUERY_RESPONSE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_ARENA_TEAM_ROSTER(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_ARENA_TEAM_INVITE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_ARENA_TEAM_EVENT(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_ARENA_TEAM_STATS(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_UPDATE_LFG_LIST(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_LFG_PROPOSAL_UPDATE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_LFG_ROLE_CHECK_UPDATE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_LFG_JOIN_RESULT(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_LFG_QUEUE_STATUS(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_LFG_UPDATE_PLAYER(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_LFG_UPDATE_PARTY(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_LFG_UPDATE_SEARCH(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_LFG_BOOT_PROPOSAL_UPDATE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_LFG_PLAYER_INFO(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_LFG_PARTY_INFO(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_TITLE_EARNED(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_ARENA_ERROR(c) => crate::Message::to_test_case_string(c),
            Self::MSG_INSPECT_ARENA_TEAMS(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_DEATH_RELEASE_LOC(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_FORCED_DEATH_UPDATE => crate::Message::to_test_case_string(&SMSG_FORCED_DEATH_UPDATE{}),
            Self::MSG_MOVE_SET_FLIGHT_SPEED(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_FORCE_FLIGHT_SPEED_CHANGE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_SPLINE_SET_FLIGHT_SPEED(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_SPLINE_SET_FLIGHT_BACK_SPEED(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_FLIGHT_SPLINE_SYNC(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_REALM_SPLIT(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_TIME_SYNC_REQ(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_RESET_FAILED_NOTIFY(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_LFG_DISABLED => crate::Message::to_test_case_string(&SMSG_LFG_DISABLED{}),
            Self::SMSG_UPDATE_COMBO_POINTS(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_DISMOUNT(c) => crate::Message::to_test_case_string(c),
            Self::MSG_MOVE_UPDATE_CAN_FLY(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::MSG_RAID_READY_CHECK_CONFIRM(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_GM_MESSAGECHAT(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_CLEAR_TARGET(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_CROSSED_INEBRIATION_THRESHOLD(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_KICK_REASON(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_COMPLAIN_RESULT(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_FEATURE_SYSTEM_STATUS(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_CHANNEL_MEMBER_COUNT(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_GUILD_BANK_LIST(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::MSG_GUILD_BANK_LOG_QUERY(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_USERLIST_ADD(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_USERLIST_REMOVE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_USERLIST_UPDATE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_INSPECT_TALENT(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_LOOT_LIST(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::MSG_GUILD_PERMISSIONS(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::MSG_GUILD_BANK_MONEY_WITHDRAWN(c) => crate::Message::to_test_case_string(c),
            Self::MSG_GUILD_EVENT_LOG_QUERY(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_MIRRORIMAGE_DATA(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::MSG_QUERY_GUILD_BANK_TEXT(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_OVERRIDE_LIGHT(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_TOTEM_CREATED(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_QUESTGIVER_STATUS_MULTIPLE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_SET_PLAYER_DECLINED_NAMES_RESULT(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_SEND_UNLEARN_SPELLS(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_PROPOSE_LEVEL_GRANT(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_REFER_A_FRIEND_FAILURE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_SPLINE_MOVE_SET_FLYING(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_SPLINE_MOVE_UNSET_FLYING(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_ENABLE_BARBER_SHOP => crate::Message::to_test_case_string(&SMSG_ENABLE_BARBER_SHOP{}),
            Self::SMSG_BARBER_SHOP_RESULT(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_CALENDAR_SEND_CALENDAR(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_CALENDAR_SEND_EVENT(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_CALENDAR_FILTER_GUILD(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_CALENDAR_ARENA_TEAM(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_CALENDAR_EVENT_INVITE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_CALENDAR_EVENT_INVITE_REMOVED(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_CALENDAR_EVENT_STATUS(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_CALENDAR_COMMAND_RESULT(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_CALENDAR_RAID_LOCKOUT_ADDED(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_CALENDAR_RAID_LOCKOUT_REMOVED(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_CALENDAR_EVENT_INVITE_ALERT(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_CALENDAR_EVENT_INVITE_REMOVED_ALERT(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_CALENDAR_EVENT_REMOVED_ALERT(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_CALENDAR_EVENT_UPDATED_ALERT(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_CALENDAR_EVENT_MODERATOR_STATUS_ALERT(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_CALENDAR_SEND_NUM_PENDING(c) => crate::Message::to_test_case_string(c),
            Self::MSG_MOVE_SET_PITCH_RATE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_FORCE_PITCH_RATE_CHANGE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_CALENDAR_EVENT_INVITE_NOTES(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_CALENDAR_EVENT_INVITE_NOTES_ALERT(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_UPDATE_ACCOUNT_DATA_COMPLETE(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_TRIGGER_MOVIE(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_ACHIEVEMENT_EARNED(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_CRITERIA_UPDATE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_RESPOND_INSPECT_ACHIEVEMENTS(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_QUESTUPDATE_ADD_PVP_KILL(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_CALENDAR_RAID_LOCKOUT_UPDATED(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_CHAR_CUSTOMIZE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_SET_PHASE_SHIFT(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_ALL_ACHIEVEMENT_DATA(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_POWER_UPDATE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_HIGHEST_THREAT_UPDATE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_THREAT_UPDATE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_THREAT_REMOVE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_THREAT_CLEAR(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_CONVERT_RUNE(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_RESYNC_RUNES(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_ADD_RUNE_POWER(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_AUCTION_LIST_PENDING_SALES(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_MODIFY_COOLDOWN(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_PET_UPDATE_COMBO_POINTS(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_PRE_RESURRECT(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_AURA_UPDATE_ALL(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_AURA_UPDATE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_SERVER_FIRST_ACHIEVEMENT(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_PET_LEARNED_SPELL(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_PET_UNLEARNED_SPELL(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_ON_CANCEL_EXPECTED_RIDE_VEHICLE_AURA => crate::Message::to_test_case_string(&SMSG_ON_CANCEL_EXPECTED_RIDE_VEHICLE_AURA{}),
            Self::SMSG_CRITERIA_DELETED(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_ACHIEVEMENT_DELETED(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_BATTLEGROUND_INFO_THROTTLED => crate::Message::to_test_case_string(&SMSG_BATTLEGROUND_INFO_THROTTLED{}),
            Self::SMSG_PLAYER_VEHICLE_DATA(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_PET_GUIDS(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_CLIENTCACHE_VERSION(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_ITEM_REFUND_INFO_RESPONSE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_ITEM_REFUND_RESULT(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_CORPSE_MAP_POSITION_QUERY_RESPONSE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_CALENDAR_CLEAR_PENDING_ACTION => crate::Message::to_test_case_string(&SMSG_CALENDAR_CLEAR_PENDING_ACTION{}),
            Self::SMSG_EQUIPMENT_SET_LIST(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_SET_PROJECTILE_POSITION(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_TALENTS_INFO(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_ARENA_UNIT_DESTROYED(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_ARENA_TEAM_CHANGE_FAILED_QUEUED(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_MOVE_GRAVITY_DISABLE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_MOVE_GRAVITY_ENABLE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::MSG_MOVE_GRAVITY_CHNG(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_SPLINE_MOVE_GRAVITY_DISABLE(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_SPLINE_MOVE_GRAVITY_ENABLE(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_EQUIPMENT_SET_USE_RESULT(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_CHAR_FACTION_CHANGE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_BATTLEFIELD_MGR_ENTRY_INVITE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_BATTLEFIELD_MGR_ENTERED(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_BATTLEFIELD_MGR_QUEUE_INVITE(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_BATTLEFIELD_MGR_QUEUE_REQUEST_RESPONSE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_BATTLEFIELD_MGR_EJECT_PENDING(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_BATTLEFIELD_MGR_EJECTED(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_BATTLEFIELD_MGR_STATE_CHANGE(c) => crate::Message::to_test_case_string(c),
            Self::MSG_SET_RAID_DIFFICULTY(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_TOGGLE_XP_GAIN => crate::Message::to_test_case_string(&SMSG_TOGGLE_XP_GAIN{}),
            Self::SMSG_GMRESPONSE_DB_ERROR => crate::Message::to_test_case_string(&SMSG_GMRESPONSE_DB_ERROR{}),
            Self::SMSG_GMRESPONSE_RECEIVED(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_GMRESPONSE_STATUS_UPDATE(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_WORLD_STATE_UI_TIMER_UPDATE(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_TALENTS_INVOLUNTARILY_RESET(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_QUERY_QUESTS_COMPLETED_RESPONSE(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_CORPSE_NOT_IN_INSTANCE => crate::Message::to_test_case_string(&SMSG_CORPSE_NOT_IN_INSTANCE{}),
            Self::SMSG_CAMERA_SHAKE(c) => crate::Message::to_test_case_string(c),
            Self::SMSG_SOCKET_GEMS_RESULT(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_REDIRECT_CLIENT(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_MOVE_SET_COLLISION_HGT(c) => crate::Message::to_test_case_string(c.as_ref()),
            Self::SMSG_MULTIPLE_MOVES(c) => crate::Message::to_test_case_string(c.as_ref()),
            _ => None,
        }
    }

    #[cfg(feature = "print-testcase")]
    pub const fn message_name(&self) -> &'static str {
        match self {
            Self::MSG_MOVE_START_FORWARD(_) => "MSG_MOVE_START_FORWARD",
            Self::MSG_MOVE_START_BACKWARD(_) => "MSG_MOVE_START_BACKWARD",
            Self::MSG_MOVE_STOP(_) => "MSG_MOVE_STOP",
            Self::MSG_MOVE_START_STRAFE_LEFT(_) => "MSG_MOVE_START_STRAFE_LEFT",
            Self::MSG_MOVE_START_STRAFE_RIGHT(_) => "MSG_MOVE_START_STRAFE_RIGHT",
            Self::MSG_MOVE_STOP_STRAFE(_) => "MSG_MOVE_STOP_STRAFE",
            Self::MSG_MOVE_JUMP(_) => "MSG_MOVE_JUMP",
            Self::MSG_MOVE_START_TURN_LEFT(_) => "MSG_MOVE_START_TURN_LEFT",
            Self::MSG_MOVE_START_TURN_RIGHT(_) => "MSG_MOVE_START_TURN_RIGHT",
            Self::MSG_MOVE_STOP_TURN(_) => "MSG_MOVE_STOP_TURN",
            Self::MSG_MOVE_START_PITCH_UP(_) => "MSG_MOVE_START_PITCH_UP",
            Self::MSG_MOVE_START_PITCH_DOWN(_) => "MSG_MOVE_START_PITCH_DOWN",
            Self::MSG_MOVE_STOP_PITCH(_) => "MSG_MOVE_STOP_PITCH",
            Self::MSG_MOVE_SET_RUN_MODE(_) => "MSG_MOVE_SET_RUN_MODE",
            Self::MSG_MOVE_SET_WALK_MODE(_) => "MSG_MOVE_SET_WALK_MODE",
            Self::MSG_MOVE_FALL_LAND(_) => "MSG_MOVE_FALL_LAND",
            Self::MSG_MOVE_START_SWIM(_) => "MSG_MOVE_START_SWIM",
            Self::MSG_MOVE_STOP_SWIM(_) => "MSG_MOVE_STOP_SWIM",
            Self::MSG_MOVE_SET_FACING(_) => "MSG_MOVE_SET_FACING",
            Self::MSG_MOVE_SET_PITCH(_) => "MSG_MOVE_SET_PITCH",
            Self::MSG_MOVE_WORLDPORT_ACK => "MSG_MOVE_WORLDPORT_ACK",
            Self::MSG_MOVE_HEARTBEAT(_) => "MSG_MOVE_HEARTBEAT",
            Self::MSG_MOVE_HOVER(_) => "MSG_MOVE_HOVER",
            Self::MSG_PETITION_DECLINE(_) => "MSG_PETITION_DECLINE",
            Self::MSG_TABARDVENDOR_ACTIVATE(_) => "MSG_TABARDVENDOR_ACTIVATE",
            Self::MSG_QUEST_PUSH_RESULT(_) => "MSG_QUEST_PUSH_RESULT",
            Self::MSG_MOVE_WATER_WALK(_) => "MSG_MOVE_WATER_WALK",
            Self::MSG_PETITION_RENAME(_) => "MSG_PETITION_RENAME",
            Self::MSG_MOVE_START_ASCEND(_) => "MSG_MOVE_START_ASCEND",
            Self::MSG_MOVE_STOP_ASCEND(_) => "MSG_MOVE_STOP_ASCEND",
            Self::MSG_MOVE_SET_FLIGHT_BACK_SPEED(_) => "MSG_MOVE_SET_FLIGHT_BACK_SPEED",
            Self::MSG_MOVE_START_DESCEND(_) => "MSG_MOVE_START_DESCEND",
            Self::CMSG_CALENDAR_GET_NUM_PENDING => "CMSG_CALENDAR_GET_NUM_PENDING",
            Self::SMSG_CHAR_CREATE(_) => "SMSG_CHAR_CREATE",
            Self::SMSG_CHAR_ENUM(_) => "SMSG_CHAR_ENUM",
            Self::SMSG_CHAR_DELETE(_) => "SMSG_CHAR_DELETE",
            Self::SMSG_NEW_WORLD(_) => "SMSG_NEW_WORLD",
            Self::SMSG_TRANSFER_PENDING(_) => "SMSG_TRANSFER_PENDING",
            Self::SMSG_TRANSFER_ABORTED(_) => "SMSG_TRANSFER_ABORTED",
            Self::SMSG_CHARACTER_LOGIN_FAILED(_) => "SMSG_CHARACTER_LOGIN_FAILED",
            Self::SMSG_LOGIN_SETTIMESPEED(_) => "SMSG_LOGIN_SETTIMESPEED",
            Self::SMSG_LOGOUT_RESPONSE(_) => "SMSG_LOGOUT_RESPONSE",
            Self::SMSG_LOGOUT_COMPLETE => "SMSG_LOGOUT_COMPLETE",
            Self::SMSG_LOGOUT_CANCEL_ACK => "SMSG_LOGOUT_CANCEL_ACK",
            Self::SMSG_NAME_QUERY_RESPONSE(_) => "SMSG_NAME_QUERY_RESPONSE",
            Self::SMSG_PET_NAME_QUERY_RESPONSE(_) => "SMSG_PET_NAME_QUERY_RESPONSE",
            Self::SMSG_GUILD_QUERY_RESPONSE(_) => "SMSG_GUILD_QUERY_RESPONSE",
            Self::SMSG_ITEM_QUERY_SINGLE_RESPONSE(_) => "SMSG_ITEM_QUERY_SINGLE_RESPONSE",
            Self::SMSG_PAGE_TEXT_QUERY_RESPONSE(_) => "SMSG_PAGE_TEXT_QUERY_RESPONSE",
            Self::SMSG_QUEST_QUERY_RESPONSE(_) => "SMSG_QUEST_QUERY_RESPONSE",
            Self::SMSG_GAMEOBJECT_QUERY_RESPONSE(_) => "SMSG_GAMEOBJECT_QUERY_RESPONSE",
            Self::SMSG_CREATURE_QUERY_RESPONSE(_) => "SMSG_CREATURE_QUERY_RESPONSE",
            Self::SMSG_WHO(_) => "SMSG_WHO",
            Self::SMSG_WHOIS(_) => "SMSG_WHOIS",
            Self::SMSG_CONTACT_LIST(_) => "SMSG_CONTACT_LIST",
            Self::SMSG_FRIEND_STATUS(_) => "SMSG_FRIEND_STATUS",
            Self::SMSG_GROUP_INVITE(_) => "SMSG_GROUP_INVITE",
            Self::SMSG_GROUP_DECLINE(_) => "SMSG_GROUP_DECLINE",
            Self::SMSG_GROUP_UNINVITE => "SMSG_GROUP_UNINVITE",
            Self::SMSG_GROUP_SET_LEADER(_) => "SMSG_GROUP_SET_LEADER",
            Self::SMSG_GROUP_DESTROYED => "SMSG_GROUP_DESTROYED",
            Self::SMSG_GROUP_LIST(_) => "SMSG_GROUP_LIST",
            Self::SMSG_PARTY_MEMBER_STATS(_) => "SMSG_PARTY_MEMBER_STATS",
            Self::SMSG_PARTY_COMMAND_RESULT(_) => "SMSG_PARTY_COMMAND_RESULT",
            Self::SMSG_GUILD_INVITE(_) => "SMSG_GUILD_INVITE",
            Self::SMSG_GUILD_DECLINE(_) => "SMSG_GUILD_DECLINE",
            Self::SMSG_GUILD_INFO(_) => "SMSG_GUILD_INFO",
            Self::SMSG_GUILD_ROSTER(_) => "SMSG_GUILD_ROSTER",
            Self::SMSG_GUILD_EVENT(_) => "SMSG_GUILD_EVENT",
            Self::SMSG_GUILD_COMMAND_RESULT(_) => "SMSG_GUILD_COMMAND_RESULT",
            Self::SMSG_MESSAGECHAT(_) => "SMSG_MESSAGECHAT",
            Self::SMSG_CHANNEL_NOTIFY(_) => "SMSG_CHANNEL_NOTIFY",
            Self::SMSG_CHANNEL_LIST(_) => "SMSG_CHANNEL_LIST",
            Self::SMSG_UPDATE_OBJECT(_) => "SMSG_UPDATE_OBJECT",
            Self::SMSG_DESTROY_OBJECT(_) => "SMSG_DESTROY_OBJECT",
            Self::SMSG_READ_ITEM_OK(_) => "SMSG_READ_ITEM_OK",
            Self::SMSG_READ_ITEM_FAILED(_) => "SMSG_READ_ITEM_FAILED",
            Self::SMSG_ITEM_COOLDOWN(_) => "SMSG_ITEM_COOLDOWN",
            Self::SMSG_GAMEOBJECT_CUSTOM_ANIM(_) => "SMSG_GAMEOBJECT_CUSTOM_ANIM",
            Self::MSG_MOVE_TELEPORT_CHEAT(_) => "MSG_MOVE_TELEPORT_CHEAT_Server",
            Self::MSG_MOVE_TELEPORT_ACK(_) => "MSG_MOVE_TELEPORT_ACK_Server",
            Self::SMSG_MONSTER_MOVE(_) => "SMSG_MONSTER_MOVE",
            Self::SMSG_MOVE_WATER_WALK(_) => "SMSG_MOVE_WATER_WALK",
            Self::SMSG_MOVE_LAND_WALK(_) => "SMSG_MOVE_LAND_WALK",
            Self::SMSG_FORCE_RUN_SPEED_CHANGE(_) => "SMSG_FORCE_RUN_SPEED_CHANGE",
            Self::SMSG_FORCE_RUN_BACK_SPEED_CHANGE(_) => "SMSG_FORCE_RUN_BACK_SPEED_CHANGE",
            Self::SMSG_FORCE_SWIM_SPEED_CHANGE(_) => "SMSG_FORCE_SWIM_SPEED_CHANGE",
            Self::SMSG_FORCE_MOVE_ROOT(_) => "SMSG_FORCE_MOVE_ROOT",
            Self::SMSG_FORCE_MOVE_UNROOT(_) => "SMSG_FORCE_MOVE_UNROOT",
            Self::MSG_MOVE_ROOT(_) => "MSG_MOVE_ROOT_Server",
            Self::MSG_MOVE_UNROOT(_) => "MSG_MOVE_UNROOT_Server",
            Self::SMSG_MOVE_KNOCK_BACK(_) => "SMSG_MOVE_KNOCK_BACK",
            Self::MSG_MOVE_KNOCK_BACK(_) => "MSG_MOVE_KNOCK_BACK_Server",
            Self::SMSG_MOVE_FEATHER_FALL(_) => "SMSG_MOVE_FEATHER_FALL",
            Self::SMSG_MOVE_NORMAL_FALL(_) => "SMSG_MOVE_NORMAL_FALL",
            Self::SMSG_MOVE_SET_HOVER(_) => "SMSG_MOVE_SET_HOVER",
            Self::SMSG_MOVE_UNSET_HOVER(_) => "SMSG_MOVE_UNSET_HOVER",
            Self::SMSG_TRIGGER_CINEMATIC(_) => "SMSG_TRIGGER_CINEMATIC",
            Self::SMSG_TUTORIAL_FLAGS(_) => "SMSG_TUTORIAL_FLAGS",
            Self::SMSG_EMOTE(_) => "SMSG_EMOTE",
            Self::SMSG_TEXT_EMOTE(_) => "SMSG_TEXT_EMOTE",
            Self::SMSG_INVENTORY_CHANGE_FAILURE(_) => "SMSG_INVENTORY_CHANGE_FAILURE",
            Self::SMSG_TRADE_STATUS(_) => "SMSG_TRADE_STATUS",
            Self::SMSG_TRADE_STATUS_EXTENDED(_) => "SMSG_TRADE_STATUS_EXTENDED",
            Self::SMSG_INITIALIZE_FACTIONS(_) => "SMSG_INITIALIZE_FACTIONS",
            Self::SMSG_SET_FACTION_VISIBLE(_) => "SMSG_SET_FACTION_VISIBLE",
            Self::SMSG_SET_FACTION_STANDING(_) => "SMSG_SET_FACTION_STANDING",
            Self::SMSG_SET_PROFICIENCY(_) => "SMSG_SET_PROFICIENCY",
            Self::SMSG_ACTION_BUTTONS(_) => "SMSG_ACTION_BUTTONS",
            Self::SMSG_INITIAL_SPELLS(_) => "SMSG_INITIAL_SPELLS",
            Self::SMSG_LEARNED_SPELL(_) => "SMSG_LEARNED_SPELL",
            Self::SMSG_SUPERCEDED_SPELL(_) => "SMSG_SUPERCEDED_SPELL",
            Self::SMSG_CAST_FAILED(_) => "SMSG_CAST_FAILED",
            Self::SMSG_SPELL_START(_) => "SMSG_SPELL_START",
            Self::SMSG_SPELL_GO(_) => "SMSG_SPELL_GO",
            Self::SMSG_SPELL_FAILURE(_) => "SMSG_SPELL_FAILURE",
            Self::SMSG_SPELL_COOLDOWN(_) => "SMSG_SPELL_COOLDOWN",
            Self::SMSG_COOLDOWN_EVENT(_) => "SMSG_COOLDOWN_EVENT",
            Self::SMSG_PET_CAST_FAILED(_) => "SMSG_PET_CAST_FAILED",
            Self::MSG_CHANNEL_START(_) => "MSG_CHANNEL_START_Server",
            Self::MSG_CHANNEL_UPDATE(_) => "MSG_CHANNEL_UPDATE_Server",
            Self::SMSG_AI_REACTION(_) => "SMSG_AI_REACTION",
            Self::SMSG_ATTACKSTART(_) => "SMSG_ATTACKSTART",
            Self::SMSG_ATTACKSTOP(_) => "SMSG_ATTACKSTOP",
            Self::SMSG_ATTACKSWING_NOTINRANGE => "SMSG_ATTACKSWING_NOTINRANGE",
            Self::SMSG_ATTACKSWING_BADFACING => "SMSG_ATTACKSWING_BADFACING",
            Self::SMSG_INSTANCE_LOCK_WARNING_QUERY(_) => "SMSG_INSTANCE_LOCK_WARNING_QUERY",
            Self::SMSG_ATTACKSWING_DEADTARGET => "SMSG_ATTACKSWING_DEADTARGET",
            Self::SMSG_ATTACKSWING_CANT_ATTACK => "SMSG_ATTACKSWING_CANT_ATTACK",
            Self::SMSG_ATTACKERSTATEUPDATE(_) => "SMSG_ATTACKERSTATEUPDATE",
            Self::SMSG_CANCEL_COMBAT => "SMSG_CANCEL_COMBAT",
            Self::SMSG_SPELLHEALLOG(_) => "SMSG_SPELLHEALLOG",
            Self::SMSG_SPELLENERGIZELOG(_) => "SMSG_SPELLENERGIZELOG",
            Self::SMSG_BREAK_TARGET(_) => "SMSG_BREAK_TARGET",
            Self::SMSG_BINDPOINTUPDATE(_) => "SMSG_BINDPOINTUPDATE",
            Self::SMSG_PLAYERBOUND(_) => "SMSG_PLAYERBOUND",
            Self::SMSG_CLIENT_CONTROL_UPDATE(_) => "SMSG_CLIENT_CONTROL_UPDATE",
            Self::SMSG_RESURRECT_REQUEST(_) => "SMSG_RESURRECT_REQUEST",
            Self::SMSG_LOOT_RESPONSE(_) => "SMSG_LOOT_RESPONSE",
            Self::SMSG_LOOT_RELEASE_RESPONSE(_) => "SMSG_LOOT_RELEASE_RESPONSE",
            Self::SMSG_LOOT_REMOVED(_) => "SMSG_LOOT_REMOVED",
            Self::SMSG_LOOT_MONEY_NOTIFY(_) => "SMSG_LOOT_MONEY_NOTIFY",
            Self::SMSG_LOOT_CLEAR_MONEY => "SMSG_LOOT_CLEAR_MONEY",
            Self::SMSG_ITEM_PUSH_RESULT(_) => "SMSG_ITEM_PUSH_RESULT",
            Self::SMSG_DUEL_REQUESTED(_) => "SMSG_DUEL_REQUESTED",
            Self::SMSG_DUEL_OUTOFBOUNDS => "SMSG_DUEL_OUTOFBOUNDS",
            Self::SMSG_DUEL_INBOUNDS => "SMSG_DUEL_INBOUNDS",
            Self::SMSG_DUEL_COMPLETE(_) => "SMSG_DUEL_COMPLETE",
            Self::SMSG_DUEL_WINNER(_) => "SMSG_DUEL_WINNER",
            Self::SMSG_MOUNTRESULT(_) => "SMSG_MOUNTRESULT",
            Self::SMSG_MOUNTSPECIAL_ANIM(_) => "SMSG_MOUNTSPECIAL_ANIM",
            Self::SMSG_PET_TAME_FAILURE(_) => "SMSG_PET_TAME_FAILURE",
            Self::SMSG_PET_NAME_INVALID(_) => "SMSG_PET_NAME_INVALID",
            Self::SMSG_PET_SPELLS(_) => "SMSG_PET_SPELLS",
            Self::SMSG_PET_MODE(_) => "SMSG_PET_MODE",
            Self::SMSG_GOSSIP_MESSAGE(_) => "SMSG_GOSSIP_MESSAGE",
            Self::SMSG_GOSSIP_COMPLETE => "SMSG_GOSSIP_COMPLETE",
            Self::SMSG_NPC_TEXT_UPDATE(_) => "SMSG_NPC_TEXT_UPDATE",
            Self::SMSG_QUESTGIVER_STATUS(_) => "SMSG_QUESTGIVER_STATUS",
            Self::SMSG_QUESTGIVER_QUEST_LIST(_) => "SMSG_QUESTGIVER_QUEST_LIST",
            Self::SMSG_QUESTGIVER_QUEST_DETAILS(_) => "SMSG_QUESTGIVER_QUEST_DETAILS",
            Self::SMSG_QUESTGIVER_REQUEST_ITEMS(_) => "SMSG_QUESTGIVER_REQUEST_ITEMS",
            Self::SMSG_QUESTGIVER_OFFER_REWARD(_) => "SMSG_QUESTGIVER_OFFER_REWARD",
            Self::SMSG_QUESTGIVER_QUEST_INVALID(_) => "SMSG_QUESTGIVER_QUEST_INVALID",
            Self::SMSG_QUESTGIVER_QUEST_COMPLETE(_) => "SMSG_QUESTGIVER_QUEST_COMPLETE",
            Self::SMSG_QUESTGIVER_QUEST_FAILED(_) => "SMSG_QUESTGIVER_QUEST_FAILED",
            Self::SMSG_QUESTLOG_FULL => "SMSG_QUESTLOG_FULL",
            Self::SMSG_QUESTUPDATE_FAILED(_) => "SMSG_QUESTUPDATE_FAILED",
            Self::SMSG_QUESTUPDATE_FAILEDTIMER(_) => "SMSG_QUESTUPDATE_FAILEDTIMER",
            Self::SMSG_QUESTUPDATE_COMPLETE(_) => "SMSG_QUESTUPDATE_COMPLETE",
            Self::SMSG_QUESTUPDATE_ADD_KILL(_) => "SMSG_QUESTUPDATE_ADD_KILL",
            Self::SMSG_QUESTUPDATE_ADD_ITEM(_) => "SMSG_QUESTUPDATE_ADD_ITEM",
            Self::SMSG_QUEST_CONFIRM_ACCEPT(_) => "SMSG_QUEST_CONFIRM_ACCEPT",
            Self::SMSG_LIST_INVENTORY(_) => "SMSG_LIST_INVENTORY",
            Self::SMSG_SELL_ITEM(_) => "SMSG_SELL_ITEM",
            Self::SMSG_BUY_ITEM(_) => "SMSG_BUY_ITEM",
            Self::SMSG_BUY_FAILED(_) => "SMSG_BUY_FAILED",
            Self::SMSG_SHOWTAXINODES(_) => "SMSG_SHOWTAXINODES",
            Self::SMSG_TAXINODE_STATUS(_) => "SMSG_TAXINODE_STATUS",
            Self::SMSG_ACTIVATETAXIREPLY(_) => "SMSG_ACTIVATETAXIREPLY",
            Self::SMSG_NEW_TAXI_PATH => "SMSG_NEW_TAXI_PATH",
            Self::SMSG_TRAINER_LIST(_) => "SMSG_TRAINER_LIST",
            Self::SMSG_TRAINER_BUY_SUCCEEDED(_) => "SMSG_TRAINER_BUY_SUCCEEDED",
            Self::SMSG_TRAINER_BUY_FAILED(_) => "SMSG_TRAINER_BUY_FAILED",
            Self::SMSG_SHOW_BANK(_) => "SMSG_SHOW_BANK",
            Self::SMSG_BUY_BANK_SLOT_RESULT(_) => "SMSG_BUY_BANK_SLOT_RESULT",
            Self::SMSG_PETITION_SHOWLIST(_) => "SMSG_PETITION_SHOWLIST",
            Self::SMSG_PETITION_SHOW_SIGNATURES(_) => "SMSG_PETITION_SHOW_SIGNATURES",
            Self::SMSG_PETITION_SIGN_RESULTS(_) => "SMSG_PETITION_SIGN_RESULTS",
            Self::SMSG_TURN_IN_PETITION_RESULTS(_) => "SMSG_TURN_IN_PETITION_RESULTS",
            Self::SMSG_PETITION_QUERY_RESPONSE(_) => "SMSG_PETITION_QUERY_RESPONSE",
            Self::SMSG_FISH_NOT_HOOKED => "SMSG_FISH_NOT_HOOKED",
            Self::SMSG_FISH_ESCAPED => "SMSG_FISH_ESCAPED",
            Self::SMSG_NOTIFICATION(_) => "SMSG_NOTIFICATION",
            Self::SMSG_PLAYED_TIME(_) => "SMSG_PLAYED_TIME",
            Self::SMSG_QUERY_TIME_RESPONSE(_) => "SMSG_QUERY_TIME_RESPONSE",
            Self::SMSG_LOG_XPGAIN(_) => "SMSG_LOG_XPGAIN",
            Self::SMSG_LEVELUP_INFO(_) => "SMSG_LEVELUP_INFO",
            Self::MSG_MINIMAP_PING(_) => "MSG_MINIMAP_PING_Server",
            Self::SMSG_ENCHANTMENTLOG(_) => "SMSG_ENCHANTMENTLOG",
            Self::SMSG_START_MIRROR_TIMER(_) => "SMSG_START_MIRROR_TIMER",
            Self::SMSG_PAUSE_MIRROR_TIMER(_) => "SMSG_PAUSE_MIRROR_TIMER",
            Self::SMSG_STOP_MIRROR_TIMER(_) => "SMSG_STOP_MIRROR_TIMER",
            Self::SMSG_PONG(_) => "SMSG_PONG",
            Self::SMSG_CLEAR_COOLDOWN(_) => "SMSG_CLEAR_COOLDOWN",
            Self::SMSG_GAMEOBJECT_PAGETEXT(_) => "SMSG_GAMEOBJECT_PAGETEXT",
            Self::SMSG_SPELL_DELAYED(_) => "SMSG_SPELL_DELAYED",
            Self::SMSG_QUEST_POI_QUERY_RESPONSE(_) => "SMSG_QUEST_POI_QUERY_RESPONSE",
            Self::SMSG_ITEM_TIME_UPDATE(_) => "SMSG_ITEM_TIME_UPDATE",
            Self::SMSG_ITEM_ENCHANT_TIME_UPDATE(_) => "SMSG_ITEM_ENCHANT_TIME_UPDATE",
            Self::SMSG_AUTH_CHALLENGE(_) => "SMSG_AUTH_CHALLENGE",
            Self::SMSG_AUTH_RESPONSE(_) => "SMSG_AUTH_RESPONSE",
            Self::MSG_SAVE_GUILD_EMBLEM(_) => "MSG_SAVE_GUILD_EMBLEM_Server",
            Self::SMSG_PLAY_SPELL_VISUAL(_) => "SMSG_PLAY_SPELL_VISUAL",
            Self::SMSG_PARTYKILLLOG(_) => "SMSG_PARTYKILLLOG",
            Self::SMSG_COMPRESSED_UPDATE_OBJECT(_) => "SMSG_COMPRESSED_UPDATE_OBJECT",
            Self::SMSG_PLAY_SPELL_IMPACT(_) => "SMSG_PLAY_SPELL_IMPACT",
            Self::SMSG_EXPLORATION_EXPERIENCE(_) => "SMSG_EXPLORATION_EXPERIENCE",
            Self::MSG_RANDOM_ROLL(_) => "MSG_RANDOM_ROLL_Server",
            Self::SMSG_ENVIRONMENTAL_DAMAGE_LOG(_) => "SMSG_ENVIRONMENTAL_DAMAGE_LOG",
            Self::SMSG_LFG_PLAYER_REWARD(_) => "SMSG_LFG_PLAYER_REWARD",
            Self::SMSG_LFG_TELEPORT_DENIED(_) => "SMSG_LFG_TELEPORT_DENIED",
            Self::SMSG_REMOVED_SPELL(_) => "SMSG_REMOVED_SPELL",
            Self::SMSG_GMTICKET_CREATE(_) => "SMSG_GMTICKET_CREATE",
            Self::SMSG_GMTICKET_UPDATETEXT(_) => "SMSG_GMTICKET_UPDATETEXT",
            Self::SMSG_ACCOUNT_DATA_TIMES(_) => "SMSG_ACCOUNT_DATA_TIMES",
            Self::SMSG_UPDATE_ACCOUNT_DATA(_) => "SMSG_UPDATE_ACCOUNT_DATA",
            Self::SMSG_GMTICKET_GETTICKET(_) => "SMSG_GMTICKET_GETTICKET",
            Self::SMSG_UPDATE_INSTANCE_ENCOUNTER_UNIT(_) => "SMSG_UPDATE_INSTANCE_ENCOUNTER_UNIT",
            Self::SMSG_GAMEOBJECT_DESPAWN_ANIM(_) => "SMSG_GAMEOBJECT_DESPAWN_ANIM",
            Self::MSG_CORPSE_QUERY(_) => "MSG_CORPSE_QUERY_Server",
            Self::SMSG_GMTICKET_DELETETICKET(_) => "SMSG_GMTICKET_DELETETICKET",
            Self::SMSG_CHAT_WRONG_FACTION => "SMSG_CHAT_WRONG_FACTION",
            Self::SMSG_GMTICKET_SYSTEMSTATUS(_) => "SMSG_GMTICKET_SYSTEMSTATUS",
            Self::SMSG_QUEST_FORCE_REMOVE(_) => "SMSG_QUEST_FORCE_REMOVE",
            Self::SMSG_SPIRIT_HEALER_CONFIRM(_) => "SMSG_SPIRIT_HEALER_CONFIRM",
            Self::SMSG_GOSSIP_POI(_) => "SMSG_GOSSIP_POI",
            Self::SMSG_LOGIN_VERIFY_WORLD(_) => "SMSG_LOGIN_VERIFY_WORLD",
            Self::SMSG_SEND_MAIL_RESULT(_) => "SMSG_SEND_MAIL_RESULT",
            Self::SMSG_MAIL_LIST_RESULT(_) => "SMSG_MAIL_LIST_RESULT",
            Self::SMSG_BATTLEFIELD_LIST(_) => "SMSG_BATTLEFIELD_LIST",
            Self::SMSG_ITEM_TEXT_QUERY_RESPONSE(_) => "SMSG_ITEM_TEXT_QUERY_RESPONSE",
            Self::SMSG_SPELLLOGMISS(_) => "SMSG_SPELLLOGMISS",
            Self::SMSG_SPELLLOGEXECUTE(_) => "SMSG_SPELLLOGEXECUTE",
            Self::SMSG_PERIODICAURALOG(_) => "SMSG_PERIODICAURALOG",
            Self::SMSG_SPELLDAMAGESHIELD(_) => "SMSG_SPELLDAMAGESHIELD",
            Self::SMSG_SPELLNONMELEEDAMAGELOG(_) => "SMSG_SPELLNONMELEEDAMAGELOG",
            Self::SMSG_RESURRECT_FAILED(_) => "SMSG_RESURRECT_FAILED",
            Self::SMSG_ZONE_UNDER_ATTACK(_) => "SMSG_ZONE_UNDER_ATTACK",
            Self::MSG_AUCTION_HELLO(_) => "MSG_AUCTION_HELLO_Server",
            Self::SMSG_AUCTION_COMMAND_RESULT(_) => "SMSG_AUCTION_COMMAND_RESULT",
            Self::SMSG_AUCTION_LIST_RESULT(_) => "SMSG_AUCTION_LIST_RESULT",
            Self::SMSG_AUCTION_OWNER_LIST_RESULT(_) => "SMSG_AUCTION_OWNER_LIST_RESULT",
            Self::SMSG_AUCTION_BIDDER_NOTIFICATION(_) => "SMSG_AUCTION_BIDDER_NOTIFICATION",
            Self::SMSG_AUCTION_OWNER_NOTIFICATION(_) => "SMSG_AUCTION_OWNER_NOTIFICATION",
            Self::SMSG_PROCRESIST(_) => "SMSG_PROCRESIST",
            Self::SMSG_DISPEL_FAILED(_) => "SMSG_DISPEL_FAILED",
            Self::SMSG_SPELLORDAMAGE_IMMUNE(_) => "SMSG_SPELLORDAMAGE_IMMUNE",
            Self::SMSG_AUCTION_BIDDER_LIST_RESULT(_) => "SMSG_AUCTION_BIDDER_LIST_RESULT",
            Self::SMSG_SET_FLAT_SPELL_MODIFIER(_) => "SMSG_SET_FLAT_SPELL_MODIFIER",
            Self::SMSG_SET_PCT_SPELL_MODIFIER(_) => "SMSG_SET_PCT_SPELL_MODIFIER",
            Self::SMSG_CORPSE_RECLAIM_DELAY(_) => "SMSG_CORPSE_RECLAIM_DELAY",
            Self::MSG_LIST_STABLED_PETS(_) => "MSG_LIST_STABLED_PETS_Server",
            Self::SMSG_STABLE_RESULT(_) => "SMSG_STABLE_RESULT",
            Self::SMSG_PLAY_MUSIC(_) => "SMSG_PLAY_MUSIC",
            Self::SMSG_PLAY_OBJECT_SOUND(_) => "SMSG_PLAY_OBJECT_SOUND",
            Self::SMSG_SPELLDISPELLOG(_) => "SMSG_SPELLDISPELLOG",
            Self::MSG_QUERY_NEXT_MAIL_TIME(_) => "MSG_QUERY_NEXT_MAIL_TIME_Server",
            Self::SMSG_RECEIVED_MAIL(_) => "SMSG_RECEIVED_MAIL",
            Self::SMSG_RAID_GROUP_ONLY(_) => "SMSG_RAID_GROUP_ONLY",
            Self::SMSG_PVP_CREDIT(_) => "SMSG_PVP_CREDIT",
            Self::SMSG_AUCTION_REMOVED_NOTIFICATION(_) => "SMSG_AUCTION_REMOVED_NOTIFICATION",
            Self::SMSG_SERVER_MESSAGE(_) => "SMSG_SERVER_MESSAGE",
            Self::SMSG_LFG_OFFER_CONTINUE(_) => "SMSG_LFG_OFFER_CONTINUE",
            Self::SMSG_SHOW_MAILBOX(_) => "SMSG_SHOW_MAILBOX",
            Self::SMSG_CANCEL_AUTO_REPEAT(_) => "SMSG_CANCEL_AUTO_REPEAT",
            Self::SMSG_STANDSTATE_UPDATE(_) => "SMSG_STANDSTATE_UPDATE",
            Self::SMSG_LOOT_ALL_PASSED(_) => "SMSG_LOOT_ALL_PASSED",
            Self::SMSG_LOOT_ROLL_WON(_) => "SMSG_LOOT_ROLL_WON",
            Self::SMSG_LOOT_START_ROLL(_) => "SMSG_LOOT_START_ROLL",
            Self::SMSG_LOOT_ROLL(_) => "SMSG_LOOT_ROLL",
            Self::SMSG_LOOT_MASTER_LIST(_) => "SMSG_LOOT_MASTER_LIST",
            Self::SMSG_SET_FORCED_REACTIONS(_) => "SMSG_SET_FORCED_REACTIONS",
            Self::SMSG_SPELL_FAILED_OTHER(_) => "SMSG_SPELL_FAILED_OTHER",
            Self::SMSG_CHAT_PLAYER_NOT_FOUND(_) => "SMSG_CHAT_PLAYER_NOT_FOUND",
            Self::MSG_TALENT_WIPE_CONFIRM(_) => "MSG_TALENT_WIPE_CONFIRM_Server",
            Self::SMSG_SUMMON_REQUEST(_) => "SMSG_SUMMON_REQUEST",
            Self::SMSG_MONSTER_MOVE_TRANSPORT(_) => "SMSG_MONSTER_MOVE_TRANSPORT",
            Self::SMSG_PET_BROKEN => "SMSG_PET_BROKEN",
            Self::MSG_MOVE_FEATHER_FALL(_) => "MSG_MOVE_FEATHER_FALL_Server",
            Self::SMSG_FEIGN_DEATH_RESISTED => "SMSG_FEIGN_DEATH_RESISTED",
            Self::SMSG_DUEL_COUNTDOWN(_) => "SMSG_DUEL_COUNTDOWN",
            Self::SMSG_AREA_TRIGGER_MESSAGE(_) => "SMSG_AREA_TRIGGER_MESSAGE",
            Self::SMSG_LFG_ROLE_CHOSEN(_) => "SMSG_LFG_ROLE_CHOSEN",
            Self::SMSG_PLAYER_SKINNED(_) => "SMSG_PLAYER_SKINNED",
            Self::SMSG_DURABILITY_DAMAGE_DEATH => "SMSG_DURABILITY_DAMAGE_DEATH",
            Self::SMSG_INIT_WORLD_STATES(_) => "SMSG_INIT_WORLD_STATES",
            Self::SMSG_UPDATE_WORLD_STATE(_) => "SMSG_UPDATE_WORLD_STATE",
            Self::SMSG_ITEM_NAME_QUERY_RESPONSE(_) => "SMSG_ITEM_NAME_QUERY_RESPONSE",
            Self::SMSG_PET_ACTION_FEEDBACK(_) => "SMSG_PET_ACTION_FEEDBACK",
            Self::SMSG_CHAR_RENAME(_) => "SMSG_CHAR_RENAME",
            Self::SMSG_INSTANCE_SAVE_CREATED(_) => "SMSG_INSTANCE_SAVE_CREATED",
            Self::SMSG_RAID_INSTANCE_INFO(_) => "SMSG_RAID_INSTANCE_INFO",
            Self::SMSG_PLAY_SOUND(_) => "SMSG_PLAY_SOUND",
            Self::SMSG_BATTLEFIELD_STATUS(_) => "SMSG_BATTLEFIELD_STATUS",
            Self::MSG_INSPECT_HONOR_STATS(_) => "MSG_INSPECT_HONOR_STATS_Server",
            Self::SMSG_FORCE_WALK_SPEED_CHANGE(_) => "SMSG_FORCE_WALK_SPEED_CHANGE",
            Self::SMSG_FORCE_SWIM_BACK_SPEED_CHANGE(_) => "SMSG_FORCE_SWIM_BACK_SPEED_CHANGE",
            Self::SMSG_FORCE_TURN_RATE_CHANGE(_) => "SMSG_FORCE_TURN_RATE_CHANGE",
            Self::SMSG_AREA_SPIRIT_HEALER_TIME(_) => "SMSG_AREA_SPIRIT_HEALER_TIME",
            Self::SMSG_WARDEN_DATA(_) => "SMSG_WARDEN_DATA",
            Self::SMSG_GROUP_JOINED_BATTLEGROUND(_) => "SMSG_GROUP_JOINED_BATTLEGROUND",
            Self::MSG_BATTLEGROUND_PLAYER_POSITIONS(_) => "MSG_BATTLEGROUND_PLAYER_POSITIONS_Server",
            Self::SMSG_BINDER_CONFIRM(_) => "SMSG_BINDER_CONFIRM",
            Self::SMSG_BATTLEGROUND_PLAYER_JOINED(_) => "SMSG_BATTLEGROUND_PLAYER_JOINED",
            Self::SMSG_BATTLEGROUND_PLAYER_LEFT(_) => "SMSG_BATTLEGROUND_PLAYER_LEFT",
            Self::SMSG_ADDON_INFO(_) => "SMSG_ADDON_INFO",
            Self::SMSG_PET_UNLEARN_CONFIRM(_) => "SMSG_PET_UNLEARN_CONFIRM",
            Self::SMSG_PARTY_MEMBER_STATS_FULL(_) => "SMSG_PARTY_MEMBER_STATS_FULL",
            Self::SMSG_WEATHER(_) => "SMSG_WEATHER",
            Self::SMSG_RAID_INSTANCE_MESSAGE(_) => "SMSG_RAID_INSTANCE_MESSAGE",
            Self::SMSG_COMPRESSED_MOVES(_) => "SMSG_COMPRESSED_MOVES",
            Self::SMSG_CHAT_RESTRICTED(_) => "SMSG_CHAT_RESTRICTED",
            Self::SMSG_SPLINE_SET_RUN_SPEED(_) => "SMSG_SPLINE_SET_RUN_SPEED",
            Self::SMSG_SPLINE_SET_RUN_BACK_SPEED(_) => "SMSG_SPLINE_SET_RUN_BACK_SPEED",
            Self::SMSG_SPLINE_SET_SWIM_SPEED(_) => "SMSG_SPLINE_SET_SWIM_SPEED",
            Self::SMSG_SPLINE_SET_WALK_SPEED(_) => "SMSG_SPLINE_SET_WALK_SPEED",
            Self::SMSG_SPLINE_SET_SWIM_BACK_SPEED(_) => "SMSG_SPLINE_SET_SWIM_BACK_SPEED",
            Self::SMSG_SPLINE_SET_TURN_RATE(_) => "SMSG_SPLINE_SET_TURN_RATE",
            Self::SMSG_SPLINE_MOVE_UNROOT(_) => "SMSG_SPLINE_MOVE_UNROOT",
            Self::SMSG_SPLINE_MOVE_FEATHER_FALL(_) => "SMSG_SPLINE_MOVE_FEATHER_FALL",
            Self::SMSG_SPLINE_MOVE_NORMAL_FALL(_) => "SMSG_SPLINE_MOVE_NORMAL_FALL",
            Self::SMSG_SPLINE_MOVE_SET_HOVER(_) => "SMSG_SPLINE_MOVE_SET_HOVER",
            Self::SMSG_SPLINE_MOVE_UNSET_HOVER(_) => "SMSG_SPLINE_MOVE_UNSET_HOVER",
            Self::SMSG_SPLINE_MOVE_WATER_WALK(_) => "SMSG_SPLINE_MOVE_WATER_WALK",
            Self::SMSG_SPLINE_MOVE_LAND_WALK(_) => "SMSG_SPLINE_MOVE_LAND_WALK",
            Self::SMSG_SPLINE_MOVE_START_SWIM(_) => "SMSG_SPLINE_MOVE_START_SWIM",
            Self::SMSG_SPLINE_MOVE_STOP_SWIM(_) => "SMSG_SPLINE_MOVE_STOP_SWIM",
            Self::SMSG_SPLINE_MOVE_SET_RUN_MODE(_) => "SMSG_SPLINE_MOVE_SET_RUN_MODE",
            Self::SMSG_SPLINE_MOVE_SET_WALK_MODE(_) => "SMSG_SPLINE_MOVE_SET_WALK_MODE",
            Self::MSG_MOVE_TIME_SKIPPED(_) => "MSG_MOVE_TIME_SKIPPED_Server",
            Self::SMSG_SPLINE_MOVE_ROOT(_) => "SMSG_SPLINE_MOVE_ROOT",
            Self::SMSG_INVALIDATE_PLAYER(_) => "SMSG_INVALIDATE_PLAYER",
            Self::SMSG_INSTANCE_RESET(_) => "SMSG_INSTANCE_RESET",
            Self::SMSG_INSTANCE_RESET_FAILED(_) => "SMSG_INSTANCE_RESET_FAILED",
            Self::SMSG_UPDATE_LAST_INSTANCE(_) => "SMSG_UPDATE_LAST_INSTANCE",
            Self::MSG_RAID_TARGET_UPDATE(_) => "MSG_RAID_TARGET_UPDATE_Server",
            Self::MSG_RAID_READY_CHECK(_) => "MSG_RAID_READY_CHECK_Server",
            Self::SMSG_PET_ACTION_SOUND(_) => "SMSG_PET_ACTION_SOUND",
            Self::SMSG_PET_DISMISS_SOUND(_) => "SMSG_PET_DISMISS_SOUND",
            Self::SMSG_GM_TICKET_STATUS_UPDATE(_) => "SMSG_GM_TICKET_STATUS_UPDATE",
            Self::MSG_SET_DUNGEON_DIFFICULTY(_) => "MSG_SET_DUNGEON_DIFFICULTY_Server",
            Self::SMSG_UPDATE_INSTANCE_OWNERSHIP(_) => "SMSG_UPDATE_INSTANCE_OWNERSHIP",
            Self::SMSG_CHAT_PLAYER_AMBIGUOUS(_) => "SMSG_CHAT_PLAYER_AMBIGUOUS",
            Self::SMSG_SPELLINSTAKILLLOG(_) => "SMSG_SPELLINSTAKILLLOG",
            Self::SMSG_SPELL_UPDATE_CHAIN_TARGETS(_) => "SMSG_SPELL_UPDATE_CHAIN_TARGETS",
            Self::SMSG_SPELLSTEALLOG(_) => "SMSG_SPELLSTEALLOG",
            Self::SMSG_DEFENSE_MESSAGE(_) => "SMSG_DEFENSE_MESSAGE",
            Self::SMSG_INSTANCE_DIFFICULTY(_) => "SMSG_INSTANCE_DIFFICULTY",
            Self::SMSG_MOTD(_) => "SMSG_MOTD",
            Self::SMSG_MOVE_SET_CAN_FLY(_) => "SMSG_MOVE_SET_CAN_FLY",
            Self::SMSG_MOVE_UNSET_CAN_FLY(_) => "SMSG_MOVE_UNSET_CAN_FLY",
            Self::SMSG_ARENA_TEAM_COMMAND_RESULT(_) => "SMSG_ARENA_TEAM_COMMAND_RESULT",
            Self::SMSG_ARENA_TEAM_QUERY_RESPONSE(_) => "SMSG_ARENA_TEAM_QUERY_RESPONSE",
            Self::SMSG_ARENA_TEAM_ROSTER(_) => "SMSG_ARENA_TEAM_ROSTER",
            Self::SMSG_ARENA_TEAM_INVITE(_) => "SMSG_ARENA_TEAM_INVITE",
            Self::SMSG_ARENA_TEAM_EVENT(_) => "SMSG_ARENA_TEAM_EVENT",
            Self::SMSG_ARENA_TEAM_STATS(_) => "SMSG_ARENA_TEAM_STATS",
            Self::SMSG_UPDATE_LFG_LIST(_) => "SMSG_UPDATE_LFG_LIST",
            Self::SMSG_LFG_PROPOSAL_UPDATE(_) => "SMSG_LFG_PROPOSAL_UPDATE",
            Self::SMSG_LFG_ROLE_CHECK_UPDATE(_) => "SMSG_LFG_ROLE_CHECK_UPDATE",
            Self::SMSG_LFG_JOIN_RESULT(_) => "SMSG_LFG_JOIN_RESULT",
            Self::SMSG_LFG_QUEUE_STATUS(_) => "SMSG_LFG_QUEUE_STATUS",
            Self::SMSG_LFG_UPDATE_PLAYER(_) => "SMSG_LFG_UPDATE_PLAYER",
            Self::SMSG_LFG_UPDATE_PARTY(_) => "SMSG_LFG_UPDATE_PARTY",
            Self::SMSG_LFG_UPDATE_SEARCH(_) => "SMSG_LFG_UPDATE_SEARCH",
            Self::SMSG_LFG_BOOT_PROPOSAL_UPDATE(_) => "SMSG_LFG_BOOT_PROPOSAL_UPDATE",
            Self::SMSG_LFG_PLAYER_INFO(_) => "SMSG_LFG_PLAYER_INFO",
            Self::SMSG_LFG_PARTY_INFO(_) => "SMSG_LFG_PARTY_INFO",
            Self::SMSG_TITLE_EARNED(_) => "SMSG_TITLE_EARNED",
            Self::SMSG_ARENA_ERROR(_) => "SMSG_ARENA_ERROR",
            Self::MSG_INSPECT_ARENA_TEAMS(_) => "MSG_INSPECT_ARENA_TEAMS_Server",
            Self::SMSG_DEATH_RELEASE_LOC(_) => "SMSG_DEATH_RELEASE_LOC",
            Self::SMSG_FORCED_DEATH_UPDATE => "SMSG_FORCED_DEATH_UPDATE",
            Self::MSG_MOVE_SET_FLIGHT_SPEED(_) => "MSG_MOVE_SET_FLIGHT_SPEED_Server",
            Self::SMSG_FORCE_FLIGHT_SPEED_CHANGE(_) => "SMSG_FORCE_FLIGHT_SPEED_CHANGE",
            Self::SMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE(_) => "SMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE",
            Self::SMSG_SPLINE_SET_FLIGHT_SPEED(_) => "SMSG_SPLINE_SET_FLIGHT_SPEED",
            Self::SMSG_SPLINE_SET_FLIGHT_BACK_SPEED(_) => "SMSG_SPLINE_SET_FLIGHT_BACK_SPEED",
            Self::SMSG_FLIGHT_SPLINE_SYNC(_) => "SMSG_FLIGHT_SPLINE_SYNC",
            Self::SMSG_REALM_SPLIT(_) => "SMSG_REALM_SPLIT",
            Self::SMSG_TIME_SYNC_REQ(_) => "SMSG_TIME_SYNC_REQ",
            Self::SMSG_RESET_FAILED_NOTIFY(_) => "SMSG_RESET_FAILED_NOTIFY",
            Self::SMSG_LFG_DISABLED => "SMSG_LFG_DISABLED",
            Self::SMSG_UPDATE_COMBO_POINTS(_) => "SMSG_UPDATE_COMBO_POINTS",
            Self::SMSG_DISMOUNT(_) => "SMSG_DISMOUNT",
            Self::MSG_MOVE_UPDATE_CAN_FLY(_) => "MSG_MOVE_UPDATE_CAN_FLY_Server",
            Self::MSG_RAID_READY_CHECK_CONFIRM(_) => "MSG_RAID_READY_CHECK_CONFIRM_Server",
            Self::SMSG_GM_MESSAGECHAT(_) => "SMSG_GM_MESSAGECHAT",
            Self::SMSG_CLEAR_TARGET(_) => "SMSG_CLEAR_TARGET",
            Self::SMSG_CROSSED_INEBRIATION_THRESHOLD(_) => "SMSG_CROSSED_INEBRIATION_THRESHOLD",
            Self::SMSG_KICK_REASON(_) => "SMSG_KICK_REASON",
            Self::SMSG_COMPLAIN_RESULT(_) => "SMSG_COMPLAIN_RESULT",
            Self::SMSG_FEATURE_SYSTEM_STATUS(_) => "SMSG_FEATURE_SYSTEM_STATUS",
            Self::SMSG_CHANNEL_MEMBER_COUNT(_) => "SMSG_CHANNEL_MEMBER_COUNT",
            Self::SMSG_GUILD_BANK_LIST(_) => "SMSG_GUILD_BANK_LIST",
            Self::MSG_GUILD_BANK_LOG_QUERY(_) => "MSG_GUILD_BANK_LOG_QUERY_Server",
            Self::SMSG_USERLIST_ADD(_) => "SMSG_USERLIST_ADD",
            Self::SMSG_USERLIST_REMOVE(_) => "SMSG_USERLIST_REMOVE",
            Self::SMSG_USERLIST_UPDATE(_) => "SMSG_USERLIST_UPDATE",
            Self::SMSG_INSPECT_TALENT(_) => "SMSG_INSPECT_TALENT",
            Self::SMSG_LOOT_LIST(_) => "SMSG_LOOT_LIST",
            Self::MSG_GUILD_PERMISSIONS(_) => "MSG_GUILD_PERMISSIONS_Server",
            Self::MSG_GUILD_BANK_MONEY_WITHDRAWN(_) => "MSG_GUILD_BANK_MONEY_WITHDRAWN_Server",
            Self::MSG_GUILD_EVENT_LOG_QUERY(_) => "MSG_GUILD_EVENT_LOG_QUERY_Server",
            Self::SMSG_MIRRORIMAGE_DATA(_) => "SMSG_MIRRORIMAGE_DATA",
            Self::MSG_QUERY_GUILD_BANK_TEXT(_) => "MSG_QUERY_GUILD_BANK_TEXT_Server",
            Self::SMSG_OVERRIDE_LIGHT(_) => "SMSG_OVERRIDE_LIGHT",
            Self::SMSG_TOTEM_CREATED(_) => "SMSG_TOTEM_CREATED",
            Self::SMSG_QUESTGIVER_STATUS_MULTIPLE(_) => "SMSG_QUESTGIVER_STATUS_MULTIPLE",
            Self::SMSG_SET_PLAYER_DECLINED_NAMES_RESULT(_) => "SMSG_SET_PLAYER_DECLINED_NAMES_RESULT",
            Self::SMSG_SEND_UNLEARN_SPELLS(_) => "SMSG_SEND_UNLEARN_SPELLS",
            Self::SMSG_PROPOSE_LEVEL_GRANT(_) => "SMSG_PROPOSE_LEVEL_GRANT",
            Self::SMSG_REFER_A_FRIEND_FAILURE(_) => "SMSG_REFER_A_FRIEND_FAILURE",
            Self::SMSG_SPLINE_MOVE_SET_FLYING(_) => "SMSG_SPLINE_MOVE_SET_FLYING",
            Self::SMSG_SPLINE_MOVE_UNSET_FLYING(_) => "SMSG_SPLINE_MOVE_UNSET_FLYING",
            Self::SMSG_ENABLE_BARBER_SHOP => "SMSG_ENABLE_BARBER_SHOP",
            Self::SMSG_BARBER_SHOP_RESULT(_) => "SMSG_BARBER_SHOP_RESULT",
            Self::SMSG_CALENDAR_SEND_CALENDAR(_) => "SMSG_CALENDAR_SEND_CALENDAR",
            Self::SMSG_CALENDAR_SEND_EVENT(_) => "SMSG_CALENDAR_SEND_EVENT",
            Self::SMSG_CALENDAR_FILTER_GUILD(_) => "SMSG_CALENDAR_FILTER_GUILD",
            Self::SMSG_CALENDAR_ARENA_TEAM(_) => "SMSG_CALENDAR_ARENA_TEAM",
            Self::SMSG_CALENDAR_EVENT_INVITE(_) => "SMSG_CALENDAR_EVENT_INVITE",
            Self::SMSG_CALENDAR_EVENT_INVITE_REMOVED(_) => "SMSG_CALENDAR_EVENT_INVITE_REMOVED",
            Self::SMSG_CALENDAR_EVENT_STATUS(_) => "SMSG_CALENDAR_EVENT_STATUS",
            Self::SMSG_CALENDAR_COMMAND_RESULT(_) => "SMSG_CALENDAR_COMMAND_RESULT",
            Self::SMSG_CALENDAR_RAID_LOCKOUT_ADDED(_) => "SMSG_CALENDAR_RAID_LOCKOUT_ADDED",
            Self::SMSG_CALENDAR_RAID_LOCKOUT_REMOVED(_) => "SMSG_CALENDAR_RAID_LOCKOUT_REMOVED",
            Self::SMSG_CALENDAR_EVENT_INVITE_ALERT(_) => "SMSG_CALENDAR_EVENT_INVITE_ALERT",
            Self::SMSG_CALENDAR_EVENT_INVITE_REMOVED_ALERT(_) => "SMSG_CALENDAR_EVENT_INVITE_REMOVED_ALERT",
            Self::SMSG_CALENDAR_EVENT_REMOVED_ALERT(_) => "SMSG_CALENDAR_EVENT_REMOVED_ALERT",
            Self::SMSG_CALENDAR_EVENT_UPDATED_ALERT(_) => "SMSG_CALENDAR_EVENT_UPDATED_ALERT",
            Self::SMSG_CALENDAR_EVENT_MODERATOR_STATUS_ALERT(_) => "SMSG_CALENDAR_EVENT_MODERATOR_STATUS_ALERT",
            Self::SMSG_CALENDAR_SEND_NUM_PENDING(_) => "SMSG_CALENDAR_SEND_NUM_PENDING",
            Self::MSG_MOVE_SET_PITCH_RATE(_) => "MSG_MOVE_SET_PITCH_RATE_Server",
            Self::SMSG_FORCE_PITCH_RATE_CHANGE(_) => "SMSG_FORCE_PITCH_RATE_CHANGE",
            Self::SMSG_CALENDAR_EVENT_INVITE_NOTES(_) => "SMSG_CALENDAR_EVENT_INVITE_NOTES",
            Self::SMSG_CALENDAR_EVENT_INVITE_NOTES_ALERT(_) => "SMSG_CALENDAR_EVENT_INVITE_NOTES_ALERT",
            Self::SMSG_UPDATE_ACCOUNT_DATA_COMPLETE(_) => "SMSG_UPDATE_ACCOUNT_DATA_COMPLETE",
            Self::SMSG_TRIGGER_MOVIE(_) => "SMSG_TRIGGER_MOVIE",
            Self::SMSG_ACHIEVEMENT_EARNED(_) => "SMSG_ACHIEVEMENT_EARNED",
            Self::SMSG_CRITERIA_UPDATE(_) => "SMSG_CRITERIA_UPDATE",
            Self::SMSG_RESPOND_INSPECT_ACHIEVEMENTS(_) => "SMSG_RESPOND_INSPECT_ACHIEVEMENTS",
            Self::SMSG_QUESTUPDATE_ADD_PVP_KILL(_) => "SMSG_QUESTUPDATE_ADD_PVP_KILL",
            Self::SMSG_CALENDAR_RAID_LOCKOUT_UPDATED(_) => "SMSG_CALENDAR_RAID_LOCKOUT_UPDATED",
            Self::SMSG_CHAR_CUSTOMIZE(_) => "SMSG_CHAR_CUSTOMIZE",
            Self::SMSG_SET_PHASE_SHIFT(_) => "SMSG_SET_PHASE_SHIFT",
            Self::SMSG_ALL_ACHIEVEMENT_DATA(_) => "SMSG_ALL_ACHIEVEMENT_DATA",
            Self::SMSG_POWER_UPDATE(_) => "SMSG_POWER_UPDATE",
            Self::SMSG_HIGHEST_THREAT_UPDATE(_) => "SMSG_HIGHEST_THREAT_UPDATE",
            Self::SMSG_THREAT_UPDATE(_) => "SMSG_THREAT_UPDATE",
            Self::SMSG_THREAT_REMOVE(_) => "SMSG_THREAT_REMOVE",
            Self::SMSG_THREAT_CLEAR(_) => "SMSG_THREAT_CLEAR",
            Self::SMSG_CONVERT_RUNE(_) => "SMSG_CONVERT_RUNE",
            Self::SMSG_RESYNC_RUNES(_) => "SMSG_RESYNC_RUNES",
            Self::SMSG_ADD_RUNE_POWER(_) => "SMSG_ADD_RUNE_POWER",
            Self::SMSG_AUCTION_LIST_PENDING_SALES(_) => "SMSG_AUCTION_LIST_PENDING_SALES",
            Self::SMSG_MODIFY_COOLDOWN(_) => "SMSG_MODIFY_COOLDOWN",
            Self::SMSG_PET_UPDATE_COMBO_POINTS(_) => "SMSG_PET_UPDATE_COMBO_POINTS",
            Self::SMSG_PRE_RESURRECT(_) => "SMSG_PRE_RESURRECT",
            Self::SMSG_AURA_UPDATE_ALL(_) => "SMSG_AURA_UPDATE_ALL",
            Self::SMSG_AURA_UPDATE(_) => "SMSG_AURA_UPDATE",
            Self::SMSG_SERVER_FIRST_ACHIEVEMENT(_) => "SMSG_SERVER_FIRST_ACHIEVEMENT",
            Self::SMSG_PET_LEARNED_SPELL(_) => "SMSG_PET_LEARNED_SPELL",
            Self::SMSG_PET_UNLEARNED_SPELL(_) => "SMSG_PET_UNLEARNED_SPELL",
            Self::SMSG_ON_CANCEL_EXPECTED_RIDE_VEHICLE_AURA => "SMSG_ON_CANCEL_EXPECTED_RIDE_VEHICLE_AURA",
            Self::SMSG_CRITERIA_DELETED(_) => "SMSG_CRITERIA_DELETED",
            Self::SMSG_ACHIEVEMENT_DELETED(_) => "SMSG_ACHIEVEMENT_DELETED",
            Self::SMSG_BATTLEGROUND_INFO_THROTTLED => "SMSG_BATTLEGROUND_INFO_THROTTLED",
            Self::SMSG_PLAYER_VEHICLE_DATA(_) => "SMSG_PLAYER_VEHICLE_DATA",
            Self::SMSG_PET_GUIDS(_) => "SMSG_PET_GUIDS",
            Self::SMSG_CLIENTCACHE_VERSION(_) => "SMSG_CLIENTCACHE_VERSION",
            Self::SMSG_ITEM_REFUND_INFO_RESPONSE(_) => "SMSG_ITEM_REFUND_INFO_RESPONSE",
            Self::SMSG_ITEM_REFUND_RESULT(_) => "SMSG_ITEM_REFUND_RESULT",
            Self::SMSG_CORPSE_MAP_POSITION_QUERY_RESPONSE(_) => "SMSG_CORPSE_MAP_POSITION_QUERY_RESPONSE",
            Self::SMSG_CALENDAR_CLEAR_PENDING_ACTION => "SMSG_CALENDAR_CLEAR_PENDING_ACTION",
            Self::SMSG_EQUIPMENT_SET_LIST(_) => "SMSG_EQUIPMENT_SET_LIST",
            Self::SMSG_SET_PROJECTILE_POSITION(_) => "SMSG_SET_PROJECTILE_POSITION",
            Self::SMSG_TALENTS_INFO(_) => "SMSG_TALENTS_INFO",
            Self::SMSG_ARENA_UNIT_DESTROYED(_) => "SMSG_ARENA_UNIT_DESTROYED",
            Self::SMSG_ARENA_TEAM_CHANGE_FAILED_QUEUED(_) => "SMSG_ARENA_TEAM_CHANGE_FAILED_QUEUED",
            Self::SMSG_MOVE_GRAVITY_DISABLE(_) => "SMSG_MOVE_GRAVITY_DISABLE",
            Self::SMSG_MOVE_GRAVITY_ENABLE(_) => "SMSG_MOVE_GRAVITY_ENABLE",
            Self::MSG_MOVE_GRAVITY_CHNG(_) => "MSG_MOVE_GRAVITY_CHNG_Server",
            Self::SMSG_SPLINE_MOVE_GRAVITY_DISABLE(_) => "SMSG_SPLINE_MOVE_GRAVITY_DISABLE",
            Self::SMSG_SPLINE_MOVE_GRAVITY_ENABLE(_) => "SMSG_SPLINE_MOVE_GRAVITY_ENABLE",
            Self::SMSG_EQUIPMENT_SET_USE_RESULT(_) => "SMSG_EQUIPMENT_SET_USE_RESULT",
            Self::SMSG_CHAR_FACTION_CHANGE(_) => "SMSG_CHAR_FACTION_CHANGE",
            Self::SMSG_BATTLEFIELD_MGR_ENTRY_INVITE(_) => "SMSG_BATTLEFIELD_MGR_ENTRY_INVITE",
            Self::SMSG_BATTLEFIELD_MGR_ENTERED(_) => "SMSG_BATTLEFIELD_MGR_ENTERED",
            Self::SMSG_BATTLEFIELD_MGR_QUEUE_INVITE(_) => "SMSG_BATTLEFIELD_MGR_QUEUE_INVITE",
            Self::SMSG_BATTLEFIELD_MGR_QUEUE_REQUEST_RESPONSE(_) => "SMSG_BATTLEFIELD_MGR_QUEUE_REQUEST_RESPONSE",
            Self::SMSG_BATTLEFIELD_MGR_EJECT_PENDING(_) => "SMSG_BATTLEFIELD_MGR_EJECT_PENDING",
            Self::SMSG_BATTLEFIELD_MGR_EJECTED(_) => "SMSG_BATTLEFIELD_MGR_EJECTED",
            Self::SMSG_BATTLEFIELD_MGR_STATE_CHANGE(_) => "SMSG_BATTLEFIELD_MGR_STATE_CHANGE",
            Self::MSG_SET_RAID_DIFFICULTY(_) => "MSG_SET_RAID_DIFFICULTY_Server",
            Self::SMSG_TOGGLE_XP_GAIN => "SMSG_TOGGLE_XP_GAIN",
            Self::SMSG_GMRESPONSE_DB_ERROR => "SMSG_GMRESPONSE_DB_ERROR",
            Self::SMSG_GMRESPONSE_RECEIVED(_) => "SMSG_GMRESPONSE_RECEIVED",
            Self::SMSG_GMRESPONSE_STATUS_UPDATE(_) => "SMSG_GMRESPONSE_STATUS_UPDATE",
            Self::SMSG_WORLD_STATE_UI_TIMER_UPDATE(_) => "SMSG_WORLD_STATE_UI_TIMER_UPDATE",
            Self::SMSG_TALENTS_INVOLUNTARILY_RESET(_) => "SMSG_TALENTS_INVOLUNTARILY_RESET",
            Self::SMSG_QUERY_QUESTS_COMPLETED_RESPONSE(_) => "SMSG_QUERY_QUESTS_COMPLETED_RESPONSE",
            Self::SMSG_CORPSE_NOT_IN_INSTANCE => "SMSG_CORPSE_NOT_IN_INSTANCE",
            Self::SMSG_CAMERA_SHAKE(_) => "SMSG_CAMERA_SHAKE",
            Self::SMSG_SOCKET_GEMS_RESULT(_) => "SMSG_SOCKET_GEMS_RESULT",
            Self::SMSG_REDIRECT_CLIENT(_) => "SMSG_REDIRECT_CLIENT",
            Self::SMSG_MOVE_SET_COLLISION_HGT(_) => "SMSG_MOVE_SET_COLLISION_HGT",
            Self::SMSG_MULTIPLE_MOVES(_) => "SMSG_MULTIPLE_MOVES",
        }
    }

}

impl std::fmt::Display for ServerOpcodeMessage {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        f.write_str(match self {
            ServerOpcodeMessage::MSG_MOVE_START_FORWARD(_) => "MSG_MOVE_START_FORWARD",
            ServerOpcodeMessage::MSG_MOVE_START_BACKWARD(_) => "MSG_MOVE_START_BACKWARD",
            ServerOpcodeMessage::MSG_MOVE_STOP(_) => "MSG_MOVE_STOP",
            ServerOpcodeMessage::MSG_MOVE_START_STRAFE_LEFT(_) => "MSG_MOVE_START_STRAFE_LEFT",
            ServerOpcodeMessage::MSG_MOVE_START_STRAFE_RIGHT(_) => "MSG_MOVE_START_STRAFE_RIGHT",
            ServerOpcodeMessage::MSG_MOVE_STOP_STRAFE(_) => "MSG_MOVE_STOP_STRAFE",
            ServerOpcodeMessage::MSG_MOVE_JUMP(_) => "MSG_MOVE_JUMP",
            ServerOpcodeMessage::MSG_MOVE_START_TURN_LEFT(_) => "MSG_MOVE_START_TURN_LEFT",
            ServerOpcodeMessage::MSG_MOVE_START_TURN_RIGHT(_) => "MSG_MOVE_START_TURN_RIGHT",
            ServerOpcodeMessage::MSG_MOVE_STOP_TURN(_) => "MSG_MOVE_STOP_TURN",
            ServerOpcodeMessage::MSG_MOVE_START_PITCH_UP(_) => "MSG_MOVE_START_PITCH_UP",
            ServerOpcodeMessage::MSG_MOVE_START_PITCH_DOWN(_) => "MSG_MOVE_START_PITCH_DOWN",
            ServerOpcodeMessage::MSG_MOVE_STOP_PITCH(_) => "MSG_MOVE_STOP_PITCH",
            ServerOpcodeMessage::MSG_MOVE_SET_RUN_MODE(_) => "MSG_MOVE_SET_RUN_MODE",
            ServerOpcodeMessage::MSG_MOVE_SET_WALK_MODE(_) => "MSG_MOVE_SET_WALK_MODE",
            ServerOpcodeMessage::MSG_MOVE_FALL_LAND(_) => "MSG_MOVE_FALL_LAND",
            ServerOpcodeMessage::MSG_MOVE_START_SWIM(_) => "MSG_MOVE_START_SWIM",
            ServerOpcodeMessage::MSG_MOVE_STOP_SWIM(_) => "MSG_MOVE_STOP_SWIM",
            ServerOpcodeMessage::MSG_MOVE_SET_FACING(_) => "MSG_MOVE_SET_FACING",
            ServerOpcodeMessage::MSG_MOVE_SET_PITCH(_) => "MSG_MOVE_SET_PITCH",
            ServerOpcodeMessage::MSG_MOVE_WORLDPORT_ACK => "MSG_MOVE_WORLDPORT_ACK",
            ServerOpcodeMessage::MSG_MOVE_HEARTBEAT(_) => "MSG_MOVE_HEARTBEAT",
            ServerOpcodeMessage::MSG_MOVE_HOVER(_) => "MSG_MOVE_HOVER",
            ServerOpcodeMessage::MSG_PETITION_DECLINE(_) => "MSG_PETITION_DECLINE",
            ServerOpcodeMessage::MSG_TABARDVENDOR_ACTIVATE(_) => "MSG_TABARDVENDOR_ACTIVATE",
            ServerOpcodeMessage::MSG_QUEST_PUSH_RESULT(_) => "MSG_QUEST_PUSH_RESULT",
            ServerOpcodeMessage::MSG_MOVE_WATER_WALK(_) => "MSG_MOVE_WATER_WALK",
            ServerOpcodeMessage::MSG_PETITION_RENAME(_) => "MSG_PETITION_RENAME",
            ServerOpcodeMessage::MSG_MOVE_START_ASCEND(_) => "MSG_MOVE_START_ASCEND",
            ServerOpcodeMessage::MSG_MOVE_STOP_ASCEND(_) => "MSG_MOVE_STOP_ASCEND",
            ServerOpcodeMessage::MSG_MOVE_SET_FLIGHT_BACK_SPEED(_) => "MSG_MOVE_SET_FLIGHT_BACK_SPEED",
            ServerOpcodeMessage::MSG_MOVE_START_DESCEND(_) => "MSG_MOVE_START_DESCEND",
            ServerOpcodeMessage::CMSG_CALENDAR_GET_NUM_PENDING => "CMSG_CALENDAR_GET_NUM_PENDING",
            ServerOpcodeMessage::SMSG_CHAR_CREATE(_) => "SMSG_CHAR_CREATE",
            ServerOpcodeMessage::SMSG_CHAR_ENUM(_) => "SMSG_CHAR_ENUM",
            ServerOpcodeMessage::SMSG_CHAR_DELETE(_) => "SMSG_CHAR_DELETE",
            ServerOpcodeMessage::SMSG_NEW_WORLD(_) => "SMSG_NEW_WORLD",
            ServerOpcodeMessage::SMSG_TRANSFER_PENDING(_) => "SMSG_TRANSFER_PENDING",
            ServerOpcodeMessage::SMSG_TRANSFER_ABORTED(_) => "SMSG_TRANSFER_ABORTED",
            ServerOpcodeMessage::SMSG_CHARACTER_LOGIN_FAILED(_) => "SMSG_CHARACTER_LOGIN_FAILED",
            ServerOpcodeMessage::SMSG_LOGIN_SETTIMESPEED(_) => "SMSG_LOGIN_SETTIMESPEED",
            ServerOpcodeMessage::SMSG_LOGOUT_RESPONSE(_) => "SMSG_LOGOUT_RESPONSE",
            ServerOpcodeMessage::SMSG_LOGOUT_COMPLETE => "SMSG_LOGOUT_COMPLETE",
            ServerOpcodeMessage::SMSG_LOGOUT_CANCEL_ACK => "SMSG_LOGOUT_CANCEL_ACK",
            ServerOpcodeMessage::SMSG_NAME_QUERY_RESPONSE(_) => "SMSG_NAME_QUERY_RESPONSE",
            ServerOpcodeMessage::SMSG_PET_NAME_QUERY_RESPONSE(_) => "SMSG_PET_NAME_QUERY_RESPONSE",
            ServerOpcodeMessage::SMSG_GUILD_QUERY_RESPONSE(_) => "SMSG_GUILD_QUERY_RESPONSE",
            ServerOpcodeMessage::SMSG_ITEM_QUERY_SINGLE_RESPONSE(_) => "SMSG_ITEM_QUERY_SINGLE_RESPONSE",
            ServerOpcodeMessage::SMSG_PAGE_TEXT_QUERY_RESPONSE(_) => "SMSG_PAGE_TEXT_QUERY_RESPONSE",
            ServerOpcodeMessage::SMSG_QUEST_QUERY_RESPONSE(_) => "SMSG_QUEST_QUERY_RESPONSE",
            ServerOpcodeMessage::SMSG_GAMEOBJECT_QUERY_RESPONSE(_) => "SMSG_GAMEOBJECT_QUERY_RESPONSE",
            ServerOpcodeMessage::SMSG_CREATURE_QUERY_RESPONSE(_) => "SMSG_CREATURE_QUERY_RESPONSE",
            ServerOpcodeMessage::SMSG_WHO(_) => "SMSG_WHO",
            ServerOpcodeMessage::SMSG_WHOIS(_) => "SMSG_WHOIS",
            ServerOpcodeMessage::SMSG_CONTACT_LIST(_) => "SMSG_CONTACT_LIST",
            ServerOpcodeMessage::SMSG_FRIEND_STATUS(_) => "SMSG_FRIEND_STATUS",
            ServerOpcodeMessage::SMSG_GROUP_INVITE(_) => "SMSG_GROUP_INVITE",
            ServerOpcodeMessage::SMSG_GROUP_DECLINE(_) => "SMSG_GROUP_DECLINE",
            ServerOpcodeMessage::SMSG_GROUP_UNINVITE => "SMSG_GROUP_UNINVITE",
            ServerOpcodeMessage::SMSG_GROUP_SET_LEADER(_) => "SMSG_GROUP_SET_LEADER",
            ServerOpcodeMessage::SMSG_GROUP_DESTROYED => "SMSG_GROUP_DESTROYED",
            ServerOpcodeMessage::SMSG_GROUP_LIST(_) => "SMSG_GROUP_LIST",
            ServerOpcodeMessage::SMSG_PARTY_MEMBER_STATS(_) => "SMSG_PARTY_MEMBER_STATS",
            ServerOpcodeMessage::SMSG_PARTY_COMMAND_RESULT(_) => "SMSG_PARTY_COMMAND_RESULT",
            ServerOpcodeMessage::SMSG_GUILD_INVITE(_) => "SMSG_GUILD_INVITE",
            ServerOpcodeMessage::SMSG_GUILD_DECLINE(_) => "SMSG_GUILD_DECLINE",
            ServerOpcodeMessage::SMSG_GUILD_INFO(_) => "SMSG_GUILD_INFO",
            ServerOpcodeMessage::SMSG_GUILD_ROSTER(_) => "SMSG_GUILD_ROSTER",
            ServerOpcodeMessage::SMSG_GUILD_EVENT(_) => "SMSG_GUILD_EVENT",
            ServerOpcodeMessage::SMSG_GUILD_COMMAND_RESULT(_) => "SMSG_GUILD_COMMAND_RESULT",
            ServerOpcodeMessage::SMSG_MESSAGECHAT(_) => "SMSG_MESSAGECHAT",
            ServerOpcodeMessage::SMSG_CHANNEL_NOTIFY(_) => "SMSG_CHANNEL_NOTIFY",
            ServerOpcodeMessage::SMSG_CHANNEL_LIST(_) => "SMSG_CHANNEL_LIST",
            ServerOpcodeMessage::SMSG_UPDATE_OBJECT(_) => "SMSG_UPDATE_OBJECT",
            ServerOpcodeMessage::SMSG_DESTROY_OBJECT(_) => "SMSG_DESTROY_OBJECT",
            ServerOpcodeMessage::SMSG_READ_ITEM_OK(_) => "SMSG_READ_ITEM_OK",
            ServerOpcodeMessage::SMSG_READ_ITEM_FAILED(_) => "SMSG_READ_ITEM_FAILED",
            ServerOpcodeMessage::SMSG_ITEM_COOLDOWN(_) => "SMSG_ITEM_COOLDOWN",
            ServerOpcodeMessage::SMSG_GAMEOBJECT_CUSTOM_ANIM(_) => "SMSG_GAMEOBJECT_CUSTOM_ANIM",
            ServerOpcodeMessage::MSG_MOVE_TELEPORT_CHEAT(_) => "MSG_MOVE_TELEPORT_CHEAT_Server",
            ServerOpcodeMessage::MSG_MOVE_TELEPORT_ACK(_) => "MSG_MOVE_TELEPORT_ACK_Server",
            ServerOpcodeMessage::SMSG_MONSTER_MOVE(_) => "SMSG_MONSTER_MOVE",
            ServerOpcodeMessage::SMSG_MOVE_WATER_WALK(_) => "SMSG_MOVE_WATER_WALK",
            ServerOpcodeMessage::SMSG_MOVE_LAND_WALK(_) => "SMSG_MOVE_LAND_WALK",
            ServerOpcodeMessage::SMSG_FORCE_RUN_SPEED_CHANGE(_) => "SMSG_FORCE_RUN_SPEED_CHANGE",
            ServerOpcodeMessage::SMSG_FORCE_RUN_BACK_SPEED_CHANGE(_) => "SMSG_FORCE_RUN_BACK_SPEED_CHANGE",
            ServerOpcodeMessage::SMSG_FORCE_SWIM_SPEED_CHANGE(_) => "SMSG_FORCE_SWIM_SPEED_CHANGE",
            ServerOpcodeMessage::SMSG_FORCE_MOVE_ROOT(_) => "SMSG_FORCE_MOVE_ROOT",
            ServerOpcodeMessage::SMSG_FORCE_MOVE_UNROOT(_) => "SMSG_FORCE_MOVE_UNROOT",
            ServerOpcodeMessage::MSG_MOVE_ROOT(_) => "MSG_MOVE_ROOT_Server",
            ServerOpcodeMessage::MSG_MOVE_UNROOT(_) => "MSG_MOVE_UNROOT_Server",
            ServerOpcodeMessage::SMSG_MOVE_KNOCK_BACK(_) => "SMSG_MOVE_KNOCK_BACK",
            ServerOpcodeMessage::MSG_MOVE_KNOCK_BACK(_) => "MSG_MOVE_KNOCK_BACK_Server",
            ServerOpcodeMessage::SMSG_MOVE_FEATHER_FALL(_) => "SMSG_MOVE_FEATHER_FALL",
            ServerOpcodeMessage::SMSG_MOVE_NORMAL_FALL(_) => "SMSG_MOVE_NORMAL_FALL",
            ServerOpcodeMessage::SMSG_MOVE_SET_HOVER(_) => "SMSG_MOVE_SET_HOVER",
            ServerOpcodeMessage::SMSG_MOVE_UNSET_HOVER(_) => "SMSG_MOVE_UNSET_HOVER",
            ServerOpcodeMessage::SMSG_TRIGGER_CINEMATIC(_) => "SMSG_TRIGGER_CINEMATIC",
            ServerOpcodeMessage::SMSG_TUTORIAL_FLAGS(_) => "SMSG_TUTORIAL_FLAGS",
            ServerOpcodeMessage::SMSG_EMOTE(_) => "SMSG_EMOTE",
            ServerOpcodeMessage::SMSG_TEXT_EMOTE(_) => "SMSG_TEXT_EMOTE",
            ServerOpcodeMessage::SMSG_INVENTORY_CHANGE_FAILURE(_) => "SMSG_INVENTORY_CHANGE_FAILURE",
            ServerOpcodeMessage::SMSG_TRADE_STATUS(_) => "SMSG_TRADE_STATUS",
            ServerOpcodeMessage::SMSG_TRADE_STATUS_EXTENDED(_) => "SMSG_TRADE_STATUS_EXTENDED",
            ServerOpcodeMessage::SMSG_INITIALIZE_FACTIONS(_) => "SMSG_INITIALIZE_FACTIONS",
            ServerOpcodeMessage::SMSG_SET_FACTION_VISIBLE(_) => "SMSG_SET_FACTION_VISIBLE",
            ServerOpcodeMessage::SMSG_SET_FACTION_STANDING(_) => "SMSG_SET_FACTION_STANDING",
            ServerOpcodeMessage::SMSG_SET_PROFICIENCY(_) => "SMSG_SET_PROFICIENCY",
            ServerOpcodeMessage::SMSG_ACTION_BUTTONS(_) => "SMSG_ACTION_BUTTONS",
            ServerOpcodeMessage::SMSG_INITIAL_SPELLS(_) => "SMSG_INITIAL_SPELLS",
            ServerOpcodeMessage::SMSG_LEARNED_SPELL(_) => "SMSG_LEARNED_SPELL",
            ServerOpcodeMessage::SMSG_SUPERCEDED_SPELL(_) => "SMSG_SUPERCEDED_SPELL",
            ServerOpcodeMessage::SMSG_CAST_FAILED(_) => "SMSG_CAST_FAILED",
            ServerOpcodeMessage::SMSG_SPELL_START(_) => "SMSG_SPELL_START",
            ServerOpcodeMessage::SMSG_SPELL_GO(_) => "SMSG_SPELL_GO",
            ServerOpcodeMessage::SMSG_SPELL_FAILURE(_) => "SMSG_SPELL_FAILURE",
            ServerOpcodeMessage::SMSG_SPELL_COOLDOWN(_) => "SMSG_SPELL_COOLDOWN",
            ServerOpcodeMessage::SMSG_COOLDOWN_EVENT(_) => "SMSG_COOLDOWN_EVENT",
            ServerOpcodeMessage::SMSG_PET_CAST_FAILED(_) => "SMSG_PET_CAST_FAILED",
            ServerOpcodeMessage::MSG_CHANNEL_START(_) => "MSG_CHANNEL_START_Server",
            ServerOpcodeMessage::MSG_CHANNEL_UPDATE(_) => "MSG_CHANNEL_UPDATE_Server",
            ServerOpcodeMessage::SMSG_AI_REACTION(_) => "SMSG_AI_REACTION",
            ServerOpcodeMessage::SMSG_ATTACKSTART(_) => "SMSG_ATTACKSTART",
            ServerOpcodeMessage::SMSG_ATTACKSTOP(_) => "SMSG_ATTACKSTOP",
            ServerOpcodeMessage::SMSG_ATTACKSWING_NOTINRANGE => "SMSG_ATTACKSWING_NOTINRANGE",
            ServerOpcodeMessage::SMSG_ATTACKSWING_BADFACING => "SMSG_ATTACKSWING_BADFACING",
            ServerOpcodeMessage::SMSG_INSTANCE_LOCK_WARNING_QUERY(_) => "SMSG_INSTANCE_LOCK_WARNING_QUERY",
            ServerOpcodeMessage::SMSG_ATTACKSWING_DEADTARGET => "SMSG_ATTACKSWING_DEADTARGET",
            ServerOpcodeMessage::SMSG_ATTACKSWING_CANT_ATTACK => "SMSG_ATTACKSWING_CANT_ATTACK",
            ServerOpcodeMessage::SMSG_ATTACKERSTATEUPDATE(_) => "SMSG_ATTACKERSTATEUPDATE",
            ServerOpcodeMessage::SMSG_CANCEL_COMBAT => "SMSG_CANCEL_COMBAT",
            ServerOpcodeMessage::SMSG_SPELLHEALLOG(_) => "SMSG_SPELLHEALLOG",
            ServerOpcodeMessage::SMSG_SPELLENERGIZELOG(_) => "SMSG_SPELLENERGIZELOG",
            ServerOpcodeMessage::SMSG_BREAK_TARGET(_) => "SMSG_BREAK_TARGET",
            ServerOpcodeMessage::SMSG_BINDPOINTUPDATE(_) => "SMSG_BINDPOINTUPDATE",
            ServerOpcodeMessage::SMSG_PLAYERBOUND(_) => "SMSG_PLAYERBOUND",
            ServerOpcodeMessage::SMSG_CLIENT_CONTROL_UPDATE(_) => "SMSG_CLIENT_CONTROL_UPDATE",
            ServerOpcodeMessage::SMSG_RESURRECT_REQUEST(_) => "SMSG_RESURRECT_REQUEST",
            ServerOpcodeMessage::SMSG_LOOT_RESPONSE(_) => "SMSG_LOOT_RESPONSE",
            ServerOpcodeMessage::SMSG_LOOT_RELEASE_RESPONSE(_) => "SMSG_LOOT_RELEASE_RESPONSE",
            ServerOpcodeMessage::SMSG_LOOT_REMOVED(_) => "SMSG_LOOT_REMOVED",
            ServerOpcodeMessage::SMSG_LOOT_MONEY_NOTIFY(_) => "SMSG_LOOT_MONEY_NOTIFY",
            ServerOpcodeMessage::SMSG_LOOT_CLEAR_MONEY => "SMSG_LOOT_CLEAR_MONEY",
            ServerOpcodeMessage::SMSG_ITEM_PUSH_RESULT(_) => "SMSG_ITEM_PUSH_RESULT",
            ServerOpcodeMessage::SMSG_DUEL_REQUESTED(_) => "SMSG_DUEL_REQUESTED",
            ServerOpcodeMessage::SMSG_DUEL_OUTOFBOUNDS => "SMSG_DUEL_OUTOFBOUNDS",
            ServerOpcodeMessage::SMSG_DUEL_INBOUNDS => "SMSG_DUEL_INBOUNDS",
            ServerOpcodeMessage::SMSG_DUEL_COMPLETE(_) => "SMSG_DUEL_COMPLETE",
            ServerOpcodeMessage::SMSG_DUEL_WINNER(_) => "SMSG_DUEL_WINNER",
            ServerOpcodeMessage::SMSG_MOUNTRESULT(_) => "SMSG_MOUNTRESULT",
            ServerOpcodeMessage::SMSG_MOUNTSPECIAL_ANIM(_) => "SMSG_MOUNTSPECIAL_ANIM",
            ServerOpcodeMessage::SMSG_PET_TAME_FAILURE(_) => "SMSG_PET_TAME_FAILURE",
            ServerOpcodeMessage::SMSG_PET_NAME_INVALID(_) => "SMSG_PET_NAME_INVALID",
            ServerOpcodeMessage::SMSG_PET_SPELLS(_) => "SMSG_PET_SPELLS",
            ServerOpcodeMessage::SMSG_PET_MODE(_) => "SMSG_PET_MODE",
            ServerOpcodeMessage::SMSG_GOSSIP_MESSAGE(_) => "SMSG_GOSSIP_MESSAGE",
            ServerOpcodeMessage::SMSG_GOSSIP_COMPLETE => "SMSG_GOSSIP_COMPLETE",
            ServerOpcodeMessage::SMSG_NPC_TEXT_UPDATE(_) => "SMSG_NPC_TEXT_UPDATE",
            ServerOpcodeMessage::SMSG_QUESTGIVER_STATUS(_) => "SMSG_QUESTGIVER_STATUS",
            ServerOpcodeMessage::SMSG_QUESTGIVER_QUEST_LIST(_) => "SMSG_QUESTGIVER_QUEST_LIST",
            ServerOpcodeMessage::SMSG_QUESTGIVER_QUEST_DETAILS(_) => "SMSG_QUESTGIVER_QUEST_DETAILS",
            ServerOpcodeMessage::SMSG_QUESTGIVER_REQUEST_ITEMS(_) => "SMSG_QUESTGIVER_REQUEST_ITEMS",
            ServerOpcodeMessage::SMSG_QUESTGIVER_OFFER_REWARD(_) => "SMSG_QUESTGIVER_OFFER_REWARD",
            ServerOpcodeMessage::SMSG_QUESTGIVER_QUEST_INVALID(_) => "SMSG_QUESTGIVER_QUEST_INVALID",
            ServerOpcodeMessage::SMSG_QUESTGIVER_QUEST_COMPLETE(_) => "SMSG_QUESTGIVER_QUEST_COMPLETE",
            ServerOpcodeMessage::SMSG_QUESTGIVER_QUEST_FAILED(_) => "SMSG_QUESTGIVER_QUEST_FAILED",
            ServerOpcodeMessage::SMSG_QUESTLOG_FULL => "SMSG_QUESTLOG_FULL",
            ServerOpcodeMessage::SMSG_QUESTUPDATE_FAILED(_) => "SMSG_QUESTUPDATE_FAILED",
            ServerOpcodeMessage::SMSG_QUESTUPDATE_FAILEDTIMER(_) => "SMSG_QUESTUPDATE_FAILEDTIMER",
            ServerOpcodeMessage::SMSG_QUESTUPDATE_COMPLETE(_) => "SMSG_QUESTUPDATE_COMPLETE",
            ServerOpcodeMessage::SMSG_QUESTUPDATE_ADD_KILL(_) => "SMSG_QUESTUPDATE_ADD_KILL",
            ServerOpcodeMessage::SMSG_QUESTUPDATE_ADD_ITEM(_) => "SMSG_QUESTUPDATE_ADD_ITEM",
            ServerOpcodeMessage::SMSG_QUEST_CONFIRM_ACCEPT(_) => "SMSG_QUEST_CONFIRM_ACCEPT",
            ServerOpcodeMessage::SMSG_LIST_INVENTORY(_) => "SMSG_LIST_INVENTORY",
            ServerOpcodeMessage::SMSG_SELL_ITEM(_) => "SMSG_SELL_ITEM",
            ServerOpcodeMessage::SMSG_BUY_ITEM(_) => "SMSG_BUY_ITEM",
            ServerOpcodeMessage::SMSG_BUY_FAILED(_) => "SMSG_BUY_FAILED",
            ServerOpcodeMessage::SMSG_SHOWTAXINODES(_) => "SMSG_SHOWTAXINODES",
            ServerOpcodeMessage::SMSG_TAXINODE_STATUS(_) => "SMSG_TAXINODE_STATUS",
            ServerOpcodeMessage::SMSG_ACTIVATETAXIREPLY(_) => "SMSG_ACTIVATETAXIREPLY",
            ServerOpcodeMessage::SMSG_NEW_TAXI_PATH => "SMSG_NEW_TAXI_PATH",
            ServerOpcodeMessage::SMSG_TRAINER_LIST(_) => "SMSG_TRAINER_LIST",
            ServerOpcodeMessage::SMSG_TRAINER_BUY_SUCCEEDED(_) => "SMSG_TRAINER_BUY_SUCCEEDED",
            ServerOpcodeMessage::SMSG_TRAINER_BUY_FAILED(_) => "SMSG_TRAINER_BUY_FAILED",
            ServerOpcodeMessage::SMSG_SHOW_BANK(_) => "SMSG_SHOW_BANK",
            ServerOpcodeMessage::SMSG_BUY_BANK_SLOT_RESULT(_) => "SMSG_BUY_BANK_SLOT_RESULT",
            ServerOpcodeMessage::SMSG_PETITION_SHOWLIST(_) => "SMSG_PETITION_SHOWLIST",
            ServerOpcodeMessage::SMSG_PETITION_SHOW_SIGNATURES(_) => "SMSG_PETITION_SHOW_SIGNATURES",
            ServerOpcodeMessage::SMSG_PETITION_SIGN_RESULTS(_) => "SMSG_PETITION_SIGN_RESULTS",
            ServerOpcodeMessage::SMSG_TURN_IN_PETITION_RESULTS(_) => "SMSG_TURN_IN_PETITION_RESULTS",
            ServerOpcodeMessage::SMSG_PETITION_QUERY_RESPONSE(_) => "SMSG_PETITION_QUERY_RESPONSE",
            ServerOpcodeMessage::SMSG_FISH_NOT_HOOKED => "SMSG_FISH_NOT_HOOKED",
            ServerOpcodeMessage::SMSG_FISH_ESCAPED => "SMSG_FISH_ESCAPED",
            ServerOpcodeMessage::SMSG_NOTIFICATION(_) => "SMSG_NOTIFICATION",
            ServerOpcodeMessage::SMSG_PLAYED_TIME(_) => "SMSG_PLAYED_TIME",
            ServerOpcodeMessage::SMSG_QUERY_TIME_RESPONSE(_) => "SMSG_QUERY_TIME_RESPONSE",
            ServerOpcodeMessage::SMSG_LOG_XPGAIN(_) => "SMSG_LOG_XPGAIN",
            ServerOpcodeMessage::SMSG_LEVELUP_INFO(_) => "SMSG_LEVELUP_INFO",
            ServerOpcodeMessage::MSG_MINIMAP_PING(_) => "MSG_MINIMAP_PING_Server",
            ServerOpcodeMessage::SMSG_ENCHANTMENTLOG(_) => "SMSG_ENCHANTMENTLOG",
            ServerOpcodeMessage::SMSG_START_MIRROR_TIMER(_) => "SMSG_START_MIRROR_TIMER",
            ServerOpcodeMessage::SMSG_PAUSE_MIRROR_TIMER(_) => "SMSG_PAUSE_MIRROR_TIMER",
            ServerOpcodeMessage::SMSG_STOP_MIRROR_TIMER(_) => "SMSG_STOP_MIRROR_TIMER",
            ServerOpcodeMessage::SMSG_PONG(_) => "SMSG_PONG",
            ServerOpcodeMessage::SMSG_CLEAR_COOLDOWN(_) => "SMSG_CLEAR_COOLDOWN",
            ServerOpcodeMessage::SMSG_GAMEOBJECT_PAGETEXT(_) => "SMSG_GAMEOBJECT_PAGETEXT",
            ServerOpcodeMessage::SMSG_SPELL_DELAYED(_) => "SMSG_SPELL_DELAYED",
            ServerOpcodeMessage::SMSG_QUEST_POI_QUERY_RESPONSE(_) => "SMSG_QUEST_POI_QUERY_RESPONSE",
            ServerOpcodeMessage::SMSG_ITEM_TIME_UPDATE(_) => "SMSG_ITEM_TIME_UPDATE",
            ServerOpcodeMessage::SMSG_ITEM_ENCHANT_TIME_UPDATE(_) => "SMSG_ITEM_ENCHANT_TIME_UPDATE",
            ServerOpcodeMessage::SMSG_AUTH_CHALLENGE(_) => "SMSG_AUTH_CHALLENGE",
            ServerOpcodeMessage::SMSG_AUTH_RESPONSE(_) => "SMSG_AUTH_RESPONSE",
            ServerOpcodeMessage::MSG_SAVE_GUILD_EMBLEM(_) => "MSG_SAVE_GUILD_EMBLEM_Server",
            ServerOpcodeMessage::SMSG_PLAY_SPELL_VISUAL(_) => "SMSG_PLAY_SPELL_VISUAL",
            ServerOpcodeMessage::SMSG_PARTYKILLLOG(_) => "SMSG_PARTYKILLLOG",
            ServerOpcodeMessage::SMSG_COMPRESSED_UPDATE_OBJECT(_) => "SMSG_COMPRESSED_UPDATE_OBJECT",
            ServerOpcodeMessage::SMSG_PLAY_SPELL_IMPACT(_) => "SMSG_PLAY_SPELL_IMPACT",
            ServerOpcodeMessage::SMSG_EXPLORATION_EXPERIENCE(_) => "SMSG_EXPLORATION_EXPERIENCE",
            ServerOpcodeMessage::MSG_RANDOM_ROLL(_) => "MSG_RANDOM_ROLL_Server",
            ServerOpcodeMessage::SMSG_ENVIRONMENTAL_DAMAGE_LOG(_) => "SMSG_ENVIRONMENTAL_DAMAGE_LOG",
            ServerOpcodeMessage::SMSG_LFG_PLAYER_REWARD(_) => "SMSG_LFG_PLAYER_REWARD",
            ServerOpcodeMessage::SMSG_LFG_TELEPORT_DENIED(_) => "SMSG_LFG_TELEPORT_DENIED",
            ServerOpcodeMessage::SMSG_REMOVED_SPELL(_) => "SMSG_REMOVED_SPELL",
            ServerOpcodeMessage::SMSG_GMTICKET_CREATE(_) => "SMSG_GMTICKET_CREATE",
            ServerOpcodeMessage::SMSG_GMTICKET_UPDATETEXT(_) => "SMSG_GMTICKET_UPDATETEXT",
            ServerOpcodeMessage::SMSG_ACCOUNT_DATA_TIMES(_) => "SMSG_ACCOUNT_DATA_TIMES",
            ServerOpcodeMessage::SMSG_UPDATE_ACCOUNT_DATA(_) => "SMSG_UPDATE_ACCOUNT_DATA",
            ServerOpcodeMessage::SMSG_GMTICKET_GETTICKET(_) => "SMSG_GMTICKET_GETTICKET",
            ServerOpcodeMessage::SMSG_UPDATE_INSTANCE_ENCOUNTER_UNIT(_) => "SMSG_UPDATE_INSTANCE_ENCOUNTER_UNIT",
            ServerOpcodeMessage::SMSG_GAMEOBJECT_DESPAWN_ANIM(_) => "SMSG_GAMEOBJECT_DESPAWN_ANIM",
            ServerOpcodeMessage::MSG_CORPSE_QUERY(_) => "MSG_CORPSE_QUERY_Server",
            ServerOpcodeMessage::SMSG_GMTICKET_DELETETICKET(_) => "SMSG_GMTICKET_DELETETICKET",
            ServerOpcodeMessage::SMSG_CHAT_WRONG_FACTION => "SMSG_CHAT_WRONG_FACTION",
            ServerOpcodeMessage::SMSG_GMTICKET_SYSTEMSTATUS(_) => "SMSG_GMTICKET_SYSTEMSTATUS",
            ServerOpcodeMessage::SMSG_QUEST_FORCE_REMOVE(_) => "SMSG_QUEST_FORCE_REMOVE",
            ServerOpcodeMessage::SMSG_SPIRIT_HEALER_CONFIRM(_) => "SMSG_SPIRIT_HEALER_CONFIRM",
            ServerOpcodeMessage::SMSG_GOSSIP_POI(_) => "SMSG_GOSSIP_POI",
            ServerOpcodeMessage::SMSG_LOGIN_VERIFY_WORLD(_) => "SMSG_LOGIN_VERIFY_WORLD",
            ServerOpcodeMessage::SMSG_SEND_MAIL_RESULT(_) => "SMSG_SEND_MAIL_RESULT",
            ServerOpcodeMessage::SMSG_MAIL_LIST_RESULT(_) => "SMSG_MAIL_LIST_RESULT",
            ServerOpcodeMessage::SMSG_BATTLEFIELD_LIST(_) => "SMSG_BATTLEFIELD_LIST",
            ServerOpcodeMessage::SMSG_ITEM_TEXT_QUERY_RESPONSE(_) => "SMSG_ITEM_TEXT_QUERY_RESPONSE",
            ServerOpcodeMessage::SMSG_SPELLLOGMISS(_) => "SMSG_SPELLLOGMISS",
            ServerOpcodeMessage::SMSG_SPELLLOGEXECUTE(_) => "SMSG_SPELLLOGEXECUTE",
            ServerOpcodeMessage::SMSG_PERIODICAURALOG(_) => "SMSG_PERIODICAURALOG",
            ServerOpcodeMessage::SMSG_SPELLDAMAGESHIELD(_) => "SMSG_SPELLDAMAGESHIELD",
            ServerOpcodeMessage::SMSG_SPELLNONMELEEDAMAGELOG(_) => "SMSG_SPELLNONMELEEDAMAGELOG",
            ServerOpcodeMessage::SMSG_RESURRECT_FAILED(_) => "SMSG_RESURRECT_FAILED",
            ServerOpcodeMessage::SMSG_ZONE_UNDER_ATTACK(_) => "SMSG_ZONE_UNDER_ATTACK",
            ServerOpcodeMessage::MSG_AUCTION_HELLO(_) => "MSG_AUCTION_HELLO_Server",
            ServerOpcodeMessage::SMSG_AUCTION_COMMAND_RESULT(_) => "SMSG_AUCTION_COMMAND_RESULT",
            ServerOpcodeMessage::SMSG_AUCTION_LIST_RESULT(_) => "SMSG_AUCTION_LIST_RESULT",
            ServerOpcodeMessage::SMSG_AUCTION_OWNER_LIST_RESULT(_) => "SMSG_AUCTION_OWNER_LIST_RESULT",
            ServerOpcodeMessage::SMSG_AUCTION_BIDDER_NOTIFICATION(_) => "SMSG_AUCTION_BIDDER_NOTIFICATION",
            ServerOpcodeMessage::SMSG_AUCTION_OWNER_NOTIFICATION(_) => "SMSG_AUCTION_OWNER_NOTIFICATION",
            ServerOpcodeMessage::SMSG_PROCRESIST(_) => "SMSG_PROCRESIST",
            ServerOpcodeMessage::SMSG_DISPEL_FAILED(_) => "SMSG_DISPEL_FAILED",
            ServerOpcodeMessage::SMSG_SPELLORDAMAGE_IMMUNE(_) => "SMSG_SPELLORDAMAGE_IMMUNE",
            ServerOpcodeMessage::SMSG_AUCTION_BIDDER_LIST_RESULT(_) => "SMSG_AUCTION_BIDDER_LIST_RESULT",
            ServerOpcodeMessage::SMSG_SET_FLAT_SPELL_MODIFIER(_) => "SMSG_SET_FLAT_SPELL_MODIFIER",
            ServerOpcodeMessage::SMSG_SET_PCT_SPELL_MODIFIER(_) => "SMSG_SET_PCT_SPELL_MODIFIER",
            ServerOpcodeMessage::SMSG_CORPSE_RECLAIM_DELAY(_) => "SMSG_CORPSE_RECLAIM_DELAY",
            ServerOpcodeMessage::MSG_LIST_STABLED_PETS(_) => "MSG_LIST_STABLED_PETS_Server",
            ServerOpcodeMessage::SMSG_STABLE_RESULT(_) => "SMSG_STABLE_RESULT",
            ServerOpcodeMessage::SMSG_PLAY_MUSIC(_) => "SMSG_PLAY_MUSIC",
            ServerOpcodeMessage::SMSG_PLAY_OBJECT_SOUND(_) => "SMSG_PLAY_OBJECT_SOUND",
            ServerOpcodeMessage::SMSG_SPELLDISPELLOG(_) => "SMSG_SPELLDISPELLOG",
            ServerOpcodeMessage::MSG_QUERY_NEXT_MAIL_TIME(_) => "MSG_QUERY_NEXT_MAIL_TIME_Server",
            ServerOpcodeMessage::SMSG_RECEIVED_MAIL(_) => "SMSG_RECEIVED_MAIL",
            ServerOpcodeMessage::SMSG_RAID_GROUP_ONLY(_) => "SMSG_RAID_GROUP_ONLY",
            ServerOpcodeMessage::SMSG_PVP_CREDIT(_) => "SMSG_PVP_CREDIT",
            ServerOpcodeMessage::SMSG_AUCTION_REMOVED_NOTIFICATION(_) => "SMSG_AUCTION_REMOVED_NOTIFICATION",
            ServerOpcodeMessage::SMSG_SERVER_MESSAGE(_) => "SMSG_SERVER_MESSAGE",
            ServerOpcodeMessage::SMSG_LFG_OFFER_CONTINUE(_) => "SMSG_LFG_OFFER_CONTINUE",
            ServerOpcodeMessage::SMSG_SHOW_MAILBOX(_) => "SMSG_SHOW_MAILBOX",
            ServerOpcodeMessage::SMSG_CANCEL_AUTO_REPEAT(_) => "SMSG_CANCEL_AUTO_REPEAT",
            ServerOpcodeMessage::SMSG_STANDSTATE_UPDATE(_) => "SMSG_STANDSTATE_UPDATE",
            ServerOpcodeMessage::SMSG_LOOT_ALL_PASSED(_) => "SMSG_LOOT_ALL_PASSED",
            ServerOpcodeMessage::SMSG_LOOT_ROLL_WON(_) => "SMSG_LOOT_ROLL_WON",
            ServerOpcodeMessage::SMSG_LOOT_START_ROLL(_) => "SMSG_LOOT_START_ROLL",
            ServerOpcodeMessage::SMSG_LOOT_ROLL(_) => "SMSG_LOOT_ROLL",
            ServerOpcodeMessage::SMSG_LOOT_MASTER_LIST(_) => "SMSG_LOOT_MASTER_LIST",
            ServerOpcodeMessage::SMSG_SET_FORCED_REACTIONS(_) => "SMSG_SET_FORCED_REACTIONS",
            ServerOpcodeMessage::SMSG_SPELL_FAILED_OTHER(_) => "SMSG_SPELL_FAILED_OTHER",
            ServerOpcodeMessage::SMSG_CHAT_PLAYER_NOT_FOUND(_) => "SMSG_CHAT_PLAYER_NOT_FOUND",
            ServerOpcodeMessage::MSG_TALENT_WIPE_CONFIRM(_) => "MSG_TALENT_WIPE_CONFIRM_Server",
            ServerOpcodeMessage::SMSG_SUMMON_REQUEST(_) => "SMSG_SUMMON_REQUEST",
            ServerOpcodeMessage::SMSG_MONSTER_MOVE_TRANSPORT(_) => "SMSG_MONSTER_MOVE_TRANSPORT",
            ServerOpcodeMessage::SMSG_PET_BROKEN => "SMSG_PET_BROKEN",
            ServerOpcodeMessage::MSG_MOVE_FEATHER_FALL(_) => "MSG_MOVE_FEATHER_FALL_Server",
            ServerOpcodeMessage::SMSG_FEIGN_DEATH_RESISTED => "SMSG_FEIGN_DEATH_RESISTED",
            ServerOpcodeMessage::SMSG_DUEL_COUNTDOWN(_) => "SMSG_DUEL_COUNTDOWN",
            ServerOpcodeMessage::SMSG_AREA_TRIGGER_MESSAGE(_) => "SMSG_AREA_TRIGGER_MESSAGE",
            ServerOpcodeMessage::SMSG_LFG_ROLE_CHOSEN(_) => "SMSG_LFG_ROLE_CHOSEN",
            ServerOpcodeMessage::SMSG_PLAYER_SKINNED(_) => "SMSG_PLAYER_SKINNED",
            ServerOpcodeMessage::SMSG_DURABILITY_DAMAGE_DEATH => "SMSG_DURABILITY_DAMAGE_DEATH",
            ServerOpcodeMessage::SMSG_INIT_WORLD_STATES(_) => "SMSG_INIT_WORLD_STATES",
            ServerOpcodeMessage::SMSG_UPDATE_WORLD_STATE(_) => "SMSG_UPDATE_WORLD_STATE",
            ServerOpcodeMessage::SMSG_ITEM_NAME_QUERY_RESPONSE(_) => "SMSG_ITEM_NAME_QUERY_RESPONSE",
            ServerOpcodeMessage::SMSG_PET_ACTION_FEEDBACK(_) => "SMSG_PET_ACTION_FEEDBACK",
            ServerOpcodeMessage::SMSG_CHAR_RENAME(_) => "SMSG_CHAR_RENAME",
            ServerOpcodeMessage::SMSG_INSTANCE_SAVE_CREATED(_) => "SMSG_INSTANCE_SAVE_CREATED",
            ServerOpcodeMessage::SMSG_RAID_INSTANCE_INFO(_) => "SMSG_RAID_INSTANCE_INFO",
            ServerOpcodeMessage::SMSG_PLAY_SOUND(_) => "SMSG_PLAY_SOUND",
            ServerOpcodeMessage::SMSG_BATTLEFIELD_STATUS(_) => "SMSG_BATTLEFIELD_STATUS",
            ServerOpcodeMessage::MSG_INSPECT_HONOR_STATS(_) => "MSG_INSPECT_HONOR_STATS_Server",
            ServerOpcodeMessage::SMSG_FORCE_WALK_SPEED_CHANGE(_) => "SMSG_FORCE_WALK_SPEED_CHANGE",
            ServerOpcodeMessage::SMSG_FORCE_SWIM_BACK_SPEED_CHANGE(_) => "SMSG_FORCE_SWIM_BACK_SPEED_CHANGE",
            ServerOpcodeMessage::SMSG_FORCE_TURN_RATE_CHANGE(_) => "SMSG_FORCE_TURN_RATE_CHANGE",
            ServerOpcodeMessage::SMSG_AREA_SPIRIT_HEALER_TIME(_) => "SMSG_AREA_SPIRIT_HEALER_TIME",
            ServerOpcodeMessage::SMSG_WARDEN_DATA(_) => "SMSG_WARDEN_DATA",
            ServerOpcodeMessage::SMSG_GROUP_JOINED_BATTLEGROUND(_) => "SMSG_GROUP_JOINED_BATTLEGROUND",
            ServerOpcodeMessage::MSG_BATTLEGROUND_PLAYER_POSITIONS(_) => "MSG_BATTLEGROUND_PLAYER_POSITIONS_Server",
            ServerOpcodeMessage::SMSG_BINDER_CONFIRM(_) => "SMSG_BINDER_CONFIRM",
            ServerOpcodeMessage::SMSG_BATTLEGROUND_PLAYER_JOINED(_) => "SMSG_BATTLEGROUND_PLAYER_JOINED",
            ServerOpcodeMessage::SMSG_BATTLEGROUND_PLAYER_LEFT(_) => "SMSG_BATTLEGROUND_PLAYER_LEFT",
            ServerOpcodeMessage::SMSG_ADDON_INFO(_) => "SMSG_ADDON_INFO",
            ServerOpcodeMessage::SMSG_PET_UNLEARN_CONFIRM(_) => "SMSG_PET_UNLEARN_CONFIRM",
            ServerOpcodeMessage::SMSG_PARTY_MEMBER_STATS_FULL(_) => "SMSG_PARTY_MEMBER_STATS_FULL",
            ServerOpcodeMessage::SMSG_WEATHER(_) => "SMSG_WEATHER",
            ServerOpcodeMessage::SMSG_RAID_INSTANCE_MESSAGE(_) => "SMSG_RAID_INSTANCE_MESSAGE",
            ServerOpcodeMessage::SMSG_COMPRESSED_MOVES(_) => "SMSG_COMPRESSED_MOVES",
            ServerOpcodeMessage::SMSG_CHAT_RESTRICTED(_) => "SMSG_CHAT_RESTRICTED",
            ServerOpcodeMessage::SMSG_SPLINE_SET_RUN_SPEED(_) => "SMSG_SPLINE_SET_RUN_SPEED",
            ServerOpcodeMessage::SMSG_SPLINE_SET_RUN_BACK_SPEED(_) => "SMSG_SPLINE_SET_RUN_BACK_SPEED",
            ServerOpcodeMessage::SMSG_SPLINE_SET_SWIM_SPEED(_) => "SMSG_SPLINE_SET_SWIM_SPEED",
            ServerOpcodeMessage::SMSG_SPLINE_SET_WALK_SPEED(_) => "SMSG_SPLINE_SET_WALK_SPEED",
            ServerOpcodeMessage::SMSG_SPLINE_SET_SWIM_BACK_SPEED(_) => "SMSG_SPLINE_SET_SWIM_BACK_SPEED",
            ServerOpcodeMessage::SMSG_SPLINE_SET_TURN_RATE(_) => "SMSG_SPLINE_SET_TURN_RATE",
            ServerOpcodeMessage::SMSG_SPLINE_MOVE_UNROOT(_) => "SMSG_SPLINE_MOVE_UNROOT",
            ServerOpcodeMessage::SMSG_SPLINE_MOVE_FEATHER_FALL(_) => "SMSG_SPLINE_MOVE_FEATHER_FALL",
            ServerOpcodeMessage::SMSG_SPLINE_MOVE_NORMAL_FALL(_) => "SMSG_SPLINE_MOVE_NORMAL_FALL",
            ServerOpcodeMessage::SMSG_SPLINE_MOVE_SET_HOVER(_) => "SMSG_SPLINE_MOVE_SET_HOVER",
            ServerOpcodeMessage::SMSG_SPLINE_MOVE_UNSET_HOVER(_) => "SMSG_SPLINE_MOVE_UNSET_HOVER",
            ServerOpcodeMessage::SMSG_SPLINE_MOVE_WATER_WALK(_) => "SMSG_SPLINE_MOVE_WATER_WALK",
            ServerOpcodeMessage::SMSG_SPLINE_MOVE_LAND_WALK(_) => "SMSG_SPLINE_MOVE_LAND_WALK",
            ServerOpcodeMessage::SMSG_SPLINE_MOVE_START_SWIM(_) => "SMSG_SPLINE_MOVE_START_SWIM",
            ServerOpcodeMessage::SMSG_SPLINE_MOVE_STOP_SWIM(_) => "SMSG_SPLINE_MOVE_STOP_SWIM",
            ServerOpcodeMessage::SMSG_SPLINE_MOVE_SET_RUN_MODE(_) => "SMSG_SPLINE_MOVE_SET_RUN_MODE",
            ServerOpcodeMessage::SMSG_SPLINE_MOVE_SET_WALK_MODE(_) => "SMSG_SPLINE_MOVE_SET_WALK_MODE",
            ServerOpcodeMessage::MSG_MOVE_TIME_SKIPPED(_) => "MSG_MOVE_TIME_SKIPPED_Server",
            ServerOpcodeMessage::SMSG_SPLINE_MOVE_ROOT(_) => "SMSG_SPLINE_MOVE_ROOT",
            ServerOpcodeMessage::SMSG_INVALIDATE_PLAYER(_) => "SMSG_INVALIDATE_PLAYER",
            ServerOpcodeMessage::SMSG_INSTANCE_RESET(_) => "SMSG_INSTANCE_RESET",
            ServerOpcodeMessage::SMSG_INSTANCE_RESET_FAILED(_) => "SMSG_INSTANCE_RESET_FAILED",
            ServerOpcodeMessage::SMSG_UPDATE_LAST_INSTANCE(_) => "SMSG_UPDATE_LAST_INSTANCE",
            ServerOpcodeMessage::MSG_RAID_TARGET_UPDATE(_) => "MSG_RAID_TARGET_UPDATE_Server",
            ServerOpcodeMessage::MSG_RAID_READY_CHECK(_) => "MSG_RAID_READY_CHECK_Server",
            ServerOpcodeMessage::SMSG_PET_ACTION_SOUND(_) => "SMSG_PET_ACTION_SOUND",
            ServerOpcodeMessage::SMSG_PET_DISMISS_SOUND(_) => "SMSG_PET_DISMISS_SOUND",
            ServerOpcodeMessage::SMSG_GM_TICKET_STATUS_UPDATE(_) => "SMSG_GM_TICKET_STATUS_UPDATE",
            ServerOpcodeMessage::MSG_SET_DUNGEON_DIFFICULTY(_) => "MSG_SET_DUNGEON_DIFFICULTY_Server",
            ServerOpcodeMessage::SMSG_UPDATE_INSTANCE_OWNERSHIP(_) => "SMSG_UPDATE_INSTANCE_OWNERSHIP",
            ServerOpcodeMessage::SMSG_CHAT_PLAYER_AMBIGUOUS(_) => "SMSG_CHAT_PLAYER_AMBIGUOUS",
            ServerOpcodeMessage::SMSG_SPELLINSTAKILLLOG(_) => "SMSG_SPELLINSTAKILLLOG",
            ServerOpcodeMessage::SMSG_SPELL_UPDATE_CHAIN_TARGETS(_) => "SMSG_SPELL_UPDATE_CHAIN_TARGETS",
            ServerOpcodeMessage::SMSG_SPELLSTEALLOG(_) => "SMSG_SPELLSTEALLOG",
            ServerOpcodeMessage::SMSG_DEFENSE_MESSAGE(_) => "SMSG_DEFENSE_MESSAGE",
            ServerOpcodeMessage::SMSG_INSTANCE_DIFFICULTY(_) => "SMSG_INSTANCE_DIFFICULTY",
            ServerOpcodeMessage::SMSG_MOTD(_) => "SMSG_MOTD",
            ServerOpcodeMessage::SMSG_MOVE_SET_CAN_FLY(_) => "SMSG_MOVE_SET_CAN_FLY",
            ServerOpcodeMessage::SMSG_MOVE_UNSET_CAN_FLY(_) => "SMSG_MOVE_UNSET_CAN_FLY",
            ServerOpcodeMessage::SMSG_ARENA_TEAM_COMMAND_RESULT(_) => "SMSG_ARENA_TEAM_COMMAND_RESULT",
            ServerOpcodeMessage::SMSG_ARENA_TEAM_QUERY_RESPONSE(_) => "SMSG_ARENA_TEAM_QUERY_RESPONSE",
            ServerOpcodeMessage::SMSG_ARENA_TEAM_ROSTER(_) => "SMSG_ARENA_TEAM_ROSTER",
            ServerOpcodeMessage::SMSG_ARENA_TEAM_INVITE(_) => "SMSG_ARENA_TEAM_INVITE",
            ServerOpcodeMessage::SMSG_ARENA_TEAM_EVENT(_) => "SMSG_ARENA_TEAM_EVENT",
            ServerOpcodeMessage::SMSG_ARENA_TEAM_STATS(_) => "SMSG_ARENA_TEAM_STATS",
            ServerOpcodeMessage::SMSG_UPDATE_LFG_LIST(_) => "SMSG_UPDATE_LFG_LIST",
            ServerOpcodeMessage::SMSG_LFG_PROPOSAL_UPDATE(_) => "SMSG_LFG_PROPOSAL_UPDATE",
            ServerOpcodeMessage::SMSG_LFG_ROLE_CHECK_UPDATE(_) => "SMSG_LFG_ROLE_CHECK_UPDATE",
            ServerOpcodeMessage::SMSG_LFG_JOIN_RESULT(_) => "SMSG_LFG_JOIN_RESULT",
            ServerOpcodeMessage::SMSG_LFG_QUEUE_STATUS(_) => "SMSG_LFG_QUEUE_STATUS",
            ServerOpcodeMessage::SMSG_LFG_UPDATE_PLAYER(_) => "SMSG_LFG_UPDATE_PLAYER",
            ServerOpcodeMessage::SMSG_LFG_UPDATE_PARTY(_) => "SMSG_LFG_UPDATE_PARTY",
            ServerOpcodeMessage::SMSG_LFG_UPDATE_SEARCH(_) => "SMSG_LFG_UPDATE_SEARCH",
            ServerOpcodeMessage::SMSG_LFG_BOOT_PROPOSAL_UPDATE(_) => "SMSG_LFG_BOOT_PROPOSAL_UPDATE",
            ServerOpcodeMessage::SMSG_LFG_PLAYER_INFO(_) => "SMSG_LFG_PLAYER_INFO",
            ServerOpcodeMessage::SMSG_LFG_PARTY_INFO(_) => "SMSG_LFG_PARTY_INFO",
            ServerOpcodeMessage::SMSG_TITLE_EARNED(_) => "SMSG_TITLE_EARNED",
            ServerOpcodeMessage::SMSG_ARENA_ERROR(_) => "SMSG_ARENA_ERROR",
            ServerOpcodeMessage::MSG_INSPECT_ARENA_TEAMS(_) => "MSG_INSPECT_ARENA_TEAMS_Server",
            ServerOpcodeMessage::SMSG_DEATH_RELEASE_LOC(_) => "SMSG_DEATH_RELEASE_LOC",
            ServerOpcodeMessage::SMSG_FORCED_DEATH_UPDATE => "SMSG_FORCED_DEATH_UPDATE",
            ServerOpcodeMessage::MSG_MOVE_SET_FLIGHT_SPEED(_) => "MSG_MOVE_SET_FLIGHT_SPEED_Server",
            ServerOpcodeMessage::SMSG_FORCE_FLIGHT_SPEED_CHANGE(_) => "SMSG_FORCE_FLIGHT_SPEED_CHANGE",
            ServerOpcodeMessage::SMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE(_) => "SMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE",
            ServerOpcodeMessage::SMSG_SPLINE_SET_FLIGHT_SPEED(_) => "SMSG_SPLINE_SET_FLIGHT_SPEED",
            ServerOpcodeMessage::SMSG_SPLINE_SET_FLIGHT_BACK_SPEED(_) => "SMSG_SPLINE_SET_FLIGHT_BACK_SPEED",
            ServerOpcodeMessage::SMSG_FLIGHT_SPLINE_SYNC(_) => "SMSG_FLIGHT_SPLINE_SYNC",
            ServerOpcodeMessage::SMSG_REALM_SPLIT(_) => "SMSG_REALM_SPLIT",
            ServerOpcodeMessage::SMSG_TIME_SYNC_REQ(_) => "SMSG_TIME_SYNC_REQ",
            ServerOpcodeMessage::SMSG_RESET_FAILED_NOTIFY(_) => "SMSG_RESET_FAILED_NOTIFY",
            ServerOpcodeMessage::SMSG_LFG_DISABLED => "SMSG_LFG_DISABLED",
            ServerOpcodeMessage::SMSG_UPDATE_COMBO_POINTS(_) => "SMSG_UPDATE_COMBO_POINTS",
            ServerOpcodeMessage::SMSG_DISMOUNT(_) => "SMSG_DISMOUNT",
            ServerOpcodeMessage::MSG_MOVE_UPDATE_CAN_FLY(_) => "MSG_MOVE_UPDATE_CAN_FLY_Server",
            ServerOpcodeMessage::MSG_RAID_READY_CHECK_CONFIRM(_) => "MSG_RAID_READY_CHECK_CONFIRM_Server",
            ServerOpcodeMessage::SMSG_GM_MESSAGECHAT(_) => "SMSG_GM_MESSAGECHAT",
            ServerOpcodeMessage::SMSG_CLEAR_TARGET(_) => "SMSG_CLEAR_TARGET",
            ServerOpcodeMessage::SMSG_CROSSED_INEBRIATION_THRESHOLD(_) => "SMSG_CROSSED_INEBRIATION_THRESHOLD",
            ServerOpcodeMessage::SMSG_KICK_REASON(_) => "SMSG_KICK_REASON",
            ServerOpcodeMessage::SMSG_COMPLAIN_RESULT(_) => "SMSG_COMPLAIN_RESULT",
            ServerOpcodeMessage::SMSG_FEATURE_SYSTEM_STATUS(_) => "SMSG_FEATURE_SYSTEM_STATUS",
            ServerOpcodeMessage::SMSG_CHANNEL_MEMBER_COUNT(_) => "SMSG_CHANNEL_MEMBER_COUNT",
            ServerOpcodeMessage::SMSG_GUILD_BANK_LIST(_) => "SMSG_GUILD_BANK_LIST",
            ServerOpcodeMessage::MSG_GUILD_BANK_LOG_QUERY(_) => "MSG_GUILD_BANK_LOG_QUERY_Server",
            ServerOpcodeMessage::SMSG_USERLIST_ADD(_) => "SMSG_USERLIST_ADD",
            ServerOpcodeMessage::SMSG_USERLIST_REMOVE(_) => "SMSG_USERLIST_REMOVE",
            ServerOpcodeMessage::SMSG_USERLIST_UPDATE(_) => "SMSG_USERLIST_UPDATE",
            ServerOpcodeMessage::SMSG_INSPECT_TALENT(_) => "SMSG_INSPECT_TALENT",
            ServerOpcodeMessage::SMSG_LOOT_LIST(_) => "SMSG_LOOT_LIST",
            ServerOpcodeMessage::MSG_GUILD_PERMISSIONS(_) => "MSG_GUILD_PERMISSIONS_Server",
            ServerOpcodeMessage::MSG_GUILD_BANK_MONEY_WITHDRAWN(_) => "MSG_GUILD_BANK_MONEY_WITHDRAWN_Server",
            ServerOpcodeMessage::MSG_GUILD_EVENT_LOG_QUERY(_) => "MSG_GUILD_EVENT_LOG_QUERY_Server",
            ServerOpcodeMessage::SMSG_MIRRORIMAGE_DATA(_) => "SMSG_MIRRORIMAGE_DATA",
            ServerOpcodeMessage::MSG_QUERY_GUILD_BANK_TEXT(_) => "MSG_QUERY_GUILD_BANK_TEXT_Server",
            ServerOpcodeMessage::SMSG_OVERRIDE_LIGHT(_) => "SMSG_OVERRIDE_LIGHT",
            ServerOpcodeMessage::SMSG_TOTEM_CREATED(_) => "SMSG_TOTEM_CREATED",
            ServerOpcodeMessage::SMSG_QUESTGIVER_STATUS_MULTIPLE(_) => "SMSG_QUESTGIVER_STATUS_MULTIPLE",
            ServerOpcodeMessage::SMSG_SET_PLAYER_DECLINED_NAMES_RESULT(_) => "SMSG_SET_PLAYER_DECLINED_NAMES_RESULT",
            ServerOpcodeMessage::SMSG_SEND_UNLEARN_SPELLS(_) => "SMSG_SEND_UNLEARN_SPELLS",
            ServerOpcodeMessage::SMSG_PROPOSE_LEVEL_GRANT(_) => "SMSG_PROPOSE_LEVEL_GRANT",
            ServerOpcodeMessage::SMSG_REFER_A_FRIEND_FAILURE(_) => "SMSG_REFER_A_FRIEND_FAILURE",
            ServerOpcodeMessage::SMSG_SPLINE_MOVE_SET_FLYING(_) => "SMSG_SPLINE_MOVE_SET_FLYING",
            ServerOpcodeMessage::SMSG_SPLINE_MOVE_UNSET_FLYING(_) => "SMSG_SPLINE_MOVE_UNSET_FLYING",
            ServerOpcodeMessage::SMSG_ENABLE_BARBER_SHOP => "SMSG_ENABLE_BARBER_SHOP",
            ServerOpcodeMessage::SMSG_BARBER_SHOP_RESULT(_) => "SMSG_BARBER_SHOP_RESULT",
            ServerOpcodeMessage::SMSG_CALENDAR_SEND_CALENDAR(_) => "SMSG_CALENDAR_SEND_CALENDAR",
            ServerOpcodeMessage::SMSG_CALENDAR_SEND_EVENT(_) => "SMSG_CALENDAR_SEND_EVENT",
            ServerOpcodeMessage::SMSG_CALENDAR_FILTER_GUILD(_) => "SMSG_CALENDAR_FILTER_GUILD",
            ServerOpcodeMessage::SMSG_CALENDAR_ARENA_TEAM(_) => "SMSG_CALENDAR_ARENA_TEAM",
            ServerOpcodeMessage::SMSG_CALENDAR_EVENT_INVITE(_) => "SMSG_CALENDAR_EVENT_INVITE",
            ServerOpcodeMessage::SMSG_CALENDAR_EVENT_INVITE_REMOVED(_) => "SMSG_CALENDAR_EVENT_INVITE_REMOVED",
            ServerOpcodeMessage::SMSG_CALENDAR_EVENT_STATUS(_) => "SMSG_CALENDAR_EVENT_STATUS",
            ServerOpcodeMessage::SMSG_CALENDAR_COMMAND_RESULT(_) => "SMSG_CALENDAR_COMMAND_RESULT",
            ServerOpcodeMessage::SMSG_CALENDAR_RAID_LOCKOUT_ADDED(_) => "SMSG_CALENDAR_RAID_LOCKOUT_ADDED",
            ServerOpcodeMessage::SMSG_CALENDAR_RAID_LOCKOUT_REMOVED(_) => "SMSG_CALENDAR_RAID_LOCKOUT_REMOVED",
            ServerOpcodeMessage::SMSG_CALENDAR_EVENT_INVITE_ALERT(_) => "SMSG_CALENDAR_EVENT_INVITE_ALERT",
            ServerOpcodeMessage::SMSG_CALENDAR_EVENT_INVITE_REMOVED_ALERT(_) => "SMSG_CALENDAR_EVENT_INVITE_REMOVED_ALERT",
            ServerOpcodeMessage::SMSG_CALENDAR_EVENT_REMOVED_ALERT(_) => "SMSG_CALENDAR_EVENT_REMOVED_ALERT",
            ServerOpcodeMessage::SMSG_CALENDAR_EVENT_UPDATED_ALERT(_) => "SMSG_CALENDAR_EVENT_UPDATED_ALERT",
            ServerOpcodeMessage::SMSG_CALENDAR_EVENT_MODERATOR_STATUS_ALERT(_) => "SMSG_CALENDAR_EVENT_MODERATOR_STATUS_ALERT",
            ServerOpcodeMessage::SMSG_CALENDAR_SEND_NUM_PENDING(_) => "SMSG_CALENDAR_SEND_NUM_PENDING",
            ServerOpcodeMessage::MSG_MOVE_SET_PITCH_RATE(_) => "MSG_MOVE_SET_PITCH_RATE_Server",
            ServerOpcodeMessage::SMSG_FORCE_PITCH_RATE_CHANGE(_) => "SMSG_FORCE_PITCH_RATE_CHANGE",
            ServerOpcodeMessage::SMSG_CALENDAR_EVENT_INVITE_NOTES(_) => "SMSG_CALENDAR_EVENT_INVITE_NOTES",
            ServerOpcodeMessage::SMSG_CALENDAR_EVENT_INVITE_NOTES_ALERT(_) => "SMSG_CALENDAR_EVENT_INVITE_NOTES_ALERT",
            ServerOpcodeMessage::SMSG_UPDATE_ACCOUNT_DATA_COMPLETE(_) => "SMSG_UPDATE_ACCOUNT_DATA_COMPLETE",
            ServerOpcodeMessage::SMSG_TRIGGER_MOVIE(_) => "SMSG_TRIGGER_MOVIE",
            ServerOpcodeMessage::SMSG_ACHIEVEMENT_EARNED(_) => "SMSG_ACHIEVEMENT_EARNED",
            ServerOpcodeMessage::SMSG_CRITERIA_UPDATE(_) => "SMSG_CRITERIA_UPDATE",
            ServerOpcodeMessage::SMSG_RESPOND_INSPECT_ACHIEVEMENTS(_) => "SMSG_RESPOND_INSPECT_ACHIEVEMENTS",
            ServerOpcodeMessage::SMSG_QUESTUPDATE_ADD_PVP_KILL(_) => "SMSG_QUESTUPDATE_ADD_PVP_KILL",
            ServerOpcodeMessage::SMSG_CALENDAR_RAID_LOCKOUT_UPDATED(_) => "SMSG_CALENDAR_RAID_LOCKOUT_UPDATED",
            ServerOpcodeMessage::SMSG_CHAR_CUSTOMIZE(_) => "SMSG_CHAR_CUSTOMIZE",
            ServerOpcodeMessage::SMSG_SET_PHASE_SHIFT(_) => "SMSG_SET_PHASE_SHIFT",
            ServerOpcodeMessage::SMSG_ALL_ACHIEVEMENT_DATA(_) => "SMSG_ALL_ACHIEVEMENT_DATA",
            ServerOpcodeMessage::SMSG_POWER_UPDATE(_) => "SMSG_POWER_UPDATE",
            ServerOpcodeMessage::SMSG_HIGHEST_THREAT_UPDATE(_) => "SMSG_HIGHEST_THREAT_UPDATE",
            ServerOpcodeMessage::SMSG_THREAT_UPDATE(_) => "SMSG_THREAT_UPDATE",
            ServerOpcodeMessage::SMSG_THREAT_REMOVE(_) => "SMSG_THREAT_REMOVE",
            ServerOpcodeMessage::SMSG_THREAT_CLEAR(_) => "SMSG_THREAT_CLEAR",
            ServerOpcodeMessage::SMSG_CONVERT_RUNE(_) => "SMSG_CONVERT_RUNE",
            ServerOpcodeMessage::SMSG_RESYNC_RUNES(_) => "SMSG_RESYNC_RUNES",
            ServerOpcodeMessage::SMSG_ADD_RUNE_POWER(_) => "SMSG_ADD_RUNE_POWER",
            ServerOpcodeMessage::SMSG_AUCTION_LIST_PENDING_SALES(_) => "SMSG_AUCTION_LIST_PENDING_SALES",
            ServerOpcodeMessage::SMSG_MODIFY_COOLDOWN(_) => "SMSG_MODIFY_COOLDOWN",
            ServerOpcodeMessage::SMSG_PET_UPDATE_COMBO_POINTS(_) => "SMSG_PET_UPDATE_COMBO_POINTS",
            ServerOpcodeMessage::SMSG_PRE_RESURRECT(_) => "SMSG_PRE_RESURRECT",
            ServerOpcodeMessage::SMSG_AURA_UPDATE_ALL(_) => "SMSG_AURA_UPDATE_ALL",
            ServerOpcodeMessage::SMSG_AURA_UPDATE(_) => "SMSG_AURA_UPDATE",
            ServerOpcodeMessage::SMSG_SERVER_FIRST_ACHIEVEMENT(_) => "SMSG_SERVER_FIRST_ACHIEVEMENT",
            ServerOpcodeMessage::SMSG_PET_LEARNED_SPELL(_) => "SMSG_PET_LEARNED_SPELL",
            ServerOpcodeMessage::SMSG_PET_UNLEARNED_SPELL(_) => "SMSG_PET_UNLEARNED_SPELL",
            ServerOpcodeMessage::SMSG_ON_CANCEL_EXPECTED_RIDE_VEHICLE_AURA => "SMSG_ON_CANCEL_EXPECTED_RIDE_VEHICLE_AURA",
            ServerOpcodeMessage::SMSG_CRITERIA_DELETED(_) => "SMSG_CRITERIA_DELETED",
            ServerOpcodeMessage::SMSG_ACHIEVEMENT_DELETED(_) => "SMSG_ACHIEVEMENT_DELETED",
            ServerOpcodeMessage::SMSG_BATTLEGROUND_INFO_THROTTLED => "SMSG_BATTLEGROUND_INFO_THROTTLED",
            ServerOpcodeMessage::SMSG_PLAYER_VEHICLE_DATA(_) => "SMSG_PLAYER_VEHICLE_DATA",
            ServerOpcodeMessage::SMSG_PET_GUIDS(_) => "SMSG_PET_GUIDS",
            ServerOpcodeMessage::SMSG_CLIENTCACHE_VERSION(_) => "SMSG_CLIENTCACHE_VERSION",
            ServerOpcodeMessage::SMSG_ITEM_REFUND_INFO_RESPONSE(_) => "SMSG_ITEM_REFUND_INFO_RESPONSE",
            ServerOpcodeMessage::SMSG_ITEM_REFUND_RESULT(_) => "SMSG_ITEM_REFUND_RESULT",
            ServerOpcodeMessage::SMSG_CORPSE_MAP_POSITION_QUERY_RESPONSE(_) => "SMSG_CORPSE_MAP_POSITION_QUERY_RESPONSE",
            ServerOpcodeMessage::SMSG_CALENDAR_CLEAR_PENDING_ACTION => "SMSG_CALENDAR_CLEAR_PENDING_ACTION",
            ServerOpcodeMessage::SMSG_EQUIPMENT_SET_LIST(_) => "SMSG_EQUIPMENT_SET_LIST",
            ServerOpcodeMessage::SMSG_SET_PROJECTILE_POSITION(_) => "SMSG_SET_PROJECTILE_POSITION",
            ServerOpcodeMessage::SMSG_TALENTS_INFO(_) => "SMSG_TALENTS_INFO",
            ServerOpcodeMessage::SMSG_ARENA_UNIT_DESTROYED(_) => "SMSG_ARENA_UNIT_DESTROYED",
            ServerOpcodeMessage::SMSG_ARENA_TEAM_CHANGE_FAILED_QUEUED(_) => "SMSG_ARENA_TEAM_CHANGE_FAILED_QUEUED",
            ServerOpcodeMessage::SMSG_MOVE_GRAVITY_DISABLE(_) => "SMSG_MOVE_GRAVITY_DISABLE",
            ServerOpcodeMessage::SMSG_MOVE_GRAVITY_ENABLE(_) => "SMSG_MOVE_GRAVITY_ENABLE",
            ServerOpcodeMessage::MSG_MOVE_GRAVITY_CHNG(_) => "MSG_MOVE_GRAVITY_CHNG_Server",
            ServerOpcodeMessage::SMSG_SPLINE_MOVE_GRAVITY_DISABLE(_) => "SMSG_SPLINE_MOVE_GRAVITY_DISABLE",
            ServerOpcodeMessage::SMSG_SPLINE_MOVE_GRAVITY_ENABLE(_) => "SMSG_SPLINE_MOVE_GRAVITY_ENABLE",
            ServerOpcodeMessage::SMSG_EQUIPMENT_SET_USE_RESULT(_) => "SMSG_EQUIPMENT_SET_USE_RESULT",
            ServerOpcodeMessage::SMSG_CHAR_FACTION_CHANGE(_) => "SMSG_CHAR_FACTION_CHANGE",
            ServerOpcodeMessage::SMSG_BATTLEFIELD_MGR_ENTRY_INVITE(_) => "SMSG_BATTLEFIELD_MGR_ENTRY_INVITE",
            ServerOpcodeMessage::SMSG_BATTLEFIELD_MGR_ENTERED(_) => "SMSG_BATTLEFIELD_MGR_ENTERED",
            ServerOpcodeMessage::SMSG_BATTLEFIELD_MGR_QUEUE_INVITE(_) => "SMSG_BATTLEFIELD_MGR_QUEUE_INVITE",
            ServerOpcodeMessage::SMSG_BATTLEFIELD_MGR_QUEUE_REQUEST_RESPONSE(_) => "SMSG_BATTLEFIELD_MGR_QUEUE_REQUEST_RESPONSE",
            ServerOpcodeMessage::SMSG_BATTLEFIELD_MGR_EJECT_PENDING(_) => "SMSG_BATTLEFIELD_MGR_EJECT_PENDING",
            ServerOpcodeMessage::SMSG_BATTLEFIELD_MGR_EJECTED(_) => "SMSG_BATTLEFIELD_MGR_EJECTED",
            ServerOpcodeMessage::SMSG_BATTLEFIELD_MGR_STATE_CHANGE(_) => "SMSG_BATTLEFIELD_MGR_STATE_CHANGE",
            ServerOpcodeMessage::MSG_SET_RAID_DIFFICULTY(_) => "MSG_SET_RAID_DIFFICULTY_Server",
            ServerOpcodeMessage::SMSG_TOGGLE_XP_GAIN => "SMSG_TOGGLE_XP_GAIN",
            ServerOpcodeMessage::SMSG_GMRESPONSE_DB_ERROR => "SMSG_GMRESPONSE_DB_ERROR",
            ServerOpcodeMessage::SMSG_GMRESPONSE_RECEIVED(_) => "SMSG_GMRESPONSE_RECEIVED",
            ServerOpcodeMessage::SMSG_GMRESPONSE_STATUS_UPDATE(_) => "SMSG_GMRESPONSE_STATUS_UPDATE",
            ServerOpcodeMessage::SMSG_WORLD_STATE_UI_TIMER_UPDATE(_) => "SMSG_WORLD_STATE_UI_TIMER_UPDATE",
            ServerOpcodeMessage::SMSG_TALENTS_INVOLUNTARILY_RESET(_) => "SMSG_TALENTS_INVOLUNTARILY_RESET",
            ServerOpcodeMessage::SMSG_QUERY_QUESTS_COMPLETED_RESPONSE(_) => "SMSG_QUERY_QUESTS_COMPLETED_RESPONSE",
            ServerOpcodeMessage::SMSG_CORPSE_NOT_IN_INSTANCE => "SMSG_CORPSE_NOT_IN_INSTANCE",
            ServerOpcodeMessage::SMSG_CAMERA_SHAKE(_) => "SMSG_CAMERA_SHAKE",
            ServerOpcodeMessage::SMSG_SOCKET_GEMS_RESULT(_) => "SMSG_SOCKET_GEMS_RESULT",
            ServerOpcodeMessage::SMSG_REDIRECT_CLIENT(_) => "SMSG_REDIRECT_CLIENT",
            ServerOpcodeMessage::SMSG_MOVE_SET_COLLISION_HGT(_) => "SMSG_MOVE_SET_COLLISION_HGT",
            ServerOpcodeMessage::SMSG_MULTIPLE_MOVES(_) => "SMSG_MULTIPLE_MOVES",
        })
    }
}

impl From<MSG_MOVE_START_FORWARD> for ServerOpcodeMessage {
    fn from(c: MSG_MOVE_START_FORWARD) -> Self {
        Self::MSG_MOVE_START_FORWARD(Box::new(c))
    }
}

impl From<MSG_MOVE_START_BACKWARD> for ServerOpcodeMessage {
    fn from(c: MSG_MOVE_START_BACKWARD) -> Self {
        Self::MSG_MOVE_START_BACKWARD(Box::new(c))
    }
}

impl From<MSG_MOVE_STOP> for ServerOpcodeMessage {
    fn from(c: MSG_MOVE_STOP) -> Self {
        Self::MSG_MOVE_STOP(Box::new(c))
    }
}

impl From<MSG_MOVE_START_STRAFE_LEFT> for ServerOpcodeMessage {
    fn from(c: MSG_MOVE_START_STRAFE_LEFT) -> Self {
        Self::MSG_MOVE_START_STRAFE_LEFT(Box::new(c))
    }
}

impl From<MSG_MOVE_START_STRAFE_RIGHT> for ServerOpcodeMessage {
    fn from(c: MSG_MOVE_START_STRAFE_RIGHT) -> Self {
        Self::MSG_MOVE_START_STRAFE_RIGHT(Box::new(c))
    }
}

impl From<MSG_MOVE_STOP_STRAFE> for ServerOpcodeMessage {
    fn from(c: MSG_MOVE_STOP_STRAFE) -> Self {
        Self::MSG_MOVE_STOP_STRAFE(Box::new(c))
    }
}

impl From<MSG_MOVE_JUMP> for ServerOpcodeMessage {
    fn from(c: MSG_MOVE_JUMP) -> Self {
        Self::MSG_MOVE_JUMP(Box::new(c))
    }
}

impl From<MSG_MOVE_START_TURN_LEFT> for ServerOpcodeMessage {
    fn from(c: MSG_MOVE_START_TURN_LEFT) -> Self {
        Self::MSG_MOVE_START_TURN_LEFT(Box::new(c))
    }
}

impl From<MSG_MOVE_START_TURN_RIGHT> for ServerOpcodeMessage {
    fn from(c: MSG_MOVE_START_TURN_RIGHT) -> Self {
        Self::MSG_MOVE_START_TURN_RIGHT(Box::new(c))
    }
}

impl From<MSG_MOVE_STOP_TURN> for ServerOpcodeMessage {
    fn from(c: MSG_MOVE_STOP_TURN) -> Self {
        Self::MSG_MOVE_STOP_TURN(Box::new(c))
    }
}

impl From<MSG_MOVE_START_PITCH_UP> for ServerOpcodeMessage {
    fn from(c: MSG_MOVE_START_PITCH_UP) -> Self {
        Self::MSG_MOVE_START_PITCH_UP(Box::new(c))
    }
}

impl From<MSG_MOVE_START_PITCH_DOWN> for ServerOpcodeMessage {
    fn from(c: MSG_MOVE_START_PITCH_DOWN) -> Self {
        Self::MSG_MOVE_START_PITCH_DOWN(Box::new(c))
    }
}

impl From<MSG_MOVE_STOP_PITCH> for ServerOpcodeMessage {
    fn from(c: MSG_MOVE_STOP_PITCH) -> Self {
        Self::MSG_MOVE_STOP_PITCH(Box::new(c))
    }
}

impl From<MSG_MOVE_SET_RUN_MODE> for ServerOpcodeMessage {
    fn from(c: MSG_MOVE_SET_RUN_MODE) -> Self {
        Self::MSG_MOVE_SET_RUN_MODE(Box::new(c))
    }
}

impl From<MSG_MOVE_SET_WALK_MODE> for ServerOpcodeMessage {
    fn from(c: MSG_MOVE_SET_WALK_MODE) -> Self {
        Self::MSG_MOVE_SET_WALK_MODE(Box::new(c))
    }
}

impl From<MSG_MOVE_FALL_LAND> for ServerOpcodeMessage {
    fn from(c: MSG_MOVE_FALL_LAND) -> Self {
        Self::MSG_MOVE_FALL_LAND(Box::new(c))
    }
}

impl From<MSG_MOVE_START_SWIM> for ServerOpcodeMessage {
    fn from(c: MSG_MOVE_START_SWIM) -> Self {
        Self::MSG_MOVE_START_SWIM(Box::new(c))
    }
}

impl From<MSG_MOVE_STOP_SWIM> for ServerOpcodeMessage {
    fn from(c: MSG_MOVE_STOP_SWIM) -> Self {
        Self::MSG_MOVE_STOP_SWIM(Box::new(c))
    }
}

impl From<MSG_MOVE_SET_FACING> for ServerOpcodeMessage {
    fn from(c: MSG_MOVE_SET_FACING) -> Self {
        Self::MSG_MOVE_SET_FACING(Box::new(c))
    }
}

impl From<MSG_MOVE_SET_PITCH> for ServerOpcodeMessage {
    fn from(c: MSG_MOVE_SET_PITCH) -> Self {
        Self::MSG_MOVE_SET_PITCH(Box::new(c))
    }
}

impl From<MSG_MOVE_WORLDPORT_ACK> for ServerOpcodeMessage {
    fn from(_: MSG_MOVE_WORLDPORT_ACK) -> Self {
        Self::MSG_MOVE_WORLDPORT_ACK
    }
}

impl From<MSG_MOVE_HEARTBEAT> for ServerOpcodeMessage {
    fn from(c: MSG_MOVE_HEARTBEAT) -> Self {
        Self::MSG_MOVE_HEARTBEAT(Box::new(c))
    }
}

impl From<MSG_MOVE_HOVER> for ServerOpcodeMessage {
    fn from(c: MSG_MOVE_HOVER) -> Self {
        Self::MSG_MOVE_HOVER(Box::new(c))
    }
}

impl From<MSG_PETITION_DECLINE> for ServerOpcodeMessage {
    fn from(c: MSG_PETITION_DECLINE) -> Self {
        Self::MSG_PETITION_DECLINE(c)
    }
}

impl From<MSG_TABARDVENDOR_ACTIVATE> for ServerOpcodeMessage {
    fn from(c: MSG_TABARDVENDOR_ACTIVATE) -> Self {
        Self::MSG_TABARDVENDOR_ACTIVATE(c)
    }
}

impl From<MSG_QUEST_PUSH_RESULT> for ServerOpcodeMessage {
    fn from(c: MSG_QUEST_PUSH_RESULT) -> Self {
        Self::MSG_QUEST_PUSH_RESULT(Box::new(c))
    }
}

impl From<MSG_MOVE_WATER_WALK> for ServerOpcodeMessage {
    fn from(c: MSG_MOVE_WATER_WALK) -> Self {
        Self::MSG_MOVE_WATER_WALK(Box::new(c))
    }
}

impl From<MSG_PETITION_RENAME> for ServerOpcodeMessage {
    fn from(c: MSG_PETITION_RENAME) -> Self {
        Self::MSG_PETITION_RENAME(Box::new(c))
    }
}

impl From<MSG_MOVE_START_ASCEND> for ServerOpcodeMessage {
    fn from(c: MSG_MOVE_START_ASCEND) -> Self {
        Self::MSG_MOVE_START_ASCEND(Box::new(c))
    }
}

impl From<MSG_MOVE_STOP_ASCEND> for ServerOpcodeMessage {
    fn from(c: MSG_MOVE_STOP_ASCEND) -> Self {
        Self::MSG_MOVE_STOP_ASCEND(Box::new(c))
    }
}

impl From<MSG_MOVE_SET_FLIGHT_BACK_SPEED> for ServerOpcodeMessage {
    fn from(c: MSG_MOVE_SET_FLIGHT_BACK_SPEED) -> Self {
        Self::MSG_MOVE_SET_FLIGHT_BACK_SPEED(Box::new(c))
    }
}

impl From<MSG_MOVE_START_DESCEND> for ServerOpcodeMessage {
    fn from(c: MSG_MOVE_START_DESCEND) -> Self {
        Self::MSG_MOVE_START_DESCEND(Box::new(c))
    }
}

impl From<CMSG_CALENDAR_GET_NUM_PENDING> for ServerOpcodeMessage {
    fn from(_: CMSG_CALENDAR_GET_NUM_PENDING) -> Self {
        Self::CMSG_CALENDAR_GET_NUM_PENDING
    }
}

impl From<SMSG_CHAR_CREATE> for ServerOpcodeMessage {
    fn from(c: SMSG_CHAR_CREATE) -> Self {
        Self::SMSG_CHAR_CREATE(c)
    }
}

impl From<SMSG_CHAR_ENUM> for ServerOpcodeMessage {
    fn from(c: SMSG_CHAR_ENUM) -> Self {
        Self::SMSG_CHAR_ENUM(Box::new(c))
    }
}

impl From<SMSG_CHAR_DELETE> for ServerOpcodeMessage {
    fn from(c: SMSG_CHAR_DELETE) -> Self {
        Self::SMSG_CHAR_DELETE(c)
    }
}

impl From<SMSG_NEW_WORLD> for ServerOpcodeMessage {
    fn from(c: SMSG_NEW_WORLD) -> Self {
        Self::SMSG_NEW_WORLD(Box::new(c))
    }
}

impl From<SMSG_TRANSFER_PENDING> for ServerOpcodeMessage {
    fn from(c: SMSG_TRANSFER_PENDING) -> Self {
        Self::SMSG_TRANSFER_PENDING(Box::new(c))
    }
}

impl From<SMSG_TRANSFER_ABORTED> for ServerOpcodeMessage {
    fn from(c: SMSG_TRANSFER_ABORTED) -> Self {
        Self::SMSG_TRANSFER_ABORTED(c)
    }
}

impl From<SMSG_CHARACTER_LOGIN_FAILED> for ServerOpcodeMessage {
    fn from(c: SMSG_CHARACTER_LOGIN_FAILED) -> Self {
        Self::SMSG_CHARACTER_LOGIN_FAILED(c)
    }
}

impl From<SMSG_LOGIN_SETTIMESPEED> for ServerOpcodeMessage {
    fn from(c: SMSG_LOGIN_SETTIMESPEED) -> Self {
        Self::SMSG_LOGIN_SETTIMESPEED(Box::new(c))
    }
}

impl From<SMSG_LOGOUT_RESPONSE> for ServerOpcodeMessage {
    fn from(c: SMSG_LOGOUT_RESPONSE) -> Self {
        Self::SMSG_LOGOUT_RESPONSE(c)
    }
}

impl From<SMSG_LOGOUT_COMPLETE> for ServerOpcodeMessage {
    fn from(_: SMSG_LOGOUT_COMPLETE) -> Self {
        Self::SMSG_LOGOUT_COMPLETE
    }
}

impl From<SMSG_LOGOUT_CANCEL_ACK> for ServerOpcodeMessage {
    fn from(_: SMSG_LOGOUT_CANCEL_ACK) -> Self {
        Self::SMSG_LOGOUT_CANCEL_ACK
    }
}

impl From<SMSG_NAME_QUERY_RESPONSE> for ServerOpcodeMessage {
    fn from(c: SMSG_NAME_QUERY_RESPONSE) -> Self {
        Self::SMSG_NAME_QUERY_RESPONSE(Box::new(c))
    }
}

impl From<SMSG_PET_NAME_QUERY_RESPONSE> for ServerOpcodeMessage {
    fn from(c: SMSG_PET_NAME_QUERY_RESPONSE) -> Self {
        Self::SMSG_PET_NAME_QUERY_RESPONSE(Box::new(c))
    }
}

impl From<SMSG_GUILD_QUERY_RESPONSE> for ServerOpcodeMessage {
    fn from(c: SMSG_GUILD_QUERY_RESPONSE) -> Self {
        Self::SMSG_GUILD_QUERY_RESPONSE(Box::new(c))
    }
}

impl From<SMSG_ITEM_QUERY_SINGLE_RESPONSE> for ServerOpcodeMessage {
    fn from(c: SMSG_ITEM_QUERY_SINGLE_RESPONSE) -> Self {
        Self::SMSG_ITEM_QUERY_SINGLE_RESPONSE(Box::new(c))
    }
}

impl From<SMSG_PAGE_TEXT_QUERY_RESPONSE> for ServerOpcodeMessage {
    fn from(c: SMSG_PAGE_TEXT_QUERY_RESPONSE) -> Self {
        Self::SMSG_PAGE_TEXT_QUERY_RESPONSE(Box::new(c))
    }
}

impl From<SMSG_QUEST_QUERY_RESPONSE> for ServerOpcodeMessage {
    fn from(c: SMSG_QUEST_QUERY_RESPONSE) -> Self {
        Self::SMSG_QUEST_QUERY_RESPONSE(Box::new(c))
    }
}

impl From<SMSG_GAMEOBJECT_QUERY_RESPONSE> for ServerOpcodeMessage {
    fn from(c: SMSG_GAMEOBJECT_QUERY_RESPONSE) -> Self {
        Self::SMSG_GAMEOBJECT_QUERY_RESPONSE(Box::new(c))
    }
}

impl From<SMSG_CREATURE_QUERY_RESPONSE> for ServerOpcodeMessage {
    fn from(c: SMSG_CREATURE_QUERY_RESPONSE) -> Self {
        Self::SMSG_CREATURE_QUERY_RESPONSE(Box::new(c))
    }
}

impl From<SMSG_WHO> for ServerOpcodeMessage {
    fn from(c: SMSG_WHO) -> Self {
        Self::SMSG_WHO(Box::new(c))
    }
}

impl From<SMSG_WHOIS> for ServerOpcodeMessage {
    fn from(c: SMSG_WHOIS) -> Self {
        Self::SMSG_WHOIS(Box::new(c))
    }
}

impl From<SMSG_CONTACT_LIST> for ServerOpcodeMessage {
    fn from(c: SMSG_CONTACT_LIST) -> Self {
        Self::SMSG_CONTACT_LIST(Box::new(c))
    }
}

impl From<SMSG_FRIEND_STATUS> for ServerOpcodeMessage {
    fn from(c: SMSG_FRIEND_STATUS) -> Self {
        Self::SMSG_FRIEND_STATUS(Box::new(c))
    }
}

impl From<SMSG_GROUP_INVITE> for ServerOpcodeMessage {
    fn from(c: SMSG_GROUP_INVITE) -> Self {
        Self::SMSG_GROUP_INVITE(Box::new(c))
    }
}

impl From<SMSG_GROUP_DECLINE> for ServerOpcodeMessage {
    fn from(c: SMSG_GROUP_DECLINE) -> Self {
        Self::SMSG_GROUP_DECLINE(Box::new(c))
    }
}

impl From<SMSG_GROUP_UNINVITE> for ServerOpcodeMessage {
    fn from(_: SMSG_GROUP_UNINVITE) -> Self {
        Self::SMSG_GROUP_UNINVITE
    }
}

impl From<SMSG_GROUP_SET_LEADER> for ServerOpcodeMessage {
    fn from(c: SMSG_GROUP_SET_LEADER) -> Self {
        Self::SMSG_GROUP_SET_LEADER(Box::new(c))
    }
}

impl From<SMSG_GROUP_DESTROYED> for ServerOpcodeMessage {
    fn from(_: SMSG_GROUP_DESTROYED) -> Self {
        Self::SMSG_GROUP_DESTROYED
    }
}

impl From<SMSG_GROUP_LIST> for ServerOpcodeMessage {
    fn from(c: SMSG_GROUP_LIST) -> Self {
        Self::SMSG_GROUP_LIST(Box::new(c))
    }
}

impl From<SMSG_PARTY_MEMBER_STATS> for ServerOpcodeMessage {
    fn from(c: SMSG_PARTY_MEMBER_STATS) -> Self {
        Self::SMSG_PARTY_MEMBER_STATS(Box::new(c))
    }
}

impl From<SMSG_PARTY_COMMAND_RESULT> for ServerOpcodeMessage {
    fn from(c: SMSG_PARTY_COMMAND_RESULT) -> Self {
        Self::SMSG_PARTY_COMMAND_RESULT(Box::new(c))
    }
}

impl From<SMSG_GUILD_INVITE> for ServerOpcodeMessage {
    fn from(c: SMSG_GUILD_INVITE) -> Self {
        Self::SMSG_GUILD_INVITE(Box::new(c))
    }
}

impl From<SMSG_GUILD_DECLINE> for ServerOpcodeMessage {
    fn from(c: SMSG_GUILD_DECLINE) -> Self {
        Self::SMSG_GUILD_DECLINE(Box::new(c))
    }
}

impl From<SMSG_GUILD_INFO> for ServerOpcodeMessage {
    fn from(c: SMSG_GUILD_INFO) -> Self {
        Self::SMSG_GUILD_INFO(Box::new(c))
    }
}

impl From<SMSG_GUILD_ROSTER> for ServerOpcodeMessage {
    fn from(c: SMSG_GUILD_ROSTER) -> Self {
        Self::SMSG_GUILD_ROSTER(Box::new(c))
    }
}

impl From<SMSG_GUILD_EVENT> for ServerOpcodeMessage {
    fn from(c: SMSG_GUILD_EVENT) -> Self {
        Self::SMSG_GUILD_EVENT(Box::new(c))
    }
}

impl From<SMSG_GUILD_COMMAND_RESULT> for ServerOpcodeMessage {
    fn from(c: SMSG_GUILD_COMMAND_RESULT) -> Self {
        Self::SMSG_GUILD_COMMAND_RESULT(Box::new(c))
    }
}

impl From<SMSG_MESSAGECHAT> for ServerOpcodeMessage {
    fn from(c: SMSG_MESSAGECHAT) -> Self {
        Self::SMSG_MESSAGECHAT(Box::new(c))
    }
}

impl From<SMSG_CHANNEL_NOTIFY> for ServerOpcodeMessage {
    fn from(c: SMSG_CHANNEL_NOTIFY) -> Self {
        Self::SMSG_CHANNEL_NOTIFY(Box::new(c))
    }
}

impl From<SMSG_CHANNEL_LIST> for ServerOpcodeMessage {
    fn from(c: SMSG_CHANNEL_LIST) -> Self {
        Self::SMSG_CHANNEL_LIST(Box::new(c))
    }
}

impl From<SMSG_UPDATE_OBJECT> for ServerOpcodeMessage {
    fn from(c: SMSG_UPDATE_OBJECT) -> Self {
        Self::SMSG_UPDATE_OBJECT(Box::new(c))
    }
}

impl From<SMSG_DESTROY_OBJECT> for ServerOpcodeMessage {
    fn from(c: SMSG_DESTROY_OBJECT) -> Self {
        Self::SMSG_DESTROY_OBJECT(Box::new(c))
    }
}

impl From<SMSG_READ_ITEM_OK> for ServerOpcodeMessage {
    fn from(c: SMSG_READ_ITEM_OK) -> Self {
        Self::SMSG_READ_ITEM_OK(c)
    }
}

impl From<SMSG_READ_ITEM_FAILED> for ServerOpcodeMessage {
    fn from(c: SMSG_READ_ITEM_FAILED) -> Self {
        Self::SMSG_READ_ITEM_FAILED(c)
    }
}

impl From<SMSG_ITEM_COOLDOWN> for ServerOpcodeMessage {
    fn from(c: SMSG_ITEM_COOLDOWN) -> Self {
        Self::SMSG_ITEM_COOLDOWN(Box::new(c))
    }
}

impl From<SMSG_GAMEOBJECT_CUSTOM_ANIM> for ServerOpcodeMessage {
    fn from(c: SMSG_GAMEOBJECT_CUSTOM_ANIM) -> Self {
        Self::SMSG_GAMEOBJECT_CUSTOM_ANIM(Box::new(c))
    }
}

impl From<MSG_MOVE_TELEPORT_CHEAT_Server> for ServerOpcodeMessage {
    fn from(c: MSG_MOVE_TELEPORT_CHEAT_Server) -> Self {
        Self::MSG_MOVE_TELEPORT_CHEAT(Box::new(c))
    }
}

impl From<MSG_MOVE_TELEPORT_ACK_Server> for ServerOpcodeMessage {
    fn from(c: MSG_MOVE_TELEPORT_ACK_Server) -> Self {
        Self::MSG_MOVE_TELEPORT_ACK(Box::new(c))
    }
}

impl From<SMSG_MONSTER_MOVE> for ServerOpcodeMessage {
    fn from(c: SMSG_MONSTER_MOVE) -> Self {
        Self::SMSG_MONSTER_MOVE(Box::new(c))
    }
}

impl From<SMSG_MOVE_WATER_WALK> for ServerOpcodeMessage {
    fn from(c: SMSG_MOVE_WATER_WALK) -> Self {
        Self::SMSG_MOVE_WATER_WALK(Box::new(c))
    }
}

impl From<SMSG_MOVE_LAND_WALK> for ServerOpcodeMessage {
    fn from(c: SMSG_MOVE_LAND_WALK) -> Self {
        Self::SMSG_MOVE_LAND_WALK(Box::new(c))
    }
}

impl From<SMSG_FORCE_RUN_SPEED_CHANGE> for ServerOpcodeMessage {
    fn from(c: SMSG_FORCE_RUN_SPEED_CHANGE) -> Self {
        Self::SMSG_FORCE_RUN_SPEED_CHANGE(Box::new(c))
    }
}

impl From<SMSG_FORCE_RUN_BACK_SPEED_CHANGE> for ServerOpcodeMessage {
    fn from(c: SMSG_FORCE_RUN_BACK_SPEED_CHANGE) -> Self {
        Self::SMSG_FORCE_RUN_BACK_SPEED_CHANGE(Box::new(c))
    }
}

impl From<SMSG_FORCE_SWIM_SPEED_CHANGE> for ServerOpcodeMessage {
    fn from(c: SMSG_FORCE_SWIM_SPEED_CHANGE) -> Self {
        Self::SMSG_FORCE_SWIM_SPEED_CHANGE(Box::new(c))
    }
}

impl From<SMSG_FORCE_MOVE_ROOT> for ServerOpcodeMessage {
    fn from(c: SMSG_FORCE_MOVE_ROOT) -> Self {
        Self::SMSG_FORCE_MOVE_ROOT(Box::new(c))
    }
}

impl From<SMSG_FORCE_MOVE_UNROOT> for ServerOpcodeMessage {
    fn from(c: SMSG_FORCE_MOVE_UNROOT) -> Self {
        Self::SMSG_FORCE_MOVE_UNROOT(Box::new(c))
    }
}

impl From<MSG_MOVE_ROOT_Server> for ServerOpcodeMessage {
    fn from(c: MSG_MOVE_ROOT_Server) -> Self {
        Self::MSG_MOVE_ROOT(Box::new(c))
    }
}

impl From<MSG_MOVE_UNROOT_Server> for ServerOpcodeMessage {
    fn from(c: MSG_MOVE_UNROOT_Server) -> Self {
        Self::MSG_MOVE_UNROOT(Box::new(c))
    }
}

impl From<SMSG_MOVE_KNOCK_BACK> for ServerOpcodeMessage {
    fn from(c: SMSG_MOVE_KNOCK_BACK) -> Self {
        Self::SMSG_MOVE_KNOCK_BACK(Box::new(c))
    }
}

impl From<MSG_MOVE_KNOCK_BACK_Server> for ServerOpcodeMessage {
    fn from(c: MSG_MOVE_KNOCK_BACK_Server) -> Self {
        Self::MSG_MOVE_KNOCK_BACK(Box::new(c))
    }
}

impl From<SMSG_MOVE_FEATHER_FALL> for ServerOpcodeMessage {
    fn from(c: SMSG_MOVE_FEATHER_FALL) -> Self {
        Self::SMSG_MOVE_FEATHER_FALL(Box::new(c))
    }
}

impl From<SMSG_MOVE_NORMAL_FALL> for ServerOpcodeMessage {
    fn from(c: SMSG_MOVE_NORMAL_FALL) -> Self {
        Self::SMSG_MOVE_NORMAL_FALL(Box::new(c))
    }
}

impl From<SMSG_MOVE_SET_HOVER> for ServerOpcodeMessage {
    fn from(c: SMSG_MOVE_SET_HOVER) -> Self {
        Self::SMSG_MOVE_SET_HOVER(Box::new(c))
    }
}

impl From<SMSG_MOVE_UNSET_HOVER> for ServerOpcodeMessage {
    fn from(c: SMSG_MOVE_UNSET_HOVER) -> Self {
        Self::SMSG_MOVE_UNSET_HOVER(Box::new(c))
    }
}

impl From<SMSG_TRIGGER_CINEMATIC> for ServerOpcodeMessage {
    fn from(c: SMSG_TRIGGER_CINEMATIC) -> Self {
        Self::SMSG_TRIGGER_CINEMATIC(c)
    }
}

impl From<SMSG_TUTORIAL_FLAGS> for ServerOpcodeMessage {
    fn from(c: SMSG_TUTORIAL_FLAGS) -> Self {
        Self::SMSG_TUTORIAL_FLAGS(Box::new(c))
    }
}

impl From<SMSG_EMOTE> for ServerOpcodeMessage {
    fn from(c: SMSG_EMOTE) -> Self {
        Self::SMSG_EMOTE(Box::new(c))
    }
}

impl From<SMSG_TEXT_EMOTE> for ServerOpcodeMessage {
    fn from(c: SMSG_TEXT_EMOTE) -> Self {
        Self::SMSG_TEXT_EMOTE(Box::new(c))
    }
}

impl From<SMSG_INVENTORY_CHANGE_FAILURE> for ServerOpcodeMessage {
    fn from(c: SMSG_INVENTORY_CHANGE_FAILURE) -> Self {
        Self::SMSG_INVENTORY_CHANGE_FAILURE(Box::new(c))
    }
}

impl From<SMSG_TRADE_STATUS> for ServerOpcodeMessage {
    fn from(c: SMSG_TRADE_STATUS) -> Self {
        Self::SMSG_TRADE_STATUS(Box::new(c))
    }
}

impl From<SMSG_TRADE_STATUS_EXTENDED> for ServerOpcodeMessage {
    fn from(c: SMSG_TRADE_STATUS_EXTENDED) -> Self {
        Self::SMSG_TRADE_STATUS_EXTENDED(Box::new(c))
    }
}

impl From<SMSG_INITIALIZE_FACTIONS> for ServerOpcodeMessage {
    fn from(c: SMSG_INITIALIZE_FACTIONS) -> Self {
        Self::SMSG_INITIALIZE_FACTIONS(Box::new(c))
    }
}

impl From<SMSG_SET_FACTION_VISIBLE> for ServerOpcodeMessage {
    fn from(c: SMSG_SET_FACTION_VISIBLE) -> Self {
        Self::SMSG_SET_FACTION_VISIBLE(c)
    }
}

impl From<SMSG_SET_FACTION_STANDING> for ServerOpcodeMessage {
    fn from(c: SMSG_SET_FACTION_STANDING) -> Self {
        Self::SMSG_SET_FACTION_STANDING(Box::new(c))
    }
}

impl From<SMSG_SET_PROFICIENCY> for ServerOpcodeMessage {
    fn from(c: SMSG_SET_PROFICIENCY) -> Self {
        Self::SMSG_SET_PROFICIENCY(c)
    }
}

impl From<SMSG_ACTION_BUTTONS> for ServerOpcodeMessage {
    fn from(c: SMSG_ACTION_BUTTONS) -> Self {
        Self::SMSG_ACTION_BUTTONS(Box::new(c))
    }
}

impl From<SMSG_INITIAL_SPELLS> for ServerOpcodeMessage {
    fn from(c: SMSG_INITIAL_SPELLS) -> Self {
        Self::SMSG_INITIAL_SPELLS(Box::new(c))
    }
}

impl From<SMSG_LEARNED_SPELL> for ServerOpcodeMessage {
    fn from(c: SMSG_LEARNED_SPELL) -> Self {
        Self::SMSG_LEARNED_SPELL(c)
    }
}

impl From<SMSG_SUPERCEDED_SPELL> for ServerOpcodeMessage {
    fn from(c: SMSG_SUPERCEDED_SPELL) -> Self {
        Self::SMSG_SUPERCEDED_SPELL(c)
    }
}

impl From<SMSG_CAST_FAILED> for ServerOpcodeMessage {
    fn from(c: SMSG_CAST_FAILED) -> Self {
        Self::SMSG_CAST_FAILED(Box::new(c))
    }
}

impl From<SMSG_SPELL_START> for ServerOpcodeMessage {
    fn from(c: SMSG_SPELL_START) -> Self {
        Self::SMSG_SPELL_START(Box::new(c))
    }
}

impl From<SMSG_SPELL_GO> for ServerOpcodeMessage {
    fn from(c: SMSG_SPELL_GO) -> Self {
        Self::SMSG_SPELL_GO(Box::new(c))
    }
}

impl From<SMSG_SPELL_FAILURE> for ServerOpcodeMessage {
    fn from(c: SMSG_SPELL_FAILURE) -> Self {
        Self::SMSG_SPELL_FAILURE(Box::new(c))
    }
}

impl From<SMSG_SPELL_COOLDOWN> for ServerOpcodeMessage {
    fn from(c: SMSG_SPELL_COOLDOWN) -> Self {
        Self::SMSG_SPELL_COOLDOWN(Box::new(c))
    }
}

impl From<SMSG_COOLDOWN_EVENT> for ServerOpcodeMessage {
    fn from(c: SMSG_COOLDOWN_EVENT) -> Self {
        Self::SMSG_COOLDOWN_EVENT(Box::new(c))
    }
}

impl From<SMSG_PET_CAST_FAILED> for ServerOpcodeMessage {
    fn from(c: SMSG_PET_CAST_FAILED) -> Self {
        Self::SMSG_PET_CAST_FAILED(Box::new(c))
    }
}

impl From<MSG_CHANNEL_START_Server> for ServerOpcodeMessage {
    fn from(c: MSG_CHANNEL_START_Server) -> Self {
        Self::MSG_CHANNEL_START(Box::new(c))
    }
}

impl From<MSG_CHANNEL_UPDATE_Server> for ServerOpcodeMessage {
    fn from(c: MSG_CHANNEL_UPDATE_Server) -> Self {
        Self::MSG_CHANNEL_UPDATE(Box::new(c))
    }
}

impl From<SMSG_AI_REACTION> for ServerOpcodeMessage {
    fn from(c: SMSG_AI_REACTION) -> Self {
        Self::SMSG_AI_REACTION(Box::new(c))
    }
}

impl From<SMSG_ATTACKSTART> for ServerOpcodeMessage {
    fn from(c: SMSG_ATTACKSTART) -> Self {
        Self::SMSG_ATTACKSTART(Box::new(c))
    }
}

impl From<SMSG_ATTACKSTOP> for ServerOpcodeMessage {
    fn from(c: SMSG_ATTACKSTOP) -> Self {
        Self::SMSG_ATTACKSTOP(Box::new(c))
    }
}

impl From<SMSG_ATTACKSWING_NOTINRANGE> for ServerOpcodeMessage {
    fn from(_: SMSG_ATTACKSWING_NOTINRANGE) -> Self {
        Self::SMSG_ATTACKSWING_NOTINRANGE
    }
}

impl From<SMSG_ATTACKSWING_BADFACING> for ServerOpcodeMessage {
    fn from(_: SMSG_ATTACKSWING_BADFACING) -> Self {
        Self::SMSG_ATTACKSWING_BADFACING
    }
}

impl From<SMSG_INSTANCE_LOCK_WARNING_QUERY> for ServerOpcodeMessage {
    fn from(c: SMSG_INSTANCE_LOCK_WARNING_QUERY) -> Self {
        Self::SMSG_INSTANCE_LOCK_WARNING_QUERY(Box::new(c))
    }
}

impl From<SMSG_ATTACKSWING_DEADTARGET> for ServerOpcodeMessage {
    fn from(_: SMSG_ATTACKSWING_DEADTARGET) -> Self {
        Self::SMSG_ATTACKSWING_DEADTARGET
    }
}

impl From<SMSG_ATTACKSWING_CANT_ATTACK> for ServerOpcodeMessage {
    fn from(_: SMSG_ATTACKSWING_CANT_ATTACK) -> Self {
        Self::SMSG_ATTACKSWING_CANT_ATTACK
    }
}

impl From<SMSG_ATTACKERSTATEUPDATE> for ServerOpcodeMessage {
    fn from(c: SMSG_ATTACKERSTATEUPDATE) -> Self {
        Self::SMSG_ATTACKERSTATEUPDATE(Box::new(c))
    }
}

impl From<SMSG_CANCEL_COMBAT> for ServerOpcodeMessage {
    fn from(_: SMSG_CANCEL_COMBAT) -> Self {
        Self::SMSG_CANCEL_COMBAT
    }
}

impl From<SMSG_SPELLHEALLOG> for ServerOpcodeMessage {
    fn from(c: SMSG_SPELLHEALLOG) -> Self {
        Self::SMSG_SPELLHEALLOG(Box::new(c))
    }
}

impl From<SMSG_SPELLENERGIZELOG> for ServerOpcodeMessage {
    fn from(c: SMSG_SPELLENERGIZELOG) -> Self {
        Self::SMSG_SPELLENERGIZELOG(Box::new(c))
    }
}

impl From<SMSG_BREAK_TARGET> for ServerOpcodeMessage {
    fn from(c: SMSG_BREAK_TARGET) -> Self {
        Self::SMSG_BREAK_TARGET(c)
    }
}

impl From<SMSG_BINDPOINTUPDATE> for ServerOpcodeMessage {
    fn from(c: SMSG_BINDPOINTUPDATE) -> Self {
        Self::SMSG_BINDPOINTUPDATE(Box::new(c))
    }
}

impl From<SMSG_PLAYERBOUND> for ServerOpcodeMessage {
    fn from(c: SMSG_PLAYERBOUND) -> Self {
        Self::SMSG_PLAYERBOUND(Box::new(c))
    }
}

impl From<SMSG_CLIENT_CONTROL_UPDATE> for ServerOpcodeMessage {
    fn from(c: SMSG_CLIENT_CONTROL_UPDATE) -> Self {
        Self::SMSG_CLIENT_CONTROL_UPDATE(Box::new(c))
    }
}

impl From<SMSG_RESURRECT_REQUEST> for ServerOpcodeMessage {
    fn from(c: SMSG_RESURRECT_REQUEST) -> Self {
        Self::SMSG_RESURRECT_REQUEST(Box::new(c))
    }
}

impl From<SMSG_LOOT_RESPONSE> for ServerOpcodeMessage {
    fn from(c: SMSG_LOOT_RESPONSE) -> Self {
        Self::SMSG_LOOT_RESPONSE(Box::new(c))
    }
}

impl From<SMSG_LOOT_RELEASE_RESPONSE> for ServerOpcodeMessage {
    fn from(c: SMSG_LOOT_RELEASE_RESPONSE) -> Self {
        Self::SMSG_LOOT_RELEASE_RESPONSE(Box::new(c))
    }
}

impl From<SMSG_LOOT_REMOVED> for ServerOpcodeMessage {
    fn from(c: SMSG_LOOT_REMOVED) -> Self {
        Self::SMSG_LOOT_REMOVED(c)
    }
}

impl From<SMSG_LOOT_MONEY_NOTIFY> for ServerOpcodeMessage {
    fn from(c: SMSG_LOOT_MONEY_NOTIFY) -> Self {
        Self::SMSG_LOOT_MONEY_NOTIFY(c)
    }
}

impl From<SMSG_LOOT_CLEAR_MONEY> for ServerOpcodeMessage {
    fn from(_: SMSG_LOOT_CLEAR_MONEY) -> Self {
        Self::SMSG_LOOT_CLEAR_MONEY
    }
}

impl From<SMSG_ITEM_PUSH_RESULT> for ServerOpcodeMessage {
    fn from(c: SMSG_ITEM_PUSH_RESULT) -> Self {
        Self::SMSG_ITEM_PUSH_RESULT(Box::new(c))
    }
}

impl From<SMSG_DUEL_REQUESTED> for ServerOpcodeMessage {
    fn from(c: SMSG_DUEL_REQUESTED) -> Self {
        Self::SMSG_DUEL_REQUESTED(Box::new(c))
    }
}

impl From<SMSG_DUEL_OUTOFBOUNDS> for ServerOpcodeMessage {
    fn from(_: SMSG_DUEL_OUTOFBOUNDS) -> Self {
        Self::SMSG_DUEL_OUTOFBOUNDS
    }
}

impl From<SMSG_DUEL_INBOUNDS> for ServerOpcodeMessage {
    fn from(_: SMSG_DUEL_INBOUNDS) -> Self {
        Self::SMSG_DUEL_INBOUNDS
    }
}

impl From<SMSG_DUEL_COMPLETE> for ServerOpcodeMessage {
    fn from(c: SMSG_DUEL_COMPLETE) -> Self {
        Self::SMSG_DUEL_COMPLETE(c)
    }
}

impl From<SMSG_DUEL_WINNER> for ServerOpcodeMessage {
    fn from(c: SMSG_DUEL_WINNER) -> Self {
        Self::SMSG_DUEL_WINNER(Box::new(c))
    }
}

impl From<SMSG_MOUNTRESULT> for ServerOpcodeMessage {
    fn from(c: SMSG_MOUNTRESULT) -> Self {
        Self::SMSG_MOUNTRESULT(c)
    }
}

impl From<SMSG_MOUNTSPECIAL_ANIM> for ServerOpcodeMessage {
    fn from(c: SMSG_MOUNTSPECIAL_ANIM) -> Self {
        Self::SMSG_MOUNTSPECIAL_ANIM(c)
    }
}

impl From<SMSG_PET_TAME_FAILURE> for ServerOpcodeMessage {
    fn from(c: SMSG_PET_TAME_FAILURE) -> Self {
        Self::SMSG_PET_TAME_FAILURE(c)
    }
}

impl From<SMSG_PET_NAME_INVALID> for ServerOpcodeMessage {
    fn from(c: SMSG_PET_NAME_INVALID) -> Self {
        Self::SMSG_PET_NAME_INVALID(Box::new(c))
    }
}

impl From<SMSG_PET_SPELLS> for ServerOpcodeMessage {
    fn from(c: SMSG_PET_SPELLS) -> Self {
        Self::SMSG_PET_SPELLS(Box::new(c))
    }
}

impl From<SMSG_PET_MODE> for ServerOpcodeMessage {
    fn from(c: SMSG_PET_MODE) -> Self {
        Self::SMSG_PET_MODE(Box::new(c))
    }
}

impl From<SMSG_GOSSIP_MESSAGE> for ServerOpcodeMessage {
    fn from(c: SMSG_GOSSIP_MESSAGE) -> Self {
        Self::SMSG_GOSSIP_MESSAGE(Box::new(c))
    }
}

impl From<SMSG_GOSSIP_COMPLETE> for ServerOpcodeMessage {
    fn from(_: SMSG_GOSSIP_COMPLETE) -> Self {
        Self::SMSG_GOSSIP_COMPLETE
    }
}

impl From<SMSG_NPC_TEXT_UPDATE> for ServerOpcodeMessage {
    fn from(c: SMSG_NPC_TEXT_UPDATE) -> Self {
        Self::SMSG_NPC_TEXT_UPDATE(Box::new(c))
    }
}

impl From<SMSG_QUESTGIVER_STATUS> for ServerOpcodeMessage {
    fn from(c: SMSG_QUESTGIVER_STATUS) -> Self {
        Self::SMSG_QUESTGIVER_STATUS(Box::new(c))
    }
}

impl From<SMSG_QUESTGIVER_QUEST_LIST> for ServerOpcodeMessage {
    fn from(c: SMSG_QUESTGIVER_QUEST_LIST) -> Self {
        Self::SMSG_QUESTGIVER_QUEST_LIST(Box::new(c))
    }
}

impl From<SMSG_QUESTGIVER_QUEST_DETAILS> for ServerOpcodeMessage {
    fn from(c: SMSG_QUESTGIVER_QUEST_DETAILS) -> Self {
        Self::SMSG_QUESTGIVER_QUEST_DETAILS(Box::new(c))
    }
}

impl From<SMSG_QUESTGIVER_REQUEST_ITEMS> for ServerOpcodeMessage {
    fn from(c: SMSG_QUESTGIVER_REQUEST_ITEMS) -> Self {
        Self::SMSG_QUESTGIVER_REQUEST_ITEMS(Box::new(c))
    }
}

impl From<SMSG_QUESTGIVER_OFFER_REWARD> for ServerOpcodeMessage {
    fn from(c: SMSG_QUESTGIVER_OFFER_REWARD) -> Self {
        Self::SMSG_QUESTGIVER_OFFER_REWARD(Box::new(c))
    }
}

impl From<SMSG_QUESTGIVER_QUEST_INVALID> for ServerOpcodeMessage {
    fn from(c: SMSG_QUESTGIVER_QUEST_INVALID) -> Self {
        Self::SMSG_QUESTGIVER_QUEST_INVALID(c)
    }
}

impl From<SMSG_QUESTGIVER_QUEST_COMPLETE> for ServerOpcodeMessage {
    fn from(c: SMSG_QUESTGIVER_QUEST_COMPLETE) -> Self {
        Self::SMSG_QUESTGIVER_QUEST_COMPLETE(Box::new(c))
    }
}

impl From<SMSG_QUESTGIVER_QUEST_FAILED> for ServerOpcodeMessage {
    fn from(c: SMSG_QUESTGIVER_QUEST_FAILED) -> Self {
        Self::SMSG_QUESTGIVER_QUEST_FAILED(c)
    }
}

impl From<SMSG_QUESTLOG_FULL> for ServerOpcodeMessage {
    fn from(_: SMSG_QUESTLOG_FULL) -> Self {
        Self::SMSG_QUESTLOG_FULL
    }
}

impl From<SMSG_QUESTUPDATE_FAILED> for ServerOpcodeMessage {
    fn from(c: SMSG_QUESTUPDATE_FAILED) -> Self {
        Self::SMSG_QUESTUPDATE_FAILED(c)
    }
}

impl From<SMSG_QUESTUPDATE_FAILEDTIMER> for ServerOpcodeMessage {
    fn from(c: SMSG_QUESTUPDATE_FAILEDTIMER) -> Self {
        Self::SMSG_QUESTUPDATE_FAILEDTIMER(c)
    }
}

impl From<SMSG_QUESTUPDATE_COMPLETE> for ServerOpcodeMessage {
    fn from(c: SMSG_QUESTUPDATE_COMPLETE) -> Self {
        Self::SMSG_QUESTUPDATE_COMPLETE(c)
    }
}

impl From<SMSG_QUESTUPDATE_ADD_KILL> for ServerOpcodeMessage {
    fn from(c: SMSG_QUESTUPDATE_ADD_KILL) -> Self {
        Self::SMSG_QUESTUPDATE_ADD_KILL(Box::new(c))
    }
}

impl From<SMSG_QUESTUPDATE_ADD_ITEM> for ServerOpcodeMessage {
    fn from(c: SMSG_QUESTUPDATE_ADD_ITEM) -> Self {
        Self::SMSG_QUESTUPDATE_ADD_ITEM(c)
    }
}

impl From<SMSG_QUEST_CONFIRM_ACCEPT> for ServerOpcodeMessage {
    fn from(c: SMSG_QUEST_CONFIRM_ACCEPT) -> Self {
        Self::SMSG_QUEST_CONFIRM_ACCEPT(Box::new(c))
    }
}

impl From<SMSG_LIST_INVENTORY> for ServerOpcodeMessage {
    fn from(c: SMSG_LIST_INVENTORY) -> Self {
        Self::SMSG_LIST_INVENTORY(Box::new(c))
    }
}

impl From<SMSG_SELL_ITEM> for ServerOpcodeMessage {
    fn from(c: SMSG_SELL_ITEM) -> Self {
        Self::SMSG_SELL_ITEM(Box::new(c))
    }
}

impl From<SMSG_BUY_ITEM> for ServerOpcodeMessage {
    fn from(c: SMSG_BUY_ITEM) -> Self {
        Self::SMSG_BUY_ITEM(Box::new(c))
    }
}

impl From<SMSG_BUY_FAILED> for ServerOpcodeMessage {
    fn from(c: SMSG_BUY_FAILED) -> Self {
        Self::SMSG_BUY_FAILED(Box::new(c))
    }
}

impl From<SMSG_SHOWTAXINODES> for ServerOpcodeMessage {
    fn from(c: SMSG_SHOWTAXINODES) -> Self {
        Self::SMSG_SHOWTAXINODES(Box::new(c))
    }
}

impl From<SMSG_TAXINODE_STATUS> for ServerOpcodeMessage {
    fn from(c: SMSG_TAXINODE_STATUS) -> Self {
        Self::SMSG_TAXINODE_STATUS(Box::new(c))
    }
}

impl From<SMSG_ACTIVATETAXIREPLY> for ServerOpcodeMessage {
    fn from(c: SMSG_ACTIVATETAXIREPLY) -> Self {
        Self::SMSG_ACTIVATETAXIREPLY(c)
    }
}

impl From<SMSG_NEW_TAXI_PATH> for ServerOpcodeMessage {
    fn from(_: SMSG_NEW_TAXI_PATH) -> Self {
        Self::SMSG_NEW_TAXI_PATH
    }
}

impl From<SMSG_TRAINER_LIST> for ServerOpcodeMessage {
    fn from(c: SMSG_TRAINER_LIST) -> Self {
        Self::SMSG_TRAINER_LIST(Box::new(c))
    }
}

impl From<SMSG_TRAINER_BUY_SUCCEEDED> for ServerOpcodeMessage {
    fn from(c: SMSG_TRAINER_BUY_SUCCEEDED) -> Self {
        Self::SMSG_TRAINER_BUY_SUCCEEDED(Box::new(c))
    }
}

impl From<SMSG_TRAINER_BUY_FAILED> for ServerOpcodeMessage {
    fn from(c: SMSG_TRAINER_BUY_FAILED) -> Self {
        Self::SMSG_TRAINER_BUY_FAILED(Box::new(c))
    }
}

impl From<SMSG_SHOW_BANK> for ServerOpcodeMessage {
    fn from(c: SMSG_SHOW_BANK) -> Self {
        Self::SMSG_SHOW_BANK(c)
    }
}

impl From<SMSG_BUY_BANK_SLOT_RESULT> for ServerOpcodeMessage {
    fn from(c: SMSG_BUY_BANK_SLOT_RESULT) -> Self {
        Self::SMSG_BUY_BANK_SLOT_RESULT(c)
    }
}

impl From<SMSG_PETITION_SHOWLIST> for ServerOpcodeMessage {
    fn from(c: SMSG_PETITION_SHOWLIST) -> Self {
        Self::SMSG_PETITION_SHOWLIST(Box::new(c))
    }
}

impl From<SMSG_PETITION_SHOW_SIGNATURES> for ServerOpcodeMessage {
    fn from(c: SMSG_PETITION_SHOW_SIGNATURES) -> Self {
        Self::SMSG_PETITION_SHOW_SIGNATURES(Box::new(c))
    }
}

impl From<SMSG_PETITION_SIGN_RESULTS> for ServerOpcodeMessage {
    fn from(c: SMSG_PETITION_SIGN_RESULTS) -> Self {
        Self::SMSG_PETITION_SIGN_RESULTS(Box::new(c))
    }
}

impl From<SMSG_TURN_IN_PETITION_RESULTS> for ServerOpcodeMessage {
    fn from(c: SMSG_TURN_IN_PETITION_RESULTS) -> Self {
        Self::SMSG_TURN_IN_PETITION_RESULTS(c)
    }
}

impl From<SMSG_PETITION_QUERY_RESPONSE> for ServerOpcodeMessage {
    fn from(c: SMSG_PETITION_QUERY_RESPONSE) -> Self {
        Self::SMSG_PETITION_QUERY_RESPONSE(Box::new(c))
    }
}

impl From<SMSG_FISH_NOT_HOOKED> for ServerOpcodeMessage {
    fn from(_: SMSG_FISH_NOT_HOOKED) -> Self {
        Self::SMSG_FISH_NOT_HOOKED
    }
}

impl From<SMSG_FISH_ESCAPED> for ServerOpcodeMessage {
    fn from(_: SMSG_FISH_ESCAPED) -> Self {
        Self::SMSG_FISH_ESCAPED
    }
}

impl From<SMSG_NOTIFICATION> for ServerOpcodeMessage {
    fn from(c: SMSG_NOTIFICATION) -> Self {
        Self::SMSG_NOTIFICATION(Box::new(c))
    }
}

impl From<SMSG_PLAYED_TIME> for ServerOpcodeMessage {
    fn from(c: SMSG_PLAYED_TIME) -> Self {
        Self::SMSG_PLAYED_TIME(Box::new(c))
    }
}

impl From<SMSG_QUERY_TIME_RESPONSE> for ServerOpcodeMessage {
    fn from(c: SMSG_QUERY_TIME_RESPONSE) -> Self {
        Self::SMSG_QUERY_TIME_RESPONSE(c)
    }
}

impl From<SMSG_LOG_XPGAIN> for ServerOpcodeMessage {
    fn from(c: SMSG_LOG_XPGAIN) -> Self {
        Self::SMSG_LOG_XPGAIN(Box::new(c))
    }
}

impl From<SMSG_LEVELUP_INFO> for ServerOpcodeMessage {
    fn from(c: SMSG_LEVELUP_INFO) -> Self {
        Self::SMSG_LEVELUP_INFO(Box::new(c))
    }
}

impl From<MSG_MINIMAP_PING_Server> for ServerOpcodeMessage {
    fn from(c: MSG_MINIMAP_PING_Server) -> Self {
        Self::MSG_MINIMAP_PING(Box::new(c))
    }
}

impl From<SMSG_ENCHANTMENTLOG> for ServerOpcodeMessage {
    fn from(c: SMSG_ENCHANTMENTLOG) -> Self {
        Self::SMSG_ENCHANTMENTLOG(Box::new(c))
    }
}

impl From<SMSG_START_MIRROR_TIMER> for ServerOpcodeMessage {
    fn from(c: SMSG_START_MIRROR_TIMER) -> Self {
        Self::SMSG_START_MIRROR_TIMER(Box::new(c))
    }
}

impl From<SMSG_PAUSE_MIRROR_TIMER> for ServerOpcodeMessage {
    fn from(c: SMSG_PAUSE_MIRROR_TIMER) -> Self {
        Self::SMSG_PAUSE_MIRROR_TIMER(c)
    }
}

impl From<SMSG_STOP_MIRROR_TIMER> for ServerOpcodeMessage {
    fn from(c: SMSG_STOP_MIRROR_TIMER) -> Self {
        Self::SMSG_STOP_MIRROR_TIMER(c)
    }
}

impl From<SMSG_PONG> for ServerOpcodeMessage {
    fn from(c: SMSG_PONG) -> Self {
        Self::SMSG_PONG(c)
    }
}

impl From<SMSG_CLEAR_COOLDOWN> for ServerOpcodeMessage {
    fn from(c: SMSG_CLEAR_COOLDOWN) -> Self {
        Self::SMSG_CLEAR_COOLDOWN(Box::new(c))
    }
}

impl From<SMSG_GAMEOBJECT_PAGETEXT> for ServerOpcodeMessage {
    fn from(c: SMSG_GAMEOBJECT_PAGETEXT) -> Self {
        Self::SMSG_GAMEOBJECT_PAGETEXT(c)
    }
}

impl From<SMSG_SPELL_DELAYED> for ServerOpcodeMessage {
    fn from(c: SMSG_SPELL_DELAYED) -> Self {
        Self::SMSG_SPELL_DELAYED(Box::new(c))
    }
}

impl From<SMSG_QUEST_POI_QUERY_RESPONSE> for ServerOpcodeMessage {
    fn from(c: SMSG_QUEST_POI_QUERY_RESPONSE) -> Self {
        Self::SMSG_QUEST_POI_QUERY_RESPONSE(Box::new(c))
    }
}

impl From<SMSG_ITEM_TIME_UPDATE> for ServerOpcodeMessage {
    fn from(c: SMSG_ITEM_TIME_UPDATE) -> Self {
        Self::SMSG_ITEM_TIME_UPDATE(Box::new(c))
    }
}

impl From<SMSG_ITEM_ENCHANT_TIME_UPDATE> for ServerOpcodeMessage {
    fn from(c: SMSG_ITEM_ENCHANT_TIME_UPDATE) -> Self {
        Self::SMSG_ITEM_ENCHANT_TIME_UPDATE(Box::new(c))
    }
}

impl From<SMSG_AUTH_CHALLENGE> for ServerOpcodeMessage {
    fn from(c: SMSG_AUTH_CHALLENGE) -> Self {
        Self::SMSG_AUTH_CHALLENGE(Box::new(c))
    }
}

impl From<SMSG_AUTH_RESPONSE> for ServerOpcodeMessage {
    fn from(c: SMSG_AUTH_RESPONSE) -> Self {
        Self::SMSG_AUTH_RESPONSE(Box::new(c))
    }
}

impl From<MSG_SAVE_GUILD_EMBLEM_Server> for ServerOpcodeMessage {
    fn from(c: MSG_SAVE_GUILD_EMBLEM_Server) -> Self {
        Self::MSG_SAVE_GUILD_EMBLEM(c)
    }
}

impl From<SMSG_PLAY_SPELL_VISUAL> for ServerOpcodeMessage {
    fn from(c: SMSG_PLAY_SPELL_VISUAL) -> Self {
        Self::SMSG_PLAY_SPELL_VISUAL(Box::new(c))
    }
}

impl From<SMSG_PARTYKILLLOG> for ServerOpcodeMessage {
    fn from(c: SMSG_PARTYKILLLOG) -> Self {
        Self::SMSG_PARTYKILLLOG(Box::new(c))
    }
}

impl From<SMSG_COMPRESSED_UPDATE_OBJECT> for ServerOpcodeMessage {
    fn from(c: SMSG_COMPRESSED_UPDATE_OBJECT) -> Self {
        Self::SMSG_COMPRESSED_UPDATE_OBJECT(Box::new(c))
    }
}

impl From<SMSG_PLAY_SPELL_IMPACT> for ServerOpcodeMessage {
    fn from(c: SMSG_PLAY_SPELL_IMPACT) -> Self {
        Self::SMSG_PLAY_SPELL_IMPACT(Box::new(c))
    }
}

impl From<SMSG_EXPLORATION_EXPERIENCE> for ServerOpcodeMessage {
    fn from(c: SMSG_EXPLORATION_EXPERIENCE) -> Self {
        Self::SMSG_EXPLORATION_EXPERIENCE(c)
    }
}

impl From<MSG_RANDOM_ROLL_Server> for ServerOpcodeMessage {
    fn from(c: MSG_RANDOM_ROLL_Server) -> Self {
        Self::MSG_RANDOM_ROLL(Box::new(c))
    }
}

impl From<SMSG_ENVIRONMENTAL_DAMAGE_LOG> for ServerOpcodeMessage {
    fn from(c: SMSG_ENVIRONMENTAL_DAMAGE_LOG) -> Self {
        Self::SMSG_ENVIRONMENTAL_DAMAGE_LOG(Box::new(c))
    }
}

impl From<SMSG_LFG_PLAYER_REWARD> for ServerOpcodeMessage {
    fn from(c: SMSG_LFG_PLAYER_REWARD) -> Self {
        Self::SMSG_LFG_PLAYER_REWARD(Box::new(c))
    }
}

impl From<SMSG_LFG_TELEPORT_DENIED> for ServerOpcodeMessage {
    fn from(c: SMSG_LFG_TELEPORT_DENIED) -> Self {
        Self::SMSG_LFG_TELEPORT_DENIED(c)
    }
}

impl From<SMSG_REMOVED_SPELL> for ServerOpcodeMessage {
    fn from(c: SMSG_REMOVED_SPELL) -> Self {
        Self::SMSG_REMOVED_SPELL(c)
    }
}

impl From<SMSG_GMTICKET_CREATE> for ServerOpcodeMessage {
    fn from(c: SMSG_GMTICKET_CREATE) -> Self {
        Self::SMSG_GMTICKET_CREATE(c)
    }
}

impl From<SMSG_GMTICKET_UPDATETEXT> for ServerOpcodeMessage {
    fn from(c: SMSG_GMTICKET_UPDATETEXT) -> Self {
        Self::SMSG_GMTICKET_UPDATETEXT(c)
    }
}

impl From<SMSG_ACCOUNT_DATA_TIMES> for ServerOpcodeMessage {
    fn from(c: SMSG_ACCOUNT_DATA_TIMES) -> Self {
        Self::SMSG_ACCOUNT_DATA_TIMES(Box::new(c))
    }
}

impl From<SMSG_UPDATE_ACCOUNT_DATA> for ServerOpcodeMessage {
    fn from(c: SMSG_UPDATE_ACCOUNT_DATA) -> Self {
        Self::SMSG_UPDATE_ACCOUNT_DATA(Box::new(c))
    }
}

impl From<SMSG_GMTICKET_GETTICKET> for ServerOpcodeMessage {
    fn from(c: SMSG_GMTICKET_GETTICKET) -> Self {
        Self::SMSG_GMTICKET_GETTICKET(Box::new(c))
    }
}

impl From<SMSG_UPDATE_INSTANCE_ENCOUNTER_UNIT> for ServerOpcodeMessage {
    fn from(c: SMSG_UPDATE_INSTANCE_ENCOUNTER_UNIT) -> Self {
        Self::SMSG_UPDATE_INSTANCE_ENCOUNTER_UNIT(Box::new(c))
    }
}

impl From<SMSG_GAMEOBJECT_DESPAWN_ANIM> for ServerOpcodeMessage {
    fn from(c: SMSG_GAMEOBJECT_DESPAWN_ANIM) -> Self {
        Self::SMSG_GAMEOBJECT_DESPAWN_ANIM(c)
    }
}

impl From<MSG_CORPSE_QUERY_Server> for ServerOpcodeMessage {
    fn from(c: MSG_CORPSE_QUERY_Server) -> Self {
        Self::MSG_CORPSE_QUERY(Box::new(c))
    }
}

impl From<SMSG_GMTICKET_DELETETICKET> for ServerOpcodeMessage {
    fn from(c: SMSG_GMTICKET_DELETETICKET) -> Self {
        Self::SMSG_GMTICKET_DELETETICKET(c)
    }
}

impl From<SMSG_CHAT_WRONG_FACTION> for ServerOpcodeMessage {
    fn from(_: SMSG_CHAT_WRONG_FACTION) -> Self {
        Self::SMSG_CHAT_WRONG_FACTION
    }
}

impl From<SMSG_GMTICKET_SYSTEMSTATUS> for ServerOpcodeMessage {
    fn from(c: SMSG_GMTICKET_SYSTEMSTATUS) -> Self {
        Self::SMSG_GMTICKET_SYSTEMSTATUS(c)
    }
}

impl From<SMSG_QUEST_FORCE_REMOVE> for ServerOpcodeMessage {
    fn from(c: SMSG_QUEST_FORCE_REMOVE) -> Self {
        Self::SMSG_QUEST_FORCE_REMOVE(c)
    }
}

impl From<SMSG_SPIRIT_HEALER_CONFIRM> for ServerOpcodeMessage {
    fn from(c: SMSG_SPIRIT_HEALER_CONFIRM) -> Self {
        Self::SMSG_SPIRIT_HEALER_CONFIRM(c)
    }
}

impl From<SMSG_GOSSIP_POI> for ServerOpcodeMessage {
    fn from(c: SMSG_GOSSIP_POI) -> Self {
        Self::SMSG_GOSSIP_POI(Box::new(c))
    }
}

impl From<SMSG_LOGIN_VERIFY_WORLD> for ServerOpcodeMessage {
    fn from(c: SMSG_LOGIN_VERIFY_WORLD) -> Self {
        Self::SMSG_LOGIN_VERIFY_WORLD(Box::new(c))
    }
}

impl From<SMSG_SEND_MAIL_RESULT> for ServerOpcodeMessage {
    fn from(c: SMSG_SEND_MAIL_RESULT) -> Self {
        Self::SMSG_SEND_MAIL_RESULT(Box::new(c))
    }
}

impl From<SMSG_MAIL_LIST_RESULT> for ServerOpcodeMessage {
    fn from(c: SMSG_MAIL_LIST_RESULT) -> Self {
        Self::SMSG_MAIL_LIST_RESULT(Box::new(c))
    }
}

impl From<SMSG_BATTLEFIELD_LIST> for ServerOpcodeMessage {
    fn from(c: SMSG_BATTLEFIELD_LIST) -> Self {
        Self::SMSG_BATTLEFIELD_LIST(Box::new(c))
    }
}

impl From<SMSG_ITEM_TEXT_QUERY_RESPONSE> for ServerOpcodeMessage {
    fn from(c: SMSG_ITEM_TEXT_QUERY_RESPONSE) -> Self {
        Self::SMSG_ITEM_TEXT_QUERY_RESPONSE(Box::new(c))
    }
}

impl From<SMSG_SPELLLOGMISS> for ServerOpcodeMessage {
    fn from(c: SMSG_SPELLLOGMISS) -> Self {
        Self::SMSG_SPELLLOGMISS(Box::new(c))
    }
}

impl From<SMSG_SPELLLOGEXECUTE> for ServerOpcodeMessage {
    fn from(c: SMSG_SPELLLOGEXECUTE) -> Self {
        Self::SMSG_SPELLLOGEXECUTE(Box::new(c))
    }
}

impl From<SMSG_PERIODICAURALOG> for ServerOpcodeMessage {
    fn from(c: SMSG_PERIODICAURALOG) -> Self {
        Self::SMSG_PERIODICAURALOG(Box::new(c))
    }
}

impl From<SMSG_SPELLDAMAGESHIELD> for ServerOpcodeMessage {
    fn from(c: SMSG_SPELLDAMAGESHIELD) -> Self {
        Self::SMSG_SPELLDAMAGESHIELD(Box::new(c))
    }
}

impl From<SMSG_SPELLNONMELEEDAMAGELOG> for ServerOpcodeMessage {
    fn from(c: SMSG_SPELLNONMELEEDAMAGELOG) -> Self {
        Self::SMSG_SPELLNONMELEEDAMAGELOG(Box::new(c))
    }
}

impl From<SMSG_RESURRECT_FAILED> for ServerOpcodeMessage {
    fn from(c: SMSG_RESURRECT_FAILED) -> Self {
        Self::SMSG_RESURRECT_FAILED(c)
    }
}

impl From<SMSG_ZONE_UNDER_ATTACK> for ServerOpcodeMessage {
    fn from(c: SMSG_ZONE_UNDER_ATTACK) -> Self {
        Self::SMSG_ZONE_UNDER_ATTACK(c)
    }
}

impl From<MSG_AUCTION_HELLO_Server> for ServerOpcodeMessage {
    fn from(c: MSG_AUCTION_HELLO_Server) -> Self {
        Self::MSG_AUCTION_HELLO(Box::new(c))
    }
}

impl From<SMSG_AUCTION_COMMAND_RESULT> for ServerOpcodeMessage {
    fn from(c: SMSG_AUCTION_COMMAND_RESULT) -> Self {
        Self::SMSG_AUCTION_COMMAND_RESULT(Box::new(c))
    }
}

impl From<SMSG_AUCTION_LIST_RESULT> for ServerOpcodeMessage {
    fn from(c: SMSG_AUCTION_LIST_RESULT) -> Self {
        Self::SMSG_AUCTION_LIST_RESULT(Box::new(c))
    }
}

impl From<SMSG_AUCTION_OWNER_LIST_RESULT> for ServerOpcodeMessage {
    fn from(c: SMSG_AUCTION_OWNER_LIST_RESULT) -> Self {
        Self::SMSG_AUCTION_OWNER_LIST_RESULT(Box::new(c))
    }
}

impl From<SMSG_AUCTION_BIDDER_NOTIFICATION> for ServerOpcodeMessage {
    fn from(c: SMSG_AUCTION_BIDDER_NOTIFICATION) -> Self {
        Self::SMSG_AUCTION_BIDDER_NOTIFICATION(Box::new(c))
    }
}

impl From<SMSG_AUCTION_OWNER_NOTIFICATION> for ServerOpcodeMessage {
    fn from(c: SMSG_AUCTION_OWNER_NOTIFICATION) -> Self {
        Self::SMSG_AUCTION_OWNER_NOTIFICATION(Box::new(c))
    }
}

impl From<SMSG_PROCRESIST> for ServerOpcodeMessage {
    fn from(c: SMSG_PROCRESIST) -> Self {
        Self::SMSG_PROCRESIST(Box::new(c))
    }
}

impl From<SMSG_DISPEL_FAILED> for ServerOpcodeMessage {
    fn from(c: SMSG_DISPEL_FAILED) -> Self {
        Self::SMSG_DISPEL_FAILED(Box::new(c))
    }
}

impl From<SMSG_SPELLORDAMAGE_IMMUNE> for ServerOpcodeMessage {
    fn from(c: SMSG_SPELLORDAMAGE_IMMUNE) -> Self {
        Self::SMSG_SPELLORDAMAGE_IMMUNE(Box::new(c))
    }
}

impl From<SMSG_AUCTION_BIDDER_LIST_RESULT> for ServerOpcodeMessage {
    fn from(c: SMSG_AUCTION_BIDDER_LIST_RESULT) -> Self {
        Self::SMSG_AUCTION_BIDDER_LIST_RESULT(Box::new(c))
    }
}

impl From<SMSG_SET_FLAT_SPELL_MODIFIER> for ServerOpcodeMessage {
    fn from(c: SMSG_SET_FLAT_SPELL_MODIFIER) -> Self {
        Self::SMSG_SET_FLAT_SPELL_MODIFIER(c)
    }
}

impl From<SMSG_SET_PCT_SPELL_MODIFIER> for ServerOpcodeMessage {
    fn from(c: SMSG_SET_PCT_SPELL_MODIFIER) -> Self {
        Self::SMSG_SET_PCT_SPELL_MODIFIER(c)
    }
}

impl From<SMSG_CORPSE_RECLAIM_DELAY> for ServerOpcodeMessage {
    fn from(c: SMSG_CORPSE_RECLAIM_DELAY) -> Self {
        Self::SMSG_CORPSE_RECLAIM_DELAY(c)
    }
}

impl From<MSG_LIST_STABLED_PETS_Server> for ServerOpcodeMessage {
    fn from(c: MSG_LIST_STABLED_PETS_Server) -> Self {
        Self::MSG_LIST_STABLED_PETS(Box::new(c))
    }
}

impl From<SMSG_STABLE_RESULT> for ServerOpcodeMessage {
    fn from(c: SMSG_STABLE_RESULT) -> Self {
        Self::SMSG_STABLE_RESULT(c)
    }
}

impl From<SMSG_PLAY_MUSIC> for ServerOpcodeMessage {
    fn from(c: SMSG_PLAY_MUSIC) -> Self {
        Self::SMSG_PLAY_MUSIC(c)
    }
}

impl From<SMSG_PLAY_OBJECT_SOUND> for ServerOpcodeMessage {
    fn from(c: SMSG_PLAY_OBJECT_SOUND) -> Self {
        Self::SMSG_PLAY_OBJECT_SOUND(Box::new(c))
    }
}

impl From<SMSG_SPELLDISPELLOG> for ServerOpcodeMessage {
    fn from(c: SMSG_SPELLDISPELLOG) -> Self {
        Self::SMSG_SPELLDISPELLOG(Box::new(c))
    }
}

impl From<MSG_QUERY_NEXT_MAIL_TIME_Server> for ServerOpcodeMessage {
    fn from(c: MSG_QUERY_NEXT_MAIL_TIME_Server) -> Self {
        Self::MSG_QUERY_NEXT_MAIL_TIME(Box::new(c))
    }
}

impl From<SMSG_RECEIVED_MAIL> for ServerOpcodeMessage {
    fn from(c: SMSG_RECEIVED_MAIL) -> Self {
        Self::SMSG_RECEIVED_MAIL(c)
    }
}

impl From<SMSG_RAID_GROUP_ONLY> for ServerOpcodeMessage {
    fn from(c: SMSG_RAID_GROUP_ONLY) -> Self {
        Self::SMSG_RAID_GROUP_ONLY(c)
    }
}

impl From<SMSG_PVP_CREDIT> for ServerOpcodeMessage {
    fn from(c: SMSG_PVP_CREDIT) -> Self {
        Self::SMSG_PVP_CREDIT(Box::new(c))
    }
}

impl From<SMSG_AUCTION_REMOVED_NOTIFICATION> for ServerOpcodeMessage {
    fn from(c: SMSG_AUCTION_REMOVED_NOTIFICATION) -> Self {
        Self::SMSG_AUCTION_REMOVED_NOTIFICATION(Box::new(c))
    }
}

impl From<SMSG_SERVER_MESSAGE> for ServerOpcodeMessage {
    fn from(c: SMSG_SERVER_MESSAGE) -> Self {
        Self::SMSG_SERVER_MESSAGE(Box::new(c))
    }
}

impl From<SMSG_LFG_OFFER_CONTINUE> for ServerOpcodeMessage {
    fn from(c: SMSG_LFG_OFFER_CONTINUE) -> Self {
        Self::SMSG_LFG_OFFER_CONTINUE(c)
    }
}

impl From<SMSG_SHOW_MAILBOX> for ServerOpcodeMessage {
    fn from(c: SMSG_SHOW_MAILBOX) -> Self {
        Self::SMSG_SHOW_MAILBOX(c)
    }
}

impl From<SMSG_CANCEL_AUTO_REPEAT> for ServerOpcodeMessage {
    fn from(c: SMSG_CANCEL_AUTO_REPEAT) -> Self {
        Self::SMSG_CANCEL_AUTO_REPEAT(c)
    }
}

impl From<SMSG_STANDSTATE_UPDATE> for ServerOpcodeMessage {
    fn from(c: SMSG_STANDSTATE_UPDATE) -> Self {
        Self::SMSG_STANDSTATE_UPDATE(c)
    }
}

impl From<SMSG_LOOT_ALL_PASSED> for ServerOpcodeMessage {
    fn from(c: SMSG_LOOT_ALL_PASSED) -> Self {
        Self::SMSG_LOOT_ALL_PASSED(Box::new(c))
    }
}

impl From<SMSG_LOOT_ROLL_WON> for ServerOpcodeMessage {
    fn from(c: SMSG_LOOT_ROLL_WON) -> Self {
        Self::SMSG_LOOT_ROLL_WON(Box::new(c))
    }
}

impl From<SMSG_LOOT_START_ROLL> for ServerOpcodeMessage {
    fn from(c: SMSG_LOOT_START_ROLL) -> Self {
        Self::SMSG_LOOT_START_ROLL(Box::new(c))
    }
}

impl From<SMSG_LOOT_ROLL> for ServerOpcodeMessage {
    fn from(c: SMSG_LOOT_ROLL) -> Self {
        Self::SMSG_LOOT_ROLL(Box::new(c))
    }
}

impl From<SMSG_LOOT_MASTER_LIST> for ServerOpcodeMessage {
    fn from(c: SMSG_LOOT_MASTER_LIST) -> Self {
        Self::SMSG_LOOT_MASTER_LIST(Box::new(c))
    }
}

impl From<SMSG_SET_FORCED_REACTIONS> for ServerOpcodeMessage {
    fn from(c: SMSG_SET_FORCED_REACTIONS) -> Self {
        Self::SMSG_SET_FORCED_REACTIONS(Box::new(c))
    }
}

impl From<SMSG_SPELL_FAILED_OTHER> for ServerOpcodeMessage {
    fn from(c: SMSG_SPELL_FAILED_OTHER) -> Self {
        Self::SMSG_SPELL_FAILED_OTHER(Box::new(c))
    }
}

impl From<SMSG_CHAT_PLAYER_NOT_FOUND> for ServerOpcodeMessage {
    fn from(c: SMSG_CHAT_PLAYER_NOT_FOUND) -> Self {
        Self::SMSG_CHAT_PLAYER_NOT_FOUND(Box::new(c))
    }
}

impl From<MSG_TALENT_WIPE_CONFIRM_Server> for ServerOpcodeMessage {
    fn from(c: MSG_TALENT_WIPE_CONFIRM_Server) -> Self {
        Self::MSG_TALENT_WIPE_CONFIRM(Box::new(c))
    }
}

impl From<SMSG_SUMMON_REQUEST> for ServerOpcodeMessage {
    fn from(c: SMSG_SUMMON_REQUEST) -> Self {
        Self::SMSG_SUMMON_REQUEST(Box::new(c))
    }
}

impl From<SMSG_MONSTER_MOVE_TRANSPORT> for ServerOpcodeMessage {
    fn from(c: SMSG_MONSTER_MOVE_TRANSPORT) -> Self {
        Self::SMSG_MONSTER_MOVE_TRANSPORT(Box::new(c))
    }
}

impl From<SMSG_PET_BROKEN> for ServerOpcodeMessage {
    fn from(_: SMSG_PET_BROKEN) -> Self {
        Self::SMSG_PET_BROKEN
    }
}

impl From<MSG_MOVE_FEATHER_FALL_Server> for ServerOpcodeMessage {
    fn from(c: MSG_MOVE_FEATHER_FALL_Server) -> Self {
        Self::MSG_MOVE_FEATHER_FALL(Box::new(c))
    }
}

impl From<SMSG_FEIGN_DEATH_RESISTED> for ServerOpcodeMessage {
    fn from(_: SMSG_FEIGN_DEATH_RESISTED) -> Self {
        Self::SMSG_FEIGN_DEATH_RESISTED
    }
}

impl From<SMSG_DUEL_COUNTDOWN> for ServerOpcodeMessage {
    fn from(c: SMSG_DUEL_COUNTDOWN) -> Self {
        Self::SMSG_DUEL_COUNTDOWN(c)
    }
}

impl From<SMSG_AREA_TRIGGER_MESSAGE> for ServerOpcodeMessage {
    fn from(c: SMSG_AREA_TRIGGER_MESSAGE) -> Self {
        Self::SMSG_AREA_TRIGGER_MESSAGE(Box::new(c))
    }
}

impl From<SMSG_LFG_ROLE_CHOSEN> for ServerOpcodeMessage {
    fn from(c: SMSG_LFG_ROLE_CHOSEN) -> Self {
        Self::SMSG_LFG_ROLE_CHOSEN(Box::new(c))
    }
}

impl From<SMSG_PLAYER_SKINNED> for ServerOpcodeMessage {
    fn from(c: SMSG_PLAYER_SKINNED) -> Self {
        Self::SMSG_PLAYER_SKINNED(c)
    }
}

impl From<SMSG_DURABILITY_DAMAGE_DEATH> for ServerOpcodeMessage {
    fn from(_: SMSG_DURABILITY_DAMAGE_DEATH) -> Self {
        Self::SMSG_DURABILITY_DAMAGE_DEATH
    }
}

impl From<SMSG_INIT_WORLD_STATES> for ServerOpcodeMessage {
    fn from(c: SMSG_INIT_WORLD_STATES) -> Self {
        Self::SMSG_INIT_WORLD_STATES(Box::new(c))
    }
}

impl From<SMSG_UPDATE_WORLD_STATE> for ServerOpcodeMessage {
    fn from(c: SMSG_UPDATE_WORLD_STATE) -> Self {
        Self::SMSG_UPDATE_WORLD_STATE(c)
    }
}

impl From<SMSG_ITEM_NAME_QUERY_RESPONSE> for ServerOpcodeMessage {
    fn from(c: SMSG_ITEM_NAME_QUERY_RESPONSE) -> Self {
        Self::SMSG_ITEM_NAME_QUERY_RESPONSE(Box::new(c))
    }
}

impl From<SMSG_PET_ACTION_FEEDBACK> for ServerOpcodeMessage {
    fn from(c: SMSG_PET_ACTION_FEEDBACK) -> Self {
        Self::SMSG_PET_ACTION_FEEDBACK(c)
    }
}

impl From<SMSG_CHAR_RENAME> for ServerOpcodeMessage {
    fn from(c: SMSG_CHAR_RENAME) -> Self {
        Self::SMSG_CHAR_RENAME(Box::new(c))
    }
}

impl From<SMSG_INSTANCE_SAVE_CREATED> for ServerOpcodeMessage {
    fn from(c: SMSG_INSTANCE_SAVE_CREATED) -> Self {
        Self::SMSG_INSTANCE_SAVE_CREATED(c)
    }
}

impl From<SMSG_RAID_INSTANCE_INFO> for ServerOpcodeMessage {
    fn from(c: SMSG_RAID_INSTANCE_INFO) -> Self {
        Self::SMSG_RAID_INSTANCE_INFO(Box::new(c))
    }
}

impl From<SMSG_PLAY_SOUND> for ServerOpcodeMessage {
    fn from(c: SMSG_PLAY_SOUND) -> Self {
        Self::SMSG_PLAY_SOUND(c)
    }
}

impl From<SMSG_BATTLEFIELD_STATUS> for ServerOpcodeMessage {
    fn from(c: SMSG_BATTLEFIELD_STATUS) -> Self {
        Self::SMSG_BATTLEFIELD_STATUS(Box::new(c))
    }
}

impl From<MSG_INSPECT_HONOR_STATS_Server> for ServerOpcodeMessage {
    fn from(c: MSG_INSPECT_HONOR_STATS_Server) -> Self {
        Self::MSG_INSPECT_HONOR_STATS(Box::new(c))
    }
}

impl From<SMSG_FORCE_WALK_SPEED_CHANGE> for ServerOpcodeMessage {
    fn from(c: SMSG_FORCE_WALK_SPEED_CHANGE) -> Self {
        Self::SMSG_FORCE_WALK_SPEED_CHANGE(Box::new(c))
    }
}

impl From<SMSG_FORCE_SWIM_BACK_SPEED_CHANGE> for ServerOpcodeMessage {
    fn from(c: SMSG_FORCE_SWIM_BACK_SPEED_CHANGE) -> Self {
        Self::SMSG_FORCE_SWIM_BACK_SPEED_CHANGE(Box::new(c))
    }
}

impl From<SMSG_FORCE_TURN_RATE_CHANGE> for ServerOpcodeMessage {
    fn from(c: SMSG_FORCE_TURN_RATE_CHANGE) -> Self {
        Self::SMSG_FORCE_TURN_RATE_CHANGE(Box::new(c))
    }
}

impl From<SMSG_AREA_SPIRIT_HEALER_TIME> for ServerOpcodeMessage {
    fn from(c: SMSG_AREA_SPIRIT_HEALER_TIME) -> Self {
        Self::SMSG_AREA_SPIRIT_HEALER_TIME(Box::new(c))
    }
}

impl From<SMSG_WARDEN_DATA> for ServerOpcodeMessage {
    fn from(c: SMSG_WARDEN_DATA) -> Self {
        Self::SMSG_WARDEN_DATA(Box::new(c))
    }
}

impl From<SMSG_GROUP_JOINED_BATTLEGROUND> for ServerOpcodeMessage {
    fn from(c: SMSG_GROUP_JOINED_BATTLEGROUND) -> Self {
        Self::SMSG_GROUP_JOINED_BATTLEGROUND(c)
    }
}

impl From<MSG_BATTLEGROUND_PLAYER_POSITIONS_Server> for ServerOpcodeMessage {
    fn from(c: MSG_BATTLEGROUND_PLAYER_POSITIONS_Server) -> Self {
        Self::MSG_BATTLEGROUND_PLAYER_POSITIONS(Box::new(c))
    }
}

impl From<SMSG_BINDER_CONFIRM> for ServerOpcodeMessage {
    fn from(c: SMSG_BINDER_CONFIRM) -> Self {
        Self::SMSG_BINDER_CONFIRM(Box::new(c))
    }
}

impl From<SMSG_BATTLEGROUND_PLAYER_JOINED> for ServerOpcodeMessage {
    fn from(c: SMSG_BATTLEGROUND_PLAYER_JOINED) -> Self {
        Self::SMSG_BATTLEGROUND_PLAYER_JOINED(c)
    }
}

impl From<SMSG_BATTLEGROUND_PLAYER_LEFT> for ServerOpcodeMessage {
    fn from(c: SMSG_BATTLEGROUND_PLAYER_LEFT) -> Self {
        Self::SMSG_BATTLEGROUND_PLAYER_LEFT(c)
    }
}

impl From<SMSG_ADDON_INFO> for ServerOpcodeMessage {
    fn from(c: SMSG_ADDON_INFO) -> Self {
        Self::SMSG_ADDON_INFO(Box::new(c))
    }
}

impl From<SMSG_PET_UNLEARN_CONFIRM> for ServerOpcodeMessage {
    fn from(c: SMSG_PET_UNLEARN_CONFIRM) -> Self {
        Self::SMSG_PET_UNLEARN_CONFIRM(Box::new(c))
    }
}

impl From<SMSG_PARTY_MEMBER_STATS_FULL> for ServerOpcodeMessage {
    fn from(c: SMSG_PARTY_MEMBER_STATS_FULL) -> Self {
        Self::SMSG_PARTY_MEMBER_STATS_FULL(Box::new(c))
    }
}

impl From<SMSG_WEATHER> for ServerOpcodeMessage {
    fn from(c: SMSG_WEATHER) -> Self {
        Self::SMSG_WEATHER(Box::new(c))
    }
}

impl From<SMSG_RAID_INSTANCE_MESSAGE> for ServerOpcodeMessage {
    fn from(c: SMSG_RAID_INSTANCE_MESSAGE) -> Self {
        Self::SMSG_RAID_INSTANCE_MESSAGE(Box::new(c))
    }
}

impl From<SMSG_COMPRESSED_MOVES> for ServerOpcodeMessage {
    fn from(c: SMSG_COMPRESSED_MOVES) -> Self {
        Self::SMSG_COMPRESSED_MOVES(Box::new(c))
    }
}

impl From<SMSG_CHAT_RESTRICTED> for ServerOpcodeMessage {
    fn from(c: SMSG_CHAT_RESTRICTED) -> Self {
        Self::SMSG_CHAT_RESTRICTED(c)
    }
}

impl From<SMSG_SPLINE_SET_RUN_SPEED> for ServerOpcodeMessage {
    fn from(c: SMSG_SPLINE_SET_RUN_SPEED) -> Self {
        Self::SMSG_SPLINE_SET_RUN_SPEED(Box::new(c))
    }
}

impl From<SMSG_SPLINE_SET_RUN_BACK_SPEED> for ServerOpcodeMessage {
    fn from(c: SMSG_SPLINE_SET_RUN_BACK_SPEED) -> Self {
        Self::SMSG_SPLINE_SET_RUN_BACK_SPEED(Box::new(c))
    }
}

impl From<SMSG_SPLINE_SET_SWIM_SPEED> for ServerOpcodeMessage {
    fn from(c: SMSG_SPLINE_SET_SWIM_SPEED) -> Self {
        Self::SMSG_SPLINE_SET_SWIM_SPEED(Box::new(c))
    }
}

impl From<SMSG_SPLINE_SET_WALK_SPEED> for ServerOpcodeMessage {
    fn from(c: SMSG_SPLINE_SET_WALK_SPEED) -> Self {
        Self::SMSG_SPLINE_SET_WALK_SPEED(Box::new(c))
    }
}

impl From<SMSG_SPLINE_SET_SWIM_BACK_SPEED> for ServerOpcodeMessage {
    fn from(c: SMSG_SPLINE_SET_SWIM_BACK_SPEED) -> Self {
        Self::SMSG_SPLINE_SET_SWIM_BACK_SPEED(Box::new(c))
    }
}

impl From<SMSG_SPLINE_SET_TURN_RATE> for ServerOpcodeMessage {
    fn from(c: SMSG_SPLINE_SET_TURN_RATE) -> Self {
        Self::SMSG_SPLINE_SET_TURN_RATE(Box::new(c))
    }
}

impl From<SMSG_SPLINE_MOVE_UNROOT> for ServerOpcodeMessage {
    fn from(c: SMSG_SPLINE_MOVE_UNROOT) -> Self {
        Self::SMSG_SPLINE_MOVE_UNROOT(c)
    }
}

impl From<SMSG_SPLINE_MOVE_FEATHER_FALL> for ServerOpcodeMessage {
    fn from(c: SMSG_SPLINE_MOVE_FEATHER_FALL) -> Self {
        Self::SMSG_SPLINE_MOVE_FEATHER_FALL(c)
    }
}

impl From<SMSG_SPLINE_MOVE_NORMAL_FALL> for ServerOpcodeMessage {
    fn from(c: SMSG_SPLINE_MOVE_NORMAL_FALL) -> Self {
        Self::SMSG_SPLINE_MOVE_NORMAL_FALL(c)
    }
}

impl From<SMSG_SPLINE_MOVE_SET_HOVER> for ServerOpcodeMessage {
    fn from(c: SMSG_SPLINE_MOVE_SET_HOVER) -> Self {
        Self::SMSG_SPLINE_MOVE_SET_HOVER(c)
    }
}

impl From<SMSG_SPLINE_MOVE_UNSET_HOVER> for ServerOpcodeMessage {
    fn from(c: SMSG_SPLINE_MOVE_UNSET_HOVER) -> Self {
        Self::SMSG_SPLINE_MOVE_UNSET_HOVER(c)
    }
}

impl From<SMSG_SPLINE_MOVE_WATER_WALK> for ServerOpcodeMessage {
    fn from(c: SMSG_SPLINE_MOVE_WATER_WALK) -> Self {
        Self::SMSG_SPLINE_MOVE_WATER_WALK(c)
    }
}

impl From<SMSG_SPLINE_MOVE_LAND_WALK> for ServerOpcodeMessage {
    fn from(c: SMSG_SPLINE_MOVE_LAND_WALK) -> Self {
        Self::SMSG_SPLINE_MOVE_LAND_WALK(c)
    }
}

impl From<SMSG_SPLINE_MOVE_START_SWIM> for ServerOpcodeMessage {
    fn from(c: SMSG_SPLINE_MOVE_START_SWIM) -> Self {
        Self::SMSG_SPLINE_MOVE_START_SWIM(c)
    }
}

impl From<SMSG_SPLINE_MOVE_STOP_SWIM> for ServerOpcodeMessage {
    fn from(c: SMSG_SPLINE_MOVE_STOP_SWIM) -> Self {
        Self::SMSG_SPLINE_MOVE_STOP_SWIM(c)
    }
}

impl From<SMSG_SPLINE_MOVE_SET_RUN_MODE> for ServerOpcodeMessage {
    fn from(c: SMSG_SPLINE_MOVE_SET_RUN_MODE) -> Self {
        Self::SMSG_SPLINE_MOVE_SET_RUN_MODE(c)
    }
}

impl From<SMSG_SPLINE_MOVE_SET_WALK_MODE> for ServerOpcodeMessage {
    fn from(c: SMSG_SPLINE_MOVE_SET_WALK_MODE) -> Self {
        Self::SMSG_SPLINE_MOVE_SET_WALK_MODE(c)
    }
}

impl From<MSG_MOVE_TIME_SKIPPED_Server> for ServerOpcodeMessage {
    fn from(c: MSG_MOVE_TIME_SKIPPED_Server) -> Self {
        Self::MSG_MOVE_TIME_SKIPPED(Box::new(c))
    }
}

impl From<SMSG_SPLINE_MOVE_ROOT> for ServerOpcodeMessage {
    fn from(c: SMSG_SPLINE_MOVE_ROOT) -> Self {
        Self::SMSG_SPLINE_MOVE_ROOT(c)
    }
}

impl From<SMSG_INVALIDATE_PLAYER> for ServerOpcodeMessage {
    fn from(c: SMSG_INVALIDATE_PLAYER) -> Self {
        Self::SMSG_INVALIDATE_PLAYER(c)
    }
}

impl From<SMSG_INSTANCE_RESET> for ServerOpcodeMessage {
    fn from(c: SMSG_INSTANCE_RESET) -> Self {
        Self::SMSG_INSTANCE_RESET(c)
    }
}

impl From<SMSG_INSTANCE_RESET_FAILED> for ServerOpcodeMessage {
    fn from(c: SMSG_INSTANCE_RESET_FAILED) -> Self {
        Self::SMSG_INSTANCE_RESET_FAILED(c)
    }
}

impl From<SMSG_UPDATE_LAST_INSTANCE> for ServerOpcodeMessage {
    fn from(c: SMSG_UPDATE_LAST_INSTANCE) -> Self {
        Self::SMSG_UPDATE_LAST_INSTANCE(c)
    }
}

impl From<MSG_RAID_TARGET_UPDATE_Server> for ServerOpcodeMessage {
    fn from(c: MSG_RAID_TARGET_UPDATE_Server) -> Self {
        Self::MSG_RAID_TARGET_UPDATE(Box::new(c))
    }
}

impl From<MSG_RAID_READY_CHECK_Server> for ServerOpcodeMessage {
    fn from(c: MSG_RAID_READY_CHECK_Server) -> Self {
        Self::MSG_RAID_READY_CHECK(Box::new(c))
    }
}

impl From<SMSG_PET_ACTION_SOUND> for ServerOpcodeMessage {
    fn from(c: SMSG_PET_ACTION_SOUND) -> Self {
        Self::SMSG_PET_ACTION_SOUND(Box::new(c))
    }
}

impl From<SMSG_PET_DISMISS_SOUND> for ServerOpcodeMessage {
    fn from(c: SMSG_PET_DISMISS_SOUND) -> Self {
        Self::SMSG_PET_DISMISS_SOUND(Box::new(c))
    }
}

impl From<SMSG_GM_TICKET_STATUS_UPDATE> for ServerOpcodeMessage {
    fn from(c: SMSG_GM_TICKET_STATUS_UPDATE) -> Self {
        Self::SMSG_GM_TICKET_STATUS_UPDATE(c)
    }
}

impl From<MSG_SET_DUNGEON_DIFFICULTY_Server> for ServerOpcodeMessage {
    fn from(c: MSG_SET_DUNGEON_DIFFICULTY_Server) -> Self {
        Self::MSG_SET_DUNGEON_DIFFICULTY(c)
    }
}

impl From<SMSG_UPDATE_INSTANCE_OWNERSHIP> for ServerOpcodeMessage {
    fn from(c: SMSG_UPDATE_INSTANCE_OWNERSHIP) -> Self {
        Self::SMSG_UPDATE_INSTANCE_OWNERSHIP(c)
    }
}

impl From<SMSG_CHAT_PLAYER_AMBIGUOUS> for ServerOpcodeMessage {
    fn from(c: SMSG_CHAT_PLAYER_AMBIGUOUS) -> Self {
        Self::SMSG_CHAT_PLAYER_AMBIGUOUS(Box::new(c))
    }
}

impl From<SMSG_SPELLINSTAKILLLOG> for ServerOpcodeMessage {
    fn from(c: SMSG_SPELLINSTAKILLLOG) -> Self {
        Self::SMSG_SPELLINSTAKILLLOG(Box::new(c))
    }
}

impl From<SMSG_SPELL_UPDATE_CHAIN_TARGETS> for ServerOpcodeMessage {
    fn from(c: SMSG_SPELL_UPDATE_CHAIN_TARGETS) -> Self {
        Self::SMSG_SPELL_UPDATE_CHAIN_TARGETS(Box::new(c))
    }
}

impl From<SMSG_SPELLSTEALLOG> for ServerOpcodeMessage {
    fn from(c: SMSG_SPELLSTEALLOG) -> Self {
        Self::SMSG_SPELLSTEALLOG(Box::new(c))
    }
}

impl From<SMSG_DEFENSE_MESSAGE> for ServerOpcodeMessage {
    fn from(c: SMSG_DEFENSE_MESSAGE) -> Self {
        Self::SMSG_DEFENSE_MESSAGE(Box::new(c))
    }
}

impl From<SMSG_INSTANCE_DIFFICULTY> for ServerOpcodeMessage {
    fn from(c: SMSG_INSTANCE_DIFFICULTY) -> Self {
        Self::SMSG_INSTANCE_DIFFICULTY(c)
    }
}

impl From<SMSG_MOTD> for ServerOpcodeMessage {
    fn from(c: SMSG_MOTD) -> Self {
        Self::SMSG_MOTD(Box::new(c))
    }
}

impl From<SMSG_MOVE_SET_CAN_FLY> for ServerOpcodeMessage {
    fn from(c: SMSG_MOVE_SET_CAN_FLY) -> Self {
        Self::SMSG_MOVE_SET_CAN_FLY(Box::new(c))
    }
}

impl From<SMSG_MOVE_UNSET_CAN_FLY> for ServerOpcodeMessage {
    fn from(c: SMSG_MOVE_UNSET_CAN_FLY) -> Self {
        Self::SMSG_MOVE_UNSET_CAN_FLY(Box::new(c))
    }
}

impl From<SMSG_ARENA_TEAM_COMMAND_RESULT> for ServerOpcodeMessage {
    fn from(c: SMSG_ARENA_TEAM_COMMAND_RESULT) -> Self {
        Self::SMSG_ARENA_TEAM_COMMAND_RESULT(Box::new(c))
    }
}

impl From<SMSG_ARENA_TEAM_QUERY_RESPONSE> for ServerOpcodeMessage {
    fn from(c: SMSG_ARENA_TEAM_QUERY_RESPONSE) -> Self {
        Self::SMSG_ARENA_TEAM_QUERY_RESPONSE(Box::new(c))
    }
}

impl From<SMSG_ARENA_TEAM_ROSTER> for ServerOpcodeMessage {
    fn from(c: SMSG_ARENA_TEAM_ROSTER) -> Self {
        Self::SMSG_ARENA_TEAM_ROSTER(Box::new(c))
    }
}

impl From<SMSG_ARENA_TEAM_INVITE> for ServerOpcodeMessage {
    fn from(c: SMSG_ARENA_TEAM_INVITE) -> Self {
        Self::SMSG_ARENA_TEAM_INVITE(Box::new(c))
    }
}

impl From<SMSG_ARENA_TEAM_EVENT> for ServerOpcodeMessage {
    fn from(c: SMSG_ARENA_TEAM_EVENT) -> Self {
        Self::SMSG_ARENA_TEAM_EVENT(Box::new(c))
    }
}

impl From<SMSG_ARENA_TEAM_STATS> for ServerOpcodeMessage {
    fn from(c: SMSG_ARENA_TEAM_STATS) -> Self {
        Self::SMSG_ARENA_TEAM_STATS(Box::new(c))
    }
}

impl From<SMSG_UPDATE_LFG_LIST> for ServerOpcodeMessage {
    fn from(c: SMSG_UPDATE_LFG_LIST) -> Self {
        Self::SMSG_UPDATE_LFG_LIST(Box::new(c))
    }
}

impl From<SMSG_LFG_PROPOSAL_UPDATE> for ServerOpcodeMessage {
    fn from(c: SMSG_LFG_PROPOSAL_UPDATE) -> Self {
        Self::SMSG_LFG_PROPOSAL_UPDATE(Box::new(c))
    }
}

impl From<SMSG_LFG_ROLE_CHECK_UPDATE> for ServerOpcodeMessage {
    fn from(c: SMSG_LFG_ROLE_CHECK_UPDATE) -> Self {
        Self::SMSG_LFG_ROLE_CHECK_UPDATE(Box::new(c))
    }
}

impl From<SMSG_LFG_JOIN_RESULT> for ServerOpcodeMessage {
    fn from(c: SMSG_LFG_JOIN_RESULT) -> Self {
        Self::SMSG_LFG_JOIN_RESULT(Box::new(c))
    }
}

impl From<SMSG_LFG_QUEUE_STATUS> for ServerOpcodeMessage {
    fn from(c: SMSG_LFG_QUEUE_STATUS) -> Self {
        Self::SMSG_LFG_QUEUE_STATUS(Box::new(c))
    }
}

impl From<SMSG_LFG_UPDATE_PLAYER> for ServerOpcodeMessage {
    fn from(c: SMSG_LFG_UPDATE_PLAYER) -> Self {
        Self::SMSG_LFG_UPDATE_PLAYER(Box::new(c))
    }
}

impl From<SMSG_LFG_UPDATE_PARTY> for ServerOpcodeMessage {
    fn from(c: SMSG_LFG_UPDATE_PARTY) -> Self {
        Self::SMSG_LFG_UPDATE_PARTY(Box::new(c))
    }
}

impl From<SMSG_LFG_UPDATE_SEARCH> for ServerOpcodeMessage {
    fn from(c: SMSG_LFG_UPDATE_SEARCH) -> Self {
        Self::SMSG_LFG_UPDATE_SEARCH(c)
    }
}

impl From<SMSG_LFG_BOOT_PROPOSAL_UPDATE> for ServerOpcodeMessage {
    fn from(c: SMSG_LFG_BOOT_PROPOSAL_UPDATE) -> Self {
        Self::SMSG_LFG_BOOT_PROPOSAL_UPDATE(Box::new(c))
    }
}

impl From<SMSG_LFG_PLAYER_INFO> for ServerOpcodeMessage {
    fn from(c: SMSG_LFG_PLAYER_INFO) -> Self {
        Self::SMSG_LFG_PLAYER_INFO(Box::new(c))
    }
}

impl From<SMSG_LFG_PARTY_INFO> for ServerOpcodeMessage {
    fn from(c: SMSG_LFG_PARTY_INFO) -> Self {
        Self::SMSG_LFG_PARTY_INFO(Box::new(c))
    }
}

impl From<SMSG_TITLE_EARNED> for ServerOpcodeMessage {
    fn from(c: SMSG_TITLE_EARNED) -> Self {
        Self::SMSG_TITLE_EARNED(c)
    }
}

impl From<SMSG_ARENA_ERROR> for ServerOpcodeMessage {
    fn from(c: SMSG_ARENA_ERROR) -> Self {
        Self::SMSG_ARENA_ERROR(c)
    }
}

impl From<MSG_INSPECT_ARENA_TEAMS_Server> for ServerOpcodeMessage {
    fn from(c: MSG_INSPECT_ARENA_TEAMS_Server) -> Self {
        Self::MSG_INSPECT_ARENA_TEAMS(Box::new(c))
    }
}

impl From<SMSG_DEATH_RELEASE_LOC> for ServerOpcodeMessage {
    fn from(c: SMSG_DEATH_RELEASE_LOC) -> Self {
        Self::SMSG_DEATH_RELEASE_LOC(Box::new(c))
    }
}

impl From<SMSG_FORCED_DEATH_UPDATE> for ServerOpcodeMessage {
    fn from(_: SMSG_FORCED_DEATH_UPDATE) -> Self {
        Self::SMSG_FORCED_DEATH_UPDATE
    }
}

impl From<MSG_MOVE_SET_FLIGHT_SPEED_Server> for ServerOpcodeMessage {
    fn from(c: MSG_MOVE_SET_FLIGHT_SPEED_Server) -> Self {
        Self::MSG_MOVE_SET_FLIGHT_SPEED(Box::new(c))
    }
}

impl From<SMSG_FORCE_FLIGHT_SPEED_CHANGE> for ServerOpcodeMessage {
    fn from(c: SMSG_FORCE_FLIGHT_SPEED_CHANGE) -> Self {
        Self::SMSG_FORCE_FLIGHT_SPEED_CHANGE(Box::new(c))
    }
}

impl From<SMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE> for ServerOpcodeMessage {
    fn from(c: SMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE) -> Self {
        Self::SMSG_FORCE_FLIGHT_BACK_SPEED_CHANGE(Box::new(c))
    }
}

impl From<SMSG_SPLINE_SET_FLIGHT_SPEED> for ServerOpcodeMessage {
    fn from(c: SMSG_SPLINE_SET_FLIGHT_SPEED) -> Self {
        Self::SMSG_SPLINE_SET_FLIGHT_SPEED(Box::new(c))
    }
}

impl From<SMSG_SPLINE_SET_FLIGHT_BACK_SPEED> for ServerOpcodeMessage {
    fn from(c: SMSG_SPLINE_SET_FLIGHT_BACK_SPEED) -> Self {
        Self::SMSG_SPLINE_SET_FLIGHT_BACK_SPEED(Box::new(c))
    }
}

impl From<SMSG_FLIGHT_SPLINE_SYNC> for ServerOpcodeMessage {
    fn from(c: SMSG_FLIGHT_SPLINE_SYNC) -> Self {
        Self::SMSG_FLIGHT_SPLINE_SYNC(Box::new(c))
    }
}

impl From<SMSG_REALM_SPLIT> for ServerOpcodeMessage {
    fn from(c: SMSG_REALM_SPLIT) -> Self {
        Self::SMSG_REALM_SPLIT(Box::new(c))
    }
}

impl From<SMSG_TIME_SYNC_REQ> for ServerOpcodeMessage {
    fn from(c: SMSG_TIME_SYNC_REQ) -> Self {
        Self::SMSG_TIME_SYNC_REQ(c)
    }
}

impl From<SMSG_RESET_FAILED_NOTIFY> for ServerOpcodeMessage {
    fn from(c: SMSG_RESET_FAILED_NOTIFY) -> Self {
        Self::SMSG_RESET_FAILED_NOTIFY(c)
    }
}

impl From<SMSG_LFG_DISABLED> for ServerOpcodeMessage {
    fn from(_: SMSG_LFG_DISABLED) -> Self {
        Self::SMSG_LFG_DISABLED
    }
}

impl From<SMSG_UPDATE_COMBO_POINTS> for ServerOpcodeMessage {
    fn from(c: SMSG_UPDATE_COMBO_POINTS) -> Self {
        Self::SMSG_UPDATE_COMBO_POINTS(Box::new(c))
    }
}

impl From<SMSG_DISMOUNT> for ServerOpcodeMessage {
    fn from(c: SMSG_DISMOUNT) -> Self {
        Self::SMSG_DISMOUNT(c)
    }
}

impl From<MSG_MOVE_UPDATE_CAN_FLY_Server> for ServerOpcodeMessage {
    fn from(c: MSG_MOVE_UPDATE_CAN_FLY_Server) -> Self {
        Self::MSG_MOVE_UPDATE_CAN_FLY(Box::new(c))
    }
}

impl From<MSG_RAID_READY_CHECK_CONFIRM_Server> for ServerOpcodeMessage {
    fn from(c: MSG_RAID_READY_CHECK_CONFIRM_Server) -> Self {
        Self::MSG_RAID_READY_CHECK_CONFIRM(Box::new(c))
    }
}

impl From<SMSG_GM_MESSAGECHAT> for ServerOpcodeMessage {
    fn from(c: SMSG_GM_MESSAGECHAT) -> Self {
        Self::SMSG_GM_MESSAGECHAT(Box::new(c))
    }
}

impl From<SMSG_CLEAR_TARGET> for ServerOpcodeMessage {
    fn from(c: SMSG_CLEAR_TARGET) -> Self {
        Self::SMSG_CLEAR_TARGET(c)
    }
}

impl From<SMSG_CROSSED_INEBRIATION_THRESHOLD> for ServerOpcodeMessage {
    fn from(c: SMSG_CROSSED_INEBRIATION_THRESHOLD) -> Self {
        Self::SMSG_CROSSED_INEBRIATION_THRESHOLD(Box::new(c))
    }
}

impl From<SMSG_KICK_REASON> for ServerOpcodeMessage {
    fn from(c: SMSG_KICK_REASON) -> Self {
        Self::SMSG_KICK_REASON(Box::new(c))
    }
}

impl From<SMSG_COMPLAIN_RESULT> for ServerOpcodeMessage {
    fn from(c: SMSG_COMPLAIN_RESULT) -> Self {
        Self::SMSG_COMPLAIN_RESULT(c)
    }
}

impl From<SMSG_FEATURE_SYSTEM_STATUS> for ServerOpcodeMessage {
    fn from(c: SMSG_FEATURE_SYSTEM_STATUS) -> Self {
        Self::SMSG_FEATURE_SYSTEM_STATUS(c)
    }
}

impl From<SMSG_CHANNEL_MEMBER_COUNT> for ServerOpcodeMessage {
    fn from(c: SMSG_CHANNEL_MEMBER_COUNT) -> Self {
        Self::SMSG_CHANNEL_MEMBER_COUNT(Box::new(c))
    }
}

impl From<SMSG_GUILD_BANK_LIST> for ServerOpcodeMessage {
    fn from(c: SMSG_GUILD_BANK_LIST) -> Self {
        Self::SMSG_GUILD_BANK_LIST(Box::new(c))
    }
}

impl From<MSG_GUILD_BANK_LOG_QUERY_Server> for ServerOpcodeMessage {
    fn from(c: MSG_GUILD_BANK_LOG_QUERY_Server) -> Self {
        Self::MSG_GUILD_BANK_LOG_QUERY(Box::new(c))
    }
}

impl From<SMSG_USERLIST_ADD> for ServerOpcodeMessage {
    fn from(c: SMSG_USERLIST_ADD) -> Self {
        Self::SMSG_USERLIST_ADD(Box::new(c))
    }
}

impl From<SMSG_USERLIST_REMOVE> for ServerOpcodeMessage {
    fn from(c: SMSG_USERLIST_REMOVE) -> Self {
        Self::SMSG_USERLIST_REMOVE(Box::new(c))
    }
}

impl From<SMSG_USERLIST_UPDATE> for ServerOpcodeMessage {
    fn from(c: SMSG_USERLIST_UPDATE) -> Self {
        Self::SMSG_USERLIST_UPDATE(Box::new(c))
    }
}

impl From<SMSG_INSPECT_TALENT> for ServerOpcodeMessage {
    fn from(c: SMSG_INSPECT_TALENT) -> Self {
        Self::SMSG_INSPECT_TALENT(Box::new(c))
    }
}

impl From<SMSG_LOOT_LIST> for ServerOpcodeMessage {
    fn from(c: SMSG_LOOT_LIST) -> Self {
        Self::SMSG_LOOT_LIST(Box::new(c))
    }
}

impl From<MSG_GUILD_PERMISSIONS_Server> for ServerOpcodeMessage {
    fn from(c: MSG_GUILD_PERMISSIONS_Server) -> Self {
        Self::MSG_GUILD_PERMISSIONS(Box::new(c))
    }
}

impl From<MSG_GUILD_BANK_MONEY_WITHDRAWN_Server> for ServerOpcodeMessage {
    fn from(c: MSG_GUILD_BANK_MONEY_WITHDRAWN_Server) -> Self {
        Self::MSG_GUILD_BANK_MONEY_WITHDRAWN(c)
    }
}

impl From<MSG_GUILD_EVENT_LOG_QUERY_Server> for ServerOpcodeMessage {
    fn from(c: MSG_GUILD_EVENT_LOG_QUERY_Server) -> Self {
        Self::MSG_GUILD_EVENT_LOG_QUERY(Box::new(c))
    }
}

impl From<SMSG_MIRRORIMAGE_DATA> for ServerOpcodeMessage {
    fn from(c: SMSG_MIRRORIMAGE_DATA) -> Self {
        Self::SMSG_MIRRORIMAGE_DATA(Box::new(c))
    }
}

impl From<MSG_QUERY_GUILD_BANK_TEXT_Server> for ServerOpcodeMessage {
    fn from(c: MSG_QUERY_GUILD_BANK_TEXT_Server) -> Self {
        Self::MSG_QUERY_GUILD_BANK_TEXT(Box::new(c))
    }
}

impl From<SMSG_OVERRIDE_LIGHT> for ServerOpcodeMessage {
    fn from(c: SMSG_OVERRIDE_LIGHT) -> Self {
        Self::SMSG_OVERRIDE_LIGHT(Box::new(c))
    }
}

impl From<SMSG_TOTEM_CREATED> for ServerOpcodeMessage {
    fn from(c: SMSG_TOTEM_CREATED) -> Self {
        Self::SMSG_TOTEM_CREATED(Box::new(c))
    }
}

impl From<SMSG_QUESTGIVER_STATUS_MULTIPLE> for ServerOpcodeMessage {
    fn from(c: SMSG_QUESTGIVER_STATUS_MULTIPLE) -> Self {
        Self::SMSG_QUESTGIVER_STATUS_MULTIPLE(Box::new(c))
    }
}

impl From<SMSG_SET_PLAYER_DECLINED_NAMES_RESULT> for ServerOpcodeMessage {
    fn from(c: SMSG_SET_PLAYER_DECLINED_NAMES_RESULT) -> Self {
        Self::SMSG_SET_PLAYER_DECLINED_NAMES_RESULT(Box::new(c))
    }
}

impl From<SMSG_SEND_UNLEARN_SPELLS> for ServerOpcodeMessage {
    fn from(c: SMSG_SEND_UNLEARN_SPELLS) -> Self {
        Self::SMSG_SEND_UNLEARN_SPELLS(Box::new(c))
    }
}

impl From<SMSG_PROPOSE_LEVEL_GRANT> for ServerOpcodeMessage {
    fn from(c: SMSG_PROPOSE_LEVEL_GRANT) -> Self {
        Self::SMSG_PROPOSE_LEVEL_GRANT(c)
    }
}

impl From<SMSG_REFER_A_FRIEND_FAILURE> for ServerOpcodeMessage {
    fn from(c: SMSG_REFER_A_FRIEND_FAILURE) -> Self {
        Self::SMSG_REFER_A_FRIEND_FAILURE(Box::new(c))
    }
}

impl From<SMSG_SPLINE_MOVE_SET_FLYING> for ServerOpcodeMessage {
    fn from(c: SMSG_SPLINE_MOVE_SET_FLYING) -> Self {
        Self::SMSG_SPLINE_MOVE_SET_FLYING(c)
    }
}

impl From<SMSG_SPLINE_MOVE_UNSET_FLYING> for ServerOpcodeMessage {
    fn from(c: SMSG_SPLINE_MOVE_UNSET_FLYING) -> Self {
        Self::SMSG_SPLINE_MOVE_UNSET_FLYING(c)
    }
}

impl From<SMSG_ENABLE_BARBER_SHOP> for ServerOpcodeMessage {
    fn from(_: SMSG_ENABLE_BARBER_SHOP) -> Self {
        Self::SMSG_ENABLE_BARBER_SHOP
    }
}

impl From<SMSG_BARBER_SHOP_RESULT> for ServerOpcodeMessage {
    fn from(c: SMSG_BARBER_SHOP_RESULT) -> Self {
        Self::SMSG_BARBER_SHOP_RESULT(c)
    }
}

impl From<SMSG_CALENDAR_SEND_CALENDAR> for ServerOpcodeMessage {
    fn from(c: SMSG_CALENDAR_SEND_CALENDAR) -> Self {
        Self::SMSG_CALENDAR_SEND_CALENDAR(Box::new(c))
    }
}

impl From<SMSG_CALENDAR_SEND_EVENT> for ServerOpcodeMessage {
    fn from(c: SMSG_CALENDAR_SEND_EVENT) -> Self {
        Self::SMSG_CALENDAR_SEND_EVENT(Box::new(c))
    }
}

impl From<SMSG_CALENDAR_FILTER_GUILD> for ServerOpcodeMessage {
    fn from(c: SMSG_CALENDAR_FILTER_GUILD) -> Self {
        Self::SMSG_CALENDAR_FILTER_GUILD(Box::new(c))
    }
}

impl From<SMSG_CALENDAR_ARENA_TEAM> for ServerOpcodeMessage {
    fn from(c: SMSG_CALENDAR_ARENA_TEAM) -> Self {
        Self::SMSG_CALENDAR_ARENA_TEAM(Box::new(c))
    }
}

impl From<SMSG_CALENDAR_EVENT_INVITE> for ServerOpcodeMessage {
    fn from(c: SMSG_CALENDAR_EVENT_INVITE) -> Self {
        Self::SMSG_CALENDAR_EVENT_INVITE(Box::new(c))
    }
}

impl From<SMSG_CALENDAR_EVENT_INVITE_REMOVED> for ServerOpcodeMessage {
    fn from(c: SMSG_CALENDAR_EVENT_INVITE_REMOVED) -> Self {
        Self::SMSG_CALENDAR_EVENT_INVITE_REMOVED(Box::new(c))
    }
}

impl From<SMSG_CALENDAR_EVENT_STATUS> for ServerOpcodeMessage {
    fn from(c: SMSG_CALENDAR_EVENT_STATUS) -> Self {
        Self::SMSG_CALENDAR_EVENT_STATUS(Box::new(c))
    }
}

impl From<SMSG_CALENDAR_COMMAND_RESULT> for ServerOpcodeMessage {
    fn from(c: SMSG_CALENDAR_COMMAND_RESULT) -> Self {
        Self::SMSG_CALENDAR_COMMAND_RESULT(Box::new(c))
    }
}

impl From<SMSG_CALENDAR_RAID_LOCKOUT_ADDED> for ServerOpcodeMessage {
    fn from(c: SMSG_CALENDAR_RAID_LOCKOUT_ADDED) -> Self {
        Self::SMSG_CALENDAR_RAID_LOCKOUT_ADDED(Box::new(c))
    }
}

impl From<SMSG_CALENDAR_RAID_LOCKOUT_REMOVED> for ServerOpcodeMessage {
    fn from(c: SMSG_CALENDAR_RAID_LOCKOUT_REMOVED) -> Self {
        Self::SMSG_CALENDAR_RAID_LOCKOUT_REMOVED(Box::new(c))
    }
}

impl From<SMSG_CALENDAR_EVENT_INVITE_ALERT> for ServerOpcodeMessage {
    fn from(c: SMSG_CALENDAR_EVENT_INVITE_ALERT) -> Self {
        Self::SMSG_CALENDAR_EVENT_INVITE_ALERT(Box::new(c))
    }
}

impl From<SMSG_CALENDAR_EVENT_INVITE_REMOVED_ALERT> for ServerOpcodeMessage {
    fn from(c: SMSG_CALENDAR_EVENT_INVITE_REMOVED_ALERT) -> Self {
        Self::SMSG_CALENDAR_EVENT_INVITE_REMOVED_ALERT(Box::new(c))
    }
}

impl From<SMSG_CALENDAR_EVENT_REMOVED_ALERT> for ServerOpcodeMessage {
    fn from(c: SMSG_CALENDAR_EVENT_REMOVED_ALERT) -> Self {
        Self::SMSG_CALENDAR_EVENT_REMOVED_ALERT(Box::new(c))
    }
}

impl From<SMSG_CALENDAR_EVENT_UPDATED_ALERT> for ServerOpcodeMessage {
    fn from(c: SMSG_CALENDAR_EVENT_UPDATED_ALERT) -> Self {
        Self::SMSG_CALENDAR_EVENT_UPDATED_ALERT(Box::new(c))
    }
}

impl From<SMSG_CALENDAR_EVENT_MODERATOR_STATUS_ALERT> for ServerOpcodeMessage {
    fn from(c: SMSG_CALENDAR_EVENT_MODERATOR_STATUS_ALERT) -> Self {
        Self::SMSG_CALENDAR_EVENT_MODERATOR_STATUS_ALERT(Box::new(c))
    }
}

impl From<SMSG_CALENDAR_SEND_NUM_PENDING> for ServerOpcodeMessage {
    fn from(c: SMSG_CALENDAR_SEND_NUM_PENDING) -> Self {
        Self::SMSG_CALENDAR_SEND_NUM_PENDING(c)
    }
}

impl From<MSG_MOVE_SET_PITCH_RATE_Server> for ServerOpcodeMessage {
    fn from(c: MSG_MOVE_SET_PITCH_RATE_Server) -> Self {
        Self::MSG_MOVE_SET_PITCH_RATE(Box::new(c))
    }
}

impl From<SMSG_FORCE_PITCH_RATE_CHANGE> for ServerOpcodeMessage {
    fn from(c: SMSG_FORCE_PITCH_RATE_CHANGE) -> Self {
        Self::SMSG_FORCE_PITCH_RATE_CHANGE(Box::new(c))
    }
}

impl From<SMSG_CALENDAR_EVENT_INVITE_NOTES> for ServerOpcodeMessage {
    fn from(c: SMSG_CALENDAR_EVENT_INVITE_NOTES) -> Self {
        Self::SMSG_CALENDAR_EVENT_INVITE_NOTES(Box::new(c))
    }
}

impl From<SMSG_CALENDAR_EVENT_INVITE_NOTES_ALERT> for ServerOpcodeMessage {
    fn from(c: SMSG_CALENDAR_EVENT_INVITE_NOTES_ALERT) -> Self {
        Self::SMSG_CALENDAR_EVENT_INVITE_NOTES_ALERT(Box::new(c))
    }
}

impl From<SMSG_UPDATE_ACCOUNT_DATA_COMPLETE> for ServerOpcodeMessage {
    fn from(c: SMSG_UPDATE_ACCOUNT_DATA_COMPLETE) -> Self {
        Self::SMSG_UPDATE_ACCOUNT_DATA_COMPLETE(c)
    }
}

impl From<SMSG_TRIGGER_MOVIE> for ServerOpcodeMessage {
    fn from(c: SMSG_TRIGGER_MOVIE) -> Self {
        Self::SMSG_TRIGGER_MOVIE(c)
    }
}

impl From<SMSG_ACHIEVEMENT_EARNED> for ServerOpcodeMessage {
    fn from(c: SMSG_ACHIEVEMENT_EARNED) -> Self {
        Self::SMSG_ACHIEVEMENT_EARNED(Box::new(c))
    }
}

impl From<SMSG_CRITERIA_UPDATE> for ServerOpcodeMessage {
    fn from(c: SMSG_CRITERIA_UPDATE) -> Self {
        Self::SMSG_CRITERIA_UPDATE(Box::new(c))
    }
}

impl From<SMSG_RESPOND_INSPECT_ACHIEVEMENTS> for ServerOpcodeMessage {
    fn from(c: SMSG_RESPOND_INSPECT_ACHIEVEMENTS) -> Self {
        Self::SMSG_RESPOND_INSPECT_ACHIEVEMENTS(Box::new(c))
    }
}

impl From<SMSG_QUESTUPDATE_ADD_PVP_KILL> for ServerOpcodeMessage {
    fn from(c: SMSG_QUESTUPDATE_ADD_PVP_KILL) -> Self {
        Self::SMSG_QUESTUPDATE_ADD_PVP_KILL(Box::new(c))
    }
}

impl From<SMSG_CALENDAR_RAID_LOCKOUT_UPDATED> for ServerOpcodeMessage {
    fn from(c: SMSG_CALENDAR_RAID_LOCKOUT_UPDATED) -> Self {
        Self::SMSG_CALENDAR_RAID_LOCKOUT_UPDATED(Box::new(c))
    }
}

impl From<SMSG_CHAR_CUSTOMIZE> for ServerOpcodeMessage {
    fn from(c: SMSG_CHAR_CUSTOMIZE) -> Self {
        Self::SMSG_CHAR_CUSTOMIZE(Box::new(c))
    }
}

impl From<SMSG_SET_PHASE_SHIFT> for ServerOpcodeMessage {
    fn from(c: SMSG_SET_PHASE_SHIFT) -> Self {
        Self::SMSG_SET_PHASE_SHIFT(c)
    }
}

impl From<SMSG_ALL_ACHIEVEMENT_DATA> for ServerOpcodeMessage {
    fn from(c: SMSG_ALL_ACHIEVEMENT_DATA) -> Self {
        Self::SMSG_ALL_ACHIEVEMENT_DATA(Box::new(c))
    }
}

impl From<SMSG_POWER_UPDATE> for ServerOpcodeMessage {
    fn from(c: SMSG_POWER_UPDATE) -> Self {
        Self::SMSG_POWER_UPDATE(Box::new(c))
    }
}

impl From<SMSG_HIGHEST_THREAT_UPDATE> for ServerOpcodeMessage {
    fn from(c: SMSG_HIGHEST_THREAT_UPDATE) -> Self {
        Self::SMSG_HIGHEST_THREAT_UPDATE(Box::new(c))
    }
}

impl From<SMSG_THREAT_UPDATE> for ServerOpcodeMessage {
    fn from(c: SMSG_THREAT_UPDATE) -> Self {
        Self::SMSG_THREAT_UPDATE(Box::new(c))
    }
}

impl From<SMSG_THREAT_REMOVE> for ServerOpcodeMessage {
    fn from(c: SMSG_THREAT_REMOVE) -> Self {
        Self::SMSG_THREAT_REMOVE(Box::new(c))
    }
}

impl From<SMSG_THREAT_CLEAR> for ServerOpcodeMessage {
    fn from(c: SMSG_THREAT_CLEAR) -> Self {
        Self::SMSG_THREAT_CLEAR(c)
    }
}

impl From<SMSG_CONVERT_RUNE> for ServerOpcodeMessage {
    fn from(c: SMSG_CONVERT_RUNE) -> Self {
        Self::SMSG_CONVERT_RUNE(c)
    }
}

impl From<SMSG_RESYNC_RUNES> for ServerOpcodeMessage {
    fn from(c: SMSG_RESYNC_RUNES) -> Self {
        Self::SMSG_RESYNC_RUNES(Box::new(c))
    }
}

impl From<SMSG_ADD_RUNE_POWER> for ServerOpcodeMessage {
    fn from(c: SMSG_ADD_RUNE_POWER) -> Self {
        Self::SMSG_ADD_RUNE_POWER(c)
    }
}

impl From<SMSG_AUCTION_LIST_PENDING_SALES> for ServerOpcodeMessage {
    fn from(c: SMSG_AUCTION_LIST_PENDING_SALES) -> Self {
        Self::SMSG_AUCTION_LIST_PENDING_SALES(Box::new(c))
    }
}

impl From<SMSG_MODIFY_COOLDOWN> for ServerOpcodeMessage {
    fn from(c: SMSG_MODIFY_COOLDOWN) -> Self {
        Self::SMSG_MODIFY_COOLDOWN(Box::new(c))
    }
}

impl From<SMSG_PET_UPDATE_COMBO_POINTS> for ServerOpcodeMessage {
    fn from(c: SMSG_PET_UPDATE_COMBO_POINTS) -> Self {
        Self::SMSG_PET_UPDATE_COMBO_POINTS(Box::new(c))
    }
}

impl From<SMSG_PRE_RESURRECT> for ServerOpcodeMessage {
    fn from(c: SMSG_PRE_RESURRECT) -> Self {
        Self::SMSG_PRE_RESURRECT(c)
    }
}

impl From<SMSG_AURA_UPDATE_ALL> for ServerOpcodeMessage {
    fn from(c: SMSG_AURA_UPDATE_ALL) -> Self {
        Self::SMSG_AURA_UPDATE_ALL(Box::new(c))
    }
}

impl From<SMSG_AURA_UPDATE> for ServerOpcodeMessage {
    fn from(c: SMSG_AURA_UPDATE) -> Self {
        Self::SMSG_AURA_UPDATE(Box::new(c))
    }
}

impl From<SMSG_SERVER_FIRST_ACHIEVEMENT> for ServerOpcodeMessage {
    fn from(c: SMSG_SERVER_FIRST_ACHIEVEMENT) -> Self {
        Self::SMSG_SERVER_FIRST_ACHIEVEMENT(Box::new(c))
    }
}

impl From<SMSG_PET_LEARNED_SPELL> for ServerOpcodeMessage {
    fn from(c: SMSG_PET_LEARNED_SPELL) -> Self {
        Self::SMSG_PET_LEARNED_SPELL(c)
    }
}

impl From<SMSG_PET_UNLEARNED_SPELL> for ServerOpcodeMessage {
    fn from(c: SMSG_PET_UNLEARNED_SPELL) -> Self {
        Self::SMSG_PET_UNLEARNED_SPELL(c)
    }
}

impl From<SMSG_ON_CANCEL_EXPECTED_RIDE_VEHICLE_AURA> for ServerOpcodeMessage {
    fn from(_: SMSG_ON_CANCEL_EXPECTED_RIDE_VEHICLE_AURA) -> Self {
        Self::SMSG_ON_CANCEL_EXPECTED_RIDE_VEHICLE_AURA
    }
}

impl From<SMSG_CRITERIA_DELETED> for ServerOpcodeMessage {
    fn from(c: SMSG_CRITERIA_DELETED) -> Self {
        Self::SMSG_CRITERIA_DELETED(c)
    }
}

impl From<SMSG_ACHIEVEMENT_DELETED> for ServerOpcodeMessage {
    fn from(c: SMSG_ACHIEVEMENT_DELETED) -> Self {
        Self::SMSG_ACHIEVEMENT_DELETED(c)
    }
}

impl From<SMSG_BATTLEGROUND_INFO_THROTTLED> for ServerOpcodeMessage {
    fn from(_: SMSG_BATTLEGROUND_INFO_THROTTLED) -> Self {
        Self::SMSG_BATTLEGROUND_INFO_THROTTLED
    }
}

impl From<SMSG_PLAYER_VEHICLE_DATA> for ServerOpcodeMessage {
    fn from(c: SMSG_PLAYER_VEHICLE_DATA) -> Self {
        Self::SMSG_PLAYER_VEHICLE_DATA(Box::new(c))
    }
}

impl From<SMSG_PET_GUIDS> for ServerOpcodeMessage {
    fn from(c: SMSG_PET_GUIDS) -> Self {
        Self::SMSG_PET_GUIDS(Box::new(c))
    }
}

impl From<SMSG_CLIENTCACHE_VERSION> for ServerOpcodeMessage {
    fn from(c: SMSG_CLIENTCACHE_VERSION) -> Self {
        Self::SMSG_CLIENTCACHE_VERSION(c)
    }
}

impl From<SMSG_ITEM_REFUND_INFO_RESPONSE> for ServerOpcodeMessage {
    fn from(c: SMSG_ITEM_REFUND_INFO_RESPONSE) -> Self {
        Self::SMSG_ITEM_REFUND_INFO_RESPONSE(Box::new(c))
    }
}

impl From<SMSG_ITEM_REFUND_RESULT> for ServerOpcodeMessage {
    fn from(c: SMSG_ITEM_REFUND_RESULT) -> Self {
        Self::SMSG_ITEM_REFUND_RESULT(Box::new(c))
    }
}

impl From<SMSG_CORPSE_MAP_POSITION_QUERY_RESPONSE> for ServerOpcodeMessage {
    fn from(c: SMSG_CORPSE_MAP_POSITION_QUERY_RESPONSE) -> Self {
        Self::SMSG_CORPSE_MAP_POSITION_QUERY_RESPONSE(Box::new(c))
    }
}

impl From<SMSG_CALENDAR_CLEAR_PENDING_ACTION> for ServerOpcodeMessage {
    fn from(_: SMSG_CALENDAR_CLEAR_PENDING_ACTION) -> Self {
        Self::SMSG_CALENDAR_CLEAR_PENDING_ACTION
    }
}

impl From<SMSG_EQUIPMENT_SET_LIST> for ServerOpcodeMessage {
    fn from(c: SMSG_EQUIPMENT_SET_LIST) -> Self {
        Self::SMSG_EQUIPMENT_SET_LIST(Box::new(c))
    }
}

impl From<SMSG_SET_PROJECTILE_POSITION> for ServerOpcodeMessage {
    fn from(c: SMSG_SET_PROJECTILE_POSITION) -> Self {
        Self::SMSG_SET_PROJECTILE_POSITION(Box::new(c))
    }
}

impl From<SMSG_TALENTS_INFO> for ServerOpcodeMessage {
    fn from(c: SMSG_TALENTS_INFO) -> Self {
        Self::SMSG_TALENTS_INFO(Box::new(c))
    }
}

impl From<SMSG_ARENA_UNIT_DESTROYED> for ServerOpcodeMessage {
    fn from(c: SMSG_ARENA_UNIT_DESTROYED) -> Self {
        Self::SMSG_ARENA_UNIT_DESTROYED(c)
    }
}

impl From<SMSG_ARENA_TEAM_CHANGE_FAILED_QUEUED> for ServerOpcodeMessage {
    fn from(c: SMSG_ARENA_TEAM_CHANGE_FAILED_QUEUED) -> Self {
        Self::SMSG_ARENA_TEAM_CHANGE_FAILED_QUEUED(c)
    }
}

impl From<SMSG_MOVE_GRAVITY_DISABLE> for ServerOpcodeMessage {
    fn from(c: SMSG_MOVE_GRAVITY_DISABLE) -> Self {
        Self::SMSG_MOVE_GRAVITY_DISABLE(Box::new(c))
    }
}

impl From<SMSG_MOVE_GRAVITY_ENABLE> for ServerOpcodeMessage {
    fn from(c: SMSG_MOVE_GRAVITY_ENABLE) -> Self {
        Self::SMSG_MOVE_GRAVITY_ENABLE(Box::new(c))
    }
}

impl From<MSG_MOVE_GRAVITY_CHNG_Server> for ServerOpcodeMessage {
    fn from(c: MSG_MOVE_GRAVITY_CHNG_Server) -> Self {
        Self::MSG_MOVE_GRAVITY_CHNG(Box::new(c))
    }
}

impl From<SMSG_SPLINE_MOVE_GRAVITY_DISABLE> for ServerOpcodeMessage {
    fn from(c: SMSG_SPLINE_MOVE_GRAVITY_DISABLE) -> Self {
        Self::SMSG_SPLINE_MOVE_GRAVITY_DISABLE(c)
    }
}

impl From<SMSG_SPLINE_MOVE_GRAVITY_ENABLE> for ServerOpcodeMessage {
    fn from(c: SMSG_SPLINE_MOVE_GRAVITY_ENABLE) -> Self {
        Self::SMSG_SPLINE_MOVE_GRAVITY_ENABLE(c)
    }
}

impl From<SMSG_EQUIPMENT_SET_USE_RESULT> for ServerOpcodeMessage {
    fn from(c: SMSG_EQUIPMENT_SET_USE_RESULT) -> Self {
        Self::SMSG_EQUIPMENT_SET_USE_RESULT(c)
    }
}

impl From<SMSG_CHAR_FACTION_CHANGE> for ServerOpcodeMessage {
    fn from(c: SMSG_CHAR_FACTION_CHANGE) -> Self {
        Self::SMSG_CHAR_FACTION_CHANGE(Box::new(c))
    }
}

impl From<SMSG_BATTLEFIELD_MGR_ENTRY_INVITE> for ServerOpcodeMessage {
    fn from(c: SMSG_BATTLEFIELD_MGR_ENTRY_INVITE) -> Self {
        Self::SMSG_BATTLEFIELD_MGR_ENTRY_INVITE(Box::new(c))
    }
}

impl From<SMSG_BATTLEFIELD_MGR_ENTERED> for ServerOpcodeMessage {
    fn from(c: SMSG_BATTLEFIELD_MGR_ENTERED) -> Self {
        Self::SMSG_BATTLEFIELD_MGR_ENTERED(c)
    }
}

impl From<SMSG_BATTLEFIELD_MGR_QUEUE_INVITE> for ServerOpcodeMessage {
    fn from(c: SMSG_BATTLEFIELD_MGR_QUEUE_INVITE) -> Self {
        Self::SMSG_BATTLEFIELD_MGR_QUEUE_INVITE(c)
    }
}

impl From<SMSG_BATTLEFIELD_MGR_QUEUE_REQUEST_RESPONSE> for ServerOpcodeMessage {
    fn from(c: SMSG_BATTLEFIELD_MGR_QUEUE_REQUEST_RESPONSE) -> Self {
        Self::SMSG_BATTLEFIELD_MGR_QUEUE_REQUEST_RESPONSE(Box::new(c))
    }
}

impl From<SMSG_BATTLEFIELD_MGR_EJECT_PENDING> for ServerOpcodeMessage {
    fn from(c: SMSG_BATTLEFIELD_MGR_EJECT_PENDING) -> Self {
        Self::SMSG_BATTLEFIELD_MGR_EJECT_PENDING(c)
    }
}

impl From<SMSG_BATTLEFIELD_MGR_EJECTED> for ServerOpcodeMessage {
    fn from(c: SMSG_BATTLEFIELD_MGR_EJECTED) -> Self {
        Self::SMSG_BATTLEFIELD_MGR_EJECTED(c)
    }
}

impl From<SMSG_BATTLEFIELD_MGR_STATE_CHANGE> for ServerOpcodeMessage {
    fn from(c: SMSG_BATTLEFIELD_MGR_STATE_CHANGE) -> Self {
        Self::SMSG_BATTLEFIELD_MGR_STATE_CHANGE(c)
    }
}

impl From<MSG_SET_RAID_DIFFICULTY_Server> for ServerOpcodeMessage {
    fn from(c: MSG_SET_RAID_DIFFICULTY_Server) -> Self {
        Self::MSG_SET_RAID_DIFFICULTY(c)
    }
}

impl From<SMSG_TOGGLE_XP_GAIN> for ServerOpcodeMessage {
    fn from(_: SMSG_TOGGLE_XP_GAIN) -> Self {
        Self::SMSG_TOGGLE_XP_GAIN
    }
}

impl From<SMSG_GMRESPONSE_DB_ERROR> for ServerOpcodeMessage {
    fn from(_: SMSG_GMRESPONSE_DB_ERROR) -> Self {
        Self::SMSG_GMRESPONSE_DB_ERROR
    }
}

impl From<SMSG_GMRESPONSE_RECEIVED> for ServerOpcodeMessage {
    fn from(c: SMSG_GMRESPONSE_RECEIVED) -> Self {
        Self::SMSG_GMRESPONSE_RECEIVED(Box::new(c))
    }
}

impl From<SMSG_GMRESPONSE_STATUS_UPDATE> for ServerOpcodeMessage {
    fn from(c: SMSG_GMRESPONSE_STATUS_UPDATE) -> Self {
        Self::SMSG_GMRESPONSE_STATUS_UPDATE(c)
    }
}

impl From<SMSG_WORLD_STATE_UI_TIMER_UPDATE> for ServerOpcodeMessage {
    fn from(c: SMSG_WORLD_STATE_UI_TIMER_UPDATE) -> Self {
        Self::SMSG_WORLD_STATE_UI_TIMER_UPDATE(c)
    }
}

impl From<SMSG_TALENTS_INVOLUNTARILY_RESET> for ServerOpcodeMessage {
    fn from(c: SMSG_TALENTS_INVOLUNTARILY_RESET) -> Self {
        Self::SMSG_TALENTS_INVOLUNTARILY_RESET(c)
    }
}

impl From<SMSG_QUERY_QUESTS_COMPLETED_RESPONSE> for ServerOpcodeMessage {
    fn from(c: SMSG_QUERY_QUESTS_COMPLETED_RESPONSE) -> Self {
        Self::SMSG_QUERY_QUESTS_COMPLETED_RESPONSE(Box::new(c))
    }
}

impl From<SMSG_CORPSE_NOT_IN_INSTANCE> for ServerOpcodeMessage {
    fn from(_: SMSG_CORPSE_NOT_IN_INSTANCE) -> Self {
        Self::SMSG_CORPSE_NOT_IN_INSTANCE
    }
}

impl From<SMSG_CAMERA_SHAKE> for ServerOpcodeMessage {
    fn from(c: SMSG_CAMERA_SHAKE) -> Self {
        Self::SMSG_CAMERA_SHAKE(c)
    }
}

impl From<SMSG_SOCKET_GEMS_RESULT> for ServerOpcodeMessage {
    fn from(c: SMSG_SOCKET_GEMS_RESULT) -> Self {
        Self::SMSG_SOCKET_GEMS_RESULT(Box::new(c))
    }
}

impl From<SMSG_REDIRECT_CLIENT> for ServerOpcodeMessage {
    fn from(c: SMSG_REDIRECT_CLIENT) -> Self {
        Self::SMSG_REDIRECT_CLIENT(Box::new(c))
    }
}

impl From<SMSG_MOVE_SET_COLLISION_HGT> for ServerOpcodeMessage {
    fn from(c: SMSG_MOVE_SET_COLLISION_HGT) -> Self {
        Self::SMSG_MOVE_SET_COLLISION_HGT(Box::new(c))
    }
}

impl From<SMSG_MULTIPLE_MOVES> for ServerOpcodeMessage {
    fn from(c: SMSG_MULTIPLE_MOVES) -> Self {
        Self::SMSG_MULTIPLE_MOVES(Box::new(c))
    }
}

