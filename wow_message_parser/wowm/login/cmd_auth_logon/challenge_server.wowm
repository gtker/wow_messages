/// Reply to [CMD_AUTH_LOGON_CHALLENGE_Client].
slogin CMD_AUTH_LOGON_CHALLENGE_Server = 0x00 {
    /// Mangos statically sets this to 0. It is unknown exactly what it does.
    u8 protocol_version = 0;

    LoginResult result;
    if (result == SUCCESS) {
        u8[32] server_public_key;
        /// The only realistic values for the generator are well below 255, so there's no reason for this to anything other than 1.
        u8 generator_length;
        u8[generator_length] generator;
        /// Client can not handle arrays greater than 32.
        u8 large_safe_prime_length {
            valid_range = "0 32";
        }
        u8[large_safe_prime_length] large_safe_prime;
        u8[32] salt;
        /// Used for the `crc_hash` in [CMD_AUTH_LOGON_PROOF_Client].
        u8[16] crc_salt;
    }
} {
    login_versions = "2";
}

/// Reply to [CMD_AUTH_LOGON_CHALLENGE_Client].
test CMD_AUTH_LOGON_CHALLENGE_Server {
    result = SUCCESS;

    server_public_key = [ 0x49, 0xd8, 0xc2, 0xbc, 0x68, 0x5c, 0x2b, 0xce, 0x4a, 0xf4, 0xfa, 0x07,
        0x0a, 0x47, 0x93, 0x78, 0x58, 0x78, 0x46, 0xb5, 0x83, 0xd4, 0x41, 0x82, 0x9e, 0x24,
        0xd8, 0x87, 0xce, 0xda, 0x34, 0x46, ];

    generator = [ 7 ];

    large_safe_prime = [ 0xb7, 0x9b, 0x3e, 0x2a, 0x87, 0x82, 0x3c, 0xab, 0x8f, 0x5e, 0xbf,
                         0xbf, 0x8e, 0xb1, 0x01, 0x08, 0x53, 0x50, 0x06, 0x29, 0x8b, 0x5b,
                         0xad, 0xbd, 0x5b, 0x53, 0xe1, 0x89, 0x5e, 0x64, 0x4b, 0x89, ];

    salt = [ 0xc7, 0x09, 0x87, 0x7d, 0x8c, 0x65, 0x52, 0x66, 0xa5, 0x7d, 
             0xb8, 0x65, 0x3d, 0x6e, 0xa6, 0x2b, 0xb5, 0x54, 0xf2, 0x0b, 
             0xcf, 0x74, 0xd6, 0x4a, 0x77, 0xa7, 0xd3, 0x3d, 0xf3, 0x30, 
             0x90, 0x87, ];

    crc_salt = [ 0xba, 0xa3, 0x1e, 0x99, 0xa0, 0x0b, 0x21, 0x57, 0xfc, 0x37, 
                 0x3f, 0xb3, 0x69, 0xcd, 0xd2, 0xf1, ];
} [
    0x00, /* Opcode: CMD_AUTH_LOGON_CHALLENGE */
    0x00, /* Protocol Version: 0 */
    0x00, /* Result: SUCCESS (0) */

    0x49, 0xd8, 0xc2, 0xbc, 0x68, 0x5c, 0x2b, 0xce, 0x4a, 0xf4, 0xfa, 0x07,
    0x0a, 0x47, 0x93, 0x78, 0x58, 0x78, 0x46, 0xb5, 0x83, 0xd4, 0x41, 0x82, 0x9e, 0x24,
    0xd8, 0x87, 0xce, 0xda, 0x34, 0x46, /* Server Public Key */

    0x01, /* Generator Length: 1 */
    0x07, /* Generator: 7 */
    0x20, /* Large Safe Prime Length: 32 */

    0xb7, 0x9b, 0x3e, 0x2a, 0x87, 0x82, 0x3c, 0xab, 0x8f, 0x5e, 
    0xbf, 0xbf, 0x8e, 0xb1, 0x01, 0x08, 0x53, 0x50, 0x06, 0x29, 
    0x8b, 0x5b, 0xad, 0xbd, 0x5b, 0x53, 0xe1, 0x89, 0x5e, 0x64, 
    0x4b, 0x89, /* Large Safe Prime */

    0xc7, 0x09, 0x87, 0x7d, 0x8c, 0x65, 0x52, 0x66, 0xa5, 0x7d, 
    0xb8, 0x65, 0x3d, 0x6e, 0xa6, 0x2b, 0xb5, 0x54, 0xf2, 0x0b, 
    0xcf, 0x74, 0xd6, 0x4a, 0x77, 0xa7, 0xd3, 0x3d, 0xf3, 0x30, 
    0x90, 0x87, /* Salt */

    0xba, 0xa3, 0x1e, 0x99, 0xa0, 0x0b, 0x21, 0x57, 0xfc, 0x37, 
    0x3f, 0xb3, 0x69, 0xcd, 0xd2, 0xf1, /* CRC Salt */
] {
    login_versions = "2";
}

/// Reply to [CMD_AUTH_LOGON_CHALLENGE_Client].
slogin CMD_AUTH_LOGON_CHALLENGE_Server = 0x00 {
    /// Mangos statically sets this to 0.
    u8 protocol_version = 0;

    LoginResult result;
    if (result == SUCCESS) {
        u8[32] server_public_key;
        /// The only realistic values for the generator are well below 255, so there's no reason for this to anything other than 1.
        u8 generator_length;
        u8[generator_length] generator;
        /// Client can not handle arrays greater than 32.
        u8 large_safe_prime_length {
            valid_range = "0 32";
        }
        u8[large_safe_prime_length] large_safe_prime;
        u8[32] salt;
        /// Used for the `crc_hash` in [CMD_AUTH_LOGON_PROOF_Client].
        u8[16] crc_salt;

        SecurityFlag security_flag;
        if (security_flag == PIN) {
            /// Used to randomize the layout of the PIN keypad.
            u32 pin_grid_seed;
            u8[16] pin_salt;
        }
    }
} {
    login_versions = "3";
}

test CMD_AUTH_LOGON_CHALLENGE_Server {
    result = SUCCESS;

    server_public_key = [ 0x49, 0xd8, 0xc2, 0xbc, 0x68, 0x5c, 0x2b, 0xce, 0x4a, 0xf4, 0xfa, 0x07,
        0x0a, 0x47, 0x93, 0x78, 0x58, 0x78, 0x46, 0xb5, 0x83, 0xd4, 0x41, 0x82, 0x9e, 0x24,
        0xd8, 0x87, 0xce, 0xda, 0x34, 0x46, ];

    generator = [ 7 ];

    large_safe_prime = [ 0xb7, 0x9b, 0x3e, 0x2a, 0x87, 0x82, 0x3c, 0xab, 0x8f, 0x5e, 0xbf,
                         0xbf, 0x8e, 0xb1, 0x01, 0x08, 0x53, 0x50, 0x06, 0x29, 0x8b, 0x5b,
                         0xad, 0xbd, 0x5b, 0x53, 0xe1, 0x89, 0x5e, 0x64, 0x4b, 0x89, ];

    salt = [ 0xc7, 0x09, 0x87, 0x7d, 0x8c, 0x65, 0x52, 0x66, 0xa5, 0x7d,
             0xb8, 0x65, 0x3d, 0x6e, 0xa6, 0x2b, 0xb5, 0x54, 0xf2, 0x0b,
             0xcf, 0x74, 0xd6, 0x4a, 0x77, 0xa7, 0xd3, 0x3d, 0xf3, 0x30,
             0x90, 0x87, ];

    crc_salt = [ 0xba, 0xa3, 0x1e, 0x99, 0xa0, 0x0b, 0x21, 0x57, 0xfc, 0x37, 
                 0x3f, 0xb3, 0x69, 0xcd, 0xd2, 0xf1, ];

    security_flag = PIN;
    pin_grid_seed = 0xDEADBEEF;
    pin_salt = [ 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
                 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, ];
} [
    0x00, /* Opcode: CMD_AUTH_LOGON_CHALLENGE */
    0x00, /* Protocol Version: 0 */
    0x00, /* Result: SUCCESS (0) */

    0x49, 0xd8, 0xc2, 0xbc, 0x68, 0x5c, 0x2b, 0xce, 0x4a, 0xf4, 0xfa, 0x07,
    0x0a, 0x47, 0x93, 0x78, 0x58, 0x78, 0x46, 0xb5, 0x83, 0xd4, 0x41, 0x82, 0x9e, 0x24,
    0xd8, 0x87, 0xce, 0xda, 0x34, 0x46, /* Server Public Key */

    0x01, /* Generator Length: 1 */
    0x07, /* Generator: 7 */
    0x20, /* Large Safe Prime Length: 32 */

    0xb7, 0x9b, 0x3e, 0x2a, 0x87, 0x82, 0x3c, 0xab, 0x8f, 0x5e, 
    0xbf, 0xbf, 0x8e, 0xb1, 0x01, 0x08, 0x53, 0x50, 0x06, 0x29, 
    0x8b, 0x5b, 0xad, 0xbd, 0x5b, 0x53, 0xe1, 0x89, 0x5e, 0x64, 
    0x4b, 0x89, /* Large Safe Prime */

    0xc7, 0x09, 0x87, 0x7d, 0x8c, 0x65, 0x52, 0x66, 0xa5, 0x7d, 
    0xb8, 0x65, 0x3d, 0x6e, 0xa6, 0x2b, 0xb5, 0x54, 0xf2, 0x0b, 
    0xcf, 0x74, 0xd6, 0x4a, 0x77, 0xa7, 0xd3, 0x3d, 0xf3, 0x30, 
    0x90, 0x87, /* Salt */

    0xba, 0xa3, 0x1e, 0x99, 0xa0, 0x0b, 0x21, 0x57, 0xfc, 0x37, 
    0x3f, 0xb3, 0x69, 0xcd, 0xd2, 0xf1, /* CRC Salt */

    0x01, /* Two factor fields enabled: True */
    0xEF, 0xBE, 0xAD, 0xDE, /* PIN grid seed: 0xDEADBEEF */

    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
    0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, /* PIN salt */
] {
    login_versions = "3";
}

test CMD_AUTH_LOGON_CHALLENGE_Server {
    result = SUCCESS;

    server_public_key = [ 0x49, 0xd8, 0xc2, 0xbc, 0x68, 0x5c, 0x2b, 0xce, 0x4a, 0xf4, 0xfa, 0x07,
        0x0a, 0x47, 0x93, 0x78, 0x58, 0x78, 0x46, 0xb5, 0x83, 0xd4, 0x41, 0x82, 0x9e, 0x24,
        0xd8, 0x87, 0xce, 0xda, 0x34, 0x46, ];

    generator = [ 7 ];

    large_safe_prime = [ 0xb7, 0x9b, 0x3e, 0x2a, 0x87, 0x82, 0x3c, 0xab, 0x8f, 0x5e, 0xbf,
                         0xbf, 0x8e, 0xb1, 0x01, 0x08, 0x53, 0x50, 0x06, 0x29, 0x8b, 0x5b,
                         0xad, 0xbd, 0x5b, 0x53, 0xe1, 0x89, 0x5e, 0x64, 0x4b, 0x89, ];

    salt = [ 0xc7, 0x09, 0x87, 0x7d, 0x8c, 0x65, 0x52, 0x66, 0xa5, 0x7d,
             0xb8, 0x65, 0x3d, 0x6e, 0xa6, 0x2b, 0xb5, 0x54, 0xf2, 0x0b,
             0xcf, 0x74, 0xd6, 0x4a, 0x77, 0xa7, 0xd3, 0x3d, 0xf3, 0x30,
             0x90, 0x87, ];

    crc_salt = [ 0xba, 0xa3, 0x1e, 0x99, 0xa0, 0x0b, 0x21, 0x57, 0xfc, 0x37, 
                 0x3f, 0xb3, 0x69, 0xcd, 0xd2, 0xf1, ];

    security_flag = NONE;
} [
    0x00, /* Opcode: CMD_AUTH_LOGON_CHALLENGE */
    0x00, /* Protocol Version: 0 */
    0x00, /* Result: SUCCESS (0) */

    0x49, 0xd8, 0xc2, 0xbc, 0x68, 0x5c, 0x2b, 0xce, 0x4a, 0xf4, 0xfa, 0x07,
    0x0a, 0x47, 0x93, 0x78, 0x58, 0x78, 0x46, 0xb5, 0x83, 0xd4, 0x41, 0x82, 0x9e, 0x24,
    0xd8, 0x87, 0xce, 0xda, 0x34, 0x46, /* Server Public Key */

    0x01, /* Generator Length: 1 */
    0x07, /* Generator: 7 */
    0x20, /* Large Safe Prime Length: 32 */

    0xb7, 0x9b, 0x3e, 0x2a, 0x87, 0x82, 0x3c, 0xab, 0x8f, 0x5e, 
    0xbf, 0xbf, 0x8e, 0xb1, 0x01, 0x08, 0x53, 0x50, 0x06, 0x29, 
    0x8b, 0x5b, 0xad, 0xbd, 0x5b, 0x53, 0xe1, 0x89, 0x5e, 0x64, 
    0x4b, 0x89, /* Large Safe Prime */

    0xc7, 0x09, 0x87, 0x7d, 0x8c, 0x65, 0x52, 0x66, 0xa5, 0x7d, 
    0xb8, 0x65, 0x3d, 0x6e, 0xa6, 0x2b, 0xb5, 0x54, 0xf2, 0x0b, 
    0xcf, 0x74, 0xd6, 0x4a, 0x77, 0xa7, 0xd3, 0x3d, 0xf3, 0x30, 
    0x90, 0x87, /* Salt */

    0xba, 0xa3, 0x1e, 0x99, 0xa0, 0x0b, 0x21, 0x57, 0xfc, 0x37, 
    0x3f, 0xb3, 0x69, 0xcd, 0xd2, 0xf1, /* CRC Salt */

    0x00, /* Two factor fields enabled: False */
] {
    login_versions = "3";
}

slogin CMD_AUTH_LOGON_CHALLENGE_Server = 0x00 {
    u8 protocol_version = 0;

    LoginResult result;
    if (result == SUCCESS) {
        u8[32] server_public_key;
        /// The only realistic values for the generator are well below 255, so there's no reason for this to anything other than 1.
        u8 generator_length;
        u8[generator_length] generator;
        /// Client can not handle arrays greater than 32.
        u8 large_safe_prime_length {
            valid_range = "0 32";
        }
        u8[large_safe_prime_length] large_safe_prime;
        u8[32] salt;
        /// Used for the `crc_hash` in [CMD_AUTH_LOGON_PROOF_Client].
        u8[16] crc_salt;

        SecurityFlag security_flag;
        if (security_flag & PIN) {
            /// Used to randomize the layout of the PIN keypad.
            u32 pin_grid_seed;
            u8[16] pin_salt;
        }
        if (security_flag & MATRIX_CARD) {
            /// Number of columns to display.
            u8 width;
            /// Number of rows to display.
            u8 height;
            /// Number of digits to be entered for each cell.
            u8 digit_count;
            /// Number of cells to complete.
            u8 challenge_count;
            /// Seed value used to randomize cell selection.
            u64 seed;
        }
    }
} {
    login_versions = "5 6 7";
}

test CMD_AUTH_LOGON_CHALLENGE_Server {
    result = SUCCESS;
    server_public_key = [0x3A, 0x2B, 0xED, 0xA2, 0xA9, 0x65, 0x25, 0x4E, 0x45, 0x04, 0xC3, 0xA8, 0xF6, 0x6A, 0x86, 0xC9, 0x51, 0x72, 0xD7, 0x63, 0x6B, 0x36, 0x89, 0xED, 0xC0, 0x3F, 0xFC, 0xC1, 0x42, 0xA5, 0x79, 0x32,];
    generator_length = 1;
    generator = [0x07,];
    large_safe_prime_length = 32;
    large_safe_prime = [0xB7, 0x9B, 0x3E, 0x2A, 0x87, 0x82, 0x3C, 0xAB, 0x8F, 0x5E, 0xBF, 0xBF, 0x8E, 0xB1, 0x01, 0x08, 0x53, 0x50, 0x06, 0x29, 0x8B, 0x5B, 0xAD, 0xBD, 0x5B, 0x53, 0xE1, 0x89, 0x5E, 0x64, 0x4B, 0x89,];
    salt = [0xAE, 0x78, 0x7C, 0x60, 0xDA, 0x14, 0x15, 0xDB, 0x82, 0x24, 0x43, 0x48, 0x47, 0x6C, 0x3F, 0xD3, 0xBC, 0x16, 0x3C, 0x59, 0x15, 0x80, 0x56, 0x05, 0x92, 0x3B, 0x52, 0x2E, 0x72, 0x12, 0x29, 0x52,];
    crc_salt = [0x46, 0x0F, 0xB8, 0xED, 0x72, 0x47, 0xA9, 0xFF, 0x1F, 0xF2, 0xE4, 0x60, 0xFD, 0xFF, 0x7F, 0xF9,];
    security_flag = PIN | MATRIX_CARD;
    pin_grid_seed = 0;
    pin_salt = [0x59, 0x1D, 0xA6, 0x0B, 0x34, 0xFD, 0x64, 0x5E, 0x38, 0x6C, 0x54, 0xC0, 0x18, 0xB6, 0xA7, 0x2F,];
    width = 8;
    height = 8;
    digit_count = 2;
    challenge_count = 1;
    seed = 10328155845301885122;
} [
    0x00, /* opcode */ 
    0x00, /* protocol_version */
    0x00, /* result */
    0x3A, 0x2B, 0xED, 0xA2, 0xA9, 0x65, 0x25, 0x4E, 0x45, 0x04, 0xC3, 0xA8, 0xF6, 0x6A, 0x86, 0xC9, 0x51, 0x72, 0xD7, 0x63, 0x6B, 0x36, 0x89, 0xED, 0xC0, 0x3F, 0xFC, 0xC1, 0x42, 0xA5, 0x79, 0x32, /* server_public_key */
    0x01, /* generator_length */
    0x07, /* generator */
    0x20, /* large_safe_prime_length */
    0xB7, 0x9B, 0x3E, 0x2A, 0x87, 0x82, 0x3C, 0xAB, 0x8F, 0x5E, 0xBF, 0xBF, 0x8E, 0xB1, 0x01, 0x08, 0x53, 0x50, 0x06, 0x29, 0x8B, 0x5B, 0xAD, 0xBD, 0x5B, 0x53, 0xE1, 0x89, 0x5E, 0x64, 0x4B, 0x89, /* large_safe_prime */
    0xAE, 0x78, 0x7C, 0x60, 0xDA, 0x14, 0x15, 0xDB, 0x82, 0x24, 0x43, 0x48, 0x47, 0x6C, 0x3F, 0xD3, 0xBC, 0x16, 0x3C, 0x59, 0x15, 0x80, 0x56, 0x05, 0x92, 0x3B, 0x52, 0x2E, 0x72, 0x12, 0x29, 0x52, /* salt */
    0x46, 0x0F, 0xB8, 0xED, 0x72, 0x47, 0xA9, 0xFF, 0x1F, 0xF2, 0xE4, 0x60, 0xFD, 0xFF, 0x7F, 0xF9, /* crc_salt */
    0x03, /* security_flag */
    0x00, 0x00, 0x00, 0x00, /* pin_grid_seed */
    0x59, 0x1D, 0xA6, 0x0B, 0x34, 0xFD, 0x64, 0x5E, 0x38, 0x6C, 0x54, 0xC0, 0x18, 0xB6, 0xA7, 0x2F, /* pin_salt */
    0x08, /* width */
    0x08, /* height */
    0x02, /* digit_count */
    0x01, /* challenge_count */
    0xC2, 0xD8, 0x17, 0x38, 0x05, 0xFB, 0x54, 0x8F, /* seed */
] {
    login_versions = "5";
}

slogin CMD_AUTH_LOGON_CHALLENGE_Server = 0x00 {
    u8 protocol_version = 0;

    LoginResult result;
    if (result == SUCCESS) {
        u8[32] server_public_key;
        /// The only realistic values for the generator are well below 255, so there's no reason for this to anything other than 1.
        u8 generator_length;
        u8[generator_length] generator;
        /// Client can not handle arrays greater than 32.
        u8 large_safe_prime_length {
            valid_range = "0 32";
        }
        u8[large_safe_prime_length] large_safe_prime;
        u8[32] salt;
        /// Used for the `crc_hash` in [CMD_AUTH_LOGON_PROOF_Client].
        u8[16] crc_salt;

        SecurityFlag security_flag;
        if (security_flag & PIN) {
            /// Used to randomize the layout of the PIN keypad.
            u32 pin_grid_seed;
            u8[16] pin_salt;
        }
        if (security_flag & MATRIX_CARD) {
            /// Number of columns to display.
            u8 width;
            /// Number of rows to display.
            u8 height;
            /// Number of digits to be entered for each cell.
            u8 digit_count;
            /// Number of cells to complete.
            u8 challenge_count;
            /// Seed value used to randomize cell selection.
            u64 seed;
        }
        if (security_flag & AUTHENTICATOR) {
            /// Dictates if the authenticator is in use and not just assigned to the account.
            u8 required;
        }
    }
} {
    login_versions = "8";
}

test CMD_AUTH_LOGON_CHALLENGE_Server {
    result = SUCCESS;

    server_public_key = [ 0x49, 0xd8, 0xc2, 0xbc, 0x68, 0x5c, 0x2b, 0xce, 0x4a, 0xf4, 0xfa, 0x07,
        0x0a, 0x47, 0x93, 0x78, 0x58, 0x78, 0x46, 0xb5, 0x83, 0xd4, 0x41, 0x82, 0x9e, 0x24,
        0xd8, 0x87, 0xce, 0xda, 0x34, 0x46, ];

    generator = [ 7 ];

    large_safe_prime = [ 0xb7, 0x9b, 0x3e, 0x2a, 0x87, 0x82, 0x3c, 0xab, 0x8f, 0x5e, 0xbf,
                         0xbf, 0x8e, 0xb1, 0x01, 0x08, 0x53, 0x50, 0x06, 0x29, 0x8b, 0x5b,
                         0xad, 0xbd, 0x5b, 0x53, 0xe1, 0x89, 0x5e, 0x64, 0x4b, 0x89, ];

    salt = [ 0xc7, 0x09, 0x87, 0x7d, 0x8c, 0x65, 0x52, 0x66, 0xa5, 0x7d,
             0xb8, 0x65, 0x3d, 0x6e, 0xa6, 0x2b, 0xb5, 0x54, 0xf2, 0x0b,
             0xcf, 0x74, 0xd6, 0x4a, 0x77, 0xa7, 0xd3, 0x3d, 0xf3, 0x30,
             0x90, 0x87, ];

    crc_salt = [ 0xba, 0xa3, 0x1e, 0x99, 0xa0, 0x0b, 0x21, 0x57, 0xfc, 0x37,
                 0x3f, 0xb3, 0x69, 0xcd, 0xd2, 0xf1, ];

    security_flag = NONE;
} [
    0x00, /* Opcode: CMD_AUTH_LOGON_CHALLENGE */
    0x00, /* Protocol Version: 0 */
    0x00, /* Result: SUCCESS (0) */

    0x49, 0xd8, 0xc2, 0xbc, 0x68, 0x5c, 0x2b, 0xce, 0x4a, 0xf4, 0xfa, 0x07,
    0x0a, 0x47, 0x93, 0x78, 0x58, 0x78, 0x46, 0xb5, 0x83, 0xd4, 0x41, 0x82, 0x9e, 0x24,
    0xd8, 0x87, 0xce, 0xda, 0x34, 0x46, /* Server Public Key */

    0x01, /* Generator Length: 1 */
    0x07, /* Generator: 7 */
    0x20, /* Large Safe Prime Length: 32 */

    0xb7, 0x9b, 0x3e, 0x2a, 0x87, 0x82, 0x3c, 0xab, 0x8f, 0x5e,
    0xbf, 0xbf, 0x8e, 0xb1, 0x01, 0x08, 0x53, 0x50, 0x06, 0x29,
    0x8b, 0x5b, 0xad, 0xbd, 0x5b, 0x53, 0xe1, 0x89, 0x5e, 0x64,
    0x4b, 0x89, /* Large Safe Prime */

    0xc7, 0x09, 0x87, 0x7d, 0x8c, 0x65, 0x52, 0x66, 0xa5, 0x7d,
    0xb8, 0x65, 0x3d, 0x6e, 0xa6, 0x2b, 0xb5, 0x54, 0xf2, 0x0b,
    0xcf, 0x74, 0xd6, 0x4a, 0x77, 0xa7, 0xd3, 0x3d, 0xf3, 0x30,
    0x90, 0x87, /* Salt */

    0xba, 0xa3, 0x1e, 0x99, 0xa0, 0x0b, 0x21, 0x57, 0xfc, 0x37,
    0x3f, 0xb3, 0x69, 0xcd, 0xd2, 0xf1, /* CRC Salt */

    0x00, /* Two factor fields enabled: False */
] {
    login_versions = "8";
}

test CMD_AUTH_LOGON_CHALLENGE_Server {
    result = SUCCESS;

    server_public_key = [ 0x49, 0xd8, 0xc2, 0xbc, 0x68, 0x5c, 0x2b, 0xce, 0x4a, 0xf4, 0xfa, 0x07,
        0x0a, 0x47, 0x93, 0x78, 0x58, 0x78, 0x46, 0xb5, 0x83, 0xd4, 0x41, 0x82, 0x9e, 0x24,
        0xd8, 0x87, 0xce, 0xda, 0x34, 0x46, ];

    generator = [ 7 ];

    large_safe_prime = [ 0xb7, 0x9b, 0x3e, 0x2a, 0x87, 0x82, 0x3c, 0xab, 0x8f, 0x5e, 0xbf,
                         0xbf, 0x8e, 0xb1, 0x01, 0x08, 0x53, 0x50, 0x06, 0x29, 0x8b, 0x5b,
                         0xad, 0xbd, 0x5b, 0x53, 0xe1, 0x89, 0x5e, 0x64, 0x4b, 0x89, ];

    salt = [ 0xc7, 0x09, 0x87, 0x7d, 0x8c, 0x65, 0x52, 0x66, 0xa5, 0x7d,
             0xb8, 0x65, 0x3d, 0x6e, 0xa6, 0x2b, 0xb5, 0x54, 0xf2, 0x0b,
             0xcf, 0x74, 0xd6, 0x4a, 0x77, 0xa7, 0xd3, 0x3d, 0xf3, 0x30,
             0x90, 0x87, ];

    crc_salt = [ 0xba, 0xa3, 0x1e, 0x99, 0xa0, 0x0b, 0x21, 0x57, 0xfc, 0x37, 
                 0x3f, 0xb3, 0x69, 0xcd, 0xd2, 0xf1, ];

    security_flag = PIN;
    pin_grid_seed = 0xDEADBEEF;
    pin_salt = [ 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 
                        0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, ];
} [
    0x00, /* Opcode: CMD_AUTH_LOGON_CHALLENGE */
    0x00, /* Protocol Version: 0 */
    0x00, /* Result: SUCCESS (0) */

    0x49, 0xd8, 0xc2, 0xbc, 0x68, 0x5c, 0x2b, 0xce, 0x4a, 0xf4, 0xfa, 0x07,
    0x0a, 0x47, 0x93, 0x78, 0x58, 0x78, 0x46, 0xb5, 0x83, 0xd4, 0x41, 0x82, 0x9e, 0x24,
    0xd8, 0x87, 0xce, 0xda, 0x34, 0x46, /* Server Public Key */

    0x01, /* Generator Length: 1 */
    0x07, /* Generator: 7 */
    0x20, /* Large Safe Prime Length: 32 */

    0xb7, 0x9b, 0x3e, 0x2a, 0x87, 0x82, 0x3c, 0xab, 0x8f, 0x5e, 
    0xbf, 0xbf, 0x8e, 0xb1, 0x01, 0x08, 0x53, 0x50, 0x06, 0x29, 
    0x8b, 0x5b, 0xad, 0xbd, 0x5b, 0x53, 0xe1, 0x89, 0x5e, 0x64, 
    0x4b, 0x89, /* Large Safe Prime */

    0xc7, 0x09, 0x87, 0x7d, 0x8c, 0x65, 0x52, 0x66, 0xa5, 0x7d, 
    0xb8, 0x65, 0x3d, 0x6e, 0xa6, 0x2b, 0xb5, 0x54, 0xf2, 0x0b, 
    0xcf, 0x74, 0xd6, 0x4a, 0x77, 0xa7, 0xd3, 0x3d, 0xf3, 0x30, 
    0x90, 0x87, /* Salt */

    0xba, 0xa3, 0x1e, 0x99, 0xa0, 0x0b, 0x21, 0x57, 0xfc, 0x37, 
    0x3f, 0xb3, 0x69, 0xcd, 0xd2, 0xf1, /* CRC Salt */

    0x01, /* Two factor fields enabled: PIN */
    0xEF, 0xBE, 0xAD, 0xDE, /* PIN grid seed: 0xDEADBEEF */

    0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09,
    0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f, /* PIN salt */
] {
    login_versions = "8";
}

test CMD_AUTH_LOGON_CHALLENGE_Server {
    result = SUCCESS;

    server_public_key = [ 0x49, 0xd8, 0xc2, 0xbc, 0x68, 0x5c, 0x2b, 0xce, 0x4a, 0xf4, 0xfa, 0x07,
        0x0a, 0x47, 0x93, 0x78, 0x58, 0x78, 0x46, 0xb5, 0x83, 0xd4, 0x41, 0x82, 0x9e, 0x24,
        0xd8, 0x87, 0xce, 0xda, 0x34, 0x46, ];

    generator = [ 7 ];

    large_safe_prime = [ 0xb7, 0x9b, 0x3e, 0x2a, 0x87, 0x82, 0x3c, 0xab, 0x8f, 0x5e, 0xbf,
                         0xbf, 0x8e, 0xb1, 0x01, 0x08, 0x53, 0x50, 0x06, 0x29, 0x8b, 0x5b,
                         0xad, 0xbd, 0x5b, 0x53, 0xe1, 0x89, 0x5e, 0x64, 0x4b, 0x89, ];

    salt = [ 0xc7, 0x09, 0x87, 0x7d, 0x8c, 0x65, 0x52, 0x66, 0xa5, 0x7d,
             0xb8, 0x65, 0x3d, 0x6e, 0xa6, 0x2b, 0xb5, 0x54, 0xf2, 0x0b,
             0xcf, 0x74, 0xd6, 0x4a, 0x77, 0xa7, 0xd3, 0x3d, 0xf3, 0x30,
             0x90, 0x87, ];

    crc_salt = [ 0xba, 0xa3, 0x1e, 0x99, 0xa0, 0x0b, 0x21, 0x57, 0xfc, 0x37,
                 0x3f, 0xb3, 0x69, 0xcd, 0xd2, 0xf1, ];

    security_flag = AUTHENTICATOR;
    required = 1;
} [
    0x00, /* Opcode: CMD_AUTH_LOGON_CHALLENGE */
    0x00, /* Protocol Version: 0 */
    0x00, /* Result: SUCCESS (0) */

    0x49, 0xd8, 0xc2, 0xbc, 0x68, 0x5c, 0x2b, 0xce, 0x4a, 0xf4, 0xfa, 0x07,
    0x0a, 0x47, 0x93, 0x78, 0x58, 0x78, 0x46, 0xb5, 0x83, 0xd4, 0x41, 0x82, 0x9e, 0x24,
    0xd8, 0x87, 0xce, 0xda, 0x34, 0x46, /* Server Public Key */

    0x01, /* Generator Length: 1 */
    0x07, /* Generator: 7 */
    0x20, /* Large Safe Prime Length: 32 */

    0xb7, 0x9b, 0x3e, 0x2a, 0x87, 0x82, 0x3c, 0xab, 0x8f, 0x5e,
    0xbf, 0xbf, 0x8e, 0xb1, 0x01, 0x08, 0x53, 0x50, 0x06, 0x29,
    0x8b, 0x5b, 0xad, 0xbd, 0x5b, 0x53, 0xe1, 0x89, 0x5e, 0x64,
    0x4b, 0x89, /* Large Safe Prime */

    0xc7, 0x09, 0x87, 0x7d, 0x8c, 0x65, 0x52, 0x66, 0xa5, 0x7d,
    0xb8, 0x65, 0x3d, 0x6e, 0xa6, 0x2b, 0xb5, 0x54, 0xf2, 0x0b,
    0xcf, 0x74, 0xd6, 0x4a, 0x77, 0xa7, 0xd3, 0x3d, 0xf3, 0x30,
    0x90, 0x87, /* Salt */

    0xba, 0xa3, 0x1e, 0x99, 0xa0, 0x0b, 0x21, 0x57, 0xfc, 0x37,
    0x3f, 0xb3, 0x69, 0xcd, 0xd2, 0xf1, /* CRC Salt */

    0x04, /* Two factor fields enabled: AUTHENTICATOR */
    0x01, /* required */
] {
    login_versions = "8";
}

test CMD_AUTH_LOGON_CHALLENGE_Server {
    result = SUCCESS;

    server_public_key = [ 0x49, 0xd8, 0xc2, 0xbc, 0x68, 0x5c, 0x2b, 0xce, 0x4a, 0xf4, 0xfa, 0x07,
        0x0a, 0x47, 0x93, 0x78, 0x58, 0x78, 0x46, 0xb5, 0x83, 0xd4, 0x41, 0x82, 0x9e, 0x24,
        0xd8, 0x87, 0xce, 0xda, 0x34, 0x46, ];

    generator = [ 7 ];

    large_safe_prime = [ 0xb7, 0x9b, 0x3e, 0x2a, 0x87, 0x82, 0x3c, 0xab, 0x8f, 0x5e, 0xbf,
                         0xbf, 0x8e, 0xb1, 0x01, 0x08, 0x53, 0x50, 0x06, 0x29, 0x8b, 0x5b,
                         0xad, 0xbd, 0x5b, 0x53, 0xe1, 0x89, 0x5e, 0x64, 0x4b, 0x89, ];

    salt = [ 0xc7, 0x09, 0x87, 0x7d, 0x8c, 0x65, 0x52, 0x66, 0xa5, 0x7d,
             0xb8, 0x65, 0x3d, 0x6e, 0xa6, 0x2b, 0xb5, 0x54, 0xf2, 0x0b,
             0xcf, 0x74, 0xd6, 0x4a, 0x77, 0xa7, 0xd3, 0x3d, 0xf3, 0x30,
             0x90, 0x87, ];

    crc_salt = [ 0xba, 0xa3, 0x1e, 0x99, 0xa0, 0x0b, 0x21, 0x57, 0xfc, 0x37,
                 0x3f, 0xb3, 0x69, 0xcd, 0xd2, 0xf1, ];

    security_flag = MATRIX_CARD;
    width = 0xFF;
    height = 0xEE;
    digit_count = 0xDD;
    challenge_count = 0xCC;
    seed = 0xDEADBEEFFACADE;
    required = 1;
} [
    0x00, /* Opcode: CMD_AUTH_LOGON_CHALLENGE */
    0x00, /* Protocol Version: 0 */
    0x00, /* Result: SUCCESS (0) */

    0x49, 0xd8, 0xc2, 0xbc, 0x68, 0x5c, 0x2b, 0xce, 0x4a, 0xf4, 0xfa, 0x07,
    0x0a, 0x47, 0x93, 0x78, 0x58, 0x78, 0x46, 0xb5, 0x83, 0xd4, 0x41, 0x82, 0x9e, 0x24,
    0xd8, 0x87, 0xce, 0xda, 0x34, 0x46, /* Server Public Key */

    0x01, /* Generator Length: 1 */
    0x07, /* Generator: 7 */
    0x20, /* Large Safe Prime Length: 32 */

    0xb7, 0x9b, 0x3e, 0x2a, 0x87, 0x82, 0x3c, 0xab, 0x8f, 0x5e,
    0xbf, 0xbf, 0x8e, 0xb1, 0x01, 0x08, 0x53, 0x50, 0x06, 0x29,
    0x8b, 0x5b, 0xad, 0xbd, 0x5b, 0x53, 0xe1, 0x89, 0x5e, 0x64,
    0x4b, 0x89, /* Large Safe Prime */

    0xc7, 0x09, 0x87, 0x7d, 0x8c, 0x65, 0x52, 0x66, 0xa5, 0x7d,
    0xb8, 0x65, 0x3d, 0x6e, 0xa6, 0x2b, 0xb5, 0x54, 0xf2, 0x0b,
    0xcf, 0x74, 0xd6, 0x4a, 0x77, 0xa7, 0xd3, 0x3d, 0xf3, 0x30,
    0x90, 0x87, /* Salt */

    0xba, 0xa3, 0x1e, 0x99, 0xa0, 0x0b, 0x21, 0x57, 0xfc, 0x37,
    0x3f, 0xb3, 0x69, 0xcd, 0xd2, 0xf1, /* CRC Salt */

    0x02, /* Two factor fields enabled: MATRIX_CARD */
    0xFF, /* width */
    0xEE, /* height */
    0xDD, /* digit_count */
    0xCC, /* challenge_count */
    0xDE, 0xCA, 0xFA, 0xEF, 0xBE, 0xAD, 0xDE, 0x00, /* seed */
] {
    login_versions = "8";
}

test CMD_AUTH_LOGON_CHALLENGE_Server {
    result = FAIL_INCORRECT_PASSWORD;
} [
    0x00, /* Opcode: CMD_AUTH_LOGON_CHALLENGE */
    0x00, /* Protocol Version: 0 */
    0x05, /* Result: FAIL_INCORRECT_PASSWORD (5) */
] {
    login_versions = "8";
}

test CMD_AUTH_LOGON_CHALLENGE_Server {
    result = SUCCESS;

    server_public_key = [ 0x49, 0xd8, 0xc2, 0xbc, 0x68, 0x5c, 0x2b, 0xce, 0x4a, 0xf4, 0xfa, 0x07,
        0x0a, 0x47, 0x93, 0x78, 0x58, 0x78, 0x46, 0xb5, 0x83, 0xd4, 0x41, 0x82, 0x9e, 0x24,
        0xd8, 0x87, 0xce, 0xda, 0x34, 0x46, ];

    generator = [ 7 ];

    large_safe_prime = [ 0xb7, 0x9b, 0x3e, 0x2a, 0x87, 0x82, 0x3c, 0xab, 0x8f, 0x5e, 0xbf,
                         0xbf, 0x8e, 0xb1, 0x01, 0x08, 0x53, 0x50, 0x06, 0x29, 0x8b, 0x5b,
                         0xad, 0xbd, 0x5b, 0x53, 0xe1, 0x89, 0x5e, 0x64, 0x4b, 0x89, ];

    salt = [ 0xc7, 0x09, 0x87, 0x7d, 0x8c, 0x65, 0x52, 0x66, 0xa5, 0x7d,
             0xb8, 0x65, 0x3d, 0x6e, 0xa6, 0x2b, 0xb5, 0x54, 0xf2, 0x0b,
             0xcf, 0x74, 0xd6, 0x4a, 0x77, 0xa7, 0xd3, 0x3d, 0xf3, 0x30,
             0x90, 0x87, ];

    crc_salt = [ 0xba, 0xa3, 0x1e, 0x99, 0xa0, 0x0b, 0x21, 0x57, 0xfc, 0x37,
                 0x3f, 0xb3, 0x69, 0xcd, 0xd2, 0xf1, ];

    security_flag = MATRIX_CARD | AUTHENTICATOR;
    width = 0xFF;
    height = 0xEE;
    digit_count = 0xDD;
    challenge_count = 0xCC;
    seed = 0xDEADBEEFFACADE;

    required = 1;
} [
    0x00, /* Opcode: CMD_AUTH_LOGON_CHALLENGE */
    0x00, /* Protocol Version: 0 */
    0x00, /* Result: SUCCESS (0) */

    0x49, 0xd8, 0xc2, 0xbc, 0x68, 0x5c, 0x2b, 0xce, 0x4a, 0xf4, 0xfa, 0x07,
    0x0a, 0x47, 0x93, 0x78, 0x58, 0x78, 0x46, 0xb5, 0x83, 0xd4, 0x41, 0x82, 0x9e, 0x24,
    0xd8, 0x87, 0xce, 0xda, 0x34, 0x46, /* Server Public Key */

    0x01, /* Generator Length: 1 */
    0x07, /* Generator: 7 */
    0x20, /* Large Safe Prime Length: 32 */

    0xb7, 0x9b, 0x3e, 0x2a, 0x87, 0x82, 0x3c, 0xab, 0x8f, 0x5e,
    0xbf, 0xbf, 0x8e, 0xb1, 0x01, 0x08, 0x53, 0x50, 0x06, 0x29,
    0x8b, 0x5b, 0xad, 0xbd, 0x5b, 0x53, 0xe1, 0x89, 0x5e, 0x64,
    0x4b, 0x89, /* Large Safe Prime */

    0xc7, 0x09, 0x87, 0x7d, 0x8c, 0x65, 0x52, 0x66, 0xa5, 0x7d,
    0xb8, 0x65, 0x3d, 0x6e, 0xa6, 0x2b, 0xb5, 0x54, 0xf2, 0x0b,
    0xcf, 0x74, 0xd6, 0x4a, 0x77, 0xa7, 0xd3, 0x3d, 0xf3, 0x30,
    0x90, 0x87, /* Salt */

    0xba, 0xa3, 0x1e, 0x99, 0xa0, 0x0b, 0x21, 0x57, 0xfc, 0x37,
    0x3f, 0xb3, 0x69, 0xcd, 0xd2, 0xf1, /* CRC Salt */

    0x06, /* Two factor fields enabled: MATRIX_CARD */
    0xFF, /* width */
    0xEE, /* height */
    0xDD, /* digit_count */
    0xCC, /* challenge_count */
    0xDE, 0xCA, 0xFA, 0xEF, 0xBE, 0xAD, 0xDE, 0x00, /* seed */

    0x01, /* required */
] {
    login_versions = "8";
}

test CMD_AUTH_LOGON_CHALLENGE_Server {
    result = FAIL_INCORRECT_PASSWORD;
} [
    0x00, /* Opcode: CMD_AUTH_LOGON_CHALLENGE */
    0x00, /* Protocol Version: 0 */
    0x05, /* Result: FAIL_INCORRECT_PASSWORD (5) */
] {
    login_versions = "8";
}
