use std::convert::{TryFrom, TryInto};
use std::io::{Write, Read};

#[derive(Debug, Clone, PartialEq, Eq, Hash, Default)]
/// Auto generated from the original `wowm` in file [`tests/impl_levels.wowm:281`](https://github.com/gtker/wow_messages/tree/main/tests/impl_levels.wowm#L281):
/// ```text
/// cmsg CMSG_TEST_ENDLESS_U8 = 0x1337 {
///     CString c_string;
///     u8 b_u8;
///     u8[-] endless;
/// }
/// ```
pub struct CMSG_TEST_ENDLESS_U8 {
    pub c_string: String,
    pub b_u8: u8,
    pub endless: Vec<u8>,
}

impl crate::Message for CMSG_TEST_ENDLESS_U8 {
    const OPCODE: u32 = 0x1337;

    fn size_without_header(&self) -> u32 {
        self.size() as u32
    }

    fn write_into_vec(&self, w: &mut Vec<u8>) -> Result<(), std::io::Error> {
        // c_string: CString
        // TODO: Guard against strings that are already null-terminated
        assert_ne!(self.c_string.as_bytes().iter().rev().next(), Some(&0_u8), "String `c_string` must not be null-terminated.");
        w.write_all(self.c_string.as_bytes())?;
        // Null terminator
        w.write_all(&[0])?;

        // b_u8: u8
        w.write_all(&self.b_u8.to_le_bytes())?;

        // endless: u8[-]
        for i in self.endless.iter() {
            w.write_all(&i.to_le_bytes())?;
        }

        Ok(())
    }
    fn read_body(r: &mut &[u8], body_size: u32) -> std::result::Result<Self, crate::errors::ParseError> {
        // c_string: CString
        let c_string = crate::util::read_c_string_to_vec(r)?;
        let c_string = String::from_utf8(c_string)?;

        // b_u8: u8
        let b_u8 = crate::util::read_u8_le(r)?;

        // endless: u8[-]
        let mut current_size = {
            c_string.len() + 1 // c_string: CString
            + 1 // b_u8: u8
        };
        let mut endless = Vec::with_capacity(body_size as usize - current_size);
        while current_size < (body_size as usize) {
            endless.push(crate::util::read_u8_le(r)?);
            current_size += 1;
        }

        Ok(Self {
            c_string,
            b_u8,
            endless,
        })
    }

}
#[cfg(feature = "vanilla")]
impl crate::world::vanilla::ClientMessage for CMSG_TEST_ENDLESS_U8 {}

impl CMSG_TEST_ENDLESS_U8 {
    pub(crate) fn size(&self) -> usize {
        self.c_string.len() + 1 // c_string: CString
        + 1 // b_u8: u8
        + self.endless.len() * core::mem::size_of::<u8>() // endless: u8[-]
    }
}

