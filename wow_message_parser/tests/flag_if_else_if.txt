use std::io::{Read, Write};

use crate::vanilla::{
    SimpleFlag, UpdateFlag,
};

/// Auto generated from the original `wowm` in file [`wow_message_parser/tests/impl_levels.wowm:268`](https://github.com/gtker/wow_messages/tree/main/wow_message_parser/tests/impl_levels.wowm#L268):
/// ```text
/// struct FlagIfElseIf {
///     UpdateFlag flags;
///     if (flags & ONE_IF) {
///         u8 b_if;
///     }
///     else if (flags & TWO_ELSEIF) {
///         SimpleFlag s;
///         if (s & ONE) {
///             u8 if_one;
///         }
///     }
///     else if (flags & FOUR_ELSEIF) {
///         u8 elseif2;
///     }
///     if (flags & EIGHT_IF) {
///         u8 last_if;
///     }
/// }
/// ```
#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, PartialOrd, Ord, Default)]
pub struct FlagIfElseIf {
    pub flags: FlagIfElseIf_UpdateFlag,
}

impl FlagIfElseIf {
    pub(crate) fn write_into_vec(&self, mut w: impl Write) -> Result<(), std::io::Error> {
        // flags: UpdateFlag
        w.write_all(&(self.flags.as_int().to_le_bytes()))?;

        if let Some(if_statement) = &self.flags.one_if {
            match if_statement {
                FlagIfElseIf_UpdateFlag_OneIf::OneIf {
                    b_if,
                } => {
                    // b_if: u8
                    w.write_all(&b_if.to_le_bytes())?;

                }
                FlagIfElseIf_UpdateFlag_OneIf::TwoElseif {
                    s,
                } => {
                    // s: SimpleFlag
                    w.write_all(&(s.as_int().to_le_bytes()))?;

                    if let Some(if_statement) = &s.one {
                        // if_one: u8
                        w.write_all(&if_statement.if_one.to_le_bytes())?;

                    }

                }
                FlagIfElseIf_UpdateFlag_OneIf::FourElseif {
                    elseif2,
                } => {
                    // elseif2: u8
                    w.write_all(&elseif2.to_le_bytes())?;

                }
            }
        }

        if let Some(if_statement) = &self.flags.eight_if {
            // last_if: u8
            w.write_all(&if_statement.last_if.to_le_bytes())?;

        }

        Ok(())
    }
}

impl FlagIfElseIf {
    pub(crate) fn read<R: std::io::Read>(mut r: R) -> Result<Self, std::io::Error> {
        // flags: UpdateFlag
        let flags = UpdateFlag::new(crate::util::read_u8_le(&mut r)?);

        let flags_one_if = if flags.is_one_if() {
            // b_if: u8
            let b_if = crate::util::read_u8_le(&mut r)?;

            Some(FlagIfElseIf_UpdateFlag_OneIf::OneIf {
                b_if,
            })
        }
        else if flags.is_two_elseif() {
            // s: SimpleFlag
            let s = SimpleFlag::new(crate::util::read_u8_le(&mut r)?);

            let s_one = if s.is_one() {
                // if_one: u8
                let if_one = crate::util::read_u8_le(&mut r)?;

                Some(FlagIfElseIf_SimpleFlag_One {
                    if_one,
                })
            }
            else {
                None
            };

            let s = FlagIfElseIf_SimpleFlag {
                inner: s.as_int(),
                one: s_one,
            };

            Some(FlagIfElseIf_UpdateFlag_OneIf::TwoElseif {
                s,
            })
        }
        else if flags.is_four_elseif() {
            // elseif2: u8
            let elseif2 = crate::util::read_u8_le(&mut r)?;

            Some(FlagIfElseIf_UpdateFlag_OneIf::FourElseif {
                elseif2,
            })
        }
        else {
            None
        };

        let flags_eight_if = if flags.is_eight_if() {
            // last_if: u8
            let last_if = crate::util::read_u8_le(&mut r)?;

            Some(FlagIfElseIf_UpdateFlag_EightIf {
                last_if,
            })
        }
        else {
            None
        };

        let flags = FlagIfElseIf_UpdateFlag {
            inner: flags.as_int(),
            one_if: flags_one_if,
            eight_if: flags_eight_if,
        };

        Ok(Self {
            flags,
        })
    }

}

impl FlagIfElseIf {
    pub(crate) const fn size(&self) -> usize {
        self.flags.size() // flags: FlagIfElseIf_UpdateFlag
    }
}

#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, PartialOrd, Ord, Default)]
pub struct FlagIfElseIf_SimpleFlag {
    inner: u8,
    one: Option<FlagIfElseIf_SimpleFlag_One>,
}

impl FlagIfElseIf_SimpleFlag {
    pub const fn new(inner: u8, one: Option<FlagIfElseIf_SimpleFlag_One>,) -> Self {
        Self {
            inner,
            one, 
        }
    }

    pub const fn empty() -> Self {
        Self {
            inner: 0,
            one: None,
        }
    }

    pub const fn is_empty(&self) -> bool {
        self.inner == 0
        && self.one.is_none()
    }

    pub const fn new_one(one: FlagIfElseIf_SimpleFlag_One) -> Self {
        Self {
            inner: SimpleFlag::ONE,
            one: Some(one),
        }
    }

    #[allow(clippy::missing_const_for_fn)] // false positive
    pub fn set_one(mut self, one: FlagIfElseIf_SimpleFlag_One) -> Self {
        self.inner |= SimpleFlag::ONE;
        self.one = Some(one);
        self
    }

    pub const fn get_one(&self) -> Option<&FlagIfElseIf_SimpleFlag_One> {
        self.one.as_ref()
    }

    #[allow(clippy::missing_const_for_fn)] // false positive
    pub fn clear_one(mut self) -> Self {
        self.inner &= SimpleFlag::ONE.reverse_bits();
        self.one = None;
        self
    }

    pub const fn new_two() -> Self {
        Self {
            inner: SimpleFlag::TWO,
            one: None,
        }
    }

    #[allow(clippy::missing_const_for_fn)] // false positive
    pub fn set_two(mut self) -> Self {
        self.inner |= SimpleFlag::TWO;
        self
    }

    pub const fn get_two(&self) -> bool {
        (self.inner & SimpleFlag::TWO) != 0
    }

    #[allow(clippy::missing_const_for_fn)] // false positive
    pub fn clear_two(mut self) -> Self {
        self.inner &= SimpleFlag::TWO.reverse_bits();
        self
    }

    pub(crate) const fn as_int(&self) -> u8 {
        self.inner
    }

}
impl FlagIfElseIf_SimpleFlag {
    pub(crate) const fn size(&self) -> usize {
        1 // inner
        + {
            if let Some(s) = &self.one {
                1
            } else {
                0
            }
        }
    }
}

#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, PartialOrd, Ord, Default)]
pub struct FlagIfElseIf_SimpleFlag_One {
    pub if_one: u8,
}

#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub enum FlagIfElseIf_UpdateFlag_OneIf {
    OneIf {
        b_if: u8,
    },
    TwoElseif {
        s: FlagIfElseIf_SimpleFlag,
    },
    FourElseif {
        elseif2: u8,
    },
}

impl FlagIfElseIf_UpdateFlag_OneIf {
    pub(crate) const fn as_int(&self) -> u8 {
        match self {
            Self::OneIf { .. } => 1,
            Self::TwoElseif { .. } => 2,
            Self::FourElseif { .. } => 4,
        }
    }

}

impl std::fmt::Display for FlagIfElseIf_UpdateFlag_OneIf {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::OneIf{ .. } => f.write_str("OneIf"),
            Self::TwoElseif{ .. } => f.write_str("TwoElseif"),
            Self::FourElseif{ .. } => f.write_str("FourElseif"),
        }
    }
}

impl FlagIfElseIf_UpdateFlag_OneIf {
    pub(crate) const fn size(&self) -> usize {
        match self {
            Self::OneIf {
                ..
            } => {
                // Not an actual enum sent over the wire
                1 // b_if: u8
            }
            Self::TwoElseif {
                s,
            } => {
                // Not an actual enum sent over the wire
                s.size() // s: FlagIfElseIf_SimpleFlag
            }
            Self::FourElseif {
                ..
            } => {
                // Not an actual enum sent over the wire
                1 // elseif2: u8
            }
        }
    }
}

#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, PartialOrd, Ord, Default)]
pub struct FlagIfElseIf_UpdateFlag {
    inner: u8,
    one_if: Option<FlagIfElseIf_UpdateFlag_OneIf>,
    eight_if: Option<FlagIfElseIf_UpdateFlag_EightIf>,
}

impl FlagIfElseIf_UpdateFlag {
    pub const fn new(inner: u8, one_if: Option<FlagIfElseIf_UpdateFlag_OneIf>,eight_if: Option<FlagIfElseIf_UpdateFlag_EightIf>,) -> Self {
        Self {
            inner,
            one_if, 
            eight_if, 
        }
    }

    pub const fn empty() -> Self {
        Self {
            inner: 0,
            one_if: None,
            eight_if: None,
        }
    }

    pub const fn is_empty(&self) -> bool {
        self.inner == 0
        && self.one_if.is_none()
        && self.eight_if.is_none()
    }

    pub const fn new_one_if(one_if: FlagIfElseIf_UpdateFlag_OneIf) -> Self {
        Self {
            inner: one_if.as_int(),
            one_if: Some(one_if),
            eight_if: None,
        }
    }

    #[allow(clippy::missing_const_for_fn)] // false positive
    pub fn set_one_if(mut self, one_if: FlagIfElseIf_UpdateFlag_OneIf) -> Self {
        self.inner |= one_if.as_int();
        self.one_if = Some(one_if);
        self
    }

    pub const fn get_one_if(&self) -> Option<&FlagIfElseIf_UpdateFlag_OneIf> {
        self.one_if.as_ref()
    }

    #[allow(clippy::missing_const_for_fn)] // false positive
    pub fn clear_one_if(mut self) -> Self {
        self.inner &= UpdateFlag::ONE_IF.reverse_bits();
        self.one_if = None;
        self
    }

    pub const fn new_eight_if(eight_if: FlagIfElseIf_UpdateFlag_EightIf) -> Self {
        Self {
            inner: UpdateFlag::EIGHT_IF,
            one_if: None,
            eight_if: Some(eight_if),
        }
    }

    #[allow(clippy::missing_const_for_fn)] // false positive
    pub fn set_eight_if(mut self, eight_if: FlagIfElseIf_UpdateFlag_EightIf) -> Self {
        self.inner |= UpdateFlag::EIGHT_IF;
        self.eight_if = Some(eight_if);
        self
    }

    pub const fn get_eight_if(&self) -> Option<&FlagIfElseIf_UpdateFlag_EightIf> {
        self.eight_if.as_ref()
    }

    #[allow(clippy::missing_const_for_fn)] // false positive
    pub fn clear_eight_if(mut self) -> Self {
        self.inner &= UpdateFlag::EIGHT_IF.reverse_bits();
        self.eight_if = None;
        self
    }

    pub(crate) const fn as_int(&self) -> u8 {
        self.inner
    }

}
impl FlagIfElseIf_UpdateFlag {
    pub(crate) const fn size(&self) -> usize {
        1 // inner
        + {
            if let Some(s) = &self.one_if {
                3
            } else {
                0
            }
        }
        + {
            if let Some(s) = &self.eight_if {
                1
            } else {
                0
            }
        }
    }
}

#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, PartialOrd, Ord, Default)]
pub struct FlagIfElseIf_UpdateFlag_EightIf {
    pub last_if: u8,
}

