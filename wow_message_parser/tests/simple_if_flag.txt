use std::io::{Read, Write};

use crate::vanilla::SimpleFlag;

/// Auto generated from the original `wowm` in file [`wow_message_parser/tests/impl_levels.wowm:92`](https://github.com/gtker/wow_messages/tree/main/wow_message_parser/tests/impl_levels.wowm#L92):
/// ```text
/// struct SimpleIfFlag {
///     SimpleFlag flag;
///     if (flag & ZERO) {
///         u8 basic;
///     }
/// }
/// ```
#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, PartialOrd, Ord, Default)]
pub struct SimpleIfFlag {
    pub flag: SimpleIfFlag_SimpleFlag,
}

impl SimpleIfFlag {
    pub(crate) fn write_into_vec(&self, mut w: impl Write) -> Result<(), std::io::Error> {
        // flag: SimpleFlag
        w.write_all(&(self.flag.as_int().to_le_bytes()))?;

        if let Some(if_statement) = &self.flag.zero {
            // basic: u8
            w.write_all(&if_statement.basic.to_le_bytes())?;

        }

        Ok(())
    }
}

impl SimpleIfFlag {
    pub(crate) fn read<R: std::io::Read>(mut r: R) -> Result<Self, std::io::Error> {
        // flag: SimpleFlag
        let flag = SimpleFlag::new(crate::util::read_u8_le(&mut r)?);

        let flag_zero = if flag.is_zero() {
            // basic: u8
            let basic = crate::util::read_u8_le(&mut r)?;

            Some(SimpleIfFlag_SimpleFlag_Zero {
                basic,
            })
        }
        else {
            None
        };

        let flag = SimpleIfFlag_SimpleFlag {
            inner: flag.as_int(),
            zero: flag_zero,
        };

        Ok(Self {
            flag,
        })
    }

}

impl SimpleIfFlag {
    pub(crate) const fn size(&self) -> usize {
        self.flag.size() // flag: SimpleIfFlag_SimpleFlag
    }
}

#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, PartialOrd, Ord, Default)]
pub struct SimpleIfFlag_SimpleFlag {
    inner: u8,
    zero: Option<SimpleIfFlag_SimpleFlag_Zero>,
}

impl SimpleIfFlag_SimpleFlag {
    pub const fn new(inner: u8, zero: Option<SimpleIfFlag_SimpleFlag_Zero>,) -> Self {
        Self {
            inner,
            zero, 
        }
    }

    pub const fn empty() -> Self {
        Self {
            inner: 0,
            zero: None,
        }
    }

    pub const fn is_empty(&self) -> bool {
        self.inner == 0
        && self.zero.is_none()
    }

    pub const fn new_one() -> Self {
        Self {
            inner: SimpleFlag::ONE,
            zero: None,
        }
    }

    #[allow(clippy::missing_const_for_fn)] // false positive
    pub fn set_one(mut self) -> Self {
        self.inner |= SimpleFlag::ONE;
        self
    }

    pub const fn get_one(&self) -> bool {
        (self.inner & SimpleFlag::ONE) != 0
    }

    #[allow(clippy::missing_const_for_fn)] // false positive
    pub fn clear_one(mut self) -> Self {
        self.inner &= SimpleFlag::ONE.reverse_bits();
        self
    }

    pub const fn new_two() -> Self {
        Self {
            inner: SimpleFlag::TWO,
            zero: None,
        }
    }

    #[allow(clippy::missing_const_for_fn)] // false positive
    pub fn set_two(mut self) -> Self {
        self.inner |= SimpleFlag::TWO;
        self
    }

    pub const fn get_two(&self) -> bool {
        (self.inner & SimpleFlag::TWO) != 0
    }

    #[allow(clippy::missing_const_for_fn)] // false positive
    pub fn clear_two(mut self) -> Self {
        self.inner &= SimpleFlag::TWO.reverse_bits();
        self
    }

    pub(crate) const fn as_int(&self) -> u8 {
        self.inner
    }

}
impl SimpleIfFlag_SimpleFlag {
    pub(crate) const fn size(&self) -> usize {
        1 // inner
        + {
            if let Some(s) = &self.zero {
                1
            } else {
                0
            }
        }
    }
}

#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, PartialOrd, Ord, Default)]
pub struct SimpleIfFlag_SimpleFlag_Zero {
    pub basic: u8,
}

