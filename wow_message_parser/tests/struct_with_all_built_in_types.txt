use std::convert::{TryFrom, TryInto};
use std::io::{Write, Read};

#[derive(Debug, Clone, PartialEq, Default)]
/// Auto generated from the original `wowm` in file [`tests/impl_levels.wowm:19`](https://github.com/gtker/wow_messages/tree/main/tests/impl_levels.wowm#L19):
/// ```text
/// struct StructWithAllBuiltInTypes {
///     u8 basic8;
///     u16 basic16;
///     u32 basic32;
///     u64 basic64;
///     u16_be basic16_be;
///     u32_be basic32_be;
///     u64_be basic64_be;
///     f32 decimal32;
///     f32_be decimal32_be;
///     f64 decimal64;
///     f64_be decimal64_be;
///     CString simple_cstring;
///     String[basic8] simple_string;
/// }
/// ```
pub struct StructWithAllBuiltInTypes {
    pub basic16: u16,
    pub basic32: u32,
    pub basic64: u64,
    pub basic16_be: u16,
    pub basic32_be: u32,
    pub basic64_be: u64,
    pub decimal32: f32,
    pub decimal32_be: f32,
    pub decimal64: f64,
    pub decimal64_be: f64,
    pub simple_cstring: String,
    pub simple_string: String,
}

impl StructWithAllBuiltInTypes {
    pub(crate) fn write_into_vec(&self, w: &mut Vec<u8>) -> Result<(), std::io::Error> {
        // basic8: u8
        w.write_all(&(self.simple_string.len() as u8).to_le_bytes())?;

        // basic16: u16
        w.write_all(&self.basic16.to_le_bytes())?;

        // basic32: u32
        w.write_all(&self.basic32.to_le_bytes())?;

        // basic64: u64
        w.write_all(&self.basic64.to_le_bytes())?;

        // basic16_be: u16_be
        w.write_all(&self.basic16_be.to_be_bytes())?;

        // basic32_be: u32_be
        w.write_all(&self.basic32_be.to_be_bytes())?;

        // basic64_be: u64_be
        w.write_all(&self.basic64_be.to_be_bytes())?;

        // decimal32: f32
        w.write_all(&self.decimal32.to_le_bytes())?;

        // decimal32_be: f32_be
        w.write_all(&self.decimal32_be.to_be_bytes())?;

        // decimal64: f64
        w.write_all(&self.decimal64.to_le_bytes())?;

        // decimal64_be: f64_be
        w.write_all(&self.decimal64_be.to_be_bytes())?;

        // simple_cstring: CString
        // TODO: Guard against strings that are already null-terminated
        assert_ne!(self.simple_cstring.as_bytes().iter().rev().next(), Some(&0_u8), "String `simple_cstring` must not be null-terminated.");
        w.write_all(self.simple_cstring.as_bytes())?;
        // Null terminator
        w.write_all(&[0])?;

        // simple_string: String[basic8]
        w.write_all(self.simple_string.as_bytes())?;

        Ok(())
    }
}

impl StructWithAllBuiltInTypes {
    pub(crate) fn read<R: std::io::Read>(r: &mut R) -> std::result::Result<Self, crate::errors::ParseError> {
        // basic8: u8
        let basic8 = crate::util::read_u8_le(r)?;

        // basic16: u16
        let basic16 = crate::util::read_u16_le(r)?;

        // basic32: u32
        let basic32 = crate::util::read_u32_le(r)?;

        // basic64: u64
        let basic64 = crate::util::read_u64_le(r)?;

        // basic16_be: u16_be
        let basic16_be = crate::util::read_u16_be(r)?;

        // basic32_be: u32_be
        let basic32_be = crate::util::read_u32_be(r)?;

        // basic64_be: u64_be
        let basic64_be = crate::util::read_u64_be(r)?;

        // decimal32: f32
        let decimal32 = crate::util::read_f32_le(r)?;
        // decimal32_be: f32_be
        let decimal32_be = crate::util::read_f32_be(r)?;
        // decimal64: f64
        let decimal64 = crate::util::read_f64_le(r)?;
        // decimal64_be: f64_be
        let decimal64_be = crate::util::read_f64_be(r)?;
        // simple_cstring: CString
        let simple_cstring = crate::util::read_c_string_to_vec(r)?;
        let simple_cstring = String::from_utf8(simple_cstring)?;

        // simple_string: String[basic8]
        let simple_string = crate::util::read_fixed_string_to_vec(r, basic8 as usize)?;
        let simple_string = String::from_utf8(simple_string)?;

        Ok(Self {
            basic16,
            basic32,
            basic64,
            basic16_be,
            basic32_be,
            basic64_be,
            decimal32,
            decimal32_be,
            decimal64,
            decimal64_be,
            simple_cstring,
            simple_string,
        })
    }

}

impl StructWithAllBuiltInTypes {
    pub(crate) fn size(&self) -> usize {
        1 // basic8: u8
        + 2 // basic16: u16
        + 4 // basic32: u32
        + 8 // basic64: u64
        + 2 // basic16_be: u16_be
        + 4 // basic32_be: u32_be
        + 8 // basic64_be: u64_be
        + 4 // decimal32: f32
        + 4 // decimal32_be: f32_be
        + 8 // decimal64: f64
        + 8 // decimal64_be: f64_be
        + self.simple_cstring.len() + 1 // simple_cstring: CString
        + self.simple_string.len() // simple_string: String
    }
}

