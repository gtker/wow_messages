use std::io::{Read, Write};

use crate::vanilla::SimpleEnum;

/// Auto generated from the original `wowm` in file [`wow_message_parser/tests/impl_levels.wowm:84`](https://github.com/gtker/wow_messages/tree/main/wow_message_parser/tests/impl_levels.wowm#L84):
/// ```text
/// struct DoubleVariantEnum {
///     SimpleEnum enum;
///     if (enum == ZERO
///         || enum == ONE) {
///         u8 basic;
///     }
/// }
/// ```
#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub enum DoubleVariantEnum {
    Zero {
        basic: u8,
    },
    One {
        basic: u8,
    },
    Two,
}

impl DoubleVariantEnum {
    pub(crate) fn write_into_vec(&self, mut w: impl Write) -> Result<(), std::io::Error> {
        // enum: SimpleEnum
        w.write_all(&(self.as_int().to_le_bytes()))?;

        match &self {
            DoubleVariantEnum::Zero {
                basic,
            } => {
                // basic: u8
                w.write_all(&basic.to_le_bytes())?;

            }
            DoubleVariantEnum::One {
                basic,
            } => {
                // basic: u8
                w.write_all(&basic.to_le_bytes())?;

            }
            _ => {}
        }

        Ok(())
    }
}

impl DoubleVariantEnum {
    pub(crate) fn read<R: std::io::Read>(mut r: R) -> Result<Self, crate::errors::ParseErrorKind> {
        // enum: SimpleEnum
        let enum = crate::util::read_u8_le(&mut r)?.try_into()?;

        let enum_if = match enum {
            SimpleEnum::Zero => {
                // basic: u8
                let basic = crate::util::read_u8_le(&mut r)?;

                DoubleVariantEnum::Zero {
                    basic,
                }
            }
            SimpleEnum::One => {
                // basic: u8
                let basic = crate::util::read_u8_le(&mut r)?;

                DoubleVariantEnum::One {
                    basic,
                }
            }
            SimpleEnum::Two => DoubleVariantEnum::Two,
        };

        Ok(enum_if)
    }

}

impl DoubleVariantEnum {
    pub(crate) const fn size(&self) -> usize {
        (match self {
            Self::Zero {
                ..
            } => {
                1
                + 1 // basic: u8
            }
            Self::One {
                ..
            } => {
                1
                + 1 // basic: u8
            }
            _ => 1,
        }) // enum: DoubleVariantEnum
    }
}

impl Default for DoubleVariantEnum {
    fn default() -> Self {
        // First enumerator without any fields
        Self::Two
    }
}

impl DoubleVariantEnum {
    pub(crate) const fn as_int(&self) -> u8 {
        match self {
            Self::Zero { .. } => 0,
            Self::One { .. } => 1,
            Self::Two => 2,
        }
    }

}

impl std::fmt::Display for DoubleVariantEnum {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Zero{ .. } => f.write_str("Zero"),
            Self::One{ .. } => f.write_str("One"),
            Self::Two => f.write_str("Two"),
        }
    }
}

