    switch (header_opcode) {
        case CMSG_ACCEPT_TRADE:
            ptvcursor_add(ptv, hf_woww_unknown_int, 4, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_ACTIVATETAXI:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_source_node, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_destination_node, 4, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_ACTIVATETAXIEXPRESS:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_total_cost, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add_ret_uint(ptv, hf_woww_node_count, 4, ENC_LITTLE_ENDIAN, &node_count);
            for (guint32 i1 = 0; i1 < node_count; ++i1) {
                ptvcursor_add(ptv, hf_woww_nodes, 4, ENC_LITTLE_ENDIAN);
            }
            break;
        case CMSG_ADD_FRIEND:
            add_cstring(ptv, &hf_woww_name);
            break;
        case CMSG_ADD_IGNORE:
            add_cstring(ptv, &hf_woww_name);
            break;
        case CMSG_AREATRIGGER:
            ptvcursor_add(ptv, hf_woww_trigger_id, 4, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_AREA_SPIRIT_HEALER_QUERY:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_AREA_SPIRIT_HEALER_QUEUE:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_ATTACKSWING:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_AUCTION_LIST_BIDDER_ITEMS:
            ptvcursor_add(ptv, hf_woww_auctioneer, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_start_from_page, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add_ret_uint(ptv, hf_woww_amount_of_outbid_items, 4, ENC_LITTLE_ENDIAN, &amount_of_outbid_items);
            for (guint32 i1 = 0; i1 < amount_of_outbid_items; ++i1) {
                ptvcursor_add(ptv, hf_woww_outbid_item_ids, 4, ENC_LITTLE_ENDIAN);
            }
            break;
        case CMSG_AUCTION_LIST_ITEMS:
            ptvcursor_add(ptv, hf_woww_auctioneer, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_list_start_item, 4, ENC_LITTLE_ENDIAN);
            add_cstring(ptv, &hf_woww_searched_name);
            ptvcursor_add(ptv, hf_woww_minimum_level, 1, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_maximum_level, 1, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_auction_slot_id, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_auction_main_category, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_auction_sub_category, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_item_quality, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_usable, 1, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_AUCTION_LIST_OWNER_ITEMS:
            ptvcursor_add(ptv, hf_woww_auctioneer, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_list_from, 4, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_AUCTION_PLACE_BID:
            ptvcursor_add(ptv, hf_woww_auctioneer, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_auction_id, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_price, 4, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_AUCTION_REMOVE_ITEM:
            ptvcursor_add(ptv, hf_woww_auctioneer, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_auction_id, 4, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_AUCTION_SELL_ITEM:
            ptvcursor_add(ptv, hf_woww_auctioneer, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_item, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_starting_bid, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_buyout, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_auction_duration_in_minutes, 4, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_AUTH_SESSION:
            ptvcursor_add(ptv, hf_woww_build, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_server_id, 4, ENC_LITTLE_ENDIAN);
            add_cstring(ptv, &hf_woww_username);
            ptvcursor_add(ptv, hf_woww_client_seed, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_client_proof, 20, ENC_NA);
            ptvcursor_add(ptv, hf_woww_decompressed_size, 4, ENC_LITTLE_ENDIAN);
            compressed_tvb = tvb_uncompress(ptvcursor_tvbuff(ptv), ptvcursor_current_offset(ptv), offset_packet_end - ptvcursor_current_offset(ptv));
            if (compressed_tvb != NULL) {
                ptvcursor_t* old_ptv = ptv;
                ptv = ptvcursor_new(wmem_packet_scope(), tree, compressed_tvb, 0);
                gint compression_end = tvb_reported_length(compressed_tvb);
                while (ptvcursor_current_offset(ptv) < compression_end) {
                    ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "AddonInfo");
                    add_cstring(ptv, &hf_woww_addon_name);
                    ptvcursor_add(ptv, hf_woww_addon_has_signature, 1, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_addon_crc, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_addon_extra_crc, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_pop_subtree(ptv);
                }
                ptvcursor_free(ptv);
                ptv = old_ptv;
                compressed_tvb = NULL;
            }
            break;
        case CMSG_AUTOBANK_ITEM:
            ptvcursor_add(ptv, hf_woww_bag_index, 1, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_slot_index, 1, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_AUTOEQUIP_ITEM:
            ptvcursor_add(ptv, hf_woww_source_bag, 1, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_source_slot, 1, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_AUTOEQUIP_ITEM_SLOT:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_destination_slot, 1, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_AUTOSTORE_BAG_ITEM:
            ptvcursor_add(ptv, hf_woww_source_bag, 1, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_source_slot, 1, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_destination_bag, 1, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_AUTOSTORE_BANK_ITEM:
            ptvcursor_add(ptv, hf_woww_bag_index, 1, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_slot_index, 1, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_AUTOSTORE_LOOT_ITEM:
            ptvcursor_add(ptv, hf_woww_item_slot_int, 1, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_BANKER_ACTIVATE:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_BATTLEFIELD_JOIN:
            ptvcursor_add(ptv, hf_woww_map, 4, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_BATTLEFIELD_LIST:
            ptvcursor_add(ptv, hf_woww_map, 4, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_BATTLEFIELD_PORT:
            ptvcursor_add(ptv, hf_woww_map, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_battlefield_port_action, 1, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_BATTLEMASTER_HELLO:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_BATTLEMASTER_JOIN:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_map, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_instance_id, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_join_as_group, 1, ENC_NA);
            break;
        case CMSG_BINDER_ACTIVATE:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_BUG:
            ptvcursor_add(ptv, hf_woww_suggestion, 4, ENC_LITTLE_ENDIAN);
            add_sized_cstring(ptv, &hf_woww_content);
            add_sized_cstring(ptv, &hf_woww_bug_type);
            break;
        case CMSG_BUYBACK_ITEM:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_buyback_slot, 4, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_BUY_BANK_SLOT:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_BUY_ITEM:
            ptvcursor_add(ptv, hf_woww_vendor, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_item, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_amount, 1, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_unknown_int, 1, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_BUY_ITEM_IN_SLOT:
            ptvcursor_add(ptv, hf_woww_vendor, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_item, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_bag, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_bag_slot, 1, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_amount, 1, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_BUY_STABLE_SLOT:
            ptvcursor_add(ptv, hf_woww_npc, 8, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_CANCEL_AURA:
            ptvcursor_add(ptv, hf_woww_id, 4, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_CANCEL_CAST:
            ptvcursor_add(ptv, hf_woww_id, 4, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_CANCEL_CHANNELLING:
            ptvcursor_add(ptv, hf_woww_id, 4, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_CAST_SPELL:
            ptvcursor_add(ptv, hf_woww_spell, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "SpellCastTargets");
            ptvcursor_add_ret_uint(ptv, hf_woww_spell_cast_target_flags, 2, ENC_LITTLE_ENDIAN, &target_flags);
            if (target_flags & SPELL_CAST_TARGET_FLAGS_UNIT) {
                add_packed_guid(ptv, pinfo);
            }
            if (target_flags & SPELL_CAST_TARGET_FLAGS_GAMEOBJECT) {
                add_packed_guid(ptv, pinfo);
            }
            else if (target_flags & SPELL_CAST_TARGET_FLAGS_OBJECT_UNK) {
                add_packed_guid(ptv, pinfo);
            }
            if (target_flags & SPELL_CAST_TARGET_FLAGS_ITEM) {
                add_packed_guid(ptv, pinfo);
            }
            else if (target_flags & SPELL_CAST_TARGET_FLAGS_TRADE_ITEM) {
                add_packed_guid(ptv, pinfo);
            }
            if (target_flags & SPELL_CAST_TARGET_FLAGS_SOURCE_LOCATION) {
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
            }
            if (target_flags & SPELL_CAST_TARGET_FLAGS_DEST_LOCATION) {
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
            }
            if (target_flags & SPELL_CAST_TARGET_FLAGS_STRING) {
                add_cstring(ptv, &hf_woww_target_string);
            }
            if (target_flags & SPELL_CAST_TARGET_FLAGS_CORPSE) {
                add_packed_guid(ptv, pinfo);
            }
            else if (target_flags & SPELL_CAST_TARGET_FLAGS_PVP_CORPSE) {
                add_packed_guid(ptv, pinfo);
            }
            ptvcursor_pop_subtree(ptv);
            break;
        case CMSG_CHANNEL_ANNOUNCEMENTS:
            add_cstring(ptv, &hf_woww_channel_name);
            break;
        case CMSG_CHANNEL_BAN:
            add_cstring(ptv, &hf_woww_channel_name);
            add_cstring(ptv, &hf_woww_player_name);
            break;
        case CMSG_CHANNEL_INVITE:
            add_cstring(ptv, &hf_woww_channel_name);
            add_cstring(ptv, &hf_woww_player_name);
            break;
        case CMSG_CHANNEL_KICK:
            add_cstring(ptv, &hf_woww_channel_name);
            add_cstring(ptv, &hf_woww_player_name);
            break;
        case CMSG_CHANNEL_LIST:
            add_cstring(ptv, &hf_woww_channel_name);
            break;
        case CMSG_CHANNEL_MODERATE:
            add_cstring(ptv, &hf_woww_channel_name);
            break;
        case CMSG_CHANNEL_MODERATOR:
            add_cstring(ptv, &hf_woww_channel_name);
            add_cstring(ptv, &hf_woww_player_name);
            break;
        case CMSG_CHANNEL_MUTE:
            add_cstring(ptv, &hf_woww_channel_name);
            add_cstring(ptv, &hf_woww_player_name);
            break;
        case CMSG_CHANNEL_OWNER:
            add_cstring(ptv, &hf_woww_channel_name);
            break;
        case CMSG_CHANNEL_PASSWORD:
            add_cstring(ptv, &hf_woww_channel_name);
            add_cstring(ptv, &hf_woww_channel_password);
            break;
        case CMSG_CHANNEL_SET_OWNER:
            add_cstring(ptv, &hf_woww_channel_name);
            add_cstring(ptv, &hf_woww_new_owner);
            break;
        case CMSG_CHANNEL_UNBAN:
            add_cstring(ptv, &hf_woww_channel_name);
            add_cstring(ptv, &hf_woww_player_name);
            break;
        case CMSG_CHANNEL_UNMODERATOR:
            add_cstring(ptv, &hf_woww_channel_name);
            add_cstring(ptv, &hf_woww_player_name);
            break;
        case CMSG_CHANNEL_UNMUTE:
            add_cstring(ptv, &hf_woww_channel_name);
            add_cstring(ptv, &hf_woww_player_name);
            break;
        case CMSG_CHAR_CREATE:
            add_cstring(ptv, &hf_woww_name);
            ptvcursor_add(ptv, hf_woww_race, 1, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_class, 1, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_gender, 1, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_skin_color, 1, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_face, 1, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_hair_style, 1, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_hair_color, 1, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_facial_hair, 1, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_outfit_id, 1, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_CHAR_DELETE:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_CHAR_RENAME:
            ptvcursor_add(ptv, hf_woww_character_guid, 8, ENC_LITTLE_ENDIAN);
            add_cstring(ptv, &hf_woww_new_name);
            break;
        case CMSG_CHAT_IGNORED:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_CLEAR_TRADE_ITEM:
            ptvcursor_add(ptv, hf_woww_trade_slot, 1, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_CREATURE_QUERY:
            ptvcursor_add(ptv, hf_woww_creature, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_DBLOOKUP:
            add_cstring(ptv, &hf_woww_query);
            break;
        case CMSG_DEL_FRIEND:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_DEL_IGNORE:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_DESTROYITEM:
            ptvcursor_add(ptv, hf_woww_bag, 1, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_slot, 1, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_amount, 1, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_unknown_int, 1, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_unknown_int, 1, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_unknown_int, 1, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_DUEL_ACCEPTED:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_DUEL_CANCELLED:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_EMOTE:
            ptvcursor_add(ptv, hf_woww_emote_enum, 4, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_FAR_SIGHT:
            ptvcursor_add(ptv, hf_woww_far_sight_operation, 1, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_FORCE_MOVE_ROOT_ACK:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_movement_counter, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "MovementInfo");
            ptvcursor_add_ret_uint(ptv, hf_woww_movement_flags, 4, ENC_LITTLE_ENDIAN, &flags);
            ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
            ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_pop_subtree(ptv);
            ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
            if (flags & MOVEMENT_FLAGS_ON_TRANSPORT) {
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "TransportInfo");
                add_packed_guid(ptv, pinfo);
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
                ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
            }
            if (flags & MOVEMENT_FLAGS_SWIMMING) {
                ptvcursor_add(ptv, hf_woww_pitch, 4, ENC_LITTLE_ENDIAN);
            }
            ptvcursor_add(ptv, hf_woww_fall_time, 4, ENC_LITTLE_ENDIAN);
            if (flags & MOVEMENT_FLAGS_JUMPING) {
                ptvcursor_add(ptv, hf_woww_z_speed, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_cos_angle, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_sin_angle, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_xy_speed, 4, ENC_LITTLE_ENDIAN);
            }
            if (flags & MOVEMENT_FLAGS_SPLINE_ELEVATION) {
                ptvcursor_add(ptv, hf_woww_spline_elevation, 4, ENC_LITTLE_ENDIAN);
            }
            ptvcursor_pop_subtree(ptv);
            break;
        case CMSG_FORCE_MOVE_UNROOT_ACK:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_movement_counter, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "MovementInfo");
            ptvcursor_add_ret_uint(ptv, hf_woww_movement_flags, 4, ENC_LITTLE_ENDIAN, &flags);
            ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
            ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_pop_subtree(ptv);
            ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
            if (flags & MOVEMENT_FLAGS_ON_TRANSPORT) {
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "TransportInfo");
                add_packed_guid(ptv, pinfo);
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
                ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
            }
            if (flags & MOVEMENT_FLAGS_SWIMMING) {
                ptvcursor_add(ptv, hf_woww_pitch, 4, ENC_LITTLE_ENDIAN);
            }
            ptvcursor_add(ptv, hf_woww_fall_time, 4, ENC_LITTLE_ENDIAN);
            if (flags & MOVEMENT_FLAGS_JUMPING) {
                ptvcursor_add(ptv, hf_woww_z_speed, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_cos_angle, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_sin_angle, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_xy_speed, 4, ENC_LITTLE_ENDIAN);
            }
            if (flags & MOVEMENT_FLAGS_SPLINE_ELEVATION) {
                ptvcursor_add(ptv, hf_woww_spline_elevation, 4, ENC_LITTLE_ENDIAN);
            }
            ptvcursor_pop_subtree(ptv);
            break;
        case CMSG_FORCE_RUN_BACK_SPEED_CHANGE_ACK:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_movement_counter, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "MovementInfo");
            ptvcursor_add_ret_uint(ptv, hf_woww_movement_flags, 4, ENC_LITTLE_ENDIAN, &flags);
            ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
            ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_pop_subtree(ptv);
            ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
            if (flags & MOVEMENT_FLAGS_ON_TRANSPORT) {
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "TransportInfo");
                add_packed_guid(ptv, pinfo);
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
                ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
            }
            if (flags & MOVEMENT_FLAGS_SWIMMING) {
                ptvcursor_add(ptv, hf_woww_pitch, 4, ENC_LITTLE_ENDIAN);
            }
            ptvcursor_add(ptv, hf_woww_fall_time, 4, ENC_LITTLE_ENDIAN);
            if (flags & MOVEMENT_FLAGS_JUMPING) {
                ptvcursor_add(ptv, hf_woww_z_speed, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_cos_angle, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_sin_angle, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_xy_speed, 4, ENC_LITTLE_ENDIAN);
            }
            if (flags & MOVEMENT_FLAGS_SPLINE_ELEVATION) {
                ptvcursor_add(ptv, hf_woww_spline_elevation, 4, ENC_LITTLE_ENDIAN);
            }
            ptvcursor_pop_subtree(ptv);
            ptvcursor_add(ptv, hf_woww_new_speed, 4, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_FORCE_RUN_SPEED_CHANGE_ACK:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_counter, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "MovementInfo");
            ptvcursor_add_ret_uint(ptv, hf_woww_movement_flags, 4, ENC_LITTLE_ENDIAN, &flags);
            ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
            ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_pop_subtree(ptv);
            ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
            if (flags & MOVEMENT_FLAGS_ON_TRANSPORT) {
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "TransportInfo");
                add_packed_guid(ptv, pinfo);
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
                ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
            }
            if (flags & MOVEMENT_FLAGS_SWIMMING) {
                ptvcursor_add(ptv, hf_woww_pitch, 4, ENC_LITTLE_ENDIAN);
            }
            ptvcursor_add(ptv, hf_woww_fall_time, 4, ENC_LITTLE_ENDIAN);
            if (flags & MOVEMENT_FLAGS_JUMPING) {
                ptvcursor_add(ptv, hf_woww_z_speed, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_cos_angle, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_sin_angle, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_xy_speed, 4, ENC_LITTLE_ENDIAN);
            }
            if (flags & MOVEMENT_FLAGS_SPLINE_ELEVATION) {
                ptvcursor_add(ptv, hf_woww_spline_elevation, 4, ENC_LITTLE_ENDIAN);
            }
            ptvcursor_pop_subtree(ptv);
            ptvcursor_add(ptv, hf_woww_new_speed, 4, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_FORCE_SWIM_BACK_SPEED_CHANGE_ACK:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_counter, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "MovementInfo");
            ptvcursor_add_ret_uint(ptv, hf_woww_movement_flags, 4, ENC_LITTLE_ENDIAN, &flags);
            ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
            ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_pop_subtree(ptv);
            ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
            if (flags & MOVEMENT_FLAGS_ON_TRANSPORT) {
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "TransportInfo");
                add_packed_guid(ptv, pinfo);
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
                ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
            }
            if (flags & MOVEMENT_FLAGS_SWIMMING) {
                ptvcursor_add(ptv, hf_woww_pitch, 4, ENC_LITTLE_ENDIAN);
            }
            ptvcursor_add(ptv, hf_woww_fall_time, 4, ENC_LITTLE_ENDIAN);
            if (flags & MOVEMENT_FLAGS_JUMPING) {
                ptvcursor_add(ptv, hf_woww_z_speed, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_cos_angle, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_sin_angle, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_xy_speed, 4, ENC_LITTLE_ENDIAN);
            }
            if (flags & MOVEMENT_FLAGS_SPLINE_ELEVATION) {
                ptvcursor_add(ptv, hf_woww_spline_elevation, 4, ENC_LITTLE_ENDIAN);
            }
            ptvcursor_pop_subtree(ptv);
            ptvcursor_add(ptv, hf_woww_new_speed, 4, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_FORCE_SWIM_SPEED_CHANGE_ACK:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_counter, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "MovementInfo");
            ptvcursor_add_ret_uint(ptv, hf_woww_movement_flags, 4, ENC_LITTLE_ENDIAN, &flags);
            ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
            ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_pop_subtree(ptv);
            ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
            if (flags & MOVEMENT_FLAGS_ON_TRANSPORT) {
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "TransportInfo");
                add_packed_guid(ptv, pinfo);
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
                ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
            }
            if (flags & MOVEMENT_FLAGS_SWIMMING) {
                ptvcursor_add(ptv, hf_woww_pitch, 4, ENC_LITTLE_ENDIAN);
            }
            ptvcursor_add(ptv, hf_woww_fall_time, 4, ENC_LITTLE_ENDIAN);
            if (flags & MOVEMENT_FLAGS_JUMPING) {
                ptvcursor_add(ptv, hf_woww_z_speed, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_cos_angle, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_sin_angle, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_xy_speed, 4, ENC_LITTLE_ENDIAN);
            }
            if (flags & MOVEMENT_FLAGS_SPLINE_ELEVATION) {
                ptvcursor_add(ptv, hf_woww_spline_elevation, 4, ENC_LITTLE_ENDIAN);
            }
            ptvcursor_pop_subtree(ptv);
            ptvcursor_add(ptv, hf_woww_new_speed, 4, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_FORCE_TURN_RATE_CHANGE_ACK:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_counter, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "MovementInfo");
            ptvcursor_add_ret_uint(ptv, hf_woww_movement_flags, 4, ENC_LITTLE_ENDIAN, &flags);
            ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
            ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_pop_subtree(ptv);
            ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
            if (flags & MOVEMENT_FLAGS_ON_TRANSPORT) {
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "TransportInfo");
                add_packed_guid(ptv, pinfo);
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
                ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
            }
            if (flags & MOVEMENT_FLAGS_SWIMMING) {
                ptvcursor_add(ptv, hf_woww_pitch, 4, ENC_LITTLE_ENDIAN);
            }
            ptvcursor_add(ptv, hf_woww_fall_time, 4, ENC_LITTLE_ENDIAN);
            if (flags & MOVEMENT_FLAGS_JUMPING) {
                ptvcursor_add(ptv, hf_woww_z_speed, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_cos_angle, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_sin_angle, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_xy_speed, 4, ENC_LITTLE_ENDIAN);
            }
            if (flags & MOVEMENT_FLAGS_SPLINE_ELEVATION) {
                ptvcursor_add(ptv, hf_woww_spline_elevation, 4, ENC_LITTLE_ENDIAN);
            }
            ptvcursor_pop_subtree(ptv);
            ptvcursor_add(ptv, hf_woww_new_speed, 4, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_FORCE_WALK_SPEED_CHANGE_ACK:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_counter, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "MovementInfo");
            ptvcursor_add_ret_uint(ptv, hf_woww_movement_flags, 4, ENC_LITTLE_ENDIAN, &flags);
            ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
            ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_pop_subtree(ptv);
            ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
            if (flags & MOVEMENT_FLAGS_ON_TRANSPORT) {
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "TransportInfo");
                add_packed_guid(ptv, pinfo);
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
                ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
            }
            if (flags & MOVEMENT_FLAGS_SWIMMING) {
                ptvcursor_add(ptv, hf_woww_pitch, 4, ENC_LITTLE_ENDIAN);
            }
            ptvcursor_add(ptv, hf_woww_fall_time, 4, ENC_LITTLE_ENDIAN);
            if (flags & MOVEMENT_FLAGS_JUMPING) {
                ptvcursor_add(ptv, hf_woww_z_speed, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_cos_angle, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_sin_angle, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_xy_speed, 4, ENC_LITTLE_ENDIAN);
            }
            if (flags & MOVEMENT_FLAGS_SPLINE_ELEVATION) {
                ptvcursor_add(ptv, hf_woww_spline_elevation, 4, ENC_LITTLE_ENDIAN);
            }
            ptvcursor_pop_subtree(ptv);
            ptvcursor_add(ptv, hf_woww_new_speed, 4, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_GAMEOBJECT_QUERY:
            ptvcursor_add(ptv, hf_woww_entry_id, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_GAMEOBJ_USE:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_GET_MAIL_LIST:
            ptvcursor_add(ptv, hf_woww_mailbox, 8, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_GMSURVEY_SUBMIT:
            ptvcursor_add(ptv, hf_woww_survey_id, 4, ENC_LITTLE_ENDIAN);
            for (guint32 i1 = 0; i1 < 10; ++i1) {
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "GmSurveyQuestion %i", i1);
                ptvcursor_add(ptv, hf_woww_question_id, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_answer, 1, ENC_LITTLE_ENDIAN);
                add_cstring(ptv, &hf_woww_comment);
                ptvcursor_pop_subtree(ptv);
            }
            add_cstring(ptv, &hf_woww_answer_comment);
            break;
        case CMSG_GMTICKET_CREATE:
            ptvcursor_add_ret_uint(ptv, hf_woww_gm_ticket_type, 1, ENC_LITTLE_ENDIAN, &category);
            ptvcursor_add(ptv, hf_woww_map, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
            ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_pop_subtree(ptv);
            add_cstring(ptv, &hf_woww_message);
            add_cstring(ptv, &hf_woww_reserved_for_future_use);
            if (category == GM_TICKET_TYPE_BEHAVIOR_HARASSMENT) {
                ptvcursor_add(ptv, hf_woww_chat_data_line_count, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_decompressed_size, 4, ENC_LITTLE_ENDIAN);
                compressed_tvb = tvb_uncompress(ptvcursor_tvbuff(ptv), ptvcursor_current_offset(ptv), offset_packet_end - ptvcursor_current_offset(ptv));
                if (compressed_tvb != NULL) {
                    ptvcursor_t* old_ptv = ptv;
                    ptv = ptvcursor_new(wmem_packet_scope(), tree, compressed_tvb, 0);
                    len = offset_packet_end - ptvcursor_current_offset(ptv);
                    ptvcursor_add(ptv, hf_woww_compressed_chat_data, len, ENC_NA);
                    ptvcursor_free(ptv);
                    ptv = old_ptv;
                    compressed_tvb = NULL;
                }
            }
            break;
        case CMSG_GMTICKET_UPDATETEXT:
            ptvcursor_add(ptv, hf_woww_gm_ticket_type, 1, ENC_LITTLE_ENDIAN);
            add_cstring(ptv, &hf_woww_message);
            break;
        case CMSG_GOSSIP_HELLO:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_GOSSIP_SELECT_OPTION:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_gossip_list_id, 4, ENC_LITTLE_ENDIAN);
            len = offset_packet_end - ptvcursor_current_offset(ptv);
            if (len > 0) {
                add_cstring(ptv, &hf_woww_code);
            }
            break;
        case CMSG_GROUP_ASSISTANT_LEADER:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_set_assistant, 1, ENC_NA);
            break;
        case CMSG_GROUP_CHANGE_SUB_GROUP:
            add_cstring(ptv, &hf_woww_name);
            ptvcursor_add(ptv, hf_woww_group_number, 1, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_GROUP_INVITE:
            add_cstring(ptv, &hf_woww_name);
            break;
        case CMSG_GROUP_SET_LEADER:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_GROUP_SWAP_SUB_GROUP:
            add_cstring(ptv, &hf_woww_name);
            add_cstring(ptv, &hf_woww_swap_with_name);
            break;
        case CMSG_GROUP_UNINVITE:
            add_cstring(ptv, &hf_woww_name);
            break;
        case CMSG_GROUP_UNINVITE_GUID:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_GUILD_ADD_RANK:
            add_cstring(ptv, &hf_woww_rank_name);
            break;
        case CMSG_GUILD_CREATE:
            add_cstring(ptv, &hf_woww_guild_name);
            break;
        case CMSG_GUILD_DEMOTE:
            add_cstring(ptv, &hf_woww_player_name);
            break;
        case CMSG_GUILD_INFO_TEXT:
            add_cstring(ptv, &hf_woww_guild_info);
            break;
        case CMSG_GUILD_INVITE:
            add_cstring(ptv, &hf_woww_invited_player);
            break;
        case CMSG_GUILD_LEADER:
            add_cstring(ptv, &hf_woww_new_guild_leader_name);
            break;
        case CMSG_GUILD_MOTD:
            add_cstring(ptv, &hf_woww_message_of_the_day);
            break;
        case CMSG_GUILD_PROMOTE:
            add_cstring(ptv, &hf_woww_player_name);
            break;
        case CMSG_GUILD_QUERY:
            ptvcursor_add(ptv, hf_woww_guild_id, 4, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_GUILD_RANK:
            ptvcursor_add(ptv, hf_woww_rank_id, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_rights, 4, ENC_LITTLE_ENDIAN);
            add_cstring(ptv, &hf_woww_rank_name);
            break;
        case CMSG_GUILD_REMOVE:
            add_cstring(ptv, &hf_woww_player_name);
            break;
        case CMSG_GUILD_SET_OFFICER_NOTE:
            add_cstring(ptv, &hf_woww_player_name);
            add_cstring(ptv, &hf_woww_note);
            break;
        case CMSG_GUILD_SET_PUBLIC_NOTE:
            add_cstring(ptv, &hf_woww_player_name);
            add_cstring(ptv, &hf_woww_note);
            break;
        case CMSG_INITIATE_TRADE:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_INSPECT:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_ITEM_NAME_QUERY:
            ptvcursor_add(ptv, hf_woww_item, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_ITEM_QUERY_SINGLE:
            ptvcursor_add(ptv, hf_woww_item, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_ITEM_TEXT_QUERY:
            ptvcursor_add(ptv, hf_woww_item_text_id, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_mail_id, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_unknown_int, 4, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_JOIN_CHANNEL:
            add_cstring(ptv, &hf_woww_channel_name);
            add_cstring(ptv, &hf_woww_channel_password);
            break;
        case CMSG_LEARN_TALENT:
            ptvcursor_add(ptv, hf_woww_talent, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_requested_rank, 4, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_LEAVE_BATTLEFIELD:
            ptvcursor_add(ptv, hf_woww_map, 4, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_LEAVE_CHANNEL:
            add_cstring(ptv, &hf_woww_channel_name);
            break;
        case CMSG_LIST_INVENTORY:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_LOOT:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_LOOT_MASTER_GIVE:
            ptvcursor_add(ptv, hf_woww_loot, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_slot_id, 1, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_player, 8, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_LOOT_METHOD:
            ptvcursor_add(ptv, hf_woww_group_loot_setting, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_loot_master, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_item_quality, 4, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_LOOT_RELEASE:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_LOOT_ROLL:
            ptvcursor_add(ptv, hf_woww_item, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_item_slot_int, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_roll_vote, 1, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_MAIL_CREATE_TEXT_ITEM:
            ptvcursor_add(ptv, hf_woww_mailbox, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_mail_id, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_mail_template_id, 4, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_MAIL_DELETE:
            ptvcursor_add(ptv, hf_woww_mailbox_id, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_mail_id, 4, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_MAIL_MARK_AS_READ:
            ptvcursor_add(ptv, hf_woww_mailbox, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_mail_id, 4, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_MAIL_RETURN_TO_SENDER:
            ptvcursor_add(ptv, hf_woww_mailbox_id, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_mail_id, 4, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_MAIL_TAKE_ITEM:
            ptvcursor_add(ptv, hf_woww_mailbox, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_mail_id, 4, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_MAIL_TAKE_MONEY:
            ptvcursor_add(ptv, hf_woww_mailbox, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_mail_id, 4, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_MEETINGSTONE_JOIN:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_MESSAGECHAT:
            ptvcursor_add_ret_uint(ptv, hf_woww_chat_type, 4, ENC_LITTLE_ENDIAN, &chat_type);
            ptvcursor_add(ptv, hf_woww_language, 4, ENC_LITTLE_ENDIAN);
            if (chat_type == CHAT_TYPE_WHISPER) {
                add_cstring(ptv, &hf_woww_target_player);
            }
            else if (chat_type == CHAT_TYPE_CHANNEL) {
                add_cstring(ptv, &hf_woww_channel);
            }
            add_cstring(ptv, &hf_woww_message);
            break;
        case CMSG_MOVE_FALL_RESET:
            ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "MovementInfo");
            ptvcursor_add_ret_uint(ptv, hf_woww_movement_flags, 4, ENC_LITTLE_ENDIAN, &flags);
            ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
            ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_pop_subtree(ptv);
            ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
            if (flags & MOVEMENT_FLAGS_ON_TRANSPORT) {
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "TransportInfo");
                add_packed_guid(ptv, pinfo);
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
                ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
            }
            if (flags & MOVEMENT_FLAGS_SWIMMING) {
                ptvcursor_add(ptv, hf_woww_pitch, 4, ENC_LITTLE_ENDIAN);
            }
            ptvcursor_add(ptv, hf_woww_fall_time, 4, ENC_LITTLE_ENDIAN);
            if (flags & MOVEMENT_FLAGS_JUMPING) {
                ptvcursor_add(ptv, hf_woww_z_speed, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_cos_angle, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_sin_angle, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_xy_speed, 4, ENC_LITTLE_ENDIAN);
            }
            if (flags & MOVEMENT_FLAGS_SPLINE_ELEVATION) {
                ptvcursor_add(ptv, hf_woww_spline_elevation, 4, ENC_LITTLE_ENDIAN);
            }
            ptvcursor_pop_subtree(ptv);
            break;
        case CMSG_MOVE_FEATHER_FALL_ACK:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_movement_counter, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "MovementInfo");
            ptvcursor_add_ret_uint(ptv, hf_woww_movement_flags, 4, ENC_LITTLE_ENDIAN, &flags);
            ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
            ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_pop_subtree(ptv);
            ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
            if (flags & MOVEMENT_FLAGS_ON_TRANSPORT) {
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "TransportInfo");
                add_packed_guid(ptv, pinfo);
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
                ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
            }
            if (flags & MOVEMENT_FLAGS_SWIMMING) {
                ptvcursor_add(ptv, hf_woww_pitch, 4, ENC_LITTLE_ENDIAN);
            }
            ptvcursor_add(ptv, hf_woww_fall_time, 4, ENC_LITTLE_ENDIAN);
            if (flags & MOVEMENT_FLAGS_JUMPING) {
                ptvcursor_add(ptv, hf_woww_z_speed, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_cos_angle, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_sin_angle, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_xy_speed, 4, ENC_LITTLE_ENDIAN);
            }
            if (flags & MOVEMENT_FLAGS_SPLINE_ELEVATION) {
                ptvcursor_add(ptv, hf_woww_spline_elevation, 4, ENC_LITTLE_ENDIAN);
            }
            ptvcursor_pop_subtree(ptv);
            ptvcursor_add(ptv, hf_woww_apply, 4, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_MOVE_HOVER_ACK:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_counter, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "MovementInfo");
            ptvcursor_add_ret_uint(ptv, hf_woww_movement_flags, 4, ENC_LITTLE_ENDIAN, &flags);
            ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
            ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_pop_subtree(ptv);
            ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
            if (flags & MOVEMENT_FLAGS_ON_TRANSPORT) {
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "TransportInfo");
                add_packed_guid(ptv, pinfo);
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
                ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
            }
            if (flags & MOVEMENT_FLAGS_SWIMMING) {
                ptvcursor_add(ptv, hf_woww_pitch, 4, ENC_LITTLE_ENDIAN);
            }
            ptvcursor_add(ptv, hf_woww_fall_time, 4, ENC_LITTLE_ENDIAN);
            if (flags & MOVEMENT_FLAGS_JUMPING) {
                ptvcursor_add(ptv, hf_woww_z_speed, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_cos_angle, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_sin_angle, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_xy_speed, 4, ENC_LITTLE_ENDIAN);
            }
            if (flags & MOVEMENT_FLAGS_SPLINE_ELEVATION) {
                ptvcursor_add(ptv, hf_woww_spline_elevation, 4, ENC_LITTLE_ENDIAN);
            }
            ptvcursor_pop_subtree(ptv);
            ptvcursor_add(ptv, hf_woww_is_applied, 4, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_MOVE_KNOCK_BACK_ACK:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_counter, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "MovementInfo");
            ptvcursor_add_ret_uint(ptv, hf_woww_movement_flags, 4, ENC_LITTLE_ENDIAN, &flags);
            ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
            ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_pop_subtree(ptv);
            ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
            if (flags & MOVEMENT_FLAGS_ON_TRANSPORT) {
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "TransportInfo");
                add_packed_guid(ptv, pinfo);
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
                ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
            }
            if (flags & MOVEMENT_FLAGS_SWIMMING) {
                ptvcursor_add(ptv, hf_woww_pitch, 4, ENC_LITTLE_ENDIAN);
            }
            ptvcursor_add(ptv, hf_woww_fall_time, 4, ENC_LITTLE_ENDIAN);
            if (flags & MOVEMENT_FLAGS_JUMPING) {
                ptvcursor_add(ptv, hf_woww_z_speed, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_cos_angle, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_sin_angle, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_xy_speed, 4, ENC_LITTLE_ENDIAN);
            }
            if (flags & MOVEMENT_FLAGS_SPLINE_ELEVATION) {
                ptvcursor_add(ptv, hf_woww_spline_elevation, 4, ENC_LITTLE_ENDIAN);
            }
            ptvcursor_pop_subtree(ptv);
            break;
        case CMSG_MOVE_NOT_ACTIVE_MOVER:
            ptvcursor_add(ptv, hf_woww_old_mover, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "MovementInfo");
            ptvcursor_add_ret_uint(ptv, hf_woww_movement_flags, 4, ENC_LITTLE_ENDIAN, &flags);
            ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
            ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_pop_subtree(ptv);
            ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
            if (flags & MOVEMENT_FLAGS_ON_TRANSPORT) {
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "TransportInfo");
                add_packed_guid(ptv, pinfo);
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
                ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
            }
            if (flags & MOVEMENT_FLAGS_SWIMMING) {
                ptvcursor_add(ptv, hf_woww_pitch, 4, ENC_LITTLE_ENDIAN);
            }
            ptvcursor_add(ptv, hf_woww_fall_time, 4, ENC_LITTLE_ENDIAN);
            if (flags & MOVEMENT_FLAGS_JUMPING) {
                ptvcursor_add(ptv, hf_woww_z_speed, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_cos_angle, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_sin_angle, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_xy_speed, 4, ENC_LITTLE_ENDIAN);
            }
            if (flags & MOVEMENT_FLAGS_SPLINE_ELEVATION) {
                ptvcursor_add(ptv, hf_woww_spline_elevation, 4, ENC_LITTLE_ENDIAN);
            }
            ptvcursor_pop_subtree(ptv);
            break;
        case CMSG_MOVE_SET_RAW_POSITION:
            ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
            ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_pop_subtree(ptv);
            ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_MOVE_SPLINE_DONE:
            ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "MovementInfo");
            ptvcursor_add_ret_uint(ptv, hf_woww_movement_flags, 4, ENC_LITTLE_ENDIAN, &flags);
            ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
            ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_pop_subtree(ptv);
            ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
            if (flags & MOVEMENT_FLAGS_ON_TRANSPORT) {
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "TransportInfo");
                add_packed_guid(ptv, pinfo);
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
                ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
            }
            if (flags & MOVEMENT_FLAGS_SWIMMING) {
                ptvcursor_add(ptv, hf_woww_pitch, 4, ENC_LITTLE_ENDIAN);
            }
            ptvcursor_add(ptv, hf_woww_fall_time, 4, ENC_LITTLE_ENDIAN);
            if (flags & MOVEMENT_FLAGS_JUMPING) {
                ptvcursor_add(ptv, hf_woww_z_speed, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_cos_angle, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_sin_angle, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_xy_speed, 4, ENC_LITTLE_ENDIAN);
            }
            if (flags & MOVEMENT_FLAGS_SPLINE_ELEVATION) {
                ptvcursor_add(ptv, hf_woww_spline_elevation, 4, ENC_LITTLE_ENDIAN);
            }
            ptvcursor_pop_subtree(ptv);
            ptvcursor_add(ptv, hf_woww_movement_counter, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_unknown_int, 4, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_MOVE_TIME_SKIPPED:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_lag, 4, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_MOVE_WATER_WALK_ACK:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_movement_counter, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "MovementInfo");
            ptvcursor_add_ret_uint(ptv, hf_woww_movement_flags, 4, ENC_LITTLE_ENDIAN, &flags);
            ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
            ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_pop_subtree(ptv);
            ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
            if (flags & MOVEMENT_FLAGS_ON_TRANSPORT) {
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "TransportInfo");
                add_packed_guid(ptv, pinfo);
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
                ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
            }
            if (flags & MOVEMENT_FLAGS_SWIMMING) {
                ptvcursor_add(ptv, hf_woww_pitch, 4, ENC_LITTLE_ENDIAN);
            }
            ptvcursor_add(ptv, hf_woww_fall_time, 4, ENC_LITTLE_ENDIAN);
            if (flags & MOVEMENT_FLAGS_JUMPING) {
                ptvcursor_add(ptv, hf_woww_z_speed, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_cos_angle, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_sin_angle, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_xy_speed, 4, ENC_LITTLE_ENDIAN);
            }
            if (flags & MOVEMENT_FLAGS_SPLINE_ELEVATION) {
                ptvcursor_add(ptv, hf_woww_spline_elevation, 4, ENC_LITTLE_ENDIAN);
            }
            ptvcursor_pop_subtree(ptv);
            ptvcursor_add(ptv, hf_woww_apply, 4, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_NAME_QUERY:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_NPC_TEXT_QUERY:
            ptvcursor_add(ptv, hf_woww_text_id, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_OFFER_PETITION:
            ptvcursor_add(ptv, hf_woww_petition, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_target, 8, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_OPEN_ITEM:
            ptvcursor_add(ptv, hf_woww_bag_index, 1, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_slot, 1, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_PAGE_TEXT_QUERY:
            ptvcursor_add(ptv, hf_woww_page_id, 4, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_PETITION_BUY:
            ptvcursor_add(ptv, hf_woww_npc, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_unknown_int, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_unknown_guid, 8, ENC_LITTLE_ENDIAN);
            add_cstring(ptv, &hf_woww_name);
            ptvcursor_add(ptv, hf_woww_unknown_int, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_unknown_int, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_unknown_int, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_unknown_int, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_unknown_int, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_unknown_int, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_unknown_int, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_unknown_int, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_unknown_int, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_unknown_int, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_unknown_int, 2, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_unknown_int, 1, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_index, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_unknown_int, 4, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_PETITION_QUERY:
            ptvcursor_add(ptv, hf_woww_guild_id, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_petition, 8, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_PETITION_SHOWLIST:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_PETITION_SHOW_SIGNATURES:
            ptvcursor_add(ptv, hf_woww_item, 8, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_PETITION_SIGN:
            ptvcursor_add(ptv, hf_woww_petition, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_unknown_int, 1, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_PET_ABANDON:
            ptvcursor_add(ptv, hf_woww_pet, 8, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_PET_ACTION:
            ptvcursor_add(ptv, hf_woww_pet, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_data, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_target, 8, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_PET_CANCEL_AURA:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_id, 4, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_PET_CAST_SPELL:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_id, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "SpellCastTargets");
            ptvcursor_add_ret_uint(ptv, hf_woww_spell_cast_target_flags, 2, ENC_LITTLE_ENDIAN, &target_flags);
            if (target_flags & SPELL_CAST_TARGET_FLAGS_UNIT) {
                add_packed_guid(ptv, pinfo);
            }
            if (target_flags & SPELL_CAST_TARGET_FLAGS_GAMEOBJECT) {
                add_packed_guid(ptv, pinfo);
            }
            else if (target_flags & SPELL_CAST_TARGET_FLAGS_OBJECT_UNK) {
                add_packed_guid(ptv, pinfo);
            }
            if (target_flags & SPELL_CAST_TARGET_FLAGS_ITEM) {
                add_packed_guid(ptv, pinfo);
            }
            else if (target_flags & SPELL_CAST_TARGET_FLAGS_TRADE_ITEM) {
                add_packed_guid(ptv, pinfo);
            }
            if (target_flags & SPELL_CAST_TARGET_FLAGS_SOURCE_LOCATION) {
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
            }
            if (target_flags & SPELL_CAST_TARGET_FLAGS_DEST_LOCATION) {
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
            }
            if (target_flags & SPELL_CAST_TARGET_FLAGS_STRING) {
                add_cstring(ptv, &hf_woww_target_string);
            }
            if (target_flags & SPELL_CAST_TARGET_FLAGS_CORPSE) {
                add_packed_guid(ptv, pinfo);
            }
            else if (target_flags & SPELL_CAST_TARGET_FLAGS_PVP_CORPSE) {
                add_packed_guid(ptv, pinfo);
            }
            ptvcursor_pop_subtree(ptv);
            break;
        case CMSG_PET_NAME_QUERY:
            ptvcursor_add(ptv, hf_woww_pet_number, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_PET_RENAME:
            ptvcursor_add(ptv, hf_woww_pet, 8, ENC_LITTLE_ENDIAN);
            add_cstring(ptv, &hf_woww_name);
            break;
        case CMSG_PET_SET_ACTION:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_position, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_data, 4, ENC_LITTLE_ENDIAN);
            len = offset_packet_end - ptvcursor_current_offset(ptv);
            if (len > 0) {
                ptvcursor_add(ptv, hf_woww_position, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_data, 4, ENC_LITTLE_ENDIAN);
            }
            break;
        case CMSG_PET_SPELL_AUTOCAST:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_id, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_autocast_enabled, 1, ENC_NA);
            break;
        case CMSG_PET_STOP_ATTACK:
            ptvcursor_add(ptv, hf_woww_pet, 8, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_PET_UNLEARN:
            ptvcursor_add(ptv, hf_woww_pet, 8, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_PING:
            ptvcursor_add(ptv, hf_woww_sequence_id, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_round_time_in_ms, 4, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_PLAYER_LOGIN:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_PUSHQUESTTOPARTY:
            ptvcursor_add(ptv, hf_woww_quest_id, 4, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_QUESTGIVER_ACCEPT_QUEST:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_quest_id, 4, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_QUESTGIVER_CHOOSE_REWARD:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_quest_id, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_reward, 4, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_QUESTGIVER_COMPLETE_QUEST:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_quest_id, 4, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_QUESTGIVER_HELLO:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_QUESTGIVER_QUERY_QUEST:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_quest_id, 4, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_QUESTGIVER_REQUEST_REWARD:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_quest_id, 4, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_QUESTGIVER_STATUS_QUERY:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_QUESTLOG_REMOVE_QUEST:
            ptvcursor_add(ptv, hf_woww_slot, 1, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_QUESTLOG_SWAP_QUEST:
            ptvcursor_add(ptv, hf_woww_slot, 1, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_slot, 1, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_QUEST_CONFIRM_ACCEPT:
            ptvcursor_add(ptv, hf_woww_quest_id, 4, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_QUEST_QUERY:
            ptvcursor_add(ptv, hf_woww_quest_id, 4, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_READ_ITEM:
            ptvcursor_add(ptv, hf_woww_bag_index, 1, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_slot, 1, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_RECLAIM_CORPSE:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_REPAIR_ITEM:
            ptvcursor_add(ptv, hf_woww_npc, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_item, 8, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_REQUEST_ACCOUNT_DATA:
            ptvcursor_add(ptv, hf_woww_data_type, 4, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_REQUEST_PARTY_MEMBER_STATS:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_RESURRECT_RESPONSE:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_status, 1, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_SELL_ITEM:
            ptvcursor_add(ptv, hf_woww_vendor, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_item, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_amount, 1, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_SEND_MAIL:
            ptvcursor_add(ptv, hf_woww_mailbox, 8, ENC_LITTLE_ENDIAN);
            add_cstring(ptv, &hf_woww_receiver);
            add_cstring(ptv, &hf_woww_subject);
            add_cstring(ptv, &hf_woww_body);
            ptvcursor_add(ptv, hf_woww_unknown_int, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_unknown_int, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_item, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_money, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_cash_on_delivery_amount, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_unknown_int, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_unknown_int, 4, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_SETSHEATHED:
            ptvcursor_add(ptv, hf_woww_sheath_state, 4, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_SET_ACTIONBAR_TOGGLES:
            ptvcursor_add(ptv, hf_woww_action_bar, 1, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_SET_ACTION_BUTTON:
            ptvcursor_add(ptv, hf_woww_button, 1, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_action, 2, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_misc, 1, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_action_type, 1, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_SET_ACTIVE_MOVER:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_SET_AMMO:
            ptvcursor_add(ptv, hf_woww_item, 4, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_SET_FACTION_ATWAR:
            ptvcursor_add(ptv, hf_woww_faction, 2, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_faction_flag, 1, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_SET_FACTION_INACTIVE:
            ptvcursor_add(ptv, hf_woww_faction, 2, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_inactive, 1, ENC_NA);
            break;
        case CMSG_SET_SELECTION:
            ptvcursor_add(ptv, hf_woww_target, 8, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_SET_TARGET_OBSOLETE:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_SET_TRADE_GOLD:
            ptvcursor_add(ptv, hf_woww_gold, 4, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_SET_TRADE_ITEM:
            ptvcursor_add(ptv, hf_woww_trade_slot, 1, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_bag, 1, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_slot, 1, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_SET_WATCHED_FACTION:
            ptvcursor_add(ptv, hf_woww_faction, 2, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_SPIRIT_HEALER_ACTIVATE:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_SPLIT_ITEM:
            ptvcursor_add(ptv, hf_woww_source_bag, 1, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_source_slot, 1, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_destination_bag, 1, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_destination_slot, 1, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_amount, 1, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_STABLE_PET:
            ptvcursor_add(ptv, hf_woww_stable_master, 8, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_STABLE_SWAP_PET:
            ptvcursor_add(ptv, hf_woww_npc, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_pet_slot, 4, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_STANDSTATECHANGE:
            ptvcursor_add(ptv, hf_woww_unit_stand_state, 4, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_SUMMON_RESPONSE:
            ptvcursor_add(ptv, hf_woww_summoner, 8, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_SWAP_INV_ITEM:
            ptvcursor_add(ptv, hf_woww_item_slot, 1, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_item_slot, 1, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_SWAP_ITEM:
            ptvcursor_add(ptv, hf_woww_destination_bag, 1, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_destionation_slot, 1, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_source_bag, 1, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_source_slot, 1, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_TAXINODE_STATUS_QUERY:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_TAXIQUERYAVAILABLENODES:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_TELEPORT_TO_UNIT:
            add_cstring(ptv, &hf_woww_name);
            break;
        case CMSG_TEXT_EMOTE:
            ptvcursor_add(ptv, hf_woww_text_emote, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_emote_int, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_target, 8, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_TOGGLE_PVP:
            len = offset_packet_end - ptvcursor_current_offset(ptv);
            if (len > 0) {
                ptvcursor_add(ptv, hf_woww_enable_pvp, 1, ENC_NA);
            }
            break;
        case CMSG_TRAINER_BUY_SPELL:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_id, 4, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_TRAINER_LIST:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_TURN_IN_PETITION:
            ptvcursor_add(ptv, hf_woww_petition, 8, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_TUTORIAL_FLAG:
            ptvcursor_add(ptv, hf_woww_tutorial_flag, 4, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_UNLEARN_SKILL:
            ptvcursor_add(ptv, hf_woww_skill, 4, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_UNSTABLE_PET:
            ptvcursor_add(ptv, hf_woww_stable_master, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_pet_number, 4, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_UPDATE_ACCOUNT_DATA:
            ptvcursor_add(ptv, hf_woww_account_data_type, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_decompressed_size, 4, ENC_LITTLE_ENDIAN);
            compressed_tvb = tvb_uncompress(ptvcursor_tvbuff(ptv), ptvcursor_current_offset(ptv), offset_packet_end - ptvcursor_current_offset(ptv));
            if (compressed_tvb != NULL) {
                ptvcursor_t* old_ptv = ptv;
                ptv = ptvcursor_new(wmem_packet_scope(), tree, compressed_tvb, 0);
                len = offset_packet_end - ptvcursor_current_offset(ptv);
                ptvcursor_add(ptv, hf_woww_compressed_data, len, ENC_NA);
                ptvcursor_free(ptv);
                ptv = old_ptv;
                compressed_tvb = NULL;
            }
            break;
        case CMSG_USE_ITEM:
            ptvcursor_add(ptv, hf_woww_bag_index, 1, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_bag_slot, 1, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_spell_index, 1, ENC_LITTLE_ENDIAN);
            ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "SpellCastTargets");
            ptvcursor_add_ret_uint(ptv, hf_woww_spell_cast_target_flags, 2, ENC_LITTLE_ENDIAN, &target_flags);
            if (target_flags & SPELL_CAST_TARGET_FLAGS_UNIT) {
                add_packed_guid(ptv, pinfo);
            }
            if (target_flags & SPELL_CAST_TARGET_FLAGS_GAMEOBJECT) {
                add_packed_guid(ptv, pinfo);
            }
            else if (target_flags & SPELL_CAST_TARGET_FLAGS_OBJECT_UNK) {
                add_packed_guid(ptv, pinfo);
            }
            if (target_flags & SPELL_CAST_TARGET_FLAGS_ITEM) {
                add_packed_guid(ptv, pinfo);
            }
            else if (target_flags & SPELL_CAST_TARGET_FLAGS_TRADE_ITEM) {
                add_packed_guid(ptv, pinfo);
            }
            if (target_flags & SPELL_CAST_TARGET_FLAGS_SOURCE_LOCATION) {
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
            }
            if (target_flags & SPELL_CAST_TARGET_FLAGS_DEST_LOCATION) {
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
            }
            if (target_flags & SPELL_CAST_TARGET_FLAGS_STRING) {
                add_cstring(ptv, &hf_woww_target_string);
            }
            if (target_flags & SPELL_CAST_TARGET_FLAGS_CORPSE) {
                add_packed_guid(ptv, pinfo);
            }
            else if (target_flags & SPELL_CAST_TARGET_FLAGS_PVP_CORPSE) {
                add_packed_guid(ptv, pinfo);
            }
            ptvcursor_pop_subtree(ptv);
            break;
        case CMSG_WARDEN_DATA:
            len = offset_packet_end - ptvcursor_current_offset(ptv);
            ptvcursor_add(ptv, hf_woww_encrypted_data, len, ENC_NA);
            break;
        case CMSG_WHO:
            ptvcursor_add(ptv, hf_woww_minimum_level, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_maximum_level, 4, ENC_LITTLE_ENDIAN);
            add_cstring(ptv, &hf_woww_player_name);
            add_cstring(ptv, &hf_woww_guild_name);
            ptvcursor_add(ptv, hf_woww_race_mask, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_class_mask, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add_ret_uint(ptv, hf_woww_amount_of_zones, 4, ENC_LITTLE_ENDIAN, &amount_of_zones);
            for (guint32 i1 = 0; i1 < amount_of_zones; ++i1) {
                ptvcursor_add(ptv, hf_woww_zones, 4, ENC_LITTLE_ENDIAN);
            }
            ptvcursor_add_ret_uint(ptv, hf_woww_amount_of_strings, 4, ENC_LITTLE_ENDIAN, &amount_of_strings);
            for (guint32 i1 = 0; i1 < amount_of_strings; ++i1) {
                add_cstring(ptv, &hf_woww_search_strings);
            }
            break;
        case CMSG_WHOIS:
            add_cstring(ptv, &hf_woww_character_name);
            break;
        case CMSG_WORLD_TELEPORT:
            ptvcursor_add(ptv, hf_woww_time, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_map, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
            ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_pop_subtree(ptv);
            ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_WRAP_ITEM:
            ptvcursor_add(ptv, hf_woww_gift_bag_index, 1, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_gift_slot, 1, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_item_bag_index, 1, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_item_slot_int, 1, ENC_LITTLE_ENDIAN);
            break;
        case CMSG_ZONEUPDATE:
            ptvcursor_add(ptv, hf_woww_area, 4, ENC_LITTLE_ENDIAN);
            break;
        case MSG_AUCTION_HELLO:
            if (WOWW_SERVER_TO_CLIENT) {
                ptvcursor_add(ptv, hf_woww_auctioneer, 8, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_auction_house, 4, ENC_LITTLE_ENDIAN);
            }
            else {
                ptvcursor_add(ptv, hf_woww_auctioneer, 8, ENC_LITTLE_ENDIAN);
            }
            break;
        case MSG_BATTLEGROUND_PLAYER_POSITIONS:
            if (WOWW_SERVER_TO_CLIENT) {
                ptvcursor_add_ret_uint(ptv, hf_woww_amount_of_teammates, 4, ENC_LITTLE_ENDIAN, &amount_of_teammates);
                for (guint32 i1 = 0; i1 < amount_of_teammates; ++i1) {
                    ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "BattlegroundPlayerPosition %i", i1);
                    ptvcursor_add(ptv, hf_woww_player, 8, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_position_x, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_position_y, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_pop_subtree(ptv);
                }
                ptvcursor_add_ret_uint(ptv, hf_woww_amount_of_carriers, 1, ENC_LITTLE_ENDIAN, &amount_of_carriers);
                for (guint32 i1 = 0; i1 < amount_of_carriers; ++i1) {
                    ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "BattlegroundPlayerPosition %i", i1);
                    ptvcursor_add(ptv, hf_woww_player, 8, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_position_x, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_position_y, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_pop_subtree(ptv);
                }
            }
            else {
            }
            break;
        case MSG_CHANNEL_START:
            if (WOWW_SERVER_TO_CLIENT) {
                ptvcursor_add(ptv, hf_woww_spell, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_duration, 4, ENC_LITTLE_ENDIAN);
            }
            break;
        case MSG_CHANNEL_UPDATE:
            if (WOWW_SERVER_TO_CLIENT) {
                ptvcursor_add(ptv, hf_woww_time, 4, ENC_LITTLE_ENDIAN);
            }
            break;
        case MSG_CORPSE_QUERY:
            if (WOWW_SERVER_TO_CLIENT) {
                ptvcursor_add_ret_uint(ptv, hf_woww_corpse_query_result, 1, ENC_LITTLE_ENDIAN, &result);
                if (result == CORPSE_QUERY_RESULT_FOUND) {
                    ptvcursor_add(ptv, hf_woww_map, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                    ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_pop_subtree(ptv);
                    ptvcursor_add(ptv, hf_woww_map, 4, ENC_LITTLE_ENDIAN);
                }
            }
            else {
            }
            break;
        case MSG_INSPECT_HONOR_STATS:
            if (WOWW_SERVER_TO_CLIENT) {
                ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_pvp_rank, 1, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_today_honorable_and_dishonorable, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_yesterday_honorable, 2, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_unknown_int, 2, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_last_week_honorable, 2, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_unknown_int, 2, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_this_week_honorable, 2, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_unknown_int, 2, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_lifetime_honorable, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_lifetime_dishonorable, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_yesterday_honor, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_last_week_honor, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_this_week_honor, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_pvp_rank, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_rank_progress_bar, 1, ENC_LITTLE_ENDIAN);
            }
            else {
                ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            }
            break;
        case MSG_LIST_STABLED_PETS:
            if (WOWW_SERVER_TO_CLIENT) {
                ptvcursor_add(ptv, hf_woww_npc, 8, ENC_LITTLE_ENDIAN);
                ptvcursor_add_ret_uint(ptv, hf_woww_amount_of_pets, 1, ENC_LITTLE_ENDIAN, &amount_of_pets);
                ptvcursor_add(ptv, hf_woww_stable_slots, 1, ENC_LITTLE_ENDIAN);
                for (guint32 i1 = 0; i1 < amount_of_pets; ++i1) {
                    ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "StabledPet %i", i1);
                    ptvcursor_add(ptv, hf_woww_pet_number, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_entry, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_level, 4, ENC_LITTLE_ENDIAN);
                    add_cstring(ptv, &hf_woww_name);
                    ptvcursor_add(ptv, hf_woww_loyalty, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_slot, 1, ENC_LITTLE_ENDIAN);
                    ptvcursor_pop_subtree(ptv);
                }
            }
            else {
                ptvcursor_add(ptv, hf_woww_npc, 8, ENC_LITTLE_ENDIAN);
            }
            break;
        case MSG_LOOKING_FOR_GROUP:
            if (WOWW_SERVER_TO_CLIENT) {
                ptvcursor_add(ptv, hf_woww_unknown_int, 4, ENC_LITTLE_ENDIAN);
            }
            else {
            }
            break;
        case MSG_MINIMAP_PING:
            if (WOWW_SERVER_TO_CLIENT) {
                ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_position_x, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_position_y, 4, ENC_LITTLE_ENDIAN);
            }
            else {
                ptvcursor_add(ptv, hf_woww_position_x, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_position_y, 4, ENC_LITTLE_ENDIAN);
            }
            break;
        case MSG_MOVE_FALL_LAND:
            if (WOWW_SERVER_TO_CLIENT) {
                add_packed_guid(ptv, pinfo);
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "MovementInfo");
                ptvcursor_add_ret_uint(ptv, hf_woww_movement_flags, 4, ENC_LITTLE_ENDIAN, &flags);
                ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
                ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
                if (flags & MOVEMENT_FLAGS_ON_TRANSPORT) {
                    ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "TransportInfo");
                    add_packed_guid(ptv, pinfo);
                    ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                    ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_pop_subtree(ptv);
                    ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_pop_subtree(ptv);
                }
                if (flags & MOVEMENT_FLAGS_SWIMMING) {
                    ptvcursor_add(ptv, hf_woww_pitch, 4, ENC_LITTLE_ENDIAN);
                }
                ptvcursor_add(ptv, hf_woww_fall_time, 4, ENC_LITTLE_ENDIAN);
                if (flags & MOVEMENT_FLAGS_JUMPING) {
                    ptvcursor_add(ptv, hf_woww_z_speed, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_cos_angle, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_sin_angle, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_xy_speed, 4, ENC_LITTLE_ENDIAN);
                }
                if (flags & MOVEMENT_FLAGS_SPLINE_ELEVATION) {
                    ptvcursor_add(ptv, hf_woww_spline_elevation, 4, ENC_LITTLE_ENDIAN);
                }
                ptvcursor_pop_subtree(ptv);
            }
            else {
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "MovementInfo");
                ptvcursor_add_ret_uint(ptv, hf_woww_movement_flags, 4, ENC_LITTLE_ENDIAN, &flags);
                ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
                ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
                if (flags & MOVEMENT_FLAGS_ON_TRANSPORT) {
                    ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "TransportInfo");
                    add_packed_guid(ptv, pinfo);
                    ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                    ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_pop_subtree(ptv);
                    ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_pop_subtree(ptv);
                }
                if (flags & MOVEMENT_FLAGS_SWIMMING) {
                    ptvcursor_add(ptv, hf_woww_pitch, 4, ENC_LITTLE_ENDIAN);
                }
                ptvcursor_add(ptv, hf_woww_fall_time, 4, ENC_LITTLE_ENDIAN);
                if (flags & MOVEMENT_FLAGS_JUMPING) {
                    ptvcursor_add(ptv, hf_woww_z_speed, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_cos_angle, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_sin_angle, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_xy_speed, 4, ENC_LITTLE_ENDIAN);
                }
                if (flags & MOVEMENT_FLAGS_SPLINE_ELEVATION) {
                    ptvcursor_add(ptv, hf_woww_spline_elevation, 4, ENC_LITTLE_ENDIAN);
                }
                ptvcursor_pop_subtree(ptv);
            }
            break;
        case MSG_MOVE_FEATHER_FALL:
            if (WOWW_SERVER_TO_CLIENT) {
                add_packed_guid(ptv, pinfo);
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "MovementInfo");
                ptvcursor_add_ret_uint(ptv, hf_woww_movement_flags, 4, ENC_LITTLE_ENDIAN, &flags);
                ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
                ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
                if (flags & MOVEMENT_FLAGS_ON_TRANSPORT) {
                    ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "TransportInfo");
                    add_packed_guid(ptv, pinfo);
                    ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                    ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_pop_subtree(ptv);
                    ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_pop_subtree(ptv);
                }
                if (flags & MOVEMENT_FLAGS_SWIMMING) {
                    ptvcursor_add(ptv, hf_woww_pitch, 4, ENC_LITTLE_ENDIAN);
                }
                ptvcursor_add(ptv, hf_woww_fall_time, 4, ENC_LITTLE_ENDIAN);
                if (flags & MOVEMENT_FLAGS_JUMPING) {
                    ptvcursor_add(ptv, hf_woww_z_speed, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_cos_angle, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_sin_angle, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_xy_speed, 4, ENC_LITTLE_ENDIAN);
                }
                if (flags & MOVEMENT_FLAGS_SPLINE_ELEVATION) {
                    ptvcursor_add(ptv, hf_woww_spline_elevation, 4, ENC_LITTLE_ENDIAN);
                }
                ptvcursor_pop_subtree(ptv);
            }
            break;
        case MSG_MOVE_HEARTBEAT:
            if (WOWW_SERVER_TO_CLIENT) {
                add_packed_guid(ptv, pinfo);
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "MovementInfo");
                ptvcursor_add_ret_uint(ptv, hf_woww_movement_flags, 4, ENC_LITTLE_ENDIAN, &flags);
                ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
                ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
                if (flags & MOVEMENT_FLAGS_ON_TRANSPORT) {
                    ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "TransportInfo");
                    add_packed_guid(ptv, pinfo);
                    ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                    ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_pop_subtree(ptv);
                    ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_pop_subtree(ptv);
                }
                if (flags & MOVEMENT_FLAGS_SWIMMING) {
                    ptvcursor_add(ptv, hf_woww_pitch, 4, ENC_LITTLE_ENDIAN);
                }
                ptvcursor_add(ptv, hf_woww_fall_time, 4, ENC_LITTLE_ENDIAN);
                if (flags & MOVEMENT_FLAGS_JUMPING) {
                    ptvcursor_add(ptv, hf_woww_z_speed, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_cos_angle, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_sin_angle, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_xy_speed, 4, ENC_LITTLE_ENDIAN);
                }
                if (flags & MOVEMENT_FLAGS_SPLINE_ELEVATION) {
                    ptvcursor_add(ptv, hf_woww_spline_elevation, 4, ENC_LITTLE_ENDIAN);
                }
                ptvcursor_pop_subtree(ptv);
            }
            else {
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "MovementInfo");
                ptvcursor_add_ret_uint(ptv, hf_woww_movement_flags, 4, ENC_LITTLE_ENDIAN, &flags);
                ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
                ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
                if (flags & MOVEMENT_FLAGS_ON_TRANSPORT) {
                    ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "TransportInfo");
                    add_packed_guid(ptv, pinfo);
                    ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                    ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_pop_subtree(ptv);
                    ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_pop_subtree(ptv);
                }
                if (flags & MOVEMENT_FLAGS_SWIMMING) {
                    ptvcursor_add(ptv, hf_woww_pitch, 4, ENC_LITTLE_ENDIAN);
                }
                ptvcursor_add(ptv, hf_woww_fall_time, 4, ENC_LITTLE_ENDIAN);
                if (flags & MOVEMENT_FLAGS_JUMPING) {
                    ptvcursor_add(ptv, hf_woww_z_speed, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_cos_angle, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_sin_angle, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_xy_speed, 4, ENC_LITTLE_ENDIAN);
                }
                if (flags & MOVEMENT_FLAGS_SPLINE_ELEVATION) {
                    ptvcursor_add(ptv, hf_woww_spline_elevation, 4, ENC_LITTLE_ENDIAN);
                }
                ptvcursor_pop_subtree(ptv);
            }
            break;
        case MSG_MOVE_JUMP:
            if (WOWW_SERVER_TO_CLIENT) {
                add_packed_guid(ptv, pinfo);
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "MovementInfo");
                ptvcursor_add_ret_uint(ptv, hf_woww_movement_flags, 4, ENC_LITTLE_ENDIAN, &flags);
                ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
                ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
                if (flags & MOVEMENT_FLAGS_ON_TRANSPORT) {
                    ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "TransportInfo");
                    add_packed_guid(ptv, pinfo);
                    ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                    ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_pop_subtree(ptv);
                    ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_pop_subtree(ptv);
                }
                if (flags & MOVEMENT_FLAGS_SWIMMING) {
                    ptvcursor_add(ptv, hf_woww_pitch, 4, ENC_LITTLE_ENDIAN);
                }
                ptvcursor_add(ptv, hf_woww_fall_time, 4, ENC_LITTLE_ENDIAN);
                if (flags & MOVEMENT_FLAGS_JUMPING) {
                    ptvcursor_add(ptv, hf_woww_z_speed, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_cos_angle, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_sin_angle, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_xy_speed, 4, ENC_LITTLE_ENDIAN);
                }
                if (flags & MOVEMENT_FLAGS_SPLINE_ELEVATION) {
                    ptvcursor_add(ptv, hf_woww_spline_elevation, 4, ENC_LITTLE_ENDIAN);
                }
                ptvcursor_pop_subtree(ptv);
            }
            else {
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "MovementInfo");
                ptvcursor_add_ret_uint(ptv, hf_woww_movement_flags, 4, ENC_LITTLE_ENDIAN, &flags);
                ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
                ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
                if (flags & MOVEMENT_FLAGS_ON_TRANSPORT) {
                    ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "TransportInfo");
                    add_packed_guid(ptv, pinfo);
                    ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                    ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_pop_subtree(ptv);
                    ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_pop_subtree(ptv);
                }
                if (flags & MOVEMENT_FLAGS_SWIMMING) {
                    ptvcursor_add(ptv, hf_woww_pitch, 4, ENC_LITTLE_ENDIAN);
                }
                ptvcursor_add(ptv, hf_woww_fall_time, 4, ENC_LITTLE_ENDIAN);
                if (flags & MOVEMENT_FLAGS_JUMPING) {
                    ptvcursor_add(ptv, hf_woww_z_speed, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_cos_angle, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_sin_angle, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_xy_speed, 4, ENC_LITTLE_ENDIAN);
                }
                if (flags & MOVEMENT_FLAGS_SPLINE_ELEVATION) {
                    ptvcursor_add(ptv, hf_woww_spline_elevation, 4, ENC_LITTLE_ENDIAN);
                }
                ptvcursor_pop_subtree(ptv);
            }
            break;
        case MSG_MOVE_SET_FACING:
            if (WOWW_SERVER_TO_CLIENT) {
                add_packed_guid(ptv, pinfo);
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "MovementInfo");
                ptvcursor_add_ret_uint(ptv, hf_woww_movement_flags, 4, ENC_LITTLE_ENDIAN, &flags);
                ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
                ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
                if (flags & MOVEMENT_FLAGS_ON_TRANSPORT) {
                    ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "TransportInfo");
                    add_packed_guid(ptv, pinfo);
                    ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                    ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_pop_subtree(ptv);
                    ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_pop_subtree(ptv);
                }
                if (flags & MOVEMENT_FLAGS_SWIMMING) {
                    ptvcursor_add(ptv, hf_woww_pitch, 4, ENC_LITTLE_ENDIAN);
                }
                ptvcursor_add(ptv, hf_woww_fall_time, 4, ENC_LITTLE_ENDIAN);
                if (flags & MOVEMENT_FLAGS_JUMPING) {
                    ptvcursor_add(ptv, hf_woww_z_speed, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_cos_angle, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_sin_angle, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_xy_speed, 4, ENC_LITTLE_ENDIAN);
                }
                if (flags & MOVEMENT_FLAGS_SPLINE_ELEVATION) {
                    ptvcursor_add(ptv, hf_woww_spline_elevation, 4, ENC_LITTLE_ENDIAN);
                }
                ptvcursor_pop_subtree(ptv);
            }
            else {
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "MovementInfo");
                ptvcursor_add_ret_uint(ptv, hf_woww_movement_flags, 4, ENC_LITTLE_ENDIAN, &flags);
                ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
                ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
                if (flags & MOVEMENT_FLAGS_ON_TRANSPORT) {
                    ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "TransportInfo");
                    add_packed_guid(ptv, pinfo);
                    ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                    ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_pop_subtree(ptv);
                    ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_pop_subtree(ptv);
                }
                if (flags & MOVEMENT_FLAGS_SWIMMING) {
                    ptvcursor_add(ptv, hf_woww_pitch, 4, ENC_LITTLE_ENDIAN);
                }
                ptvcursor_add(ptv, hf_woww_fall_time, 4, ENC_LITTLE_ENDIAN);
                if (flags & MOVEMENT_FLAGS_JUMPING) {
                    ptvcursor_add(ptv, hf_woww_z_speed, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_cos_angle, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_sin_angle, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_xy_speed, 4, ENC_LITTLE_ENDIAN);
                }
                if (flags & MOVEMENT_FLAGS_SPLINE_ELEVATION) {
                    ptvcursor_add(ptv, hf_woww_spline_elevation, 4, ENC_LITTLE_ENDIAN);
                }
                ptvcursor_pop_subtree(ptv);
            }
            break;
        case MSG_MOVE_SET_PITCH:
            if (WOWW_SERVER_TO_CLIENT) {
                add_packed_guid(ptv, pinfo);
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "MovementInfo");
                ptvcursor_add_ret_uint(ptv, hf_woww_movement_flags, 4, ENC_LITTLE_ENDIAN, &flags);
                ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
                ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
                if (flags & MOVEMENT_FLAGS_ON_TRANSPORT) {
                    ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "TransportInfo");
                    add_packed_guid(ptv, pinfo);
                    ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                    ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_pop_subtree(ptv);
                    ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_pop_subtree(ptv);
                }
                if (flags & MOVEMENT_FLAGS_SWIMMING) {
                    ptvcursor_add(ptv, hf_woww_pitch, 4, ENC_LITTLE_ENDIAN);
                }
                ptvcursor_add(ptv, hf_woww_fall_time, 4, ENC_LITTLE_ENDIAN);
                if (flags & MOVEMENT_FLAGS_JUMPING) {
                    ptvcursor_add(ptv, hf_woww_z_speed, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_cos_angle, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_sin_angle, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_xy_speed, 4, ENC_LITTLE_ENDIAN);
                }
                if (flags & MOVEMENT_FLAGS_SPLINE_ELEVATION) {
                    ptvcursor_add(ptv, hf_woww_spline_elevation, 4, ENC_LITTLE_ENDIAN);
                }
                ptvcursor_pop_subtree(ptv);
            }
            else {
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "MovementInfo");
                ptvcursor_add_ret_uint(ptv, hf_woww_movement_flags, 4, ENC_LITTLE_ENDIAN, &flags);
                ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
                ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
                if (flags & MOVEMENT_FLAGS_ON_TRANSPORT) {
                    ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "TransportInfo");
                    add_packed_guid(ptv, pinfo);
                    ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                    ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_pop_subtree(ptv);
                    ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_pop_subtree(ptv);
                }
                if (flags & MOVEMENT_FLAGS_SWIMMING) {
                    ptvcursor_add(ptv, hf_woww_pitch, 4, ENC_LITTLE_ENDIAN);
                }
                ptvcursor_add(ptv, hf_woww_fall_time, 4, ENC_LITTLE_ENDIAN);
                if (flags & MOVEMENT_FLAGS_JUMPING) {
                    ptvcursor_add(ptv, hf_woww_z_speed, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_cos_angle, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_sin_angle, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_xy_speed, 4, ENC_LITTLE_ENDIAN);
                }
                if (flags & MOVEMENT_FLAGS_SPLINE_ELEVATION) {
                    ptvcursor_add(ptv, hf_woww_spline_elevation, 4, ENC_LITTLE_ENDIAN);
                }
                ptvcursor_pop_subtree(ptv);
            }
            break;
        case MSG_MOVE_SET_RUN_MODE:
            if (WOWW_SERVER_TO_CLIENT) {
                add_packed_guid(ptv, pinfo);
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "MovementInfo");
                ptvcursor_add_ret_uint(ptv, hf_woww_movement_flags, 4, ENC_LITTLE_ENDIAN, &flags);
                ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
                ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
                if (flags & MOVEMENT_FLAGS_ON_TRANSPORT) {
                    ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "TransportInfo");
                    add_packed_guid(ptv, pinfo);
                    ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                    ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_pop_subtree(ptv);
                    ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_pop_subtree(ptv);
                }
                if (flags & MOVEMENT_FLAGS_SWIMMING) {
                    ptvcursor_add(ptv, hf_woww_pitch, 4, ENC_LITTLE_ENDIAN);
                }
                ptvcursor_add(ptv, hf_woww_fall_time, 4, ENC_LITTLE_ENDIAN);
                if (flags & MOVEMENT_FLAGS_JUMPING) {
                    ptvcursor_add(ptv, hf_woww_z_speed, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_cos_angle, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_sin_angle, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_xy_speed, 4, ENC_LITTLE_ENDIAN);
                }
                if (flags & MOVEMENT_FLAGS_SPLINE_ELEVATION) {
                    ptvcursor_add(ptv, hf_woww_spline_elevation, 4, ENC_LITTLE_ENDIAN);
                }
                ptvcursor_pop_subtree(ptv);
            }
            else {
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "MovementInfo");
                ptvcursor_add_ret_uint(ptv, hf_woww_movement_flags, 4, ENC_LITTLE_ENDIAN, &flags);
                ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
                ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
                if (flags & MOVEMENT_FLAGS_ON_TRANSPORT) {
                    ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "TransportInfo");
                    add_packed_guid(ptv, pinfo);
                    ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                    ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_pop_subtree(ptv);
                    ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_pop_subtree(ptv);
                }
                if (flags & MOVEMENT_FLAGS_SWIMMING) {
                    ptvcursor_add(ptv, hf_woww_pitch, 4, ENC_LITTLE_ENDIAN);
                }
                ptvcursor_add(ptv, hf_woww_fall_time, 4, ENC_LITTLE_ENDIAN);
                if (flags & MOVEMENT_FLAGS_JUMPING) {
                    ptvcursor_add(ptv, hf_woww_z_speed, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_cos_angle, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_sin_angle, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_xy_speed, 4, ENC_LITTLE_ENDIAN);
                }
                if (flags & MOVEMENT_FLAGS_SPLINE_ELEVATION) {
                    ptvcursor_add(ptv, hf_woww_spline_elevation, 4, ENC_LITTLE_ENDIAN);
                }
                ptvcursor_pop_subtree(ptv);
            }
            break;
        case MSG_MOVE_SET_WALK_MODE:
            if (WOWW_SERVER_TO_CLIENT) {
                add_packed_guid(ptv, pinfo);
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "MovementInfo");
                ptvcursor_add_ret_uint(ptv, hf_woww_movement_flags, 4, ENC_LITTLE_ENDIAN, &flags);
                ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
                ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
                if (flags & MOVEMENT_FLAGS_ON_TRANSPORT) {
                    ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "TransportInfo");
                    add_packed_guid(ptv, pinfo);
                    ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                    ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_pop_subtree(ptv);
                    ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_pop_subtree(ptv);
                }
                if (flags & MOVEMENT_FLAGS_SWIMMING) {
                    ptvcursor_add(ptv, hf_woww_pitch, 4, ENC_LITTLE_ENDIAN);
                }
                ptvcursor_add(ptv, hf_woww_fall_time, 4, ENC_LITTLE_ENDIAN);
                if (flags & MOVEMENT_FLAGS_JUMPING) {
                    ptvcursor_add(ptv, hf_woww_z_speed, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_cos_angle, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_sin_angle, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_xy_speed, 4, ENC_LITTLE_ENDIAN);
                }
                if (flags & MOVEMENT_FLAGS_SPLINE_ELEVATION) {
                    ptvcursor_add(ptv, hf_woww_spline_elevation, 4, ENC_LITTLE_ENDIAN);
                }
                ptvcursor_pop_subtree(ptv);
            }
            else {
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "MovementInfo");
                ptvcursor_add_ret_uint(ptv, hf_woww_movement_flags, 4, ENC_LITTLE_ENDIAN, &flags);
                ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
                ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
                if (flags & MOVEMENT_FLAGS_ON_TRANSPORT) {
                    ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "TransportInfo");
                    add_packed_guid(ptv, pinfo);
                    ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                    ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_pop_subtree(ptv);
                    ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_pop_subtree(ptv);
                }
                if (flags & MOVEMENT_FLAGS_SWIMMING) {
                    ptvcursor_add(ptv, hf_woww_pitch, 4, ENC_LITTLE_ENDIAN);
                }
                ptvcursor_add(ptv, hf_woww_fall_time, 4, ENC_LITTLE_ENDIAN);
                if (flags & MOVEMENT_FLAGS_JUMPING) {
                    ptvcursor_add(ptv, hf_woww_z_speed, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_cos_angle, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_sin_angle, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_xy_speed, 4, ENC_LITTLE_ENDIAN);
                }
                if (flags & MOVEMENT_FLAGS_SPLINE_ELEVATION) {
                    ptvcursor_add(ptv, hf_woww_spline_elevation, 4, ENC_LITTLE_ENDIAN);
                }
                ptvcursor_pop_subtree(ptv);
            }
            break;
        case MSG_MOVE_START_BACKWARD:
            if (WOWW_SERVER_TO_CLIENT) {
                add_packed_guid(ptv, pinfo);
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "MovementInfo");
                ptvcursor_add_ret_uint(ptv, hf_woww_movement_flags, 4, ENC_LITTLE_ENDIAN, &flags);
                ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
                ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
                if (flags & MOVEMENT_FLAGS_ON_TRANSPORT) {
                    ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "TransportInfo");
                    add_packed_guid(ptv, pinfo);
                    ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                    ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_pop_subtree(ptv);
                    ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_pop_subtree(ptv);
                }
                if (flags & MOVEMENT_FLAGS_SWIMMING) {
                    ptvcursor_add(ptv, hf_woww_pitch, 4, ENC_LITTLE_ENDIAN);
                }
                ptvcursor_add(ptv, hf_woww_fall_time, 4, ENC_LITTLE_ENDIAN);
                if (flags & MOVEMENT_FLAGS_JUMPING) {
                    ptvcursor_add(ptv, hf_woww_z_speed, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_cos_angle, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_sin_angle, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_xy_speed, 4, ENC_LITTLE_ENDIAN);
                }
                if (flags & MOVEMENT_FLAGS_SPLINE_ELEVATION) {
                    ptvcursor_add(ptv, hf_woww_spline_elevation, 4, ENC_LITTLE_ENDIAN);
                }
                ptvcursor_pop_subtree(ptv);
            }
            else {
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "MovementInfo");
                ptvcursor_add_ret_uint(ptv, hf_woww_movement_flags, 4, ENC_LITTLE_ENDIAN, &flags);
                ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
                ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
                if (flags & MOVEMENT_FLAGS_ON_TRANSPORT) {
                    ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "TransportInfo");
                    add_packed_guid(ptv, pinfo);
                    ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                    ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_pop_subtree(ptv);
                    ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_pop_subtree(ptv);
                }
                if (flags & MOVEMENT_FLAGS_SWIMMING) {
                    ptvcursor_add(ptv, hf_woww_pitch, 4, ENC_LITTLE_ENDIAN);
                }
                ptvcursor_add(ptv, hf_woww_fall_time, 4, ENC_LITTLE_ENDIAN);
                if (flags & MOVEMENT_FLAGS_JUMPING) {
                    ptvcursor_add(ptv, hf_woww_z_speed, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_cos_angle, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_sin_angle, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_xy_speed, 4, ENC_LITTLE_ENDIAN);
                }
                if (flags & MOVEMENT_FLAGS_SPLINE_ELEVATION) {
                    ptvcursor_add(ptv, hf_woww_spline_elevation, 4, ENC_LITTLE_ENDIAN);
                }
                ptvcursor_pop_subtree(ptv);
            }
            break;
        case MSG_MOVE_START_FORWARD:
            if (WOWW_SERVER_TO_CLIENT) {
                add_packed_guid(ptv, pinfo);
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "MovementInfo");
                ptvcursor_add_ret_uint(ptv, hf_woww_movement_flags, 4, ENC_LITTLE_ENDIAN, &flags);
                ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
                ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
                if (flags & MOVEMENT_FLAGS_ON_TRANSPORT) {
                    ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "TransportInfo");
                    add_packed_guid(ptv, pinfo);
                    ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                    ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_pop_subtree(ptv);
                    ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_pop_subtree(ptv);
                }
                if (flags & MOVEMENT_FLAGS_SWIMMING) {
                    ptvcursor_add(ptv, hf_woww_pitch, 4, ENC_LITTLE_ENDIAN);
                }
                ptvcursor_add(ptv, hf_woww_fall_time, 4, ENC_LITTLE_ENDIAN);
                if (flags & MOVEMENT_FLAGS_JUMPING) {
                    ptvcursor_add(ptv, hf_woww_z_speed, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_cos_angle, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_sin_angle, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_xy_speed, 4, ENC_LITTLE_ENDIAN);
                }
                if (flags & MOVEMENT_FLAGS_SPLINE_ELEVATION) {
                    ptvcursor_add(ptv, hf_woww_spline_elevation, 4, ENC_LITTLE_ENDIAN);
                }
                ptvcursor_pop_subtree(ptv);
            }
            else {
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "MovementInfo");
                ptvcursor_add_ret_uint(ptv, hf_woww_movement_flags, 4, ENC_LITTLE_ENDIAN, &flags);
                ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
                ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
                if (flags & MOVEMENT_FLAGS_ON_TRANSPORT) {
                    ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "TransportInfo");
                    add_packed_guid(ptv, pinfo);
                    ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                    ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_pop_subtree(ptv);
                    ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_pop_subtree(ptv);
                }
                if (flags & MOVEMENT_FLAGS_SWIMMING) {
                    ptvcursor_add(ptv, hf_woww_pitch, 4, ENC_LITTLE_ENDIAN);
                }
                ptvcursor_add(ptv, hf_woww_fall_time, 4, ENC_LITTLE_ENDIAN);
                if (flags & MOVEMENT_FLAGS_JUMPING) {
                    ptvcursor_add(ptv, hf_woww_z_speed, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_cos_angle, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_sin_angle, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_xy_speed, 4, ENC_LITTLE_ENDIAN);
                }
                if (flags & MOVEMENT_FLAGS_SPLINE_ELEVATION) {
                    ptvcursor_add(ptv, hf_woww_spline_elevation, 4, ENC_LITTLE_ENDIAN);
                }
                ptvcursor_pop_subtree(ptv);
            }
            break;
        case MSG_MOVE_START_PITCH_DOWN:
            if (WOWW_SERVER_TO_CLIENT) {
                add_packed_guid(ptv, pinfo);
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "MovementInfo");
                ptvcursor_add_ret_uint(ptv, hf_woww_movement_flags, 4, ENC_LITTLE_ENDIAN, &flags);
                ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
                ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
                if (flags & MOVEMENT_FLAGS_ON_TRANSPORT) {
                    ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "TransportInfo");
                    add_packed_guid(ptv, pinfo);
                    ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                    ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_pop_subtree(ptv);
                    ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_pop_subtree(ptv);
                }
                if (flags & MOVEMENT_FLAGS_SWIMMING) {
                    ptvcursor_add(ptv, hf_woww_pitch, 4, ENC_LITTLE_ENDIAN);
                }
                ptvcursor_add(ptv, hf_woww_fall_time, 4, ENC_LITTLE_ENDIAN);
                if (flags & MOVEMENT_FLAGS_JUMPING) {
                    ptvcursor_add(ptv, hf_woww_z_speed, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_cos_angle, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_sin_angle, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_xy_speed, 4, ENC_LITTLE_ENDIAN);
                }
                if (flags & MOVEMENT_FLAGS_SPLINE_ELEVATION) {
                    ptvcursor_add(ptv, hf_woww_spline_elevation, 4, ENC_LITTLE_ENDIAN);
                }
                ptvcursor_pop_subtree(ptv);
            }
            else {
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "MovementInfo");
                ptvcursor_add_ret_uint(ptv, hf_woww_movement_flags, 4, ENC_LITTLE_ENDIAN, &flags);
                ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
                ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
                if (flags & MOVEMENT_FLAGS_ON_TRANSPORT) {
                    ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "TransportInfo");
                    add_packed_guid(ptv, pinfo);
                    ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                    ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_pop_subtree(ptv);
                    ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_pop_subtree(ptv);
                }
                if (flags & MOVEMENT_FLAGS_SWIMMING) {
                    ptvcursor_add(ptv, hf_woww_pitch, 4, ENC_LITTLE_ENDIAN);
                }
                ptvcursor_add(ptv, hf_woww_fall_time, 4, ENC_LITTLE_ENDIAN);
                if (flags & MOVEMENT_FLAGS_JUMPING) {
                    ptvcursor_add(ptv, hf_woww_z_speed, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_cos_angle, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_sin_angle, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_xy_speed, 4, ENC_LITTLE_ENDIAN);
                }
                if (flags & MOVEMENT_FLAGS_SPLINE_ELEVATION) {
                    ptvcursor_add(ptv, hf_woww_spline_elevation, 4, ENC_LITTLE_ENDIAN);
                }
                ptvcursor_pop_subtree(ptv);
            }
            break;
        case MSG_MOVE_START_PITCH_UP:
            if (WOWW_SERVER_TO_CLIENT) {
                add_packed_guid(ptv, pinfo);
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "MovementInfo");
                ptvcursor_add_ret_uint(ptv, hf_woww_movement_flags, 4, ENC_LITTLE_ENDIAN, &flags);
                ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
                ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
                if (flags & MOVEMENT_FLAGS_ON_TRANSPORT) {
                    ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "TransportInfo");
                    add_packed_guid(ptv, pinfo);
                    ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                    ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_pop_subtree(ptv);
                    ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_pop_subtree(ptv);
                }
                if (flags & MOVEMENT_FLAGS_SWIMMING) {
                    ptvcursor_add(ptv, hf_woww_pitch, 4, ENC_LITTLE_ENDIAN);
                }
                ptvcursor_add(ptv, hf_woww_fall_time, 4, ENC_LITTLE_ENDIAN);
                if (flags & MOVEMENT_FLAGS_JUMPING) {
                    ptvcursor_add(ptv, hf_woww_z_speed, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_cos_angle, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_sin_angle, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_xy_speed, 4, ENC_LITTLE_ENDIAN);
                }
                if (flags & MOVEMENT_FLAGS_SPLINE_ELEVATION) {
                    ptvcursor_add(ptv, hf_woww_spline_elevation, 4, ENC_LITTLE_ENDIAN);
                }
                ptvcursor_pop_subtree(ptv);
            }
            else {
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "MovementInfo");
                ptvcursor_add_ret_uint(ptv, hf_woww_movement_flags, 4, ENC_LITTLE_ENDIAN, &flags);
                ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
                ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
                if (flags & MOVEMENT_FLAGS_ON_TRANSPORT) {
                    ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "TransportInfo");
                    add_packed_guid(ptv, pinfo);
                    ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                    ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_pop_subtree(ptv);
                    ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_pop_subtree(ptv);
                }
                if (flags & MOVEMENT_FLAGS_SWIMMING) {
                    ptvcursor_add(ptv, hf_woww_pitch, 4, ENC_LITTLE_ENDIAN);
                }
                ptvcursor_add(ptv, hf_woww_fall_time, 4, ENC_LITTLE_ENDIAN);
                if (flags & MOVEMENT_FLAGS_JUMPING) {
                    ptvcursor_add(ptv, hf_woww_z_speed, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_cos_angle, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_sin_angle, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_xy_speed, 4, ENC_LITTLE_ENDIAN);
                }
                if (flags & MOVEMENT_FLAGS_SPLINE_ELEVATION) {
                    ptvcursor_add(ptv, hf_woww_spline_elevation, 4, ENC_LITTLE_ENDIAN);
                }
                ptvcursor_pop_subtree(ptv);
            }
            break;
        case MSG_MOVE_START_STRAFE_LEFT:
            if (WOWW_SERVER_TO_CLIENT) {
                add_packed_guid(ptv, pinfo);
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "MovementInfo");
                ptvcursor_add_ret_uint(ptv, hf_woww_movement_flags, 4, ENC_LITTLE_ENDIAN, &flags);
                ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
                ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
                if (flags & MOVEMENT_FLAGS_ON_TRANSPORT) {
                    ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "TransportInfo");
                    add_packed_guid(ptv, pinfo);
                    ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                    ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_pop_subtree(ptv);
                    ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_pop_subtree(ptv);
                }
                if (flags & MOVEMENT_FLAGS_SWIMMING) {
                    ptvcursor_add(ptv, hf_woww_pitch, 4, ENC_LITTLE_ENDIAN);
                }
                ptvcursor_add(ptv, hf_woww_fall_time, 4, ENC_LITTLE_ENDIAN);
                if (flags & MOVEMENT_FLAGS_JUMPING) {
                    ptvcursor_add(ptv, hf_woww_z_speed, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_cos_angle, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_sin_angle, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_xy_speed, 4, ENC_LITTLE_ENDIAN);
                }
                if (flags & MOVEMENT_FLAGS_SPLINE_ELEVATION) {
                    ptvcursor_add(ptv, hf_woww_spline_elevation, 4, ENC_LITTLE_ENDIAN);
                }
                ptvcursor_pop_subtree(ptv);
            }
            else {
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "MovementInfo");
                ptvcursor_add_ret_uint(ptv, hf_woww_movement_flags, 4, ENC_LITTLE_ENDIAN, &flags);
                ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
                ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
                if (flags & MOVEMENT_FLAGS_ON_TRANSPORT) {
                    ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "TransportInfo");
                    add_packed_guid(ptv, pinfo);
                    ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                    ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_pop_subtree(ptv);
                    ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_pop_subtree(ptv);
                }
                if (flags & MOVEMENT_FLAGS_SWIMMING) {
                    ptvcursor_add(ptv, hf_woww_pitch, 4, ENC_LITTLE_ENDIAN);
                }
                ptvcursor_add(ptv, hf_woww_fall_time, 4, ENC_LITTLE_ENDIAN);
                if (flags & MOVEMENT_FLAGS_JUMPING) {
                    ptvcursor_add(ptv, hf_woww_z_speed, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_cos_angle, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_sin_angle, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_xy_speed, 4, ENC_LITTLE_ENDIAN);
                }
                if (flags & MOVEMENT_FLAGS_SPLINE_ELEVATION) {
                    ptvcursor_add(ptv, hf_woww_spline_elevation, 4, ENC_LITTLE_ENDIAN);
                }
                ptvcursor_pop_subtree(ptv);
            }
            break;
        case MSG_MOVE_START_STRAFE_RIGHT:
            if (WOWW_SERVER_TO_CLIENT) {
                add_packed_guid(ptv, pinfo);
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "MovementInfo");
                ptvcursor_add_ret_uint(ptv, hf_woww_movement_flags, 4, ENC_LITTLE_ENDIAN, &flags);
                ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
                ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
                if (flags & MOVEMENT_FLAGS_ON_TRANSPORT) {
                    ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "TransportInfo");
                    add_packed_guid(ptv, pinfo);
                    ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                    ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_pop_subtree(ptv);
                    ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_pop_subtree(ptv);
                }
                if (flags & MOVEMENT_FLAGS_SWIMMING) {
                    ptvcursor_add(ptv, hf_woww_pitch, 4, ENC_LITTLE_ENDIAN);
                }
                ptvcursor_add(ptv, hf_woww_fall_time, 4, ENC_LITTLE_ENDIAN);
                if (flags & MOVEMENT_FLAGS_JUMPING) {
                    ptvcursor_add(ptv, hf_woww_z_speed, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_cos_angle, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_sin_angle, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_xy_speed, 4, ENC_LITTLE_ENDIAN);
                }
                if (flags & MOVEMENT_FLAGS_SPLINE_ELEVATION) {
                    ptvcursor_add(ptv, hf_woww_spline_elevation, 4, ENC_LITTLE_ENDIAN);
                }
                ptvcursor_pop_subtree(ptv);
            }
            else {
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "MovementInfo");
                ptvcursor_add_ret_uint(ptv, hf_woww_movement_flags, 4, ENC_LITTLE_ENDIAN, &flags);
                ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
                ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
                if (flags & MOVEMENT_FLAGS_ON_TRANSPORT) {
                    ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "TransportInfo");
                    add_packed_guid(ptv, pinfo);
                    ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                    ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_pop_subtree(ptv);
                    ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_pop_subtree(ptv);
                }
                if (flags & MOVEMENT_FLAGS_SWIMMING) {
                    ptvcursor_add(ptv, hf_woww_pitch, 4, ENC_LITTLE_ENDIAN);
                }
                ptvcursor_add(ptv, hf_woww_fall_time, 4, ENC_LITTLE_ENDIAN);
                if (flags & MOVEMENT_FLAGS_JUMPING) {
                    ptvcursor_add(ptv, hf_woww_z_speed, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_cos_angle, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_sin_angle, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_xy_speed, 4, ENC_LITTLE_ENDIAN);
                }
                if (flags & MOVEMENT_FLAGS_SPLINE_ELEVATION) {
                    ptvcursor_add(ptv, hf_woww_spline_elevation, 4, ENC_LITTLE_ENDIAN);
                }
                ptvcursor_pop_subtree(ptv);
            }
            break;
        case MSG_MOVE_START_SWIM:
            if (WOWW_SERVER_TO_CLIENT) {
                add_packed_guid(ptv, pinfo);
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "MovementInfo");
                ptvcursor_add_ret_uint(ptv, hf_woww_movement_flags, 4, ENC_LITTLE_ENDIAN, &flags);
                ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
                ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
                if (flags & MOVEMENT_FLAGS_ON_TRANSPORT) {
                    ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "TransportInfo");
                    add_packed_guid(ptv, pinfo);
                    ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                    ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_pop_subtree(ptv);
                    ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_pop_subtree(ptv);
                }
                if (flags & MOVEMENT_FLAGS_SWIMMING) {
                    ptvcursor_add(ptv, hf_woww_pitch, 4, ENC_LITTLE_ENDIAN);
                }
                ptvcursor_add(ptv, hf_woww_fall_time, 4, ENC_LITTLE_ENDIAN);
                if (flags & MOVEMENT_FLAGS_JUMPING) {
                    ptvcursor_add(ptv, hf_woww_z_speed, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_cos_angle, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_sin_angle, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_xy_speed, 4, ENC_LITTLE_ENDIAN);
                }
                if (flags & MOVEMENT_FLAGS_SPLINE_ELEVATION) {
                    ptvcursor_add(ptv, hf_woww_spline_elevation, 4, ENC_LITTLE_ENDIAN);
                }
                ptvcursor_pop_subtree(ptv);
            }
            else {
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "MovementInfo");
                ptvcursor_add_ret_uint(ptv, hf_woww_movement_flags, 4, ENC_LITTLE_ENDIAN, &flags);
                ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
                ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
                if (flags & MOVEMENT_FLAGS_ON_TRANSPORT) {
                    ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "TransportInfo");
                    add_packed_guid(ptv, pinfo);
                    ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                    ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_pop_subtree(ptv);
                    ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_pop_subtree(ptv);
                }
                if (flags & MOVEMENT_FLAGS_SWIMMING) {
                    ptvcursor_add(ptv, hf_woww_pitch, 4, ENC_LITTLE_ENDIAN);
                }
                ptvcursor_add(ptv, hf_woww_fall_time, 4, ENC_LITTLE_ENDIAN);
                if (flags & MOVEMENT_FLAGS_JUMPING) {
                    ptvcursor_add(ptv, hf_woww_z_speed, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_cos_angle, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_sin_angle, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_xy_speed, 4, ENC_LITTLE_ENDIAN);
                }
                if (flags & MOVEMENT_FLAGS_SPLINE_ELEVATION) {
                    ptvcursor_add(ptv, hf_woww_spline_elevation, 4, ENC_LITTLE_ENDIAN);
                }
                ptvcursor_pop_subtree(ptv);
            }
            break;
        case MSG_MOVE_START_TURN_LEFT:
            if (WOWW_SERVER_TO_CLIENT) {
                add_packed_guid(ptv, pinfo);
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "MovementInfo");
                ptvcursor_add_ret_uint(ptv, hf_woww_movement_flags, 4, ENC_LITTLE_ENDIAN, &flags);
                ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
                ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
                if (flags & MOVEMENT_FLAGS_ON_TRANSPORT) {
                    ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "TransportInfo");
                    add_packed_guid(ptv, pinfo);
                    ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                    ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_pop_subtree(ptv);
                    ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_pop_subtree(ptv);
                }
                if (flags & MOVEMENT_FLAGS_SWIMMING) {
                    ptvcursor_add(ptv, hf_woww_pitch, 4, ENC_LITTLE_ENDIAN);
                }
                ptvcursor_add(ptv, hf_woww_fall_time, 4, ENC_LITTLE_ENDIAN);
                if (flags & MOVEMENT_FLAGS_JUMPING) {
                    ptvcursor_add(ptv, hf_woww_z_speed, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_cos_angle, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_sin_angle, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_xy_speed, 4, ENC_LITTLE_ENDIAN);
                }
                if (flags & MOVEMENT_FLAGS_SPLINE_ELEVATION) {
                    ptvcursor_add(ptv, hf_woww_spline_elevation, 4, ENC_LITTLE_ENDIAN);
                }
                ptvcursor_pop_subtree(ptv);
            }
            else {
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "MovementInfo");
                ptvcursor_add_ret_uint(ptv, hf_woww_movement_flags, 4, ENC_LITTLE_ENDIAN, &flags);
                ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
                ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
                if (flags & MOVEMENT_FLAGS_ON_TRANSPORT) {
                    ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "TransportInfo");
                    add_packed_guid(ptv, pinfo);
                    ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                    ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_pop_subtree(ptv);
                    ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_pop_subtree(ptv);
                }
                if (flags & MOVEMENT_FLAGS_SWIMMING) {
                    ptvcursor_add(ptv, hf_woww_pitch, 4, ENC_LITTLE_ENDIAN);
                }
                ptvcursor_add(ptv, hf_woww_fall_time, 4, ENC_LITTLE_ENDIAN);
                if (flags & MOVEMENT_FLAGS_JUMPING) {
                    ptvcursor_add(ptv, hf_woww_z_speed, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_cos_angle, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_sin_angle, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_xy_speed, 4, ENC_LITTLE_ENDIAN);
                }
                if (flags & MOVEMENT_FLAGS_SPLINE_ELEVATION) {
                    ptvcursor_add(ptv, hf_woww_spline_elevation, 4, ENC_LITTLE_ENDIAN);
                }
                ptvcursor_pop_subtree(ptv);
            }
            break;
        case MSG_MOVE_START_TURN_RIGHT:
            if (WOWW_SERVER_TO_CLIENT) {
                add_packed_guid(ptv, pinfo);
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "MovementInfo");
                ptvcursor_add_ret_uint(ptv, hf_woww_movement_flags, 4, ENC_LITTLE_ENDIAN, &flags);
                ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
                ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
                if (flags & MOVEMENT_FLAGS_ON_TRANSPORT) {
                    ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "TransportInfo");
                    add_packed_guid(ptv, pinfo);
                    ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                    ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_pop_subtree(ptv);
                    ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_pop_subtree(ptv);
                }
                if (flags & MOVEMENT_FLAGS_SWIMMING) {
                    ptvcursor_add(ptv, hf_woww_pitch, 4, ENC_LITTLE_ENDIAN);
                }
                ptvcursor_add(ptv, hf_woww_fall_time, 4, ENC_LITTLE_ENDIAN);
                if (flags & MOVEMENT_FLAGS_JUMPING) {
                    ptvcursor_add(ptv, hf_woww_z_speed, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_cos_angle, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_sin_angle, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_xy_speed, 4, ENC_LITTLE_ENDIAN);
                }
                if (flags & MOVEMENT_FLAGS_SPLINE_ELEVATION) {
                    ptvcursor_add(ptv, hf_woww_spline_elevation, 4, ENC_LITTLE_ENDIAN);
                }
                ptvcursor_pop_subtree(ptv);
            }
            else {
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "MovementInfo");
                ptvcursor_add_ret_uint(ptv, hf_woww_movement_flags, 4, ENC_LITTLE_ENDIAN, &flags);
                ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
                ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
                if (flags & MOVEMENT_FLAGS_ON_TRANSPORT) {
                    ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "TransportInfo");
                    add_packed_guid(ptv, pinfo);
                    ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                    ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_pop_subtree(ptv);
                    ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_pop_subtree(ptv);
                }
                if (flags & MOVEMENT_FLAGS_SWIMMING) {
                    ptvcursor_add(ptv, hf_woww_pitch, 4, ENC_LITTLE_ENDIAN);
                }
                ptvcursor_add(ptv, hf_woww_fall_time, 4, ENC_LITTLE_ENDIAN);
                if (flags & MOVEMENT_FLAGS_JUMPING) {
                    ptvcursor_add(ptv, hf_woww_z_speed, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_cos_angle, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_sin_angle, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_xy_speed, 4, ENC_LITTLE_ENDIAN);
                }
                if (flags & MOVEMENT_FLAGS_SPLINE_ELEVATION) {
                    ptvcursor_add(ptv, hf_woww_spline_elevation, 4, ENC_LITTLE_ENDIAN);
                }
                ptvcursor_pop_subtree(ptv);
            }
            break;
        case MSG_MOVE_STOP_PITCH:
            if (WOWW_SERVER_TO_CLIENT) {
                add_packed_guid(ptv, pinfo);
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "MovementInfo");
                ptvcursor_add_ret_uint(ptv, hf_woww_movement_flags, 4, ENC_LITTLE_ENDIAN, &flags);
                ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
                ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
                if (flags & MOVEMENT_FLAGS_ON_TRANSPORT) {
                    ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "TransportInfo");
                    add_packed_guid(ptv, pinfo);
                    ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                    ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_pop_subtree(ptv);
                    ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_pop_subtree(ptv);
                }
                if (flags & MOVEMENT_FLAGS_SWIMMING) {
                    ptvcursor_add(ptv, hf_woww_pitch, 4, ENC_LITTLE_ENDIAN);
                }
                ptvcursor_add(ptv, hf_woww_fall_time, 4, ENC_LITTLE_ENDIAN);
                if (flags & MOVEMENT_FLAGS_JUMPING) {
                    ptvcursor_add(ptv, hf_woww_z_speed, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_cos_angle, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_sin_angle, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_xy_speed, 4, ENC_LITTLE_ENDIAN);
                }
                if (flags & MOVEMENT_FLAGS_SPLINE_ELEVATION) {
                    ptvcursor_add(ptv, hf_woww_spline_elevation, 4, ENC_LITTLE_ENDIAN);
                }
                ptvcursor_pop_subtree(ptv);
            }
            else {
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "MovementInfo");
                ptvcursor_add_ret_uint(ptv, hf_woww_movement_flags, 4, ENC_LITTLE_ENDIAN, &flags);
                ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
                ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
                if (flags & MOVEMENT_FLAGS_ON_TRANSPORT) {
                    ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "TransportInfo");
                    add_packed_guid(ptv, pinfo);
                    ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                    ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_pop_subtree(ptv);
                    ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_pop_subtree(ptv);
                }
                if (flags & MOVEMENT_FLAGS_SWIMMING) {
                    ptvcursor_add(ptv, hf_woww_pitch, 4, ENC_LITTLE_ENDIAN);
                }
                ptvcursor_add(ptv, hf_woww_fall_time, 4, ENC_LITTLE_ENDIAN);
                if (flags & MOVEMENT_FLAGS_JUMPING) {
                    ptvcursor_add(ptv, hf_woww_z_speed, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_cos_angle, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_sin_angle, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_xy_speed, 4, ENC_LITTLE_ENDIAN);
                }
                if (flags & MOVEMENT_FLAGS_SPLINE_ELEVATION) {
                    ptvcursor_add(ptv, hf_woww_spline_elevation, 4, ENC_LITTLE_ENDIAN);
                }
                ptvcursor_pop_subtree(ptv);
            }
            break;
        case MSG_MOVE_STOP_STRAFE:
            if (WOWW_SERVER_TO_CLIENT) {
                add_packed_guid(ptv, pinfo);
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "MovementInfo");
                ptvcursor_add_ret_uint(ptv, hf_woww_movement_flags, 4, ENC_LITTLE_ENDIAN, &flags);
                ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
                ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
                if (flags & MOVEMENT_FLAGS_ON_TRANSPORT) {
                    ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "TransportInfo");
                    add_packed_guid(ptv, pinfo);
                    ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                    ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_pop_subtree(ptv);
                    ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_pop_subtree(ptv);
                }
                if (flags & MOVEMENT_FLAGS_SWIMMING) {
                    ptvcursor_add(ptv, hf_woww_pitch, 4, ENC_LITTLE_ENDIAN);
                }
                ptvcursor_add(ptv, hf_woww_fall_time, 4, ENC_LITTLE_ENDIAN);
                if (flags & MOVEMENT_FLAGS_JUMPING) {
                    ptvcursor_add(ptv, hf_woww_z_speed, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_cos_angle, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_sin_angle, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_xy_speed, 4, ENC_LITTLE_ENDIAN);
                }
                if (flags & MOVEMENT_FLAGS_SPLINE_ELEVATION) {
                    ptvcursor_add(ptv, hf_woww_spline_elevation, 4, ENC_LITTLE_ENDIAN);
                }
                ptvcursor_pop_subtree(ptv);
            }
            else {
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "MovementInfo");
                ptvcursor_add_ret_uint(ptv, hf_woww_movement_flags, 4, ENC_LITTLE_ENDIAN, &flags);
                ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
                ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
                if (flags & MOVEMENT_FLAGS_ON_TRANSPORT) {
                    ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "TransportInfo");
                    add_packed_guid(ptv, pinfo);
                    ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                    ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_pop_subtree(ptv);
                    ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_pop_subtree(ptv);
                }
                if (flags & MOVEMENT_FLAGS_SWIMMING) {
                    ptvcursor_add(ptv, hf_woww_pitch, 4, ENC_LITTLE_ENDIAN);
                }
                ptvcursor_add(ptv, hf_woww_fall_time, 4, ENC_LITTLE_ENDIAN);
                if (flags & MOVEMENT_FLAGS_JUMPING) {
                    ptvcursor_add(ptv, hf_woww_z_speed, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_cos_angle, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_sin_angle, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_xy_speed, 4, ENC_LITTLE_ENDIAN);
                }
                if (flags & MOVEMENT_FLAGS_SPLINE_ELEVATION) {
                    ptvcursor_add(ptv, hf_woww_spline_elevation, 4, ENC_LITTLE_ENDIAN);
                }
                ptvcursor_pop_subtree(ptv);
            }
            break;
        case MSG_MOVE_STOP_SWIM:
            if (WOWW_SERVER_TO_CLIENT) {
                add_packed_guid(ptv, pinfo);
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "MovementInfo");
                ptvcursor_add_ret_uint(ptv, hf_woww_movement_flags, 4, ENC_LITTLE_ENDIAN, &flags);
                ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
                ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
                if (flags & MOVEMENT_FLAGS_ON_TRANSPORT) {
                    ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "TransportInfo");
                    add_packed_guid(ptv, pinfo);
                    ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                    ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_pop_subtree(ptv);
                    ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_pop_subtree(ptv);
                }
                if (flags & MOVEMENT_FLAGS_SWIMMING) {
                    ptvcursor_add(ptv, hf_woww_pitch, 4, ENC_LITTLE_ENDIAN);
                }
                ptvcursor_add(ptv, hf_woww_fall_time, 4, ENC_LITTLE_ENDIAN);
                if (flags & MOVEMENT_FLAGS_JUMPING) {
                    ptvcursor_add(ptv, hf_woww_z_speed, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_cos_angle, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_sin_angle, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_xy_speed, 4, ENC_LITTLE_ENDIAN);
                }
                if (flags & MOVEMENT_FLAGS_SPLINE_ELEVATION) {
                    ptvcursor_add(ptv, hf_woww_spline_elevation, 4, ENC_LITTLE_ENDIAN);
                }
                ptvcursor_pop_subtree(ptv);
            }
            else {
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "MovementInfo");
                ptvcursor_add_ret_uint(ptv, hf_woww_movement_flags, 4, ENC_LITTLE_ENDIAN, &flags);
                ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
                ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
                if (flags & MOVEMENT_FLAGS_ON_TRANSPORT) {
                    ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "TransportInfo");
                    add_packed_guid(ptv, pinfo);
                    ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                    ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_pop_subtree(ptv);
                    ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_pop_subtree(ptv);
                }
                if (flags & MOVEMENT_FLAGS_SWIMMING) {
                    ptvcursor_add(ptv, hf_woww_pitch, 4, ENC_LITTLE_ENDIAN);
                }
                ptvcursor_add(ptv, hf_woww_fall_time, 4, ENC_LITTLE_ENDIAN);
                if (flags & MOVEMENT_FLAGS_JUMPING) {
                    ptvcursor_add(ptv, hf_woww_z_speed, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_cos_angle, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_sin_angle, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_xy_speed, 4, ENC_LITTLE_ENDIAN);
                }
                if (flags & MOVEMENT_FLAGS_SPLINE_ELEVATION) {
                    ptvcursor_add(ptv, hf_woww_spline_elevation, 4, ENC_LITTLE_ENDIAN);
                }
                ptvcursor_pop_subtree(ptv);
            }
            break;
        case MSG_MOVE_STOP:
            if (WOWW_SERVER_TO_CLIENT) {
                add_packed_guid(ptv, pinfo);
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "MovementInfo");
                ptvcursor_add_ret_uint(ptv, hf_woww_movement_flags, 4, ENC_LITTLE_ENDIAN, &flags);
                ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
                ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
                if (flags & MOVEMENT_FLAGS_ON_TRANSPORT) {
                    ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "TransportInfo");
                    add_packed_guid(ptv, pinfo);
                    ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                    ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_pop_subtree(ptv);
                    ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_pop_subtree(ptv);
                }
                if (flags & MOVEMENT_FLAGS_SWIMMING) {
                    ptvcursor_add(ptv, hf_woww_pitch, 4, ENC_LITTLE_ENDIAN);
                }
                ptvcursor_add(ptv, hf_woww_fall_time, 4, ENC_LITTLE_ENDIAN);
                if (flags & MOVEMENT_FLAGS_JUMPING) {
                    ptvcursor_add(ptv, hf_woww_z_speed, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_cos_angle, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_sin_angle, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_xy_speed, 4, ENC_LITTLE_ENDIAN);
                }
                if (flags & MOVEMENT_FLAGS_SPLINE_ELEVATION) {
                    ptvcursor_add(ptv, hf_woww_spline_elevation, 4, ENC_LITTLE_ENDIAN);
                }
                ptvcursor_pop_subtree(ptv);
            }
            else {
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "MovementInfo");
                ptvcursor_add_ret_uint(ptv, hf_woww_movement_flags, 4, ENC_LITTLE_ENDIAN, &flags);
                ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
                ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
                if (flags & MOVEMENT_FLAGS_ON_TRANSPORT) {
                    ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "TransportInfo");
                    add_packed_guid(ptv, pinfo);
                    ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                    ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_pop_subtree(ptv);
                    ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_pop_subtree(ptv);
                }
                if (flags & MOVEMENT_FLAGS_SWIMMING) {
                    ptvcursor_add(ptv, hf_woww_pitch, 4, ENC_LITTLE_ENDIAN);
                }
                ptvcursor_add(ptv, hf_woww_fall_time, 4, ENC_LITTLE_ENDIAN);
                if (flags & MOVEMENT_FLAGS_JUMPING) {
                    ptvcursor_add(ptv, hf_woww_z_speed, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_cos_angle, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_sin_angle, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_xy_speed, 4, ENC_LITTLE_ENDIAN);
                }
                if (flags & MOVEMENT_FLAGS_SPLINE_ELEVATION) {
                    ptvcursor_add(ptv, hf_woww_spline_elevation, 4, ENC_LITTLE_ENDIAN);
                }
                ptvcursor_pop_subtree(ptv);
            }
            break;
        case MSG_MOVE_STOP_TURN:
            if (WOWW_SERVER_TO_CLIENT) {
                add_packed_guid(ptv, pinfo);
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "MovementInfo");
                ptvcursor_add_ret_uint(ptv, hf_woww_movement_flags, 4, ENC_LITTLE_ENDIAN, &flags);
                ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
                ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
                if (flags & MOVEMENT_FLAGS_ON_TRANSPORT) {
                    ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "TransportInfo");
                    add_packed_guid(ptv, pinfo);
                    ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                    ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_pop_subtree(ptv);
                    ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_pop_subtree(ptv);
                }
                if (flags & MOVEMENT_FLAGS_SWIMMING) {
                    ptvcursor_add(ptv, hf_woww_pitch, 4, ENC_LITTLE_ENDIAN);
                }
                ptvcursor_add(ptv, hf_woww_fall_time, 4, ENC_LITTLE_ENDIAN);
                if (flags & MOVEMENT_FLAGS_JUMPING) {
                    ptvcursor_add(ptv, hf_woww_z_speed, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_cos_angle, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_sin_angle, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_xy_speed, 4, ENC_LITTLE_ENDIAN);
                }
                if (flags & MOVEMENT_FLAGS_SPLINE_ELEVATION) {
                    ptvcursor_add(ptv, hf_woww_spline_elevation, 4, ENC_LITTLE_ENDIAN);
                }
                ptvcursor_pop_subtree(ptv);
            }
            else {
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "MovementInfo");
                ptvcursor_add_ret_uint(ptv, hf_woww_movement_flags, 4, ENC_LITTLE_ENDIAN, &flags);
                ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
                ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
                if (flags & MOVEMENT_FLAGS_ON_TRANSPORT) {
                    ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "TransportInfo");
                    add_packed_guid(ptv, pinfo);
                    ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                    ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_pop_subtree(ptv);
                    ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_pop_subtree(ptv);
                }
                if (flags & MOVEMENT_FLAGS_SWIMMING) {
                    ptvcursor_add(ptv, hf_woww_pitch, 4, ENC_LITTLE_ENDIAN);
                }
                ptvcursor_add(ptv, hf_woww_fall_time, 4, ENC_LITTLE_ENDIAN);
                if (flags & MOVEMENT_FLAGS_JUMPING) {
                    ptvcursor_add(ptv, hf_woww_z_speed, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_cos_angle, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_sin_angle, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_xy_speed, 4, ENC_LITTLE_ENDIAN);
                }
                if (flags & MOVEMENT_FLAGS_SPLINE_ELEVATION) {
                    ptvcursor_add(ptv, hf_woww_spline_elevation, 4, ENC_LITTLE_ENDIAN);
                }
                ptvcursor_pop_subtree(ptv);
            }
            break;
        case MSG_MOVE_TELEPORT_ACK:
            if (WOWW_SERVER_TO_CLIENT) {
                add_packed_guid(ptv, pinfo);
                ptvcursor_add(ptv, hf_woww_movement_counter, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "MovementInfo");
                ptvcursor_add_ret_uint(ptv, hf_woww_movement_flags, 4, ENC_LITTLE_ENDIAN, &flags);
                ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
                ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
                if (flags & MOVEMENT_FLAGS_ON_TRANSPORT) {
                    ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "TransportInfo");
                    add_packed_guid(ptv, pinfo);
                    ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                    ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_pop_subtree(ptv);
                    ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_pop_subtree(ptv);
                }
                if (flags & MOVEMENT_FLAGS_SWIMMING) {
                    ptvcursor_add(ptv, hf_woww_pitch, 4, ENC_LITTLE_ENDIAN);
                }
                ptvcursor_add(ptv, hf_woww_fall_time, 4, ENC_LITTLE_ENDIAN);
                if (flags & MOVEMENT_FLAGS_JUMPING) {
                    ptvcursor_add(ptv, hf_woww_z_speed, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_cos_angle, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_sin_angle, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_xy_speed, 4, ENC_LITTLE_ENDIAN);
                }
                if (flags & MOVEMENT_FLAGS_SPLINE_ELEVATION) {
                    ptvcursor_add(ptv, hf_woww_spline_elevation, 4, ENC_LITTLE_ENDIAN);
                }
                ptvcursor_pop_subtree(ptv);
            }
            else {
                add_packed_guid(ptv, pinfo);
                ptvcursor_add(ptv, hf_woww_movement_counter, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_time, 4, ENC_LITTLE_ENDIAN);
            }
            break;
        case MSG_MOVE_TIME_SKIPPED:
            if (WOWW_SERVER_TO_CLIENT) {
                add_packed_guid(ptv, pinfo);
                ptvcursor_add(ptv, hf_woww_time_skipped, 4, ENC_LITTLE_ENDIAN);
            }
            break;
        case MSG_MOVE_WATER_WALK:
            add_packed_guid(ptv, pinfo);
            ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "MovementInfo");
            ptvcursor_add_ret_uint(ptv, hf_woww_movement_flags, 4, ENC_LITTLE_ENDIAN, &flags);
            ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
            ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_pop_subtree(ptv);
            ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
            if (flags & MOVEMENT_FLAGS_ON_TRANSPORT) {
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "TransportInfo");
                add_packed_guid(ptv, pinfo);
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
                ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
            }
            if (flags & MOVEMENT_FLAGS_SWIMMING) {
                ptvcursor_add(ptv, hf_woww_pitch, 4, ENC_LITTLE_ENDIAN);
            }
            ptvcursor_add(ptv, hf_woww_fall_time, 4, ENC_LITTLE_ENDIAN);
            if (flags & MOVEMENT_FLAGS_JUMPING) {
                ptvcursor_add(ptv, hf_woww_z_speed, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_cos_angle, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_sin_angle, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_xy_speed, 4, ENC_LITTLE_ENDIAN);
            }
            if (flags & MOVEMENT_FLAGS_SPLINE_ELEVATION) {
                ptvcursor_add(ptv, hf_woww_spline_elevation, 4, ENC_LITTLE_ENDIAN);
            }
            ptvcursor_pop_subtree(ptv);
            break;
        case MSG_PETITION_DECLINE:
            ptvcursor_add(ptv, hf_woww_petition, 8, ENC_LITTLE_ENDIAN);
            break;
        case MSG_PETITION_RENAME:
            ptvcursor_add(ptv, hf_woww_petition, 8, ENC_LITTLE_ENDIAN);
            add_cstring(ptv, &hf_woww_new_name);
            break;
        case MSG_PVP_LOG_DATA:
            if (WOWW_SERVER_TO_CLIENT) {
                ptvcursor_add_ret_uint(ptv, hf_woww_battleground_end_status, 1, ENC_LITTLE_ENDIAN, &status);
                if (status == BATTLEGROUND_END_STATUS_ENDED) {
                    ptvcursor_add(ptv, hf_woww_battleground_winner, 1, ENC_LITTLE_ENDIAN);
                }
                ptvcursor_add_ret_uint(ptv, hf_woww_amount_of_players, 4, ENC_LITTLE_ENDIAN, &amount_of_players);
                for (guint32 i1 = 0; i1 < amount_of_players; ++i1) {
                    ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "BattlegroundPlayer %i", i1);
                    ptvcursor_add(ptv, hf_woww_player, 8, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_pvp_rank, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_killing_blows, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_honorable_kills, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_deaths, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_bonus_honor, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add_ret_uint(ptv, hf_woww_amount_of_extra_fields, 4, ENC_LITTLE_ENDIAN, &amount_of_extra_fields);
                    for (guint32 i2 = 0; i2 < amount_of_extra_fields; ++i2) {
                        ptvcursor_add(ptv, hf_woww_fields, 4, ENC_LITTLE_ENDIAN);
                    }
                    ptvcursor_pop_subtree(ptv);
                }
            }
            else {
            }
            break;
        case MSG_QUERY_NEXT_MAIL_TIME:
            if (WOWW_SERVER_TO_CLIENT) {
                ptvcursor_add(ptv, hf_woww_unread_mails, 4, ENC_LITTLE_ENDIAN);
            }
            else {
            }
            break;
        case MSG_QUEST_PUSH_RESULT:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_quest_party_message, 1, ENC_LITTLE_ENDIAN);
            break;
        case MSG_RAID_READY_CHECK:
            if (WOWW_SERVER_TO_CLIENT) {
                len = offset_packet_end - ptvcursor_current_offset(ptv);
                if (len > 0) {
                    ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_state, 1, ENC_LITTLE_ENDIAN);
                }
            }
            else {
                len = offset_packet_end - ptvcursor_current_offset(ptv);
                if (len > 0) {
                    ptvcursor_add(ptv, hf_woww_state, 1, ENC_LITTLE_ENDIAN);
                }
            }
            break;
        case MSG_RAID_TARGET_UPDATE:
            if (WOWW_SERVER_TO_CLIENT) {
                ptvcursor_add_ret_uint(ptv, hf_woww_raid_target_update_type, 1, ENC_LITTLE_ENDIAN, &update_type);
                if (update_type == RAID_TARGET_UPDATE_TYPE_FULL) {
                    for (guint32 i1 = 0; i1 < 8; ++i1) {
                        ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "RaidTargetUpdate %i", i1);
                        ptvcursor_add(ptv, hf_woww_raid_target_index, 1, ENC_LITTLE_ENDIAN);
                        ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
                        ptvcursor_pop_subtree(ptv);
                    }
                }
                else if (update_type == RAID_TARGET_UPDATE_TYPE_PARTIAL) {
                    ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "RaidTargetUpdate");
                    ptvcursor_add(ptv, hf_woww_raid_target_index, 1, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
                    ptvcursor_pop_subtree(ptv);
                }
            }
            else {
                ptvcursor_add_ret_uint(ptv, hf_woww_raid_target_index, 1, ENC_LITTLE_ENDIAN, &target_index);
                if (target_index != RAID_TARGET_INDEX_REQUEST_ICONS) {
                    ptvcursor_add(ptv, hf_woww_target, 8, ENC_LITTLE_ENDIAN);
                }
            }
            break;
        case MSG_RANDOM_ROLL:
            if (WOWW_SERVER_TO_CLIENT) {
                ptvcursor_add(ptv, hf_woww_minimum, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_maximum, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_actual_roll, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            }
            else {
                ptvcursor_add(ptv, hf_woww_minimum, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_maximum, 4, ENC_LITTLE_ENDIAN);
            }
            break;
        case MSG_SAVE_GUILD_EMBLEM:
            if (WOWW_SERVER_TO_CLIENT) {
                ptvcursor_add(ptv, hf_woww_guild_emblem_result, 4, ENC_LITTLE_ENDIAN);
            }
            else {
                ptvcursor_add(ptv, hf_woww_vendor, 8, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_emblem_style, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_emblem_color, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_border_style, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_border_color, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_background_color, 4, ENC_LITTLE_ENDIAN);
            }
            break;
        case MSG_TABARDVENDOR_ACTIVATE:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            break;
        case MSG_TALENT_WIPE_CONFIRM:
            if (WOWW_SERVER_TO_CLIENT) {
                ptvcursor_add(ptv, hf_woww_wiping_npc, 8, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_cost_in_copper, 4, ENC_LITTLE_ENDIAN);
            }
            else {
                ptvcursor_add(ptv, hf_woww_wiping_npc, 8, ENC_LITTLE_ENDIAN);
            }
            break;
        case SMSG_ACCOUNT_DATA_TIMES:
            for (guint32 i1 = 0; i1 < 32; ++i1) {
                ptvcursor_add(ptv, hf_woww_data, 4, ENC_LITTLE_ENDIAN);
            }
            break;
        case SMSG_ACTION_BUTTONS:
            for (guint32 i1 = 0; i1 < 120; ++i1) {
                ptvcursor_add(ptv, hf_woww_data, 4, ENC_LITTLE_ENDIAN);
            }
            break;
        case SMSG_ACTIVATETAXIREPLY:
            ptvcursor_add(ptv, hf_woww_activate_taxi_reply, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_ADDON_INFO:
            while (ptvcursor_current_offset(ptv) < offset_packet_end) {
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Addon");
                ptvcursor_add(ptv, hf_woww_addon_type, 1, ENC_LITTLE_ENDIAN);
                ptvcursor_add_ret_uint(ptv, hf_woww_info_block, 1, ENC_LITTLE_ENDIAN, &info_block);
                if (info_block == INFO_BLOCK_AVAILABLE) {
                    ptvcursor_add_ret_uint(ptv, hf_woww_key_version, 1, ENC_LITTLE_ENDIAN, &key_version);
                    if (key_version != KEY_VERSION_ZERO) {
                        ptvcursor_add(ptv, hf_woww_public_key, 256, ENC_NA);
                    }
                    ptvcursor_add(ptv, hf_woww_update_available_flag, 4, ENC_LITTLE_ENDIAN);
                }
                ptvcursor_add_ret_uint(ptv, hf_woww_url_info, 1, ENC_LITTLE_ENDIAN, &url_info);
                if (url_info == URL_INFO_AVAILABLE) {
                    add_cstring(ptv, &hf_woww_url);
                }
                ptvcursor_pop_subtree(ptv);
            }
            break;
        case SMSG_AI_REACTION:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_ai_reaction, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_AREA_SPIRIT_HEALER_TIME:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_next_resurrect_time, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_AREA_TRIGGER_MESSAGE:
            add_sized_cstring(ptv, &hf_woww_message);
            break;
        case SMSG_ATTACKERSTATEUPDATE:
            ptvcursor_add(ptv, hf_woww_hit_info, 4, ENC_LITTLE_ENDIAN);
            add_packed_guid(ptv, pinfo);
            add_packed_guid(ptv, pinfo);
            ptvcursor_add(ptv, hf_woww_total_damage, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add_ret_uint(ptv, hf_woww_amount_of_damages, 1, ENC_LITTLE_ENDIAN, &amount_of_damages);
            for (guint32 i1 = 0; i1 < amount_of_damages; ++i1) {
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "DamageInfo %i", i1);
                ptvcursor_add(ptv, hf_woww_spell_school_mask, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_damage_float, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_damage_uint, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_absorb, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_resist, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
            }
            ptvcursor_add(ptv, hf_woww_damage_state, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_unknown_int, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_spell_id, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_blocked_amount, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_ATTACKSTART:
            ptvcursor_add(ptv, hf_woww_attacker, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_victim, 8, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_ATTACKSTOP:
            add_packed_guid(ptv, pinfo);
            add_packed_guid(ptv, pinfo);
            ptvcursor_add(ptv, hf_woww_unknown_int, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_AUCTION_BIDDER_LIST_RESULT:
            ptvcursor_add_ret_uint(ptv, hf_woww_count, 4, ENC_LITTLE_ENDIAN, &count);
            for (guint32 i1 = 0; i1 < count; ++i1) {
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "AuctionListItem %i", i1);
                ptvcursor_add(ptv, hf_woww_id, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_item, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_item_enchantment, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_item_random_property_id, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_item_suffix_factor, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_item_count, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_item_charges, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_item_owner, 8, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_start_bid, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_minimum_bid, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_buyout_amount, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_time_left, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_highest_bidder, 8, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_highest_bid, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
            }
            ptvcursor_add(ptv, hf_woww_total_amount_of_auctions, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_AUCTION_BIDDER_NOTIFICATION:
            ptvcursor_add(ptv, hf_woww_auction_house, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_auction_id, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_bidder, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_won, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_out_bid, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_item_template, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_item_random_property_id, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_AUCTION_COMMAND_RESULT:
            ptvcursor_add(ptv, hf_woww_auction_id, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add_ret_uint(ptv, hf_woww_auction_command_action, 4, ENC_LITTLE_ENDIAN, &action);
            if (action == AUCTION_COMMAND_ACTION_BID_PLACED) {
                ptvcursor_add_ret_uint(ptv, hf_woww_auction_command_result, 4, ENC_LITTLE_ENDIAN, &result);
                if (result == AUCTION_COMMAND_RESULT_OK) {
                    ptvcursor_add(ptv, hf_woww_auction_outbid, 4, ENC_LITTLE_ENDIAN);
                }
                else if (result == AUCTION_COMMAND_RESULT_ERR_INVENTORY) {
                    ptvcursor_add(ptv, hf_woww_inventory_result, 1, ENC_LITTLE_ENDIAN);
                }
                else if (result == AUCTION_COMMAND_RESULT_ERR_HIGHER_BID) {
                    ptvcursor_add(ptv, hf_woww_higher_bidder, 8, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_new_bid, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_auction_outbid, 4, ENC_LITTLE_ENDIAN);
                }
            }
            else {
                ptvcursor_add_ret_uint(ptv, hf_woww_auction_command_result_two, 4, ENC_LITTLE_ENDIAN, &result2);
                if (result2 == AUCTION_COMMAND_RESULT_TWO_ERR_INVENTORY) {
                    ptvcursor_add(ptv, hf_woww_inventory_result, 1, ENC_LITTLE_ENDIAN);
                }
                else if (result2 == AUCTION_COMMAND_RESULT_TWO_ERR_HIGHER_BID) {
                    ptvcursor_add(ptv, hf_woww_higher_bidder, 8, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_new_bid, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_auction_outbid, 4, ENC_LITTLE_ENDIAN);
                }
            }
            break;
        case SMSG_AUCTION_LIST_RESULT:
            ptvcursor_add_ret_uint(ptv, hf_woww_count, 4, ENC_LITTLE_ENDIAN, &count);
            for (guint32 i1 = 0; i1 < count; ++i1) {
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "AuctionListItem %i", i1);
                ptvcursor_add(ptv, hf_woww_id, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_item, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_item_enchantment, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_item_random_property_id, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_item_suffix_factor, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_item_count, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_item_charges, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_item_owner, 8, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_start_bid, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_minimum_bid, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_buyout_amount, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_time_left, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_highest_bidder, 8, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_highest_bid, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
            }
            ptvcursor_add(ptv, hf_woww_total_amount_of_auctions, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_AUCTION_OWNER_LIST_RESULT:
            ptvcursor_add_ret_uint(ptv, hf_woww_count, 4, ENC_LITTLE_ENDIAN, &count);
            for (guint32 i1 = 0; i1 < count; ++i1) {
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "AuctionListItem %i", i1);
                ptvcursor_add(ptv, hf_woww_id, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_item, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_item_enchantment, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_item_random_property_id, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_item_suffix_factor, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_item_count, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_item_charges, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_item_owner, 8, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_start_bid, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_minimum_bid, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_buyout_amount, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_time_left, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_highest_bidder, 8, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_highest_bid, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
            }
            ptvcursor_add(ptv, hf_woww_total_amount_of_auctions, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_AUCTION_OWNER_NOTIFICATION:
            ptvcursor_add(ptv, hf_woww_auction_id, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_bid, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_auction_out_bid, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_bidder, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_item, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_item_random_property_id, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_AUCTION_REMOVED_NOTIFICATION:
            ptvcursor_add(ptv, hf_woww_item, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_item_template, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_random_property_id, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_AUTH_CHALLENGE:
            ptvcursor_add(ptv, hf_woww_server_seed, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_AUTH_RESPONSE:
            ptvcursor_add_ret_uint(ptv, hf_woww_world_result, 1, ENC_LITTLE_ENDIAN, &result);
            if (result == WORLD_RESULT_AUTH_OK) {
                ptvcursor_add(ptv, hf_woww_billing_time, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_billing_flags, 1, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_billing_rested, 4, ENC_LITTLE_ENDIAN);
            }
            else if (result == WORLD_RESULT_AUTH_WAIT_QUEUE) {
                ptvcursor_add(ptv, hf_woww_queue_position, 4, ENC_LITTLE_ENDIAN);
            }
            break;
        case SMSG_BATTLEFIELD_LIST:
            ptvcursor_add(ptv, hf_woww_battlemaster, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_map, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_battleground_bracket, 1, ENC_LITTLE_ENDIAN);
            ptvcursor_add_ret_uint(ptv, hf_woww_number_of_battlegrounds, 4, ENC_LITTLE_ENDIAN, &number_of_battlegrounds);
            for (guint32 i1 = 0; i1 < number_of_battlegrounds; ++i1) {
                ptvcursor_add(ptv, hf_woww_battlegrounds, 4, ENC_LITTLE_ENDIAN);
            }
            break;
        case SMSG_BATTLEFIELD_STATUS:
            ptvcursor_add(ptv, hf_woww_queue_slot, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add_ret_uint(ptv, hf_woww_map, 4, ENC_LITTLE_ENDIAN, &map);
            if (map != MAP_EASTERN_KINGDOMS) {
                ptvcursor_add(ptv, hf_woww_battleground_bracket, 1, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_client_instance_id, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add_ret_uint(ptv, hf_woww_status_id, 1, ENC_LITTLE_ENDIAN, &status_id);
                if (status_id == STATUS_ID_WAIT_QUEUE) {
                    ptvcursor_add(ptv, hf_woww_average_wait_time_in_ms, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_time_in_queue_in_ms, 4, ENC_LITTLE_ENDIAN);
                }
                else if (status_id == STATUS_ID_WAIT_JOIN) {
                    ptvcursor_add(ptv, hf_woww_time_to_remove_in_queue_in_ms, 4, ENC_LITTLE_ENDIAN);
                }
                else if (status_id == STATUS_ID_IN_PROGRESS) {
                    ptvcursor_add(ptv, hf_woww_time_to_bg_autoleave_in_ms, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_time_to_bg_start_in_ms, 4, ENC_LITTLE_ENDIAN);
                }
            }
            break;
        case SMSG_BATTLEGROUND_PLAYER_JOINED:
            ptvcursor_add(ptv, hf_woww_player, 8, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_BATTLEGROUND_PLAYER_LEFT:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_BINDER_CONFIRM:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_BINDPOINTUPDATE:
            ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
            ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_pop_subtree(ptv);
            ptvcursor_add(ptv, hf_woww_map, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_area, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_BUY_BANK_SLOT_RESULT:
            ptvcursor_add(ptv, hf_woww_buy_bank_slot_result, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_BUY_FAILED:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_item, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_buy_result, 1, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_BUY_ITEM:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_vendor_slot, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_amount_for_sale, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_amount_bought, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_CAST_RESULT:
            ptvcursor_add(ptv, hf_woww_spell, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add_ret_uint(ptv, hf_woww_simple_spell_cast_result, 1, ENC_LITTLE_ENDIAN, &result);
            if (result != SIMPLE_SPELL_CAST_RESULT_FAILURE) {
                ptvcursor_add_ret_uint(ptv, hf_woww_cast_failure_reason, 1, ENC_LITTLE_ENDIAN, &reason);
                if (reason == CAST_FAILURE_REASON_REQUIRES_SPELL_FOCUS) {
                    ptvcursor_add(ptv, hf_woww_required_spell_focus, 4, ENC_LITTLE_ENDIAN);
                }
                else if (reason == CAST_FAILURE_REASON_REQUIRES_AREA) {
                    ptvcursor_add(ptv, hf_woww_area, 4, ENC_LITTLE_ENDIAN);
                }
                else if (reason == CAST_FAILURE_REASON_EQUIPPED_ITEM_CLASS) {
                    ptvcursor_add(ptv, hf_woww_equipped_item_class, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_equipped_item_subclass_mask, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_equipped_item_inventory_type_mask, 4, ENC_LITTLE_ENDIAN);
                }
            }
            break;
        case SMSG_CHANNEL_LIST:
            add_cstring(ptv, &hf_woww_channel_name);
            ptvcursor_add(ptv, hf_woww_channel_flags, 1, ENC_LITTLE_ENDIAN);
            ptvcursor_add_ret_uint(ptv, hf_woww_amount_of_members, 4, ENC_LITTLE_ENDIAN, &amount_of_members);
            for (guint32 i1 = 0; i1 < amount_of_members; ++i1) {
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "ChannelMember %i", i1);
                ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_channel_member_flags, 1, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
            }
            break;
        case SMSG_CHANNEL_NOTIFY:
            ptvcursor_add(ptv, hf_woww_chat_notify, 1, ENC_LITTLE_ENDIAN);
            add_cstring(ptv, &hf_woww_channel_name);
            break;
        case SMSG_CHARACTER_LOGIN_FAILED:
            ptvcursor_add(ptv, hf_woww_world_result, 1, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_CHAR_CREATE:
            ptvcursor_add(ptv, hf_woww_world_result, 1, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_CHAR_DELETE:
            ptvcursor_add(ptv, hf_woww_world_result, 1, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_CHAR_ENUM:
            ptvcursor_add_ret_uint(ptv, hf_woww_amount_of_characters, 1, ENC_LITTLE_ENDIAN, &amount_of_characters);
            for (guint32 i1 = 0; i1 < amount_of_characters; ++i1) {
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Character %i", i1);
                ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
                add_cstring(ptv, &hf_woww_name);
                ptvcursor_add(ptv, hf_woww_race, 1, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_class, 1, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_gender, 1, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_skin, 1, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_face, 1, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_hair_style, 1, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_hair_color, 1, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_facial_hair, 1, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_level, 1, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_area, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_map, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
                ptvcursor_add(ptv, hf_woww_guild_id, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_character_flags, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_first_login, 1, ENC_NA);
                ptvcursor_add(ptv, hf_woww_pet_display_id, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_pet_level, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_creature_family, 4, ENC_LITTLE_ENDIAN);
                for (guint32 i2 = 0; i2 < 19; ++i2) {
                    ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "CharacterGear %i", i2);
                    ptvcursor_add(ptv, hf_woww_equipment_display_id, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_inventory_type, 1, ENC_LITTLE_ENDIAN);
                    ptvcursor_pop_subtree(ptv);
                }
                ptvcursor_add(ptv, hf_woww_first_bag_display_id, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_first_bag_inventory_id, 1, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
            }
            break;
        case SMSG_CHAR_RENAME:
            ptvcursor_add_ret_uint(ptv, hf_woww_world_result, 1, ENC_LITTLE_ENDIAN, &result);
            if (result == WORLD_RESULT_RESPONSE_SUCCESS) {
                ptvcursor_add(ptv, hf_woww_character_guid, 8, ENC_LITTLE_ENDIAN);
                add_cstring(ptv, &hf_woww_new_name);
            }
            break;
        case SMSG_CHAT_PLAYER_NOT_FOUND:
            add_cstring(ptv, &hf_woww_name);
            break;
        case SMSG_CLEAR_COOLDOWN:
            ptvcursor_add(ptv, hf_woww_id, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_target, 8, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_CLIENT_CONTROL_UPDATE:
            add_packed_guid(ptv, pinfo);
            ptvcursor_add(ptv, hf_woww_allow_movement, 1, ENC_NA);
            break;
        case SMSG_COMPRESSED_MOVES:
            ptvcursor_add(ptv, hf_woww_decompressed_size, 4, ENC_LITTLE_ENDIAN);
            compressed_tvb = tvb_uncompress(ptvcursor_tvbuff(ptv), ptvcursor_current_offset(ptv), offset_packet_end - ptvcursor_current_offset(ptv));
            if (compressed_tvb != NULL) {
                ptvcursor_t* old_ptv = ptv;
                ptv = ptvcursor_new(wmem_packet_scope(), tree, compressed_tvb, 0);
                gint compression_end = tvb_reported_length(compressed_tvb);
                while (ptvcursor_current_offset(ptv) < compression_end) {
                    ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "CompressedMove");
                    ptvcursor_add(ptv, hf_woww_size_struct, 1, ENC_LITTLE_ENDIAN);
                    ptvcursor_add_ret_uint(ptv, hf_woww_compressed_move_opcode, 2, ENC_LITTLE_ENDIAN, &opcode);
                    add_packed_guid(ptv, pinfo);
                    if (opcode == COMPRESSED_MOVE_OPCODE_SMSG_SPLINE_SET_RUN_SPEED) {
                        ptvcursor_add(ptv, hf_woww_speed, 4, ENC_LITTLE_ENDIAN);
                    }
                    else if (opcode == COMPRESSED_MOVE_OPCODE_SMSG_MONSTER_MOVE) {
                        ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "MonsterMove");
                        ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                        ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                        ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                        ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                        ptvcursor_pop_subtree(ptv);
                        ptvcursor_add(ptv, hf_woww_spline_id, 4, ENC_LITTLE_ENDIAN);
                        ptvcursor_add_ret_uint(ptv, hf_woww_monster_move_type, 1, ENC_LITTLE_ENDIAN, &move_type);
                        if (move_type == MONSTER_MOVE_TYPE_FACING_TARGET) {
                            ptvcursor_add(ptv, hf_woww_target, 8, ENC_LITTLE_ENDIAN);
                        }
                        else if (move_type == MONSTER_MOVE_TYPE_FACING_ANGLE) {
                            ptvcursor_add(ptv, hf_woww_angle, 4, ENC_LITTLE_ENDIAN);
                        }
                        else if (move_type == MONSTER_MOVE_TYPE_FACING_SPOT) {
                            ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                            ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                            ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                            ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                            ptvcursor_pop_subtree(ptv);
                        }
                        if (move_type != MONSTER_MOVE_TYPE_STOP) {
                            ptvcursor_add(ptv, hf_woww_spline_flag, 4, ENC_LITTLE_ENDIAN);
                            ptvcursor_add(ptv, hf_woww_duration, 4, ENC_LITTLE_ENDIAN);
                            add_monster_move_spline(ptv);
                        }
                        ptvcursor_pop_subtree(ptv);
                    }
                    else if (opcode == COMPRESSED_MOVE_OPCODE_SMSG_MONSTER_MOVE_TRANSPORT) {
                        add_packed_guid(ptv, pinfo);
                        ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "MonsterMove");
                        ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                        ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                        ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                        ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                        ptvcursor_pop_subtree(ptv);
                        ptvcursor_add(ptv, hf_woww_spline_id, 4, ENC_LITTLE_ENDIAN);
                        ptvcursor_add_ret_uint(ptv, hf_woww_monster_move_type, 1, ENC_LITTLE_ENDIAN, &move_type);
                        if (move_type == MONSTER_MOVE_TYPE_FACING_TARGET) {
                            ptvcursor_add(ptv, hf_woww_target, 8, ENC_LITTLE_ENDIAN);
                        }
                        else if (move_type == MONSTER_MOVE_TYPE_FACING_ANGLE) {
                            ptvcursor_add(ptv, hf_woww_angle, 4, ENC_LITTLE_ENDIAN);
                        }
                        else if (move_type == MONSTER_MOVE_TYPE_FACING_SPOT) {
                            ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                            ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                            ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                            ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                            ptvcursor_pop_subtree(ptv);
                        }
                        if (move_type != MONSTER_MOVE_TYPE_STOP) {
                            ptvcursor_add(ptv, hf_woww_spline_flag, 4, ENC_LITTLE_ENDIAN);
                            ptvcursor_add(ptv, hf_woww_duration, 4, ENC_LITTLE_ENDIAN);
                            add_monster_move_spline(ptv);
                        }
                        ptvcursor_pop_subtree(ptv);
                    }
                    ptvcursor_pop_subtree(ptv);
                }
                ptvcursor_free(ptv);
                ptv = old_ptv;
                compressed_tvb = NULL;
            }
            break;
        case SMSG_COMPRESSED_UPDATE_OBJECT:
            ptvcursor_add(ptv, hf_woww_decompressed_size, 4, ENC_LITTLE_ENDIAN);
            compressed_tvb = tvb_uncompress(ptvcursor_tvbuff(ptv), ptvcursor_current_offset(ptv), offset_packet_end - ptvcursor_current_offset(ptv));
            if (compressed_tvb != NULL) {
                ptvcursor_t* old_ptv = ptv;
                ptv = ptvcursor_new(wmem_packet_scope(), tree, compressed_tvb, 0);
                ptvcursor_add_ret_uint(ptv, hf_woww_amount_of_objects, 4, ENC_LITTLE_ENDIAN, &amount_of_objects);
                ptvcursor_add(ptv, hf_woww_has_transport, 1, ENC_LITTLE_ENDIAN);
                for (guint32 i1 = 0; i1 < amount_of_objects; ++i1) {
                    ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Object %i", i1);
                    ptvcursor_add_ret_uint(ptv, hf_woww_update_type, 1, ENC_LITTLE_ENDIAN, &update_type);
                    if (update_type == UPDATE_TYPE_VALUES) {
                        add_packed_guid(ptv, pinfo);
                        add_update_mask(ptv, pinfo);
                    }
                    else if (update_type == UPDATE_TYPE_MOVEMENT) {
                        add_packed_guid(ptv, pinfo);
                        ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "MovementBlock");
                        ptvcursor_add_ret_uint(ptv, hf_woww_update_flag, 1, ENC_LITTLE_ENDIAN, &update_flag);
                        if (update_flag & UPDATE_FLAG_LIVING) {
                            ptvcursor_add_ret_uint(ptv, hf_woww_movement_flags, 4, ENC_LITTLE_ENDIAN, &flags);
                            ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
                            ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                            ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                            ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                            ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                            ptvcursor_pop_subtree(ptv);
                            ptvcursor_add(ptv, hf_woww_living_orientation, 4, ENC_LITTLE_ENDIAN);
                            if (flags & MOVEMENT_FLAGS_ON_TRANSPORT) {
                                add_packed_guid(ptv, pinfo);
                                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                                ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                                ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                                ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                                ptvcursor_pop_subtree(ptv);
                                ptvcursor_add(ptv, hf_woww_transport_orientation, 4, ENC_LITTLE_ENDIAN);
                            }
                            if (flags & MOVEMENT_FLAGS_SWIMMING) {
                                ptvcursor_add(ptv, hf_woww_pitch, 4, ENC_LITTLE_ENDIAN);
                            }
                            ptvcursor_add(ptv, hf_woww_fall_time, 4, ENC_LITTLE_ENDIAN);
                            if (flags & MOVEMENT_FLAGS_JUMPING) {
                                ptvcursor_add(ptv, hf_woww_z_speed, 4, ENC_LITTLE_ENDIAN);
                                ptvcursor_add(ptv, hf_woww_cos_angle, 4, ENC_LITTLE_ENDIAN);
                                ptvcursor_add(ptv, hf_woww_sin_angle, 4, ENC_LITTLE_ENDIAN);
                                ptvcursor_add(ptv, hf_woww_xy_speed, 4, ENC_LITTLE_ENDIAN);
                            }
                            if (flags & MOVEMENT_FLAGS_SPLINE_ELEVATION) {
                                ptvcursor_add(ptv, hf_woww_spline_elevation, 4, ENC_LITTLE_ENDIAN);
                            }
                            ptvcursor_add(ptv, hf_woww_walking_speed, 4, ENC_LITTLE_ENDIAN);
                            ptvcursor_add(ptv, hf_woww_running_speed, 4, ENC_LITTLE_ENDIAN);
                            ptvcursor_add(ptv, hf_woww_backwards_running_speed, 4, ENC_LITTLE_ENDIAN);
                            ptvcursor_add(ptv, hf_woww_swimming_speed, 4, ENC_LITTLE_ENDIAN);
                            ptvcursor_add(ptv, hf_woww_backwards_swimming_speed, 4, ENC_LITTLE_ENDIAN);
                            ptvcursor_add(ptv, hf_woww_turn_rate, 4, ENC_LITTLE_ENDIAN);
                            if (flags & MOVEMENT_FLAGS_SPLINE_ENABLED) {
                                ptvcursor_add_ret_uint(ptv, hf_woww_spline_flag, 4, ENC_LITTLE_ENDIAN, &spline_flags);
                                if (spline_flags & SPLINE_FLAG_FINAL_ANGLE) {
                                    ptvcursor_add(ptv, hf_woww_angle, 4, ENC_LITTLE_ENDIAN);
                                }
                                else if (spline_flags & SPLINE_FLAG_FINAL_TARGET) {
                                    ptvcursor_add(ptv, hf_woww_target, 8, ENC_LITTLE_ENDIAN);
                                }
                                else if (spline_flags & SPLINE_FLAG_FINAL_POINT) {
                                    ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                                    ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                                    ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                                    ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                                    ptvcursor_pop_subtree(ptv);
                                }
                                ptvcursor_add(ptv, hf_woww_time_passed, 4, ENC_LITTLE_ENDIAN);
                                ptvcursor_add(ptv, hf_woww_duration, 4, ENC_LITTLE_ENDIAN);
                                ptvcursor_add(ptv, hf_woww_id, 4, ENC_LITTLE_ENDIAN);
                                ptvcursor_add_ret_uint(ptv, hf_woww_amount_of_nodes, 4, ENC_LITTLE_ENDIAN, &amount_of_nodes);
                                for (guint32 i2 = 0; i2 < amount_of_nodes; ++i2) {
                                    ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d %i", i2);
                                    ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                                    ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                                    ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                                    ptvcursor_pop_subtree(ptv);
                                }
                                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                                ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                                ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                                ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                                ptvcursor_pop_subtree(ptv);
                            }
                        }
                        else if (update_flag & UPDATE_FLAG_HAS_POSITION) {
                            ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                            ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                            ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                            ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                            ptvcursor_pop_subtree(ptv);
                            ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
                        }
                        if (update_flag & UPDATE_FLAG_HIGH_GUID) {
                            ptvcursor_add(ptv, hf_woww_unknown_int, 4, ENC_LITTLE_ENDIAN);
                        }
                        if (update_flag & UPDATE_FLAG_ALL) {
                            ptvcursor_add(ptv, hf_woww_unknown_int, 4, ENC_LITTLE_ENDIAN);
                        }
                        if (update_flag & UPDATE_FLAG_MELEE_ATTACKING) {
                            add_packed_guid(ptv, pinfo);
                        }
                        if (update_flag & UPDATE_FLAG_TRANSPORT) {
                            ptvcursor_add(ptv, hf_woww_transport_progress_in_ms, 4, ENC_LITTLE_ENDIAN);
                        }
                        ptvcursor_pop_subtree(ptv);
                    }
                    else if (update_type == UPDATE_TYPE_CREATE_OBJECT
                     || update_type == UPDATE_TYPE_CREATE_OBJECT2) {
                        add_packed_guid(ptv, pinfo);
                        ptvcursor_add(ptv, hf_woww_object_type, 1, ENC_LITTLE_ENDIAN);
                        ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "MovementBlock");
                        ptvcursor_add_ret_uint(ptv, hf_woww_update_flag, 1, ENC_LITTLE_ENDIAN, &update_flag);
                        if (update_flag & UPDATE_FLAG_LIVING) {
                            ptvcursor_add_ret_uint(ptv, hf_woww_movement_flags, 4, ENC_LITTLE_ENDIAN, &flags);
                            ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
                            ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                            ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                            ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                            ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                            ptvcursor_pop_subtree(ptv);
                            ptvcursor_add(ptv, hf_woww_living_orientation, 4, ENC_LITTLE_ENDIAN);
                            if (flags & MOVEMENT_FLAGS_ON_TRANSPORT) {
                                add_packed_guid(ptv, pinfo);
                                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                                ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                                ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                                ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                                ptvcursor_pop_subtree(ptv);
                                ptvcursor_add(ptv, hf_woww_transport_orientation, 4, ENC_LITTLE_ENDIAN);
                            }
                            if (flags & MOVEMENT_FLAGS_SWIMMING) {
                                ptvcursor_add(ptv, hf_woww_pitch, 4, ENC_LITTLE_ENDIAN);
                            }
                            ptvcursor_add(ptv, hf_woww_fall_time, 4, ENC_LITTLE_ENDIAN);
                            if (flags & MOVEMENT_FLAGS_JUMPING) {
                                ptvcursor_add(ptv, hf_woww_z_speed, 4, ENC_LITTLE_ENDIAN);
                                ptvcursor_add(ptv, hf_woww_cos_angle, 4, ENC_LITTLE_ENDIAN);
                                ptvcursor_add(ptv, hf_woww_sin_angle, 4, ENC_LITTLE_ENDIAN);
                                ptvcursor_add(ptv, hf_woww_xy_speed, 4, ENC_LITTLE_ENDIAN);
                            }
                            if (flags & MOVEMENT_FLAGS_SPLINE_ELEVATION) {
                                ptvcursor_add(ptv, hf_woww_spline_elevation, 4, ENC_LITTLE_ENDIAN);
                            }
                            ptvcursor_add(ptv, hf_woww_walking_speed, 4, ENC_LITTLE_ENDIAN);
                            ptvcursor_add(ptv, hf_woww_running_speed, 4, ENC_LITTLE_ENDIAN);
                            ptvcursor_add(ptv, hf_woww_backwards_running_speed, 4, ENC_LITTLE_ENDIAN);
                            ptvcursor_add(ptv, hf_woww_swimming_speed, 4, ENC_LITTLE_ENDIAN);
                            ptvcursor_add(ptv, hf_woww_backwards_swimming_speed, 4, ENC_LITTLE_ENDIAN);
                            ptvcursor_add(ptv, hf_woww_turn_rate, 4, ENC_LITTLE_ENDIAN);
                            if (flags & MOVEMENT_FLAGS_SPLINE_ENABLED) {
                                ptvcursor_add_ret_uint(ptv, hf_woww_spline_flag, 4, ENC_LITTLE_ENDIAN, &spline_flags);
                                if (spline_flags & SPLINE_FLAG_FINAL_ANGLE) {
                                    ptvcursor_add(ptv, hf_woww_angle, 4, ENC_LITTLE_ENDIAN);
                                }
                                else if (spline_flags & SPLINE_FLAG_FINAL_TARGET) {
                                    ptvcursor_add(ptv, hf_woww_target, 8, ENC_LITTLE_ENDIAN);
                                }
                                else if (spline_flags & SPLINE_FLAG_FINAL_POINT) {
                                    ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                                    ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                                    ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                                    ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                                    ptvcursor_pop_subtree(ptv);
                                }
                                ptvcursor_add(ptv, hf_woww_time_passed, 4, ENC_LITTLE_ENDIAN);
                                ptvcursor_add(ptv, hf_woww_duration, 4, ENC_LITTLE_ENDIAN);
                                ptvcursor_add(ptv, hf_woww_id, 4, ENC_LITTLE_ENDIAN);
                                ptvcursor_add_ret_uint(ptv, hf_woww_amount_of_nodes, 4, ENC_LITTLE_ENDIAN, &amount_of_nodes);
                                for (guint32 i2 = 0; i2 < amount_of_nodes; ++i2) {
                                    ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d %i", i2);
                                    ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                                    ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                                    ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                                    ptvcursor_pop_subtree(ptv);
                                }
                                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                                ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                                ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                                ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                                ptvcursor_pop_subtree(ptv);
                            }
                        }
                        else if (update_flag & UPDATE_FLAG_HAS_POSITION) {
                            ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                            ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                            ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                            ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                            ptvcursor_pop_subtree(ptv);
                            ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
                        }
                        if (update_flag & UPDATE_FLAG_HIGH_GUID) {
                            ptvcursor_add(ptv, hf_woww_unknown_int, 4, ENC_LITTLE_ENDIAN);
                        }
                        if (update_flag & UPDATE_FLAG_ALL) {
                            ptvcursor_add(ptv, hf_woww_unknown_int, 4, ENC_LITTLE_ENDIAN);
                        }
                        if (update_flag & UPDATE_FLAG_MELEE_ATTACKING) {
                            add_packed_guid(ptv, pinfo);
                        }
                        if (update_flag & UPDATE_FLAG_TRANSPORT) {
                            ptvcursor_add(ptv, hf_woww_transport_progress_in_ms, 4, ENC_LITTLE_ENDIAN);
                        }
                        ptvcursor_pop_subtree(ptv);
                        add_update_mask(ptv, pinfo);
                    }
                    else if (update_type == UPDATE_TYPE_OUT_OF_RANGE_OBJECTS
                     || update_type == UPDATE_TYPE_NEAR_OBJECTS) {
                        ptvcursor_add_ret_uint(ptv, hf_woww_count, 4, ENC_LITTLE_ENDIAN, &count);
                        for (guint32 i2 = 0; i2 < count; ++i2) {
                            add_packed_guid(ptv, pinfo);
                        }
                    }
                    ptvcursor_pop_subtree(ptv);
                }
                ptvcursor_free(ptv);
                ptv = old_ptv;
                compressed_tvb = NULL;
            }
            break;
        case SMSG_COOLDOWN_EVENT:
            ptvcursor_add(ptv, hf_woww_id, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_CORPSE_RECLAIM_DELAY:
            ptvcursor_add(ptv, hf_woww_delay, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_CREATURE_QUERY_RESPONSE:
            ptvcursor_add(ptv, hf_woww_creature_entry, 4, ENC_LITTLE_ENDIAN);
            len = offset_packet_end - ptvcursor_current_offset(ptv);
            if (len > 0) {
                add_cstring(ptv, &hf_woww_name);
                add_cstring(ptv, &hf_woww_name);
                add_cstring(ptv, &hf_woww_name);
                add_cstring(ptv, &hf_woww_name);
                add_cstring(ptv, &hf_woww_sub_name);
                ptvcursor_add(ptv, hf_woww_type_flags, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_creature_type, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_creature_family, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_creature_rank, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_unknown_int, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_spell_data_id, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_display_id, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_civilian, 1, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_racial_leader, 1, ENC_LITTLE_ENDIAN);
            }
            break;
        case SMSG_DEFENSE_MESSAGE:
            ptvcursor_add(ptv, hf_woww_area, 4, ENC_LITTLE_ENDIAN);
            add_sized_cstring(ptv, &hf_woww_message);
            break;
        case SMSG_DESTROY_OBJECT:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_DISMOUNTRESULT:
            ptvcursor_add(ptv, hf_woww_dismount_result, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_DISPEL_FAILED:
            ptvcursor_add(ptv, hf_woww_caster, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_target, 8, ENC_LITTLE_ENDIAN);
            while (ptvcursor_current_offset(ptv) < offset_packet_end) {
                ptvcursor_add(ptv, hf_woww_spells, 4, ENC_LITTLE_ENDIAN);
            }
            break;
        case SMSG_DUEL_COMPLETE:
            ptvcursor_add(ptv, hf_woww_ended_without_interruption, 1, ENC_NA);
            break;
        case SMSG_DUEL_COUNTDOWN:
            ptvcursor_add(ptv, hf_woww_time, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_DUEL_REQUESTED:
            ptvcursor_add(ptv, hf_woww_initiator, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_target, 8, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_DUEL_WINNER:
            ptvcursor_add(ptv, hf_woww_duel_winner_reason, 1, ENC_LITTLE_ENDIAN);
            add_cstring(ptv, &hf_woww_opponent_name);
            add_cstring(ptv, &hf_woww_initiator_name);
            break;
        case SMSG_EMOTE:
            ptvcursor_add(ptv, hf_woww_emote_enum, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_ENCHANTMENTLOG:
            ptvcursor_add(ptv, hf_woww_target, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_caster, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_item, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_spell, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_show_affiliation, 1, ENC_NA);
            break;
        case SMSG_ENVIRONMENTAL_DAMAGE_LOG:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_environmental_damage_type, 1, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_damage, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_absorb, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_resist, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_EXPECTED_SPAM_RECORDS:
            ptvcursor_add_ret_uint(ptv, hf_woww_amount_of_records, 4, ENC_LITTLE_ENDIAN, &amount_of_records);
            for (guint32 i1 = 0; i1 < amount_of_records; ++i1) {
                add_cstring(ptv, &hf_woww_records);
            }
            break;
        case SMSG_EXPLORATION_EXPERIENCE:
            ptvcursor_add(ptv, hf_woww_area, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_experience, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_FORCE_MOVE_ROOT:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_counter, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_FORCE_MOVE_UNROOT:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_counter, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_FORCE_RUN_BACK_SPEED_CHANGE:
            add_packed_guid(ptv, pinfo);
            ptvcursor_add(ptv, hf_woww_move_event, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_speed, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_FORCE_RUN_SPEED_CHANGE:
            add_packed_guid(ptv, pinfo);
            ptvcursor_add(ptv, hf_woww_move_event, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_speed, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_FORCE_SWIM_BACK_SPEED_CHANGE:
            add_packed_guid(ptv, pinfo);
            ptvcursor_add(ptv, hf_woww_move_event, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_speed, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_FORCE_SWIM_SPEED_CHANGE:
            add_packed_guid(ptv, pinfo);
            ptvcursor_add(ptv, hf_woww_move_event, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_speed, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_FORCE_TURN_RATE_CHANGE:
            add_packed_guid(ptv, pinfo);
            ptvcursor_add(ptv, hf_woww_move_event, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_speed, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_FORCE_WALK_SPEED_CHANGE:
            add_packed_guid(ptv, pinfo);
            ptvcursor_add(ptv, hf_woww_move_event, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_speed, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_FRIEND_LIST:
            ptvcursor_add_ret_uint(ptv, hf_woww_amount_of_friends, 1, ENC_LITTLE_ENDIAN, &amount_of_friends);
            for (guint32 i1 = 0; i1 < amount_of_friends; ++i1) {
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Friend %i", i1);
                ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
                ptvcursor_add_ret_uint(ptv, hf_woww_friend_status, 1, ENC_LITTLE_ENDIAN, &status);
                if (status != FRIEND_STATUS_OFFLINE) {
                    ptvcursor_add(ptv, hf_woww_area, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_level, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_class, 4, ENC_LITTLE_ENDIAN);
                }
                ptvcursor_pop_subtree(ptv);
            }
            break;
        case SMSG_FRIEND_STATUS:
            ptvcursor_add(ptv, hf_woww_friend_result, 1, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_GAMEOBJECT_CUSTOM_ANIM:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_animation_id, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_GAMEOBJECT_DESPAWN_ANIM:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_GAMEOBJECT_PAGETEXT:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_GAMEOBJECT_QUERY_RESPONSE:
            ptvcursor_add(ptv, hf_woww_entry_id, 4, ENC_LITTLE_ENDIAN);
            len = offset_packet_end - ptvcursor_current_offset(ptv);
            if (len > 0) {
                ptvcursor_add(ptv, hf_woww_info_type, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_display_id, 4, ENC_LITTLE_ENDIAN);
                add_cstring(ptv, &hf_woww_name);
                add_cstring(ptv, &hf_woww_name);
                add_cstring(ptv, &hf_woww_name);
                add_cstring(ptv, &hf_woww_name);
                add_cstring(ptv, &hf_woww_name);
                for (guint32 i1 = 0; i1 < 6; ++i1) {
                    ptvcursor_add(ptv, hf_woww_raw_data, 4, ENC_LITTLE_ENDIAN);
                }
            }
            break;
        case SMSG_GAMEOBJECT_RESET_STATE:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_GAMEOBJECT_SPAWN_ANIM:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_GMTICKET_CREATE:
            ptvcursor_add(ptv, hf_woww_gm_ticket_response, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_GMTICKET_DELETETICKET:
            ptvcursor_add(ptv, hf_woww_gm_ticket_response, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_GMTICKET_GETTICKET:
            ptvcursor_add_ret_uint(ptv, hf_woww_gm_ticket_status, 4, ENC_LITTLE_ENDIAN, &status);
            if (status == GM_TICKET_STATUS_HAS_TEXT) {
                add_cstring(ptv, &hf_woww_text);
                ptvcursor_add(ptv, hf_woww_gm_ticket_type, 1, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_days_since_ticket_creation, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_days_since_oldest_ticket_creation, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_days_since_last_updated, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_gm_ticket_escalation_status, 1, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_read_by_gm, 1, ENC_NA);
            }
            break;
        case SMSG_GMTICKET_SYSTEMSTATUS:
            ptvcursor_add(ptv, hf_woww_gm_ticket_queue_status, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_GMTICKET_UPDATETEXT:
            ptvcursor_add(ptv, hf_woww_gm_ticket_response, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_GM_TICKET_STATUS_UPDATE:
            ptvcursor_add(ptv, hf_woww_gm_ticket_status_response, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_GOSSIP_MESSAGE:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_title_text_id, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add_ret_uint(ptv, hf_woww_amount_of_gossip_items, 4, ENC_LITTLE_ENDIAN, &amount_of_gossip_items);
            for (guint32 i1 = 0; i1 < amount_of_gossip_items; ++i1) {
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "GossipItem %i", i1);
                ptvcursor_add(ptv, hf_woww_id, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_item_icon, 1, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_coded, 1, ENC_NA);
                add_cstring(ptv, &hf_woww_message);
                ptvcursor_pop_subtree(ptv);
            }
            ptvcursor_add_ret_uint(ptv, hf_woww_amount_of_quests, 4, ENC_LITTLE_ENDIAN, &amount_of_quests);
            for (guint32 i1 = 0; i1 < amount_of_quests; ++i1) {
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "QuestItem %i", i1);
                ptvcursor_add(ptv, hf_woww_quest_id, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_quest_icon, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_level, 4, ENC_LITTLE_ENDIAN);
                add_cstring(ptv, &hf_woww_title);
                ptvcursor_pop_subtree(ptv);
            }
            break;
        case SMSG_GOSSIP_POI:
            ptvcursor_add(ptv, hf_woww_flags, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector2d");
            ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_pop_subtree(ptv);
            ptvcursor_add(ptv, hf_woww_icon, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_data, 4, ENC_LITTLE_ENDIAN);
            add_cstring(ptv, &hf_woww_location_name);
            break;
        case SMSG_GROUP_DECLINE:
            add_cstring(ptv, &hf_woww_name);
            break;
        case SMSG_GROUP_INVITE:
            add_cstring(ptv, &hf_woww_name);
            break;
        case SMSG_GROUP_JOINED_BATTLEGROUND:
            ptvcursor_add(ptv, hf_woww_bg_type_id, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_GROUP_LIST:
            ptvcursor_add(ptv, hf_woww_group_type, 1, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_flags, 1, ENC_LITTLE_ENDIAN);
            ptvcursor_add_ret_uint(ptv, hf_woww_amount_of_members, 4, ENC_LITTLE_ENDIAN, &amount_of_members);
            for (guint32 i1 = 0; i1 < amount_of_members; ++i1) {
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "GroupListMember %i", i1);
                add_cstring(ptv, &hf_woww_name);
                ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_is_online, 1, ENC_NA);
                ptvcursor_add(ptv, hf_woww_flags, 1, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
            }
            ptvcursor_add(ptv, hf_woww_leader, 8, ENC_LITTLE_ENDIAN);
            len = offset_packet_end - ptvcursor_current_offset(ptv);
            if (len > 0) {
                ptvcursor_add(ptv, hf_woww_group_loot_setting, 1, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_master_loot, 8, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_item_quality, 1, ENC_LITTLE_ENDIAN);
            }
            break;
        case SMSG_GROUP_SET_LEADER:
            add_cstring(ptv, &hf_woww_name);
            break;
        case SMSG_GUILD_COMMAND_RESULT:
            ptvcursor_add(ptv, hf_woww_guild_command, 4, ENC_LITTLE_ENDIAN);
            add_cstring(ptv, &hf_woww_string);
            ptvcursor_add(ptv, hf_woww_guild_command_result, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_GUILD_EVENT:
            ptvcursor_add(ptv, hf_woww_guild_event, 1, ENC_LITTLE_ENDIAN);
            ptvcursor_add_ret_uint(ptv, hf_woww_amount_of_events, 1, ENC_LITTLE_ENDIAN, &amount_of_events);
            for (guint32 i1 = 0; i1 < amount_of_events; ++i1) {
                add_cstring(ptv, &hf_woww_event_descriptions);
            }
            break;
        case SMSG_GUILD_INFO:
            add_cstring(ptv, &hf_woww_guild_name);
            ptvcursor_add(ptv, hf_woww_created_day, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_created_month, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_created_year, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_amount_of_characters_in_guild, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_amount_of_accounts_in_guild, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_GUILD_INVITE:
            add_cstring(ptv, &hf_woww_player_name);
            add_cstring(ptv, &hf_woww_guild_name);
            break;
        case SMSG_GUILD_QUERY_RESPONSE:
            ptvcursor_add(ptv, hf_woww_id, 4, ENC_LITTLE_ENDIAN);
            add_cstring(ptv, &hf_woww_name);
            for (guint32 i1 = 0; i1 < 10; ++i1) {
                add_cstring(ptv, &hf_woww_rank_names);
            }
            ptvcursor_add(ptv, hf_woww_emblem_style, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_emblem_color, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_border_style, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_border_color, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_background_color, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_GUILD_ROSTER:
            ptvcursor_add_ret_uint(ptv, hf_woww_amount_of_members, 4, ENC_LITTLE_ENDIAN, &amount_of_members);
            add_cstring(ptv, &hf_woww_motd);
            add_cstring(ptv, &hf_woww_guild_info);
            ptvcursor_add_ret_uint(ptv, hf_woww_amount_of_rights, 4, ENC_LITTLE_ENDIAN, &amount_of_rights);
            for (guint32 i1 = 0; i1 < amount_of_rights; ++i1) {
                ptvcursor_add(ptv, hf_woww_rights, 4, ENC_LITTLE_ENDIAN);
            }
            for (guint32 i1 = 0; i1 < amount_of_members; ++i1) {
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "GuildMember %i", i1);
                ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
                ptvcursor_add_ret_uint(ptv, hf_woww_guild_member_status, 1, ENC_LITTLE_ENDIAN, &status);
                add_cstring(ptv, &hf_woww_name);
                ptvcursor_add(ptv, hf_woww_rank, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_level, 1, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_class, 1, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_area, 4, ENC_LITTLE_ENDIAN);
                if (status == GUILD_MEMBER_STATUS_OFFLINE) {
                    ptvcursor_add(ptv, hf_woww_time_offline, 4, ENC_LITTLE_ENDIAN);
                }
                add_cstring(ptv, &hf_woww_public_note);
                add_cstring(ptv, &hf_woww_officer_note);
                ptvcursor_pop_subtree(ptv);
            }
            break;
        case SMSG_IGNORE_LIST:
            ptvcursor_add_ret_uint(ptv, hf_woww_amount_of_ignored, 1, ENC_LITTLE_ENDIAN, &amount_of_ignored);
            for (guint32 i1 = 0; i1 < amount_of_ignored; ++i1) {
                ptvcursor_add(ptv, hf_woww_ignored, 8, ENC_LITTLE_ENDIAN);
            }
            break;
        case SMSG_INITIALIZE_FACTIONS:
            ptvcursor_add_ret_uint(ptv, hf_woww_amount_of_factions, 4, ENC_LITTLE_ENDIAN, &amount_of_factions);
            for (guint32 i1 = 0; i1 < amount_of_factions; ++i1) {
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "FactionInitializer %i", i1);
                ptvcursor_add(ptv, hf_woww_faction_flag, 1, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_standing, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
            }
            break;
        case SMSG_INITIAL_SPELLS:
            ptvcursor_add(ptv, hf_woww_unknown_int, 1, ENC_LITTLE_ENDIAN);
            ptvcursor_add_ret_uint(ptv, hf_woww_spell_count, 2, ENC_LITTLE_ENDIAN, &spell_count);
            for (guint32 i1 = 0; i1 < spell_count; ++i1) {
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "InitialSpell %i", i1);
                ptvcursor_add(ptv, hf_woww_spell_id, 2, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_unknown_int, 2, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
            }
            ptvcursor_add_ret_uint(ptv, hf_woww_cooldown_count, 2, ENC_LITTLE_ENDIAN, &cooldown_count);
            for (guint32 i1 = 0; i1 < cooldown_count; ++i1) {
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "CooldownSpell %i", i1);
                ptvcursor_add(ptv, hf_woww_spell_id, 2, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_item_id, 2, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_spell_category, 2, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_cooldown, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_category_cooldown, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
            }
            break;
        case SMSG_INIT_WORLD_STATES:
            ptvcursor_add(ptv, hf_woww_map, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_area, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add_ret_uint(ptv, hf_woww_amount_of_states, 2, ENC_LITTLE_ENDIAN, &amount_of_states);
            for (guint32 i1 = 0; i1 < amount_of_states; ++i1) {
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "WorldState %i", i1);
                ptvcursor_add(ptv, hf_woww_state, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_value, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
            }
            break;
        case SMSG_INSPECT:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_INSTANCE_RESET:
            ptvcursor_add(ptv, hf_woww_map, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_INSTANCE_RESET_FAILED:
            ptvcursor_add(ptv, hf_woww_instance_reset_failed_reason, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_map, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_INSTANCE_SAVE_CREATED:
            ptvcursor_add(ptv, hf_woww_unknown_int, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_INVALIDATE_PLAYER:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_INVENTORY_CHANGE_FAILURE:
            ptvcursor_add_ret_uint(ptv, hf_woww_inventory_result, 1, ENC_LITTLE_ENDIAN, &result);
            if (result == INVENTORY_RESULT_CANT_EQUIP_LEVEL_I) {
                ptvcursor_add(ptv, hf_woww_required_level, 4, ENC_LITTLE_ENDIAN);
            }
            if (result != INVENTORY_RESULT_OK) {
                ptvcursor_add(ptv, hf_woww_item, 8, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_item, 8, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_bag_type_subclass, 1, ENC_LITTLE_ENDIAN);
            }
            break;
        case SMSG_ITEM_COOLDOWN:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_id, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_ITEM_ENCHANT_TIME_UPDATE:
            ptvcursor_add(ptv, hf_woww_item, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_slot, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_duration, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_player, 8, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_ITEM_NAME_QUERY_RESPONSE:
            ptvcursor_add(ptv, hf_woww_item, 4, ENC_LITTLE_ENDIAN);
            add_cstring(ptv, &hf_woww_item_name);
            break;
        case SMSG_ITEM_PUSH_RESULT:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_new_item_source, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_new_item_creation_type, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_new_item_chat_alert, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_bag_slot, 1, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_item_slot_int, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_item, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_item_suffix_factor, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_item_random_property_id, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_item_count, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_ITEM_QUERY_SINGLE_RESPONSE:
            ptvcursor_add(ptv, hf_woww_item, 4, ENC_LITTLE_ENDIAN);
            len = offset_packet_end - ptvcursor_current_offset(ptv);
            if (len > 0) {
                ptvcursor_add(ptv, hf_woww_item_class_and_sub_class, 8, ENC_LITTLE_ENDIAN);
                add_cstring(ptv, &hf_woww_name);
                add_cstring(ptv, &hf_woww_name);
                add_cstring(ptv, &hf_woww_name);
                add_cstring(ptv, &hf_woww_name);
                ptvcursor_add(ptv, hf_woww_display_id, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_item_quality, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_item_flag, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_buy_price, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_sell_price, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_inventory_type, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_allowed_class, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_allowed_race, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_item_level, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_required_level, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_skill, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_required_skill_rank, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_required_spell, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_required_honor_rank, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_required_city_rank, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_faction, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_required_faction_rank, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_max_count, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_stackable, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_container_slots, 4, ENC_LITTLE_ENDIAN);
                for (guint32 i1 = 0; i1 < 10; ++i1) {
                    ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "ItemStat %i", i1);
                    ptvcursor_add(ptv, hf_woww_item_stat_type, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_value, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_pop_subtree(ptv);
                }
                for (guint32 i1 = 0; i1 < 5; ++i1) {
                    ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "ItemDamageType %i", i1);
                    ptvcursor_add(ptv, hf_woww_damage_minimum, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_damage_maximum, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_spell_school, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_pop_subtree(ptv);
                }
                ptvcursor_add(ptv, hf_woww_armor, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_holy_resistance, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_fire_resistance, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_nature_resistance, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_frost_resistance, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_shadow_resistance, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_arcane_resistance, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_delay, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_ammo_type, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_ranged_range_modification, 4, ENC_LITTLE_ENDIAN);
                for (guint32 i1 = 0; i1 < 5; ++i1) {
                    ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "ItemSpells %i", i1);
                    ptvcursor_add(ptv, hf_woww_spell, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_spell_trigger_type, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_spell_charges, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_spell_cooldown, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_spell_category, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_spell_category_cooldown, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_pop_subtree(ptv);
                }
                ptvcursor_add(ptv, hf_woww_bonding, 4, ENC_LITTLE_ENDIAN);
                add_cstring(ptv, &hf_woww_description);
                ptvcursor_add(ptv, hf_woww_page_text, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_language, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_page_text_material, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_start_quest, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_lock_id, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_material, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_sheathe_type, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_random_property, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_block, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_item_set, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_max_durability, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_area, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_map, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_bag_family, 4, ENC_LITTLE_ENDIAN);
            }
            break;
        case SMSG_ITEM_TEXT_QUERY_RESPONSE:
            ptvcursor_add(ptv, hf_woww_item_text_id, 4, ENC_LITTLE_ENDIAN);
            add_cstring(ptv, &hf_woww_text);
            break;
        case SMSG_ITEM_TIME_UPDATE:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_duration, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_LEARNED_SPELL:
            ptvcursor_add(ptv, hf_woww_id, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_LEVELUP_INFO:
            ptvcursor_add(ptv, hf_woww_new_level, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_health, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_mana, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_rage, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_focus, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_energy, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_happiness, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_strength, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_agility, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_stamina, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_intellect, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_spirit, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_LIST_INVENTORY:
            ptvcursor_add(ptv, hf_woww_vendor, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add_ret_uint(ptv, hf_woww_amount_of_items, 1, ENC_LITTLE_ENDIAN, &amount_of_items);
            for (guint32 i1 = 0; i1 < amount_of_items; ++i1) {
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "ListInventoryItem %i", i1);
                ptvcursor_add(ptv, hf_woww_item_stack_count, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_item, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_item_display_id, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_max_items, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_price, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_max_durability, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_durability, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
            }
            break;
        case SMSG_LOGIN_SETTIMESPEED:
            ptvcursor_add(ptv, hf_woww_datetime, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_timescale, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_LOGIN_VERIFY_WORLD:
            ptvcursor_add(ptv, hf_woww_map, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
            ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_pop_subtree(ptv);
            ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_LOGOUT_RESPONSE:
            ptvcursor_add(ptv, hf_woww_logout_result, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_logout_speed, 1, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_LOG_XPGAIN:
            ptvcursor_add(ptv, hf_woww_target, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_total_exp, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add_ret_uint(ptv, hf_woww_experience_award_type, 1, ENC_LITTLE_ENDIAN, &exp_type);
            if (exp_type == EXPERIENCE_AWARD_TYPE_NON_KILL) {
                ptvcursor_add(ptv, hf_woww_experience_without_rested, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_exp_group_bonus, 4, ENC_LITTLE_ENDIAN);
            }
            break;
        case SMSG_LOOT_ALL_PASSED:
            ptvcursor_add(ptv, hf_woww_looted_target, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_loot_slot, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_item, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_item_random_property_id, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_item_random_suffix_id, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_LOOT_MASTER_LIST:
            ptvcursor_add_ret_uint(ptv, hf_woww_amount_of_players, 1, ENC_LITTLE_ENDIAN, &amount_of_players);
            for (guint32 i1 = 0; i1 < amount_of_players; ++i1) {
                ptvcursor_add(ptv, hf_woww_guids, 8, ENC_LITTLE_ENDIAN);
            }
            break;
        case SMSG_LOOT_MONEY_NOTIFY:
            ptvcursor_add(ptv, hf_woww_amount, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_LOOT_RELEASE_RESPONSE:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_unknown_int, 1, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_LOOT_REMOVED:
            ptvcursor_add(ptv, hf_woww_slot, 1, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_LOOT_RESPONSE:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add_ret_uint(ptv, hf_woww_loot_method, 1, ENC_LITTLE_ENDIAN, &loot_method);
            if (loot_method == LOOT_METHOD_ERROR) {
                ptvcursor_add(ptv, hf_woww_loot_method_error, 1, ENC_LITTLE_ENDIAN);
            }
            ptvcursor_add(ptv, hf_woww_gold, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add_ret_uint(ptv, hf_woww_amount_of_items, 1, ENC_LITTLE_ENDIAN, &amount_of_items);
            for (guint32 i1 = 0; i1 < amount_of_items; ++i1) {
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "LootItem %i", i1);
                ptvcursor_add(ptv, hf_woww_index, 1, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_item, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_loot_slot_type, 1, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
            }
            break;
        case SMSG_LOOT_ROLL:
            ptvcursor_add(ptv, hf_woww_creature, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_loot_slot, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_player, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_item, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_item_random_suffix, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_item_random_property_id, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_roll_number, 1, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_roll_vote, 1, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_LOOT_ROLL_WON:
            ptvcursor_add(ptv, hf_woww_looted_target, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_loot_slot, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_item, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_item_random_suffix, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_item_random_property_id, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_winning_player, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_winning_roll, 1, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_roll_vote, 1, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_LOOT_START_ROLL:
            ptvcursor_add(ptv, hf_woww_creature, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_loot_slot, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_item, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_item_random_suffix, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_item_random_property_id, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_countdown_time, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_MAIL_LIST_RESULT:
            ptvcursor_add_ret_uint(ptv, hf_woww_amount_of_mails, 1, ENC_LITTLE_ENDIAN, &amount_of_mails);
            for (guint32 i1 = 0; i1 < amount_of_mails; ++i1) {
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Mail %i", i1);
                ptvcursor_add(ptv, hf_woww_message_id, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add_ret_uint(ptv, hf_woww_mail_type, 1, ENC_LITTLE_ENDIAN, &message_type);
                if (message_type == MAIL_TYPE_NORMAL) {
                    ptvcursor_add(ptv, hf_woww_sender, 8, ENC_LITTLE_ENDIAN);
                }
                else if (message_type == MAIL_TYPE_CREATURE
                 || message_type == MAIL_TYPE_GAMEOBJECT) {
                    ptvcursor_add(ptv, hf_woww_sender_id, 4, ENC_LITTLE_ENDIAN);
                }
                else if (message_type == MAIL_TYPE_AUCTION) {
                    ptvcursor_add(ptv, hf_woww_auction_id, 4, ENC_LITTLE_ENDIAN);
                }
                add_cstring(ptv, &hf_woww_subject);
                ptvcursor_add(ptv, hf_woww_item_text_id, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_unknown_int, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_stationery, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_item, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_item_enchant_id, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_item_random_property_id, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_item_suffix_factor, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_item_stack_size, 1, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_item_spell_charges, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_max_durability, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_durability, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_money, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_cash_on_delivery_amount, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_checked_timestamp, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_expiration_time, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_mail_template_id, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
            }
            break;
        case SMSG_MEETINGSTONE_JOINFAILED:
            ptvcursor_add(ptv, hf_woww_meeting_stone_failure, 1, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_MEETINGSTONE_MEMBER_ADDED:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_MEETINGSTONE_SETQUEUE:
            ptvcursor_add(ptv, hf_woww_area, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_meeting_stone_status, 1, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_MESSAGECHAT:
            ptvcursor_add_ret_uint(ptv, hf_woww_chat_type, 1, ENC_LITTLE_ENDIAN, &chat_type);
            ptvcursor_add(ptv, hf_woww_language, 4, ENC_LITTLE_ENDIAN);
            if (chat_type == CHAT_TYPE_MONSTER_WHISPER
             || chat_type == CHAT_TYPE_RAID_BOSS_EMOTE
             || chat_type == CHAT_TYPE_MONSTER_EMOTE) {
                add_sized_cstring(ptv, &hf_woww_monster_name);
                ptvcursor_add(ptv, hf_woww_monster, 8, ENC_LITTLE_ENDIAN);
            }
            else if (chat_type == CHAT_TYPE_SAY
             || chat_type == CHAT_TYPE_PARTY
             || chat_type == CHAT_TYPE_YELL) {
                ptvcursor_add(ptv, hf_woww_speech_bubble_credit, 8, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_chat_credit, 8, ENC_LITTLE_ENDIAN);
            }
            else if (chat_type == CHAT_TYPE_MONSTER_SAY
             || chat_type == CHAT_TYPE_MONSTER_YELL) {
                ptvcursor_add(ptv, hf_woww_sender, 8, ENC_LITTLE_ENDIAN);
                add_sized_cstring(ptv, &hf_woww_sender_name);
                ptvcursor_add(ptv, hf_woww_target, 8, ENC_LITTLE_ENDIAN);
            }
            else if (chat_type == CHAT_TYPE_CHANNEL) {
                add_cstring(ptv, &hf_woww_channel_name);
                ptvcursor_add(ptv, hf_woww_player_rank, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_player, 8, ENC_LITTLE_ENDIAN);
            }
            else {
                ptvcursor_add(ptv, hf_woww_sender, 8, ENC_LITTLE_ENDIAN);
            }
            add_sized_cstring(ptv, &hf_woww_message);
            ptvcursor_add(ptv, hf_woww_player_chat_tag, 1, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_MONSTER_MOVE:
            add_packed_guid(ptv, pinfo);
            ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
            ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_pop_subtree(ptv);
            ptvcursor_add(ptv, hf_woww_spline_id, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add_ret_uint(ptv, hf_woww_monster_move_type, 1, ENC_LITTLE_ENDIAN, &move_type);
            if (move_type == MONSTER_MOVE_TYPE_FACING_TARGET) {
                ptvcursor_add(ptv, hf_woww_target, 8, ENC_LITTLE_ENDIAN);
            }
            else if (move_type == MONSTER_MOVE_TYPE_FACING_ANGLE) {
                ptvcursor_add(ptv, hf_woww_angle, 4, ENC_LITTLE_ENDIAN);
            }
            else if (move_type == MONSTER_MOVE_TYPE_FACING_SPOT) {
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
            }
            ptvcursor_add(ptv, hf_woww_spline_flag, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_duration, 4, ENC_LITTLE_ENDIAN);
            add_monster_move_spline(ptv);
            break;
        case SMSG_MONSTER_MOVE_TRANSPORT:
            add_packed_guid(ptv, pinfo);
            add_packed_guid(ptv, pinfo);
            ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
            ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_pop_subtree(ptv);
            ptvcursor_add(ptv, hf_woww_spline_id, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add_ret_uint(ptv, hf_woww_monster_move_type, 1, ENC_LITTLE_ENDIAN, &move_type);
            if (move_type == MONSTER_MOVE_TYPE_FACING_TARGET) {
                ptvcursor_add(ptv, hf_woww_target, 8, ENC_LITTLE_ENDIAN);
            }
            else if (move_type == MONSTER_MOVE_TYPE_FACING_ANGLE) {
                ptvcursor_add(ptv, hf_woww_angle, 4, ENC_LITTLE_ENDIAN);
            }
            else if (move_type == MONSTER_MOVE_TYPE_FACING_SPOT) {
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
            }
            ptvcursor_add(ptv, hf_woww_spline_flag, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_duration, 4, ENC_LITTLE_ENDIAN);
            add_monster_move_spline(ptv);
            break;
        case SMSG_MOUNTRESULT:
            ptvcursor_add(ptv, hf_woww_mount_result, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_MOUNTSPECIAL_ANIM:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_MOVE_FEATHER_FALL:
            add_packed_guid(ptv, pinfo);
            ptvcursor_add(ptv, hf_woww_counter, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_MOVE_KNOCK_BACK:
            add_packed_guid(ptv, pinfo);
            ptvcursor_add(ptv, hf_woww_movement_counter, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_v_cos, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_v_sin, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_horizontal_speed, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_vertical_speed, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_MOVE_LAND_WALK:
            add_packed_guid(ptv, pinfo);
            ptvcursor_add(ptv, hf_woww_counter, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_MOVE_NORMAL_FALL:
            add_packed_guid(ptv, pinfo);
            ptvcursor_add(ptv, hf_woww_counter, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_MOVE_SET_HOVER:
            add_packed_guid(ptv, pinfo);
            ptvcursor_add(ptv, hf_woww_counter, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_MOVE_UNSET_HOVER:
            add_packed_guid(ptv, pinfo);
            ptvcursor_add(ptv, hf_woww_counter, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_MOVE_WATER_WALK:
            add_packed_guid(ptv, pinfo);
            ptvcursor_add(ptv, hf_woww_counter, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_NAME_QUERY_RESPONSE:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            add_cstring(ptv, &hf_woww_character_name);
            add_cstring(ptv, &hf_woww_realm_name);
            ptvcursor_add(ptv, hf_woww_race, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_gender, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_class, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_NEW_WORLD:
            ptvcursor_add(ptv, hf_woww_map, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
            ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_pop_subtree(ptv);
            ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_NOTIFICATION:
            add_cstring(ptv, &hf_woww_notification);
            break;
        case SMSG_NPC_TEXT_UPDATE:
            ptvcursor_add(ptv, hf_woww_text_id, 4, ENC_LITTLE_ENDIAN);
            for (guint32 i1 = 0; i1 < 8; ++i1) {
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "NpcTextUpdate %i", i1);
                ptvcursor_add(ptv, hf_woww_probability, 4, ENC_LITTLE_ENDIAN);
                for (guint32 i2 = 0; i2 < 2; ++i2) {
                    add_cstring(ptv, &hf_woww_texts);
                }
                ptvcursor_add(ptv, hf_woww_language, 4, ENC_LITTLE_ENDIAN);
                for (guint32 i2 = 0; i2 < 3; ++i2) {
                    ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "NpcTextUpdateEmote %i", i2);
                    ptvcursor_add(ptv, hf_woww_delay, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_emote_int, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_pop_subtree(ptv);
                }
                ptvcursor_pop_subtree(ptv);
            }
            break;
        case SMSG_OPEN_CONTAINER:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_PAGE_TEXT_QUERY_RESPONSE:
            ptvcursor_add(ptv, hf_woww_page_id, 4, ENC_LITTLE_ENDIAN);
            add_cstring(ptv, &hf_woww_text);
            ptvcursor_add(ptv, hf_woww_next_page_id, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_PARTYKILLLOG:
            ptvcursor_add(ptv, hf_woww_player_with_killing_blow, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_victim, 8, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_PARTY_COMMAND_RESULT:
            ptvcursor_add(ptv, hf_woww_party_operation, 4, ENC_LITTLE_ENDIAN);
            add_cstring(ptv, &hf_woww_member);
            ptvcursor_add(ptv, hf_woww_party_result, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_PARTY_MEMBER_STATS:
            add_packed_guid(ptv, pinfo);
            ptvcursor_add_ret_uint(ptv, hf_woww_group_update_flags, 4, ENC_LITTLE_ENDIAN, &mask);
            if (mask & GROUP_UPDATE_FLAGS_STATUS) {
                ptvcursor_add(ptv, hf_woww_group_member_online_status, 1, ENC_LITTLE_ENDIAN);
            }
            if (mask & GROUP_UPDATE_FLAGS_CUR_HP) {
                ptvcursor_add(ptv, hf_woww_current_health, 2, ENC_LITTLE_ENDIAN);
            }
            if (mask & GROUP_UPDATE_FLAGS_MAX_HP) {
                ptvcursor_add(ptv, hf_woww_max_health, 2, ENC_LITTLE_ENDIAN);
            }
            if (mask & GROUP_UPDATE_FLAGS_POWER_TYPE) {
                ptvcursor_add(ptv, hf_woww_power, 1, ENC_LITTLE_ENDIAN);
            }
            if (mask & GROUP_UPDATE_FLAGS_CUR_POWER) {
                ptvcursor_add(ptv, hf_woww_current_power, 2, ENC_LITTLE_ENDIAN);
            }
            if (mask & GROUP_UPDATE_FLAGS_MAX_POWER) {
                ptvcursor_add(ptv, hf_woww_max_power, 2, ENC_LITTLE_ENDIAN);
            }
            if (mask & GROUP_UPDATE_FLAGS_LEVEL) {
                ptvcursor_add(ptv, hf_woww_level, 2, ENC_LITTLE_ENDIAN);
            }
            if (mask & GROUP_UPDATE_FLAGS_ZONE) {
                ptvcursor_add(ptv, hf_woww_area, 4, ENC_LITTLE_ENDIAN);
            }
            if (mask & GROUP_UPDATE_FLAGS_POSITION) {
                ptvcursor_add(ptv, hf_woww_position_x_int, 2, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_position_y_int, 2, ENC_LITTLE_ENDIAN);
            }
            if (mask & GROUP_UPDATE_FLAGS_AURAS) {
                add_aura_mask(ptv);
            }
            if (mask & GROUP_UPDATE_FLAGS_AURAS_2) {
                add_aura_mask(ptv);
            }
            if (mask & GROUP_UPDATE_FLAGS_PET_GUID) {
                ptvcursor_add(ptv, hf_woww_pet, 8, ENC_LITTLE_ENDIAN);
            }
            if (mask & GROUP_UPDATE_FLAGS_PET_NAME) {
                add_cstring(ptv, &hf_woww_pet_name);
            }
            if (mask & GROUP_UPDATE_FLAGS_PET_MODEL_ID) {
                ptvcursor_add(ptv, hf_woww_pet_display_id, 2, ENC_LITTLE_ENDIAN);
            }
            if (mask & GROUP_UPDATE_FLAGS_PET_CUR_HP) {
                ptvcursor_add(ptv, hf_woww_pet_current_health, 2, ENC_LITTLE_ENDIAN);
            }
            if (mask & GROUP_UPDATE_FLAGS_PET_MAX_HP) {
                ptvcursor_add(ptv, hf_woww_pet_max_health, 2, ENC_LITTLE_ENDIAN);
            }
            if (mask & GROUP_UPDATE_FLAGS_PET_POWER_TYPE) {
                ptvcursor_add(ptv, hf_woww_power, 1, ENC_LITTLE_ENDIAN);
            }
            if (mask & GROUP_UPDATE_FLAGS_PET_CUR_POWER) {
                ptvcursor_add(ptv, hf_woww_pet_current_power, 2, ENC_LITTLE_ENDIAN);
            }
            if (mask & GROUP_UPDATE_FLAGS_PET_MAX_POWER) {
                ptvcursor_add(ptv, hf_woww_pet_max_power, 2, ENC_LITTLE_ENDIAN);
            }
            if (mask & GROUP_UPDATE_FLAGS_PET_AURAS) {
                add_aura_mask(ptv);
            }
            break;
        case SMSG_PARTY_MEMBER_STATS_FULL:
            add_packed_guid(ptv, pinfo);
            ptvcursor_add_ret_uint(ptv, hf_woww_group_update_flags, 4, ENC_LITTLE_ENDIAN, &mask);
            if (mask & GROUP_UPDATE_FLAGS_STATUS) {
                ptvcursor_add(ptv, hf_woww_group_member_online_status, 1, ENC_LITTLE_ENDIAN);
            }
            if (mask & GROUP_UPDATE_FLAGS_CUR_HP) {
                ptvcursor_add(ptv, hf_woww_current_health, 2, ENC_LITTLE_ENDIAN);
            }
            if (mask & GROUP_UPDATE_FLAGS_MAX_HP) {
                ptvcursor_add(ptv, hf_woww_max_health, 2, ENC_LITTLE_ENDIAN);
            }
            if (mask & GROUP_UPDATE_FLAGS_POWER_TYPE) {
                ptvcursor_add(ptv, hf_woww_power, 1, ENC_LITTLE_ENDIAN);
            }
            if (mask & GROUP_UPDATE_FLAGS_CUR_POWER) {
                ptvcursor_add(ptv, hf_woww_current_power, 2, ENC_LITTLE_ENDIAN);
            }
            if (mask & GROUP_UPDATE_FLAGS_MAX_POWER) {
                ptvcursor_add(ptv, hf_woww_max_power, 2, ENC_LITTLE_ENDIAN);
            }
            if (mask & GROUP_UPDATE_FLAGS_LEVEL) {
                ptvcursor_add(ptv, hf_woww_level, 2, ENC_LITTLE_ENDIAN);
            }
            if (mask & GROUP_UPDATE_FLAGS_ZONE) {
                ptvcursor_add(ptv, hf_woww_area, 4, ENC_LITTLE_ENDIAN);
            }
            if (mask & GROUP_UPDATE_FLAGS_POSITION) {
                ptvcursor_add(ptv, hf_woww_position_x_int, 2, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_position_y_int, 2, ENC_LITTLE_ENDIAN);
            }
            if (mask & GROUP_UPDATE_FLAGS_AURAS) {
                add_aura_mask(ptv);
            }
            if (mask & GROUP_UPDATE_FLAGS_PET_GUID) {
                ptvcursor_add(ptv, hf_woww_pet, 8, ENC_LITTLE_ENDIAN);
            }
            if (mask & GROUP_UPDATE_FLAGS_PET_NAME) {
                add_cstring(ptv, &hf_woww_pet_name);
            }
            if (mask & GROUP_UPDATE_FLAGS_PET_MODEL_ID) {
                ptvcursor_add(ptv, hf_woww_pet_display_id, 2, ENC_LITTLE_ENDIAN);
            }
            if (mask & GROUP_UPDATE_FLAGS_PET_CUR_HP) {
                ptvcursor_add(ptv, hf_woww_pet_current_health, 2, ENC_LITTLE_ENDIAN);
            }
            if (mask & GROUP_UPDATE_FLAGS_PET_MAX_HP) {
                ptvcursor_add(ptv, hf_woww_pet_max_health, 2, ENC_LITTLE_ENDIAN);
            }
            if (mask & GROUP_UPDATE_FLAGS_PET_POWER_TYPE) {
                ptvcursor_add(ptv, hf_woww_power, 1, ENC_LITTLE_ENDIAN);
            }
            if (mask & GROUP_UPDATE_FLAGS_PET_CUR_POWER) {
                ptvcursor_add(ptv, hf_woww_pet_current_power, 2, ENC_LITTLE_ENDIAN);
            }
            if (mask & GROUP_UPDATE_FLAGS_PET_MAX_POWER) {
                ptvcursor_add(ptv, hf_woww_pet_max_power, 2, ENC_LITTLE_ENDIAN);
            }
            if (mask & GROUP_UPDATE_FLAGS_PET_AURAS) {
                add_aura_mask(ptv);
            }
            break;
        case SMSG_PAUSE_MIRROR_TIMER:
            ptvcursor_add(ptv, hf_woww_timer_type, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_is_frozen, 1, ENC_NA);
            break;
        case SMSG_PERIODICAURALOG:
            add_packed_guid(ptv, pinfo);
            add_packed_guid(ptv, pinfo);
            ptvcursor_add(ptv, hf_woww_spell, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add_ret_uint(ptv, hf_woww_amount_of_auras, 4, ENC_LITTLE_ENDIAN, &amount_of_auras);
            for (guint32 i1 = 0; i1 < amount_of_auras; ++i1) {
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "AuraLog %i", i1);
                ptvcursor_add_ret_uint(ptv, hf_woww_aura_type, 4, ENC_LITTLE_ENDIAN, &aura_type);
                if (aura_type == AURA_TYPE_PERIODIC_DAMAGE
                 || aura_type == AURA_TYPE_PERIODIC_DAMAGE_PERCENT) {
                    ptvcursor_add(ptv, hf_woww_damage, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_spell_school, 1, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_absorbed, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_resisted, 4, ENC_LITTLE_ENDIAN);
                }
                else if (aura_type == AURA_TYPE_PERIODIC_HEAL
                 || aura_type == AURA_TYPE_OBS_MOD_HEALTH) {
                    ptvcursor_add(ptv, hf_woww_damage, 4, ENC_LITTLE_ENDIAN);
                }
                else if (aura_type == AURA_TYPE_OBS_MOD_MANA
                 || aura_type == AURA_TYPE_PERIODIC_ENERGIZE) {
                    ptvcursor_add(ptv, hf_woww_misc_value, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_damage, 4, ENC_LITTLE_ENDIAN);
                }
                else if (aura_type == AURA_TYPE_PERIODIC_MANA_LEECH) {
                    ptvcursor_add(ptv, hf_woww_misc_value, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_damage, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_gain_multiplier, 4, ENC_LITTLE_ENDIAN);
                }
                ptvcursor_pop_subtree(ptv);
            }
            break;
        case SMSG_PETITION_QUERY_RESPONSE:
            ptvcursor_add(ptv, hf_woww_petition_id, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_charter_owner, 8, ENC_LITTLE_ENDIAN);
            add_cstring(ptv, &hf_woww_guild_name);
            add_cstring(ptv, &hf_woww_body_text);
            ptvcursor_add(ptv, hf_woww_unknown_flags, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_minimum_signatures, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_maximum_signatures, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_deadline, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_issue_date, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_allowed_guild_id, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_allowed_class, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_allowed_race, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_allowed_genders, 2, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_allowed_minimum_level, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_allowed_maximum_level, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_todo_amount_of_signers, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_number_of_choices, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_PETITION_SHOWLIST:
            ptvcursor_add(ptv, hf_woww_npc, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add_ret_uint(ptv, hf_woww_amount_of_petitions, 1, ENC_LITTLE_ENDIAN, &amount_of_petitions);
            for (guint32 i1 = 0; i1 < amount_of_petitions; ++i1) {
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "PetitionShowlist %i", i1);
                ptvcursor_add(ptv, hf_woww_index, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_charter_entry, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_charter_display_id, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_guild_charter_cost, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_unknown_int, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
            }
            break;
        case SMSG_PETITION_SHOW_SIGNATURES:
            ptvcursor_add(ptv, hf_woww_item, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_owner, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_petition, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add_ret_uint(ptv, hf_woww_amount_of_signatures, 1, ENC_LITTLE_ENDIAN, &amount_of_signatures);
            for (guint32 i1 = 0; i1 < amount_of_signatures; ++i1) {
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "PetitionSignature %i", i1);
                ptvcursor_add(ptv, hf_woww_signer, 8, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_unknown_int, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
            }
            break;
        case SMSG_PETITION_SIGN_RESULTS:
            ptvcursor_add(ptv, hf_woww_petition, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_owner, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_petition_result, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_PET_ACTION_FEEDBACK:
            ptvcursor_add(ptv, hf_woww_pet_feedback, 1, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_PET_ACTION_SOUND:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_pet_talk_reason, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_PET_CAST_FAILED:
            ptvcursor_add(ptv, hf_woww_id, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_unknown_int, 1, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_spell_cast_result, 1, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_PET_DISMISS_SOUND:
            ptvcursor_add(ptv, hf_woww_sound_id, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
            ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_pop_subtree(ptv);
            break;
        case SMSG_PET_MODE:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_pet_react_state, 1, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_pet_command_state, 1, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_unknown_int, 1, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_pet_enabled, 1, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_PET_NAME_QUERY_RESPONSE:
            ptvcursor_add(ptv, hf_woww_pet_number, 4, ENC_LITTLE_ENDIAN);
            add_cstring(ptv, &hf_woww_name);
            ptvcursor_add(ptv, hf_woww_pet_name_timestamp, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_PET_SPELLS:
            ptvcursor_add(ptv, hf_woww_pet, 8, ENC_LITTLE_ENDIAN);
            len = offset_packet_end - ptvcursor_current_offset(ptv);
            if (len > 0) {
                ptvcursor_add(ptv, hf_woww_duration, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_pet_react_state, 1, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_pet_command_state, 1, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_unknown_int, 1, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_pet_enabled, 1, ENC_LITTLE_ENDIAN);
                for (guint32 i1 = 0; i1 < 10; ++i1) {
                    ptvcursor_add(ptv, hf_woww_action_bars, 4, ENC_LITTLE_ENDIAN);
                }
                ptvcursor_add_ret_uint(ptv, hf_woww_amount_of_spells, 1, ENC_LITTLE_ENDIAN, &amount_of_spells);
                for (guint32 i1 = 0; i1 < amount_of_spells; ++i1) {
                    ptvcursor_add(ptv, hf_woww_spells, 4, ENC_LITTLE_ENDIAN);
                }
                ptvcursor_add_ret_uint(ptv, hf_woww_amount_of_cooldowns, 1, ENC_LITTLE_ENDIAN, &amount_of_cooldowns);
                for (guint32 i1 = 0; i1 < amount_of_cooldowns; ++i1) {
                    ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "PetSpellCooldown %i", i1);
                    ptvcursor_add(ptv, hf_woww_spell, 2, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_spell_category, 2, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_cooldown, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_category_cooldown, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_pop_subtree(ptv);
                }
            }
            break;
        case SMSG_PET_TAME_FAILURE:
            ptvcursor_add(ptv, hf_woww_pet_tame_failure_reason, 1, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_PET_UNLEARN_CONFIRM:
            ptvcursor_add(ptv, hf_woww_pet, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_talent_reset_cost, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_PLAYED_TIME:
            ptvcursor_add(ptv, hf_woww_total_played_time, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_level_played_time, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_PLAYERBOUND:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_area, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_PLAYER_SKINNED:
            ptvcursor_add(ptv, hf_woww_spirit_released, 1, ENC_NA);
            break;
        case SMSG_PLAY_MUSIC:
            ptvcursor_add(ptv, hf_woww_sound_id, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_PLAY_OBJECT_SOUND:
            ptvcursor_add(ptv, hf_woww_sound_id, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_PLAY_SOUND:
            ptvcursor_add(ptv, hf_woww_sound_id, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_PLAY_SPELL_IMPACT:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_spell_visual_kit, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_PLAY_SPELL_VISUAL:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_spell_art_kit, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_PONG:
            ptvcursor_add(ptv, hf_woww_sequence_id, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_PROCRESIST:
            ptvcursor_add(ptv, hf_woww_caster, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_target, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_id, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_log_format, 1, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_PVP_CREDIT:
            ptvcursor_add(ptv, hf_woww_honor_points, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_victim, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_pvp_rank, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_QUERY_TIME_RESPONSE:
            ptvcursor_add(ptv, hf_woww_time, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_QUESTGIVER_OFFER_REWARD:
            ptvcursor_add(ptv, hf_woww_npc, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_quest_id, 4, ENC_LITTLE_ENDIAN);
            add_cstring(ptv, &hf_woww_title);
            add_cstring(ptv, &hf_woww_offer_reward_text);
            ptvcursor_add(ptv, hf_woww_auto_finish, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add_ret_uint(ptv, hf_woww_amount_of_emotes, 4, ENC_LITTLE_ENDIAN, &amount_of_emotes);
            for (guint32 i1 = 0; i1 < amount_of_emotes; ++i1) {
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "NpcTextUpdateEmote %i", i1);
                ptvcursor_add(ptv, hf_woww_delay, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_emote_int, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
            }
            ptvcursor_add_ret_uint(ptv, hf_woww_amount_of_choice_item_rewards, 4, ENC_LITTLE_ENDIAN, &amount_of_choice_item_rewards);
            for (guint32 i1 = 0; i1 < amount_of_choice_item_rewards; ++i1) {
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "QuestItemRequirement %i", i1);
                ptvcursor_add(ptv, hf_woww_item, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_item_count, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_item_display_id, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
            }
            ptvcursor_add_ret_uint(ptv, hf_woww_amount_of_item_rewards, 4, ENC_LITTLE_ENDIAN, &amount_of_item_rewards);
            for (guint32 i1 = 0; i1 < amount_of_item_rewards; ++i1) {
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "QuestItemRequirement %i", i1);
                ptvcursor_add(ptv, hf_woww_item, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_item_count, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_item_display_id, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
            }
            ptvcursor_add(ptv, hf_woww_money_reward, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_reward_spell, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_reward_spell_cast, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_QUESTGIVER_QUEST_COMPLETE:
            ptvcursor_add(ptv, hf_woww_quest_id, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_unknown_int, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_experience_reward, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_money_reward, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add_ret_uint(ptv, hf_woww_amount_of_item_rewards, 4, ENC_LITTLE_ENDIAN, &amount_of_item_rewards);
            for (guint32 i1 = 0; i1 < amount_of_item_rewards; ++i1) {
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "QuestItemReward %i", i1);
                ptvcursor_add(ptv, hf_woww_item, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_item_count, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
            }
            break;
        case SMSG_QUESTGIVER_QUEST_DETAILS:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_quest_id, 4, ENC_LITTLE_ENDIAN);
            add_cstring(ptv, &hf_woww_title);
            add_cstring(ptv, &hf_woww_details);
            add_cstring(ptv, &hf_woww_objectives);
            ptvcursor_add(ptv, hf_woww_auto_finish, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add_ret_uint(ptv, hf_woww_amount_of_choice_item_rewards, 4, ENC_LITTLE_ENDIAN, &amount_of_choice_item_rewards);
            for (guint32 i1 = 0; i1 < amount_of_choice_item_rewards; ++i1) {
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "QuestItemReward %i", i1);
                ptvcursor_add(ptv, hf_woww_item, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_item_count, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
            }
            ptvcursor_add_ret_uint(ptv, hf_woww_amount_of_item_rewards, 4, ENC_LITTLE_ENDIAN, &amount_of_item_rewards);
            for (guint32 i1 = 0; i1 < amount_of_item_rewards; ++i1) {
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "QuestItemReward %i", i1);
                ptvcursor_add(ptv, hf_woww_item, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_item_count, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
            }
            ptvcursor_add(ptv, hf_woww_money_reward, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_reward_spell, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add_ret_uint(ptv, hf_woww_amount_of_emotes, 4, ENC_LITTLE_ENDIAN, &amount_of_emotes);
            for (guint32 i1 = 0; i1 < amount_of_emotes; ++i1) {
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "QuestDetailsEmote %i", i1);
                ptvcursor_add(ptv, hf_woww_emote_int, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_emote_delay, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
            }
            break;
        case SMSG_QUESTGIVER_QUEST_FAILED:
            ptvcursor_add(ptv, hf_woww_quest_id, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_quest_failed_reason, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_QUESTGIVER_QUEST_INVALID:
            ptvcursor_add(ptv, hf_woww_quest_failed_reason, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_QUESTGIVER_QUEST_LIST:
            ptvcursor_add(ptv, hf_woww_npc, 8, ENC_LITTLE_ENDIAN);
            add_cstring(ptv, &hf_woww_title);
            ptvcursor_add(ptv, hf_woww_emote_delay, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_emote_int, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add_ret_uint(ptv, hf_woww_amount_of_entries, 1, ENC_LITTLE_ENDIAN, &amount_of_entries);
            for (guint32 i1 = 0; i1 < amount_of_entries; ++i1) {
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "QuestItem %i", i1);
                ptvcursor_add(ptv, hf_woww_quest_id, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_quest_icon, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_level, 4, ENC_LITTLE_ENDIAN);
                add_cstring(ptv, &hf_woww_title);
                ptvcursor_pop_subtree(ptv);
            }
            break;
        case SMSG_QUESTGIVER_REQUEST_ITEMS:
            ptvcursor_add(ptv, hf_woww_npc, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_quest_id, 4, ENC_LITTLE_ENDIAN);
            add_cstring(ptv, &hf_woww_title);
            add_cstring(ptv, &hf_woww_request_items_text);
            ptvcursor_add(ptv, hf_woww_emote_delay, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_emote_int, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_auto_finish, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_required_money, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add_ret_uint(ptv, hf_woww_amount_of_required_items, 4, ENC_LITTLE_ENDIAN, &amount_of_required_items);
            for (guint32 i1 = 0; i1 < amount_of_required_items; ++i1) {
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "QuestItemRequirement %i", i1);
                ptvcursor_add(ptv, hf_woww_item, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_item_count, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_item_display_id, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
            }
            ptvcursor_add(ptv, hf_woww_unknown_int, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_quest_completable, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_flags, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_flags, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_QUESTGIVER_STATUS:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_quest_giver_status, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_QUESTUPDATE_ADD_ITEM:
            ptvcursor_add(ptv, hf_woww_required_item_id, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_items_required, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_QUESTUPDATE_ADD_KILL:
            ptvcursor_add(ptv, hf_woww_quest_id, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_creature_id, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_kill_count, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_required_kill_count, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_QUESTUPDATE_COMPLETE:
            ptvcursor_add(ptv, hf_woww_quest_id, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_QUESTUPDATE_FAILED:
            ptvcursor_add(ptv, hf_woww_quest_id, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_QUESTUPDATE_FAILEDTIMER:
            ptvcursor_add(ptv, hf_woww_quest_id, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_QUEST_CONFIRM_ACCEPT:
            ptvcursor_add(ptv, hf_woww_quest_id, 4, ENC_LITTLE_ENDIAN);
            add_cstring(ptv, &hf_woww_quest_title);
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_QUEST_QUERY_RESPONSE:
            ptvcursor_add(ptv, hf_woww_quest_id, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_quest_method, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_quest_level, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_zone_or_sort, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_quest_type, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_faction, 2, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_reputation_objective_value, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_faction, 2, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_required_opposite_reputation_value, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_next_quest_in_chain, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_money_reward, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_max_level_money_reward, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_reward_spell, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_source_item_id, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_quest_flags, 4, ENC_LITTLE_ENDIAN);
            for (guint32 i1 = 0; i1 < 4; ++i1) {
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "QuestItemReward %i", i1);
                ptvcursor_add(ptv, hf_woww_item, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_item_count, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
            }
            for (guint32 i1 = 0; i1 < 6; ++i1) {
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "QuestItemReward %i", i1);
                ptvcursor_add(ptv, hf_woww_item, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_item_count, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
            }
            ptvcursor_add(ptv, hf_woww_point_map_id, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector2d");
            ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_pop_subtree(ptv);
            ptvcursor_add(ptv, hf_woww_point_opt, 4, ENC_LITTLE_ENDIAN);
            add_cstring(ptv, &hf_woww_title);
            add_cstring(ptv, &hf_woww_objective_text);
            add_cstring(ptv, &hf_woww_details);
            add_cstring(ptv, &hf_woww_end_text);
            for (guint32 i1 = 0; i1 < 4; ++i1) {
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "QuestObjective %i", i1);
                ptvcursor_add(ptv, hf_woww_creature_id, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_kill_count, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_required_item_id, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_required_item_count, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
            }
            for (guint32 i1 = 0; i1 < 4; ++i1) {
                add_cstring(ptv, &hf_woww_objective_texts);
            }
            break;
        case SMSG_RAID_GROUP_ONLY:
            ptvcursor_add(ptv, hf_woww_homebind_timer, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_raid_group_error, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_RAID_INSTANCE_INFO:
            ptvcursor_add_ret_uint(ptv, hf_woww_amount_of_raid_infos, 4, ENC_LITTLE_ENDIAN, &amount_of_raid_infos);
            for (guint32 i1 = 0; i1 < amount_of_raid_infos; ++i1) {
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "RaidInfo %i", i1);
                ptvcursor_add(ptv, hf_woww_map, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_reset_time, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_instance_id, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
            }
            break;
        case SMSG_RAID_INSTANCE_MESSAGE:
            ptvcursor_add(ptv, hf_woww_raid_instance_message, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_map, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_time_left, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_READ_ITEM_FAILED:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_READ_ITEM_OK:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_RECEIVED_MAIL:
            ptvcursor_add(ptv, hf_woww_unknown_int, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_REMOVED_SPELL:
            ptvcursor_add(ptv, hf_woww_spell, 2, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_RESISTLOG:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_unknown_int, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_unknown_float, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_unknown_float, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_unknown_int, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_unknown_int, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_RESURRECT_REQUEST:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            add_sized_cstring(ptv, &hf_woww_name);
            ptvcursor_add(ptv, hf_woww_player, 1, ENC_NA);
            break;
        case SMSG_SELL_ITEM:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_item, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_sell_item_result, 1, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_SEND_MAIL_RESULT:
            ptvcursor_add(ptv, hf_woww_mail_id, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add_ret_uint(ptv, hf_woww_mail_action, 4, ENC_LITTLE_ENDIAN, &action);
            if (action == MAIL_ACTION_ITEM_TAKEN) {
                ptvcursor_add_ret_uint(ptv, hf_woww_mail_result, 4, ENC_LITTLE_ENDIAN, &result);
                if (result == MAIL_RESULT_ERR_EQUIP_ERROR) {
                    ptvcursor_add(ptv, hf_woww_equip_error, 4, ENC_LITTLE_ENDIAN);
                }
                else {
                    ptvcursor_add(ptv, hf_woww_item, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_item_count, 4, ENC_LITTLE_ENDIAN);
                }
            }
            else {
                ptvcursor_add_ret_uint(ptv, hf_woww_mail_result_two, 4, ENC_LITTLE_ENDIAN, &result2);
                if (result2 == MAIL_RESULT_TWO_ERR_EQUIP_ERROR) {
                    ptvcursor_add(ptv, hf_woww_equip_error, 4, ENC_LITTLE_ENDIAN);
                }
            }
            break;
        case SMSG_SERVER_MESSAGE:
            ptvcursor_add(ptv, hf_woww_server_message_type, 4, ENC_LITTLE_ENDIAN);
            add_cstring(ptv, &hf_woww_message);
            break;
        case SMSG_SET_FACTION_STANDING:
            ptvcursor_add_ret_uint(ptv, hf_woww_amount_of_faction_standings, 4, ENC_LITTLE_ENDIAN, &amount_of_faction_standings);
            for (guint32 i1 = 0; i1 < amount_of_faction_standings; ++i1) {
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "FactionStanding %i", i1);
                ptvcursor_add(ptv, hf_woww_faction, 2, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_standing, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
            }
            break;
        case SMSG_SET_FACTION_VISIBLE:
            ptvcursor_add(ptv, hf_woww_faction, 2, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_SET_FLAT_SPELL_MODIFIER:
            ptvcursor_add(ptv, hf_woww_eff, 1, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_op, 1, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_value, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_SET_FORCED_REACTIONS:
            ptvcursor_add_ret_uint(ptv, hf_woww_amount_of_reactions, 4, ENC_LITTLE_ENDIAN, &amount_of_reactions);
            for (guint32 i1 = 0; i1 < amount_of_reactions; ++i1) {
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "ForcedReaction %i", i1);
                ptvcursor_add(ptv, hf_woww_faction, 2, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_reputation_rank, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
            }
            break;
        case SMSG_SET_PCT_SPELL_MODIFIER:
            ptvcursor_add(ptv, hf_woww_eff, 1, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_op, 1, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_value, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_SET_PROFICIENCY:
            ptvcursor_add(ptv, hf_woww_item_class, 1, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_item_sub_class_mask, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_SET_REST_START:
            ptvcursor_add(ptv, hf_woww_unknown_int, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_SHOWTAXINODES:
            ptvcursor_add(ptv, hf_woww_unknown_int, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_nearest_node, 4, ENC_LITTLE_ENDIAN);
            while (ptvcursor_current_offset(ptv) < offset_packet_end) {
                ptvcursor_add(ptv, hf_woww_nodes, 4, ENC_LITTLE_ENDIAN);
            }
            break;
        case SMSG_SHOW_BANK:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_SPELLDAMAGESHIELD:
            ptvcursor_add(ptv, hf_woww_victim, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_caster, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_damage, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_spell_school, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_SPELLDISPELLOG:
            add_packed_guid(ptv, pinfo);
            add_packed_guid(ptv, pinfo);
            ptvcursor_add_ret_uint(ptv, hf_woww_amount_of_spells, 4, ENC_LITTLE_ENDIAN, &amount_of_spells);
            for (guint32 i1 = 0; i1 < amount_of_spells; ++i1) {
                ptvcursor_add(ptv, hf_woww_spells, 4, ENC_LITTLE_ENDIAN);
            }
            break;
        case SMSG_SPELLENERGIZELOG:
            add_packed_guid(ptv, pinfo);
            add_packed_guid(ptv, pinfo);
            ptvcursor_add(ptv, hf_woww_spell, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_power, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_damage, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_SPELLHEALLOG:
            add_packed_guid(ptv, pinfo);
            add_packed_guid(ptv, pinfo);
            ptvcursor_add(ptv, hf_woww_id, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_damage, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_critical, 1, ENC_NA);
            break;
        case SMSG_SPELLINSTAKILLLOG:
            ptvcursor_add(ptv, hf_woww_target, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_spell, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_SPELLLOGEXECUTE:
            add_packed_guid(ptv, pinfo);
            ptvcursor_add(ptv, hf_woww_spell, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add_ret_uint(ptv, hf_woww_amount_of_effects, 4, ENC_LITTLE_ENDIAN, &amount_of_effects);
            for (guint32 i1 = 0; i1 < amount_of_effects; ++i1) {
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "SpellLog %i", i1);
                ptvcursor_add_ret_uint(ptv, hf_woww_spell_effect, 4, ENC_LITTLE_ENDIAN, &effect);
                ptvcursor_add(ptv, hf_woww_amount_of_logs, 4, ENC_LITTLE_ENDIAN);
                if (effect == SPELL_EFFECT_POWER_DRAIN) {
                    ptvcursor_add(ptv, hf_woww_target, 8, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_amount, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_power, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_multiplier, 4, ENC_LITTLE_ENDIAN);
                }
                else if (effect == SPELL_EFFECT_HEAL
                 || effect == SPELL_EFFECT_HEAL_MAX_HEALTH) {
                    ptvcursor_add(ptv, hf_woww_target, 8, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_heal_amount, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_heal_critical, 4, ENC_LITTLE_ENDIAN);
                }
                else if (effect == SPELL_EFFECT_ENERGIZE) {
                    ptvcursor_add(ptv, hf_woww_target, 8, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_energize_amount, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_energize_power, 4, ENC_LITTLE_ENDIAN);
                }
                else if (effect == SPELL_EFFECT_ADD_EXTRA_ATTACKS) {
                    ptvcursor_add(ptv, hf_woww_target, 8, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_extra_attacks, 4, ENC_LITTLE_ENDIAN);
                }
                else if (effect == SPELL_EFFECT_CREATE_ITEM) {
                    ptvcursor_add(ptv, hf_woww_item, 4, ENC_LITTLE_ENDIAN);
                }
                else if (effect == SPELL_EFFECT_INTERRUPT_CAST) {
                    ptvcursor_add(ptv, hf_woww_target, 8, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_interrupted_spell, 4, ENC_LITTLE_ENDIAN);
                }
                else if (effect == SPELL_EFFECT_DURABILITY_DAMAGE) {
                    ptvcursor_add(ptv, hf_woww_target, 8, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_item_to_damage, 4, ENC_LITTLE_ENDIAN);
                    ptvcursor_add(ptv, hf_woww_unknown_int, 4, ENC_LITTLE_ENDIAN);
                }
                else if (effect == SPELL_EFFECT_FEED_PET) {
                    ptvcursor_add(ptv, hf_woww_feed_pet_item, 4, ENC_LITTLE_ENDIAN);
                }
                else if (effect == SPELL_EFFECT_INSTAKILL
                 || effect == SPELL_EFFECT_RESURRECT
                 || effect == SPELL_EFFECT_DISPEL
                 || effect == SPELL_EFFECT_THREAT
                 || effect == SPELL_EFFECT_DISTRACT
                 || effect == SPELL_EFFECT_SANCTUARY
                 || effect == SPELL_EFFECT_THREAT_ALL
                 || effect == SPELL_EFFECT_DISPEL_MECHANIC
                 || effect == SPELL_EFFECT_RESURRECT_NEW
                 || effect == SPELL_EFFECT_ATTACK_ME
                 || effect == SPELL_EFFECT_SKIN_PLAYER_CORPSE
                 || effect == SPELL_EFFECT_MODIFY_THREAT_PERCENT
                 || effect == SPELL_EFFECT_UNKNOWN126
                 || effect == SPELL_EFFECT_OPEN_LOCK
                 || effect == SPELL_EFFECT_OPEN_LOCK_ITEM
                 || effect == SPELL_EFFECT_DISMISS_PET
                 || effect == SPELL_EFFECT_TRANS_DOOR
                 || effect == SPELL_EFFECT_SUMMON
                 || effect == SPELL_EFFECT_SUMMON_PET
                 || effect == SPELL_EFFECT_SUMMON_WILD
                 || effect == SPELL_EFFECT_SUMMON_GUARDIAN
                 || effect == SPELL_EFFECT_SUMMON_TOTEM_SLOT1
                 || effect == SPELL_EFFECT_SUMMON_TOTEM_SLOT2
                 || effect == SPELL_EFFECT_SUMMON_TOTEM_SLOT3
                 || effect == SPELL_EFFECT_SUMMON_TOTEM_SLOT4
                 || effect == SPELL_EFFECT_SUMMON_POSSESSED
                 || effect == SPELL_EFFECT_SUMMON_TOTEM
                 || effect == SPELL_EFFECT_SUMMON_CRITTER
                 || effect == SPELL_EFFECT_SUMMON_OBJECT_WILD
                 || effect == SPELL_EFFECT_SUMMON_OBJECT_SLOT1
                 || effect == SPELL_EFFECT_SUMMON_OBJECT_SLOT2
                 || effect == SPELL_EFFECT_SUMMON_OBJECT_SLOT3
                 || effect == SPELL_EFFECT_SUMMON_OBJECT_SLOT4
                 || effect == SPELL_EFFECT_SUMMON_DEMON) {
                    ptvcursor_add(ptv, hf_woww_target, 8, ENC_LITTLE_ENDIAN);
                }
                ptvcursor_pop_subtree(ptv);
            }
            break;
        case SMSG_SPELLLOGMISS:
            ptvcursor_add(ptv, hf_woww_id, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_caster, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_unknown_int, 1, ENC_LITTLE_ENDIAN);
            ptvcursor_add_ret_uint(ptv, hf_woww_amount_of_targets, 4, ENC_LITTLE_ENDIAN, &amount_of_targets);
            for (guint32 i1 = 0; i1 < amount_of_targets; ++i1) {
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "SpellLogMiss %i", i1);
                ptvcursor_add(ptv, hf_woww_target, 8, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_spell_miss_info, 1, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
            }
            break;
        case SMSG_SPELLNONMELEEDAMAGELOG:
            add_packed_guid(ptv, pinfo);
            add_packed_guid(ptv, pinfo);
            ptvcursor_add(ptv, hf_woww_spell, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_damage, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_spell_school, 1, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_absorbed_damage, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_resisted, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_periodic_log, 1, ENC_NA);
            ptvcursor_add(ptv, hf_woww_unused, 1, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_blocked, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_hit_info, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_extend_flag, 1, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_SPELLORDAMAGE_IMMUNE:
            ptvcursor_add(ptv, hf_woww_caster, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_target, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_id, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_debug_log_format, 1, ENC_NA);
            break;
        case SMSG_SPELL_COOLDOWN:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            while (ptvcursor_current_offset(ptv) < offset_packet_end) {
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "SpellCooldownStatus");
                ptvcursor_add(ptv, hf_woww_id, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_cooldown_time, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
            }
            break;
        case SMSG_SPELL_DELAYED:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_delay_time, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_SPELL_FAILED_OTHER:
            ptvcursor_add(ptv, hf_woww_caster, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_id, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_SPELL_FAILURE:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_spell, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_spell_cast_result, 1, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_SPELL_GO:
            add_packed_guid(ptv, pinfo);
            add_packed_guid(ptv, pinfo);
            ptvcursor_add(ptv, hf_woww_spell, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add_ret_uint(ptv, hf_woww_cast_flags, 2, ENC_LITTLE_ENDIAN, &flags);
            ptvcursor_add_ret_uint(ptv, hf_woww_amount_of_hits, 1, ENC_LITTLE_ENDIAN, &amount_of_hits);
            for (guint32 i1 = 0; i1 < amount_of_hits; ++i1) {
                ptvcursor_add(ptv, hf_woww_hits, 8, ENC_LITTLE_ENDIAN);
            }
            ptvcursor_add_ret_uint(ptv, hf_woww_amount_of_misses, 1, ENC_LITTLE_ENDIAN, &amount_of_misses);
            for (guint32 i1 = 0; i1 < amount_of_misses; ++i1) {
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "SpellMiss %i", i1);
                ptvcursor_add(ptv, hf_woww_target, 8, ENC_LITTLE_ENDIAN);
                ptvcursor_add_ret_uint(ptv, hf_woww_spell_miss_info, 1, ENC_LITTLE_ENDIAN, &miss_info);
                ptvcursor_pop_subtree(ptv);
            }
            ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "SpellCastTargets");
            ptvcursor_add_ret_uint(ptv, hf_woww_spell_cast_target_flags, 2, ENC_LITTLE_ENDIAN, &target_flags);
            if (target_flags & SPELL_CAST_TARGET_FLAGS_UNIT) {
                add_packed_guid(ptv, pinfo);
            }
            if (target_flags & SPELL_CAST_TARGET_FLAGS_GAMEOBJECT) {
                add_packed_guid(ptv, pinfo);
            }
            else if (target_flags & SPELL_CAST_TARGET_FLAGS_OBJECT_UNK) {
                add_packed_guid(ptv, pinfo);
            }
            if (target_flags & SPELL_CAST_TARGET_FLAGS_ITEM) {
                add_packed_guid(ptv, pinfo);
            }
            else if (target_flags & SPELL_CAST_TARGET_FLAGS_TRADE_ITEM) {
                add_packed_guid(ptv, pinfo);
            }
            if (target_flags & SPELL_CAST_TARGET_FLAGS_SOURCE_LOCATION) {
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
            }
            if (target_flags & SPELL_CAST_TARGET_FLAGS_DEST_LOCATION) {
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
            }
            if (target_flags & SPELL_CAST_TARGET_FLAGS_STRING) {
                add_cstring(ptv, &hf_woww_target_string);
            }
            if (target_flags & SPELL_CAST_TARGET_FLAGS_CORPSE) {
                add_packed_guid(ptv, pinfo);
            }
            else if (target_flags & SPELL_CAST_TARGET_FLAGS_PVP_CORPSE) {
                add_packed_guid(ptv, pinfo);
            }
            ptvcursor_pop_subtree(ptv);
            if (flags & CAST_FLAGS_AMMO) {
                ptvcursor_add(ptv, hf_woww_ammo_display_id, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_ammo_inventory_type, 4, ENC_LITTLE_ENDIAN);
            }
            break;
        case SMSG_SPELL_START:
            add_packed_guid(ptv, pinfo);
            add_packed_guid(ptv, pinfo);
            ptvcursor_add(ptv, hf_woww_spell, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add_ret_uint(ptv, hf_woww_cast_flags, 2, ENC_LITTLE_ENDIAN, &flags);
            ptvcursor_add(ptv, hf_woww_timer, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "SpellCastTargets");
            ptvcursor_add_ret_uint(ptv, hf_woww_spell_cast_target_flags, 2, ENC_LITTLE_ENDIAN, &target_flags);
            if (target_flags & SPELL_CAST_TARGET_FLAGS_UNIT) {
                add_packed_guid(ptv, pinfo);
            }
            if (target_flags & SPELL_CAST_TARGET_FLAGS_GAMEOBJECT) {
                add_packed_guid(ptv, pinfo);
            }
            else if (target_flags & SPELL_CAST_TARGET_FLAGS_OBJECT_UNK) {
                add_packed_guid(ptv, pinfo);
            }
            if (target_flags & SPELL_CAST_TARGET_FLAGS_ITEM) {
                add_packed_guid(ptv, pinfo);
            }
            else if (target_flags & SPELL_CAST_TARGET_FLAGS_TRADE_ITEM) {
                add_packed_guid(ptv, pinfo);
            }
            if (target_flags & SPELL_CAST_TARGET_FLAGS_SOURCE_LOCATION) {
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
            }
            if (target_flags & SPELL_CAST_TARGET_FLAGS_DEST_LOCATION) {
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
            }
            if (target_flags & SPELL_CAST_TARGET_FLAGS_STRING) {
                add_cstring(ptv, &hf_woww_target_string);
            }
            if (target_flags & SPELL_CAST_TARGET_FLAGS_CORPSE) {
                add_packed_guid(ptv, pinfo);
            }
            else if (target_flags & SPELL_CAST_TARGET_FLAGS_PVP_CORPSE) {
                add_packed_guid(ptv, pinfo);
            }
            ptvcursor_pop_subtree(ptv);
            if (flags & CAST_FLAGS_AMMO) {
                ptvcursor_add(ptv, hf_woww_ammo_display_id, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_ammo_inventory_type, 4, ENC_LITTLE_ENDIAN);
            }
            break;
        case SMSG_SPELL_UPDATE_CHAIN_TARGETS:
            ptvcursor_add(ptv, hf_woww_caster, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_spell, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add_ret_uint(ptv, hf_woww_amount_of_targets, 4, ENC_LITTLE_ENDIAN, &amount_of_targets);
            for (guint32 i1 = 0; i1 < amount_of_targets; ++i1) {
                ptvcursor_add(ptv, hf_woww_targets, 8, ENC_LITTLE_ENDIAN);
            }
            break;
        case SMSG_SPIRIT_HEALER_CONFIRM:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_SPLINE_MOVE_FEATHER_FALL:
            add_packed_guid(ptv, pinfo);
            break;
        case SMSG_SPLINE_MOVE_LAND_WALK:
            add_packed_guid(ptv, pinfo);
            break;
        case SMSG_SPLINE_MOVE_NORMAL_FALL:
            add_packed_guid(ptv, pinfo);
            break;
        case SMSG_SPLINE_MOVE_ROOT:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_SPLINE_MOVE_SET_HOVER:
            add_packed_guid(ptv, pinfo);
            break;
        case SMSG_SPLINE_MOVE_SET_RUN_MODE:
            add_packed_guid(ptv, pinfo);
            break;
        case SMSG_SPLINE_MOVE_SET_WALK_MODE:
            add_packed_guid(ptv, pinfo);
            break;
        case SMSG_SPLINE_MOVE_START_SWIM:
            add_packed_guid(ptv, pinfo);
            break;
        case SMSG_SPLINE_MOVE_STOP_SWIM:
            add_packed_guid(ptv, pinfo);
            break;
        case SMSG_SPLINE_MOVE_UNROOT:
            add_packed_guid(ptv, pinfo);
            break;
        case SMSG_SPLINE_MOVE_UNSET_HOVER:
            add_packed_guid(ptv, pinfo);
            break;
        case SMSG_SPLINE_MOVE_WATER_WALK:
            add_packed_guid(ptv, pinfo);
            break;
        case SMSG_SPLINE_SET_RUN_BACK_SPEED:
            add_packed_guid(ptv, pinfo);
            ptvcursor_add(ptv, hf_woww_speed, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_SPLINE_SET_RUN_SPEED:
            add_packed_guid(ptv, pinfo);
            ptvcursor_add(ptv, hf_woww_speed, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_SPLINE_SET_SWIM_BACK_SPEED:
            add_packed_guid(ptv, pinfo);
            ptvcursor_add(ptv, hf_woww_speed, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_SPLINE_SET_SWIM_SPEED:
            add_packed_guid(ptv, pinfo);
            ptvcursor_add(ptv, hf_woww_speed, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_SPLINE_SET_TURN_RATE:
            add_packed_guid(ptv, pinfo);
            ptvcursor_add(ptv, hf_woww_speed, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_SPLINE_SET_WALK_SPEED:
            add_packed_guid(ptv, pinfo);
            ptvcursor_add(ptv, hf_woww_speed, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_STABLE_RESULT:
            ptvcursor_add(ptv, hf_woww_stable_result, 1, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_STANDSTATE_UPDATE:
            ptvcursor_add(ptv, hf_woww_unit_stand_state, 1, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_START_MIRROR_TIMER:
            ptvcursor_add(ptv, hf_woww_timer_type, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_time_remaining, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_duration, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_scale, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_is_frozen, 1, ENC_NA);
            ptvcursor_add(ptv, hf_woww_id, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_STOP_MIRROR_TIMER:
            ptvcursor_add(ptv, hf_woww_timer_type, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_SUMMON_REQUEST:
            ptvcursor_add(ptv, hf_woww_summoner, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_area, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_auto_decline_time, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_SUPERCEDED_SPELL:
            ptvcursor_add(ptv, hf_woww_new_spell_id, 2, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_old_spell_id, 2, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_TAXINODE_STATUS:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_taxi_mask_node_known, 1, ENC_NA);
            break;
        case SMSG_TEXT_EMOTE:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_text_emote, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_emote_int, 4, ENC_LITTLE_ENDIAN);
            add_sized_cstring(ptv, &hf_woww_name);
            break;
        case SMSG_TRADE_STATUS:
            ptvcursor_add_ret_uint(ptv, hf_woww_trade_status, 4, ENC_LITTLE_ENDIAN, &status);
            if (status == TRADE_STATUS_BEGIN_TRADE) {
                ptvcursor_add(ptv, hf_woww_unknown_guid, 8, ENC_LITTLE_ENDIAN);
            }
            else if (status == TRADE_STATUS_CLOSE_WINDOW) {
                ptvcursor_add(ptv, hf_woww_inventory_result, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_target_error, 1, ENC_NA);
                ptvcursor_add(ptv, hf_woww_item_limit_category_id, 4, ENC_LITTLE_ENDIAN);
            }
            else if (status == TRADE_STATUS_ONLY_CONJURED
             || status == TRADE_STATUS_NOT_ON_TAPLIST) {
                ptvcursor_add(ptv, hf_woww_slot, 1, ENC_LITTLE_ENDIAN);
            }
            break;
        case SMSG_TRADE_STATUS_EXTENDED:
            ptvcursor_add(ptv, hf_woww_self_player, 1, ENC_NA);
            ptvcursor_add(ptv, hf_woww_trade_slot_count, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_trade_slot_count, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_money_in_trade, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_spell_on_lowest_slot, 4, ENC_LITTLE_ENDIAN);
            for (guint32 i1 = 0; i1 < 7; ++i1) {
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "TradeSlot %i", i1);
                ptvcursor_add(ptv, hf_woww_trade_slot_number, 1, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_item, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_display_id, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_stack_count, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_wrapped, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_gift_wrapper, 8, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_enchantment, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_item_creator, 8, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_spell_charges, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_item_suffix_factor, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_item_random_properties_id, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_lock_id, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_max_durability, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_durability, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
            }
            break;
        case SMSG_TRAINER_BUY_FAILED:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_id, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_training_failure_reason, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_TRAINER_BUY_SUCCEEDED:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_id, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_TRAINER_LIST:
            ptvcursor_add(ptv, hf_woww_guid, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_trainer_type, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add_ret_uint(ptv, hf_woww_amount_of_spells, 4, ENC_LITTLE_ENDIAN, &amount_of_spells);
            for (guint32 i1 = 0; i1 < amount_of_spells; ++i1) {
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "TrainerSpell %i", i1);
                ptvcursor_add(ptv, hf_woww_spell, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_trainer_spell_state, 1, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_spell_cost, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_talent_point_cost, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_first_rank, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_required_level, 1, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_skill, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_required_skill_value, 4, ENC_LITTLE_ENDIAN);
                for (guint32 i2 = 0; i2 < 3; ++i2) {
                    ptvcursor_add(ptv, hf_woww_required_spells, 4, ENC_LITTLE_ENDIAN);
                }
                ptvcursor_pop_subtree(ptv);
            }
            add_cstring(ptv, &hf_woww_greeting);
            break;
        case SMSG_TRANSFER_ABORTED:
            ptvcursor_add(ptv, hf_woww_map, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_transfer_abort_reason, 1, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_argument, 1, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_TRANSFER_PENDING:
            ptvcursor_add(ptv, hf_woww_map, 4, ENC_LITTLE_ENDIAN);
            len = offset_packet_end - ptvcursor_current_offset(ptv);
            if (len > 0) {
                ptvcursor_add(ptv, hf_woww_transport, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_map, 4, ENC_LITTLE_ENDIAN);
            }
            break;
        case SMSG_TRIGGER_CINEMATIC:
            ptvcursor_add(ptv, hf_woww_cinematic_sequence_id, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_TURN_IN_PETITION_RESULTS:
            ptvcursor_add(ptv, hf_woww_petition_result, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_TUTORIAL_FLAGS:
            for (guint32 i1 = 0; i1 < 8; ++i1) {
                ptvcursor_add(ptv, hf_woww_tutorial_data, 4, ENC_LITTLE_ENDIAN);
            }
            break;
        case SMSG_UPDATE_AURA_DURATION:
            ptvcursor_add(ptv, hf_woww_aura_slot, 1, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_aura_duration, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_UPDATE_INSTANCE_OWNERSHIP:
            ptvcursor_add(ptv, hf_woww_player_is_saved_to_a_raid, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_UPDATE_LAST_INSTANCE:
            ptvcursor_add(ptv, hf_woww_map, 4, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_UPDATE_OBJECT:
            ptvcursor_add_ret_uint(ptv, hf_woww_amount_of_objects, 4, ENC_LITTLE_ENDIAN, &amount_of_objects);
            ptvcursor_add(ptv, hf_woww_has_transport, 1, ENC_LITTLE_ENDIAN);
            for (guint32 i1 = 0; i1 < amount_of_objects; ++i1) {
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Object %i", i1);
                ptvcursor_add_ret_uint(ptv, hf_woww_update_type, 1, ENC_LITTLE_ENDIAN, &update_type);
                if (update_type == UPDATE_TYPE_VALUES) {
                    add_packed_guid(ptv, pinfo);
                    add_update_mask(ptv, pinfo);
                }
                else if (update_type == UPDATE_TYPE_MOVEMENT) {
                    add_packed_guid(ptv, pinfo);
                    ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "MovementBlock");
                    ptvcursor_add_ret_uint(ptv, hf_woww_update_flag, 1, ENC_LITTLE_ENDIAN, &update_flag);
                    if (update_flag & UPDATE_FLAG_LIVING) {
                        ptvcursor_add_ret_uint(ptv, hf_woww_movement_flags, 4, ENC_LITTLE_ENDIAN, &flags);
                        ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
                        ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                        ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                        ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                        ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                        ptvcursor_pop_subtree(ptv);
                        ptvcursor_add(ptv, hf_woww_living_orientation, 4, ENC_LITTLE_ENDIAN);
                        if (flags & MOVEMENT_FLAGS_ON_TRANSPORT) {
                            add_packed_guid(ptv, pinfo);
                            ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                            ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                            ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                            ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                            ptvcursor_pop_subtree(ptv);
                            ptvcursor_add(ptv, hf_woww_transport_orientation, 4, ENC_LITTLE_ENDIAN);
                        }
                        if (flags & MOVEMENT_FLAGS_SWIMMING) {
                            ptvcursor_add(ptv, hf_woww_pitch, 4, ENC_LITTLE_ENDIAN);
                        }
                        ptvcursor_add(ptv, hf_woww_fall_time, 4, ENC_LITTLE_ENDIAN);
                        if (flags & MOVEMENT_FLAGS_JUMPING) {
                            ptvcursor_add(ptv, hf_woww_z_speed, 4, ENC_LITTLE_ENDIAN);
                            ptvcursor_add(ptv, hf_woww_cos_angle, 4, ENC_LITTLE_ENDIAN);
                            ptvcursor_add(ptv, hf_woww_sin_angle, 4, ENC_LITTLE_ENDIAN);
                            ptvcursor_add(ptv, hf_woww_xy_speed, 4, ENC_LITTLE_ENDIAN);
                        }
                        if (flags & MOVEMENT_FLAGS_SPLINE_ELEVATION) {
                            ptvcursor_add(ptv, hf_woww_spline_elevation, 4, ENC_LITTLE_ENDIAN);
                        }
                        ptvcursor_add(ptv, hf_woww_walking_speed, 4, ENC_LITTLE_ENDIAN);
                        ptvcursor_add(ptv, hf_woww_running_speed, 4, ENC_LITTLE_ENDIAN);
                        ptvcursor_add(ptv, hf_woww_backwards_running_speed, 4, ENC_LITTLE_ENDIAN);
                        ptvcursor_add(ptv, hf_woww_swimming_speed, 4, ENC_LITTLE_ENDIAN);
                        ptvcursor_add(ptv, hf_woww_backwards_swimming_speed, 4, ENC_LITTLE_ENDIAN);
                        ptvcursor_add(ptv, hf_woww_turn_rate, 4, ENC_LITTLE_ENDIAN);
                        if (flags & MOVEMENT_FLAGS_SPLINE_ENABLED) {
                            ptvcursor_add_ret_uint(ptv, hf_woww_spline_flag, 4, ENC_LITTLE_ENDIAN, &spline_flags);
                            if (spline_flags & SPLINE_FLAG_FINAL_ANGLE) {
                                ptvcursor_add(ptv, hf_woww_angle, 4, ENC_LITTLE_ENDIAN);
                            }
                            else if (spline_flags & SPLINE_FLAG_FINAL_TARGET) {
                                ptvcursor_add(ptv, hf_woww_target, 8, ENC_LITTLE_ENDIAN);
                            }
                            else if (spline_flags & SPLINE_FLAG_FINAL_POINT) {
                                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                                ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                                ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                                ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                                ptvcursor_pop_subtree(ptv);
                            }
                            ptvcursor_add(ptv, hf_woww_time_passed, 4, ENC_LITTLE_ENDIAN);
                            ptvcursor_add(ptv, hf_woww_duration, 4, ENC_LITTLE_ENDIAN);
                            ptvcursor_add(ptv, hf_woww_id, 4, ENC_LITTLE_ENDIAN);
                            ptvcursor_add_ret_uint(ptv, hf_woww_amount_of_nodes, 4, ENC_LITTLE_ENDIAN, &amount_of_nodes);
                            for (guint32 i2 = 0; i2 < amount_of_nodes; ++i2) {
                                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d %i", i2);
                                ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                                ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                                ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                                ptvcursor_pop_subtree(ptv);
                            }
                            ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                            ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                            ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                            ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                            ptvcursor_pop_subtree(ptv);
                        }
                    }
                    else if (update_flag & UPDATE_FLAG_HAS_POSITION) {
                        ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                        ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                        ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                        ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                        ptvcursor_pop_subtree(ptv);
                        ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
                    }
                    if (update_flag & UPDATE_FLAG_HIGH_GUID) {
                        ptvcursor_add(ptv, hf_woww_unknown_int, 4, ENC_LITTLE_ENDIAN);
                    }
                    if (update_flag & UPDATE_FLAG_ALL) {
                        ptvcursor_add(ptv, hf_woww_unknown_int, 4, ENC_LITTLE_ENDIAN);
                    }
                    if (update_flag & UPDATE_FLAG_MELEE_ATTACKING) {
                        add_packed_guid(ptv, pinfo);
                    }
                    if (update_flag & UPDATE_FLAG_TRANSPORT) {
                        ptvcursor_add(ptv, hf_woww_transport_progress_in_ms, 4, ENC_LITTLE_ENDIAN);
                    }
                    ptvcursor_pop_subtree(ptv);
                }
                else if (update_type == UPDATE_TYPE_CREATE_OBJECT
                 || update_type == UPDATE_TYPE_CREATE_OBJECT2) {
                    add_packed_guid(ptv, pinfo);
                    ptvcursor_add(ptv, hf_woww_object_type, 1, ENC_LITTLE_ENDIAN);
                    ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "MovementBlock");
                    ptvcursor_add_ret_uint(ptv, hf_woww_update_flag, 1, ENC_LITTLE_ENDIAN, &update_flag);
                    if (update_flag & UPDATE_FLAG_LIVING) {
                        ptvcursor_add_ret_uint(ptv, hf_woww_movement_flags, 4, ENC_LITTLE_ENDIAN, &flags);
                        ptvcursor_add(ptv, hf_woww_timestamp, 4, ENC_LITTLE_ENDIAN);
                        ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                        ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                        ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                        ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                        ptvcursor_pop_subtree(ptv);
                        ptvcursor_add(ptv, hf_woww_living_orientation, 4, ENC_LITTLE_ENDIAN);
                        if (flags & MOVEMENT_FLAGS_ON_TRANSPORT) {
                            add_packed_guid(ptv, pinfo);
                            ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                            ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                            ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                            ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                            ptvcursor_pop_subtree(ptv);
                            ptvcursor_add(ptv, hf_woww_transport_orientation, 4, ENC_LITTLE_ENDIAN);
                        }
                        if (flags & MOVEMENT_FLAGS_SWIMMING) {
                            ptvcursor_add(ptv, hf_woww_pitch, 4, ENC_LITTLE_ENDIAN);
                        }
                        ptvcursor_add(ptv, hf_woww_fall_time, 4, ENC_LITTLE_ENDIAN);
                        if (flags & MOVEMENT_FLAGS_JUMPING) {
                            ptvcursor_add(ptv, hf_woww_z_speed, 4, ENC_LITTLE_ENDIAN);
                            ptvcursor_add(ptv, hf_woww_cos_angle, 4, ENC_LITTLE_ENDIAN);
                            ptvcursor_add(ptv, hf_woww_sin_angle, 4, ENC_LITTLE_ENDIAN);
                            ptvcursor_add(ptv, hf_woww_xy_speed, 4, ENC_LITTLE_ENDIAN);
                        }
                        if (flags & MOVEMENT_FLAGS_SPLINE_ELEVATION) {
                            ptvcursor_add(ptv, hf_woww_spline_elevation, 4, ENC_LITTLE_ENDIAN);
                        }
                        ptvcursor_add(ptv, hf_woww_walking_speed, 4, ENC_LITTLE_ENDIAN);
                        ptvcursor_add(ptv, hf_woww_running_speed, 4, ENC_LITTLE_ENDIAN);
                        ptvcursor_add(ptv, hf_woww_backwards_running_speed, 4, ENC_LITTLE_ENDIAN);
                        ptvcursor_add(ptv, hf_woww_swimming_speed, 4, ENC_LITTLE_ENDIAN);
                        ptvcursor_add(ptv, hf_woww_backwards_swimming_speed, 4, ENC_LITTLE_ENDIAN);
                        ptvcursor_add(ptv, hf_woww_turn_rate, 4, ENC_LITTLE_ENDIAN);
                        if (flags & MOVEMENT_FLAGS_SPLINE_ENABLED) {
                            ptvcursor_add_ret_uint(ptv, hf_woww_spline_flag, 4, ENC_LITTLE_ENDIAN, &spline_flags);
                            if (spline_flags & SPLINE_FLAG_FINAL_ANGLE) {
                                ptvcursor_add(ptv, hf_woww_angle, 4, ENC_LITTLE_ENDIAN);
                            }
                            else if (spline_flags & SPLINE_FLAG_FINAL_TARGET) {
                                ptvcursor_add(ptv, hf_woww_target, 8, ENC_LITTLE_ENDIAN);
                            }
                            else if (spline_flags & SPLINE_FLAG_FINAL_POINT) {
                                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                                ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                                ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                                ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                                ptvcursor_pop_subtree(ptv);
                            }
                            ptvcursor_add(ptv, hf_woww_time_passed, 4, ENC_LITTLE_ENDIAN);
                            ptvcursor_add(ptv, hf_woww_duration, 4, ENC_LITTLE_ENDIAN);
                            ptvcursor_add(ptv, hf_woww_id, 4, ENC_LITTLE_ENDIAN);
                            ptvcursor_add_ret_uint(ptv, hf_woww_amount_of_nodes, 4, ENC_LITTLE_ENDIAN, &amount_of_nodes);
                            for (guint32 i2 = 0; i2 < amount_of_nodes; ++i2) {
                                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d %i", i2);
                                ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                                ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                                ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                                ptvcursor_pop_subtree(ptv);
                            }
                            ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                            ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                            ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                            ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                            ptvcursor_pop_subtree(ptv);
                        }
                    }
                    else if (update_flag & UPDATE_FLAG_HAS_POSITION) {
                        ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Vector3d");
                        ptvcursor_add(ptv, hf_woww_x, 4, ENC_LITTLE_ENDIAN);
                        ptvcursor_add(ptv, hf_woww_y, 4, ENC_LITTLE_ENDIAN);
                        ptvcursor_add(ptv, hf_woww_z, 4, ENC_LITTLE_ENDIAN);
                        ptvcursor_pop_subtree(ptv);
                        ptvcursor_add(ptv, hf_woww_orientation, 4, ENC_LITTLE_ENDIAN);
                    }
                    if (update_flag & UPDATE_FLAG_HIGH_GUID) {
                        ptvcursor_add(ptv, hf_woww_unknown_int, 4, ENC_LITTLE_ENDIAN);
                    }
                    if (update_flag & UPDATE_FLAG_ALL) {
                        ptvcursor_add(ptv, hf_woww_unknown_int, 4, ENC_LITTLE_ENDIAN);
                    }
                    if (update_flag & UPDATE_FLAG_MELEE_ATTACKING) {
                        add_packed_guid(ptv, pinfo);
                    }
                    if (update_flag & UPDATE_FLAG_TRANSPORT) {
                        ptvcursor_add(ptv, hf_woww_transport_progress_in_ms, 4, ENC_LITTLE_ENDIAN);
                    }
                    ptvcursor_pop_subtree(ptv);
                    add_update_mask(ptv, pinfo);
                }
                else if (update_type == UPDATE_TYPE_OUT_OF_RANGE_OBJECTS
                 || update_type == UPDATE_TYPE_NEAR_OBJECTS) {
                    ptvcursor_add_ret_uint(ptv, hf_woww_count, 4, ENC_LITTLE_ENDIAN, &count);
                    for (guint32 i2 = 0; i2 < count; ++i2) {
                        add_packed_guid(ptv, pinfo);
                    }
                }
                ptvcursor_pop_subtree(ptv);
            }
            break;
        case SMSG_UPDATE_WORLD_STATE:
            ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "WorldState");
            ptvcursor_add(ptv, hf_woww_state, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_value, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_pop_subtree(ptv);
            break;
        case SMSG_WARDEN_DATA:
            len = offset_packet_end - ptvcursor_current_offset(ptv);
            ptvcursor_add(ptv, hf_woww_encrypted_data, len, ENC_NA);
            break;
        case SMSG_WEATHER:
            ptvcursor_add(ptv, hf_woww_weather_type, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_grade, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_sound_id, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_woww_weather_change_type, 1, ENC_LITTLE_ENDIAN);
            break;
        case SMSG_WHO:
            ptvcursor_add_ret_uint(ptv, hf_woww_listed_players, 4, ENC_LITTLE_ENDIAN, &listed_players);
            ptvcursor_add(ptv, hf_woww_online_players, 4, ENC_LITTLE_ENDIAN);
            for (guint32 i1 = 0; i1 < listed_players; ++i1) {
                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "WhoPlayer %i", i1);
                add_cstring(ptv, &hf_woww_name);
                add_cstring(ptv, &hf_woww_guild);
                ptvcursor_add(ptv, hf_woww_level, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_class, 1, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_race, 1, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_area, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_add(ptv, hf_woww_party_status, 4, ENC_LITTLE_ENDIAN);
                ptvcursor_pop_subtree(ptv);
            }
            break;
        case SMSG_WHOIS:
            add_cstring(ptv, &hf_woww_message);
            break;
        case SMSG_ZONE_UNDER_ATTACK:
            ptvcursor_add(ptv, hf_woww_area, 4, ENC_LITTLE_ENDIAN);
            break;

        default:
            break;
    }
    switch (header_opcode) {
        case CMD_AUTH_LOGON_CHALLENGE:
            switch (*protocol_version) {
                case 2:
                    if (WOW_SERVER_TO_CLIENT) {
                        ptvcursor_add(ptv, hf_wow_protocol_version_int, 1, ENC_LITTLE_ENDIAN);
                        ptvcursor_add_ret_uint(ptv, hf_wow_login_result, 1, ENC_LITTLE_ENDIAN, &result);
                        if (result == LOGIN_RESULT_SUCCESS) {
                            ptvcursor_add(ptv, hf_wow_server_public_key, 32, ENC_NA);
                            ptvcursor_add_ret_uint(ptv, hf_wow_generator_length, 1, ENC_LITTLE_ENDIAN, &generator_length);
                            ptvcursor_add(ptv, hf_wow_generator, generator_length, ENC_NA);
                            ptvcursor_add_ret_uint(ptv, hf_wow_large_safe_prime_length, 1, ENC_LITTLE_ENDIAN, &large_safe_prime_length);
                            ptvcursor_add(ptv, hf_wow_large_safe_prime, large_safe_prime_length, ENC_NA);
                            ptvcursor_add(ptv, hf_wow_salt, 32, ENC_NA);
                            ptvcursor_add(ptv, hf_wow_crc_salt, 16, ENC_NA);
                        }
                    }
                    else {
                        ptvcursor_add(ptv, hf_wow_protocol_version, 1, ENC_LITTLE_ENDIAN);
                        ptvcursor_add(ptv, hf_wow_size, 2, ENC_LITTLE_ENDIAN);
                        ptvcursor_add(ptv, hf_wow_game_name, 4, ENC_LITTLE_ENDIAN);
                        ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Version");
                        ptvcursor_add(ptv, hf_wow_major, 1, ENC_LITTLE_ENDIAN);
                        ptvcursor_add(ptv, hf_wow_minor, 1, ENC_LITTLE_ENDIAN);
                        ptvcursor_add(ptv, hf_wow_patch, 1, ENC_LITTLE_ENDIAN);
                        ptvcursor_add(ptv, hf_wow_build, 2, ENC_LITTLE_ENDIAN);
                        ptvcursor_pop_subtree(ptv);
                        ptvcursor_add(ptv, hf_wow_platform, 4, ENC_LITTLE_ENDIAN);
                        ptvcursor_add(ptv, hf_wow_os, 4, ENC_LITTLE_ENDIAN);
                        ptvcursor_add(ptv, hf_wow_locale, 4, ENC_LITTLE_ENDIAN);
                        ptvcursor_add(ptv, hf_wow_utc_timezone_offset, 4, ENC_LITTLE_ENDIAN);
                        ptvcursor_add(ptv, hf_wow_client_ip_address, 4, ENC_LITTLE_ENDIAN);
                        add_string(ptv, &hf_wow_account_name);
                    }
                break;
                case 3:
                    if (WOW_SERVER_TO_CLIENT) {
                        ptvcursor_add(ptv, hf_wow_protocol_version_int, 1, ENC_LITTLE_ENDIAN);
                        ptvcursor_add_ret_uint(ptv, hf_wow_login_result, 1, ENC_LITTLE_ENDIAN, &result);
                        if (result == LOGIN_RESULT_SUCCESS) {
                            ptvcursor_add(ptv, hf_wow_server_public_key, 32, ENC_NA);
                            ptvcursor_add_ret_uint(ptv, hf_wow_generator_length, 1, ENC_LITTLE_ENDIAN, &generator_length);
                            ptvcursor_add(ptv, hf_wow_generator, generator_length, ENC_NA);
                            ptvcursor_add_ret_uint(ptv, hf_wow_large_safe_prime_length, 1, ENC_LITTLE_ENDIAN, &large_safe_prime_length);
                            ptvcursor_add(ptv, hf_wow_large_safe_prime, large_safe_prime_length, ENC_NA);
                            ptvcursor_add(ptv, hf_wow_salt, 32, ENC_NA);
                            ptvcursor_add(ptv, hf_wow_crc_salt, 16, ENC_NA);
                            ptvcursor_add_ret_uint(ptv, hf_wow_security_flag, 1, ENC_LITTLE_ENDIAN, &security_flag);
                            if (security_flag == SECURITY_FLAG_PIN) {
                                ptvcursor_add(ptv, hf_wow_pin_grid_seed, 4, ENC_LITTLE_ENDIAN);
                                ptvcursor_add(ptv, hf_wow_pin_salt, 16, ENC_NA);
                            }
                        }
                    }
                    else {
                        ptvcursor_add(ptv, hf_wow_protocol_version, 1, ENC_LITTLE_ENDIAN);
                        ptvcursor_add(ptv, hf_wow_size, 2, ENC_LITTLE_ENDIAN);
                        ptvcursor_add(ptv, hf_wow_game_name, 4, ENC_LITTLE_ENDIAN);
                        ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Version");
                        ptvcursor_add(ptv, hf_wow_major, 1, ENC_LITTLE_ENDIAN);
                        ptvcursor_add(ptv, hf_wow_minor, 1, ENC_LITTLE_ENDIAN);
                        ptvcursor_add(ptv, hf_wow_patch, 1, ENC_LITTLE_ENDIAN);
                        ptvcursor_add(ptv, hf_wow_build, 2, ENC_LITTLE_ENDIAN);
                        ptvcursor_pop_subtree(ptv);
                        ptvcursor_add(ptv, hf_wow_platform, 4, ENC_LITTLE_ENDIAN);
                        ptvcursor_add(ptv, hf_wow_os, 4, ENC_LITTLE_ENDIAN);
                        ptvcursor_add(ptv, hf_wow_locale, 4, ENC_LITTLE_ENDIAN);
                        ptvcursor_add(ptv, hf_wow_utc_timezone_offset, 4, ENC_LITTLE_ENDIAN);
                        ptvcursor_add(ptv, hf_wow_client_ip_address, 4, ENC_LITTLE_ENDIAN);
                        add_string(ptv, &hf_wow_account_name);
                    }
                break;
                case 5:
                case 6:
                case 7:
                    if (WOW_SERVER_TO_CLIENT) {
                        ptvcursor_add(ptv, hf_wow_protocol_version_int, 1, ENC_LITTLE_ENDIAN);
                        ptvcursor_add_ret_uint(ptv, hf_wow_login_result, 1, ENC_LITTLE_ENDIAN, &result);
                        if (result == LOGIN_RESULT_SUCCESS) {
                            ptvcursor_add(ptv, hf_wow_server_public_key, 32, ENC_NA);
                            ptvcursor_add_ret_uint(ptv, hf_wow_generator_length, 1, ENC_LITTLE_ENDIAN, &generator_length);
                            ptvcursor_add(ptv, hf_wow_generator, generator_length, ENC_NA);
                            ptvcursor_add_ret_uint(ptv, hf_wow_large_safe_prime_length, 1, ENC_LITTLE_ENDIAN, &large_safe_prime_length);
                            ptvcursor_add(ptv, hf_wow_large_safe_prime, large_safe_prime_length, ENC_NA);
                            ptvcursor_add(ptv, hf_wow_salt, 32, ENC_NA);
                            ptvcursor_add(ptv, hf_wow_crc_salt, 16, ENC_NA);
                            ptvcursor_add_ret_uint(ptv, hf_wow_security_flag, 1, ENC_LITTLE_ENDIAN, &security_flag);
                            if (security_flag & SECURITY_FLAG_PIN) {
                                ptvcursor_add(ptv, hf_wow_pin_grid_seed, 4, ENC_LITTLE_ENDIAN);
                                ptvcursor_add(ptv, hf_wow_pin_salt, 16, ENC_NA);
                            }
                            if (security_flag & SECURITY_FLAG_MATRIX_CARD) {
                                ptvcursor_add(ptv, hf_wow_width, 1, ENC_LITTLE_ENDIAN);
                                ptvcursor_add(ptv, hf_wow_height, 1, ENC_LITTLE_ENDIAN);
                                ptvcursor_add(ptv, hf_wow_digit_count, 1, ENC_LITTLE_ENDIAN);
                                ptvcursor_add(ptv, hf_wow_challenge_count, 1, ENC_LITTLE_ENDIAN);
                                ptvcursor_add(ptv, hf_wow_seed, 8, ENC_LITTLE_ENDIAN);
                            }
                        }
                    }
                    else {
                        ptvcursor_add(ptv, hf_wow_protocol_version, 1, ENC_LITTLE_ENDIAN);
                        ptvcursor_add(ptv, hf_wow_size, 2, ENC_LITTLE_ENDIAN);
                        ptvcursor_add(ptv, hf_wow_game_name, 4, ENC_LITTLE_ENDIAN);
                        ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Version");
                        ptvcursor_add(ptv, hf_wow_major, 1, ENC_LITTLE_ENDIAN);
                        ptvcursor_add(ptv, hf_wow_minor, 1, ENC_LITTLE_ENDIAN);
                        ptvcursor_add(ptv, hf_wow_patch, 1, ENC_LITTLE_ENDIAN);
                        ptvcursor_add(ptv, hf_wow_build, 2, ENC_LITTLE_ENDIAN);
                        ptvcursor_pop_subtree(ptv);
                        ptvcursor_add(ptv, hf_wow_platform, 4, ENC_LITTLE_ENDIAN);
                        ptvcursor_add(ptv, hf_wow_os, 4, ENC_LITTLE_ENDIAN);
                        ptvcursor_add(ptv, hf_wow_locale, 4, ENC_LITTLE_ENDIAN);
                        ptvcursor_add(ptv, hf_wow_utc_timezone_offset, 4, ENC_LITTLE_ENDIAN);
                        ptvcursor_add(ptv, hf_wow_client_ip_address, 4, ENC_LITTLE_ENDIAN);
                        add_string(ptv, &hf_wow_account_name);
                    }
                break;
                case 8:
                    if (WOW_SERVER_TO_CLIENT) {
                        ptvcursor_add(ptv, hf_wow_protocol_version_int, 1, ENC_LITTLE_ENDIAN);
                        ptvcursor_add_ret_uint(ptv, hf_wow_login_result, 1, ENC_LITTLE_ENDIAN, &result);
                        if (result == LOGIN_RESULT_SUCCESS) {
                            ptvcursor_add(ptv, hf_wow_server_public_key, 32, ENC_NA);
                            ptvcursor_add_ret_uint(ptv, hf_wow_generator_length, 1, ENC_LITTLE_ENDIAN, &generator_length);
                            ptvcursor_add(ptv, hf_wow_generator, generator_length, ENC_NA);
                            ptvcursor_add_ret_uint(ptv, hf_wow_large_safe_prime_length, 1, ENC_LITTLE_ENDIAN, &large_safe_prime_length);
                            ptvcursor_add(ptv, hf_wow_large_safe_prime, large_safe_prime_length, ENC_NA);
                            ptvcursor_add(ptv, hf_wow_salt, 32, ENC_NA);
                            ptvcursor_add(ptv, hf_wow_crc_salt, 16, ENC_NA);
                            ptvcursor_add_ret_uint(ptv, hf_wow_security_flag, 1, ENC_LITTLE_ENDIAN, &security_flag);
                            if (security_flag & SECURITY_FLAG_PIN) {
                                ptvcursor_add(ptv, hf_wow_pin_grid_seed, 4, ENC_LITTLE_ENDIAN);
                                ptvcursor_add(ptv, hf_wow_pin_salt, 16, ENC_NA);
                            }
                            if (security_flag & SECURITY_FLAG_MATRIX_CARD) {
                                ptvcursor_add(ptv, hf_wow_width, 1, ENC_LITTLE_ENDIAN);
                                ptvcursor_add(ptv, hf_wow_height, 1, ENC_LITTLE_ENDIAN);
                                ptvcursor_add(ptv, hf_wow_digit_count, 1, ENC_LITTLE_ENDIAN);
                                ptvcursor_add(ptv, hf_wow_challenge_count, 1, ENC_LITTLE_ENDIAN);
                                ptvcursor_add(ptv, hf_wow_seed, 8, ENC_LITTLE_ENDIAN);
                            }
                            if (security_flag & SECURITY_FLAG_AUTHENTICATOR) {
                                ptvcursor_add(ptv, hf_wow_required, 1, ENC_LITTLE_ENDIAN);
                            }
                        }
                    }
                    else {
                        ptvcursor_add(ptv, hf_wow_protocol_version, 1, ENC_LITTLE_ENDIAN);
                        ptvcursor_add(ptv, hf_wow_size, 2, ENC_LITTLE_ENDIAN);
                        ptvcursor_add(ptv, hf_wow_game_name, 4, ENC_LITTLE_ENDIAN);
                        ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Version");
                        ptvcursor_add(ptv, hf_wow_major, 1, ENC_LITTLE_ENDIAN);
                        ptvcursor_add(ptv, hf_wow_minor, 1, ENC_LITTLE_ENDIAN);
                        ptvcursor_add(ptv, hf_wow_patch, 1, ENC_LITTLE_ENDIAN);
                        ptvcursor_add(ptv, hf_wow_build, 2, ENC_LITTLE_ENDIAN);
                        ptvcursor_pop_subtree(ptv);
                        ptvcursor_add(ptv, hf_wow_platform, 4, ENC_LITTLE_ENDIAN);
                        ptvcursor_add(ptv, hf_wow_os, 4, ENC_LITTLE_ENDIAN);
                        ptvcursor_add(ptv, hf_wow_locale, 4, ENC_LITTLE_ENDIAN);
                        ptvcursor_add(ptv, hf_wow_utc_timezone_offset, 4, ENC_LITTLE_ENDIAN);
                        ptvcursor_add(ptv, hf_wow_client_ip_address, 4, ENC_LITTLE_ENDIAN);
                        add_string(ptv, &hf_wow_account_name);
                    }
                break;
            }
            break;
        case CMD_AUTH_LOGON_PROOF:
            switch (*protocol_version) {
                case 2:
                case 3:
                    if (WOW_SERVER_TO_CLIENT) {
                        ptvcursor_add_ret_uint(ptv, hf_wow_login_result, 1, ENC_LITTLE_ENDIAN, &result);
                        if (result == LOGIN_RESULT_SUCCESS) {
                            ptvcursor_add(ptv, hf_wow_server_proof, 20, ENC_NA);
                            ptvcursor_add(ptv, hf_wow_hardware_survey_id, 4, ENC_LITTLE_ENDIAN);
                        }
                    }
                    else {
                        ptvcursor_add(ptv, hf_wow_client_public_key, 32, ENC_NA);
                        ptvcursor_add(ptv, hf_wow_client_proof, 20, ENC_NA);
                        ptvcursor_add(ptv, hf_wow_crc_hash, 20, ENC_NA);
                        ptvcursor_add_ret_uint(ptv, hf_wow_number_of_telemetry_keys, 1, ENC_LITTLE_ENDIAN, &number_of_telemetry_keys);
                        for (guint32 i1 = 0; i1 < number_of_telemetry_keys; ++i1) {
                            ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "TelemetryKey %i", i1);
                            ptvcursor_add(ptv, hf_wow_unknown_int, 2, ENC_LITTLE_ENDIAN);
                            ptvcursor_add(ptv, hf_wow_unknown_int, 4, ENC_LITTLE_ENDIAN);
                            ptvcursor_add(ptv, hf_wow_unknown_bytes, 4, ENC_NA);
                            ptvcursor_add(ptv, hf_wow_cd_key_proof, 20, ENC_NA);
                            ptvcursor_pop_subtree(ptv);
                        }
                    }
                break;
                case 5:
                case 6:
                case 7:
                    if (WOW_SERVER_TO_CLIENT) {
                        ptvcursor_add_ret_uint(ptv, hf_wow_login_result, 1, ENC_LITTLE_ENDIAN, &result);
                        if (result == LOGIN_RESULT_SUCCESS) {
                            ptvcursor_add(ptv, hf_wow_server_proof, 20, ENC_NA);
                            ptvcursor_add(ptv, hf_wow_hardware_survey_id, 4, ENC_LITTLE_ENDIAN);
                            ptvcursor_add(ptv, hf_wow_unknown_int, 2, ENC_LITTLE_ENDIAN);
                        }
                    }
                    else {
                        ptvcursor_add(ptv, hf_wow_client_public_key, 32, ENC_NA);
                        ptvcursor_add(ptv, hf_wow_client_proof, 20, ENC_NA);
                        ptvcursor_add(ptv, hf_wow_crc_hash, 20, ENC_NA);
                        ptvcursor_add_ret_uint(ptv, hf_wow_number_of_telemetry_keys, 1, ENC_LITTLE_ENDIAN, &number_of_telemetry_keys);
                        for (guint32 i1 = 0; i1 < number_of_telemetry_keys; ++i1) {
                            ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "TelemetryKey %i", i1);
                            ptvcursor_add(ptv, hf_wow_unknown_int, 2, ENC_LITTLE_ENDIAN);
                            ptvcursor_add(ptv, hf_wow_unknown_int, 4, ENC_LITTLE_ENDIAN);
                            ptvcursor_add(ptv, hf_wow_unknown_bytes, 4, ENC_NA);
                            ptvcursor_add(ptv, hf_wow_cd_key_proof, 20, ENC_NA);
                            ptvcursor_pop_subtree(ptv);
                        }
                    }
                break;
                case 8:
                    if (WOW_SERVER_TO_CLIENT) {
                        ptvcursor_add_ret_uint(ptv, hf_wow_login_result, 1, ENC_LITTLE_ENDIAN, &result);
                        if (result == LOGIN_RESULT_SUCCESS) {
                            ptvcursor_add(ptv, hf_wow_server_proof, 20, ENC_NA);
                            ptvcursor_add(ptv, hf_wow_account_flag, 4, ENC_LITTLE_ENDIAN);
                            ptvcursor_add(ptv, hf_wow_hardware_survey_id, 4, ENC_LITTLE_ENDIAN);
                            ptvcursor_add(ptv, hf_wow_unknown_int, 2, ENC_LITTLE_ENDIAN);
                        }
                        else {
                            ptvcursor_add(ptv, hf_wow_padding, 2, ENC_LITTLE_ENDIAN);
                        }
                    }
                    else {
                        ptvcursor_add(ptv, hf_wow_client_public_key, 32, ENC_NA);
                        ptvcursor_add(ptv, hf_wow_client_proof, 20, ENC_NA);
                        ptvcursor_add(ptv, hf_wow_crc_hash, 20, ENC_NA);
                        ptvcursor_add_ret_uint(ptv, hf_wow_number_of_telemetry_keys, 1, ENC_LITTLE_ENDIAN, &number_of_telemetry_keys);
                        for (guint32 i1 = 0; i1 < number_of_telemetry_keys; ++i1) {
                            ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "TelemetryKey %i", i1);
                            ptvcursor_add(ptv, hf_wow_unknown_int, 2, ENC_LITTLE_ENDIAN);
                            ptvcursor_add(ptv, hf_wow_unknown_int, 4, ENC_LITTLE_ENDIAN);
                            ptvcursor_add(ptv, hf_wow_unknown_bytes, 4, ENC_NA);
                            ptvcursor_add(ptv, hf_wow_cd_key_proof, 20, ENC_NA);
                            ptvcursor_pop_subtree(ptv);
                        }
                    }
                break;
            }
            break;
        case CMD_AUTH_RECONNECT_CHALLENGE:
            switch (*protocol_version) {
                case 2:
                case 5:
                case 6:
                case 7:
                    if (WOW_SERVER_TO_CLIENT) {
                        ptvcursor_add_ret_uint(ptv, hf_wow_login_result, 1, ENC_LITTLE_ENDIAN, &result);
                        if (result == LOGIN_RESULT_SUCCESS) {
                            ptvcursor_add(ptv, hf_wow_challenge_data, 16, ENC_NA);
                            ptvcursor_add(ptv, hf_wow_checksum_salt, 16, ENC_NA);
                        }
                    }
                    else {
                        ptvcursor_add(ptv, hf_wow_protocol_version, 1, ENC_LITTLE_ENDIAN);
                        ptvcursor_add(ptv, hf_wow_size, 2, ENC_LITTLE_ENDIAN);
                        ptvcursor_add(ptv, hf_wow_game_name, 4, ENC_LITTLE_ENDIAN);
                        ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Version");
                        ptvcursor_add(ptv, hf_wow_major, 1, ENC_LITTLE_ENDIAN);
                        ptvcursor_add(ptv, hf_wow_minor, 1, ENC_LITTLE_ENDIAN);
                        ptvcursor_add(ptv, hf_wow_patch, 1, ENC_LITTLE_ENDIAN);
                        ptvcursor_add(ptv, hf_wow_build, 2, ENC_LITTLE_ENDIAN);
                        ptvcursor_pop_subtree(ptv);
                        ptvcursor_add(ptv, hf_wow_platform, 4, ENC_LITTLE_ENDIAN);
                        ptvcursor_add(ptv, hf_wow_os, 4, ENC_LITTLE_ENDIAN);
                        ptvcursor_add(ptv, hf_wow_locale, 4, ENC_LITTLE_ENDIAN);
                        ptvcursor_add(ptv, hf_wow_utc_timezone_offset, 4, ENC_LITTLE_ENDIAN);
                        ptvcursor_add(ptv, hf_wow_client_ip_address, 4, ENC_LITTLE_ENDIAN);
                        add_string(ptv, &hf_wow_account_name);
                    }
                break;
                case 8:
                    if (WOW_SERVER_TO_CLIENT) {
                        ptvcursor_add_ret_uint(ptv, hf_wow_login_result, 1, ENC_LITTLE_ENDIAN, &result);
                        if (result == LOGIN_RESULT_SUCCESS) {
                            ptvcursor_add(ptv, hf_wow_challenge_data, 16, ENC_NA);
                            ptvcursor_add(ptv, hf_wow_checksum_salt, 16, ENC_NA);
                        }
                    }
                    else {
                        ptvcursor_add(ptv, hf_wow_protocol_version, 1, ENC_LITTLE_ENDIAN);
                        ptvcursor_add(ptv, hf_wow_size, 2, ENC_LITTLE_ENDIAN);
                        ptvcursor_add(ptv, hf_wow_game_name, 4, ENC_LITTLE_ENDIAN);
                        ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Version");
                        ptvcursor_add(ptv, hf_wow_major, 1, ENC_LITTLE_ENDIAN);
                        ptvcursor_add(ptv, hf_wow_minor, 1, ENC_LITTLE_ENDIAN);
                        ptvcursor_add(ptv, hf_wow_patch, 1, ENC_LITTLE_ENDIAN);
                        ptvcursor_add(ptv, hf_wow_build, 2, ENC_LITTLE_ENDIAN);
                        ptvcursor_pop_subtree(ptv);
                        ptvcursor_add(ptv, hf_wow_platform, 4, ENC_LITTLE_ENDIAN);
                        ptvcursor_add(ptv, hf_wow_os, 4, ENC_LITTLE_ENDIAN);
                        ptvcursor_add(ptv, hf_wow_locale, 4, ENC_LITTLE_ENDIAN);
                        ptvcursor_add(ptv, hf_wow_utc_timezone_offset, 4, ENC_LITTLE_ENDIAN);
                        ptvcursor_add(ptv, hf_wow_client_ip_address, 4, ENC_LITTLE_ENDIAN);
                        add_string(ptv, &hf_wow_account_name);
                    }
                break;
            }
            break;
        case CMD_AUTH_RECONNECT_PROOF:
            switch (*protocol_version) {
                case 2:
                    if (WOW_SERVER_TO_CLIENT) {
                        ptvcursor_add(ptv, hf_wow_login_result, 1, ENC_LITTLE_ENDIAN);
                    }
                    else {
                        ptvcursor_add(ptv, hf_wow_proof_data, 16, ENC_NA);
                        ptvcursor_add(ptv, hf_wow_client_proof, 20, ENC_NA);
                        ptvcursor_add(ptv, hf_wow_client_checksum, 20, ENC_NA);
                        ptvcursor_add(ptv, hf_wow_key_count, 1, ENC_LITTLE_ENDIAN);
                    }
                break;
                case 5:
                case 6:
                case 7:
                    if (WOW_SERVER_TO_CLIENT) {
                        ptvcursor_add(ptv, hf_wow_login_result, 1, ENC_LITTLE_ENDIAN);
                        ptvcursor_add(ptv, hf_wow_padding, 2, ENC_LITTLE_ENDIAN);
                    }
                    else {
                        ptvcursor_add(ptv, hf_wow_proof_data, 16, ENC_NA);
                        ptvcursor_add(ptv, hf_wow_client_proof, 20, ENC_NA);
                        ptvcursor_add(ptv, hf_wow_client_checksum, 20, ENC_NA);
                        ptvcursor_add(ptv, hf_wow_key_count, 1, ENC_LITTLE_ENDIAN);
                    }
                break;
                case 8:
                    if (WOW_SERVER_TO_CLIENT) {
                        ptvcursor_add(ptv, hf_wow_login_result, 1, ENC_LITTLE_ENDIAN);
                        ptvcursor_add(ptv, hf_wow_padding, 2, ENC_LITTLE_ENDIAN);
                    }
                    else {
                        ptvcursor_add(ptv, hf_wow_proof_data, 16, ENC_NA);
                        ptvcursor_add(ptv, hf_wow_client_proof, 20, ENC_NA);
                        ptvcursor_add(ptv, hf_wow_client_checksum, 20, ENC_NA);
                        ptvcursor_add(ptv, hf_wow_key_count, 1, ENC_LITTLE_ENDIAN);
                    }
                break;
            }
            break;
        case CMD_REALM_LIST:
            switch (*protocol_version) {
                case 2:
                case 3:
                    if (WOW_SERVER_TO_CLIENT) {
                        ptvcursor_add(ptv, hf_wow_size, 2, ENC_LITTLE_ENDIAN);
                        ptvcursor_add(ptv, hf_wow_header_padding, 4, ENC_LITTLE_ENDIAN);
                        ptvcursor_add_ret_uint(ptv, hf_wow_number_of_realms, 1, ENC_LITTLE_ENDIAN, &number_of_realms);
                        for (guint32 i1 = 0; i1 < number_of_realms; ++i1) {
                            ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Realm %i", i1);
                            ptvcursor_add(ptv, hf_wow_realm_type, 4, ENC_LITTLE_ENDIAN);
                            ptvcursor_add(ptv, hf_wow_realm_flag, 1, ENC_LITTLE_ENDIAN);
                            add_cstring(ptv, &hf_wow_name);
                            add_cstring(ptv, &hf_wow_address);
                            ptvcursor_add(ptv, hf_wow_population, 4, ENC_LITTLE_ENDIAN);
                            ptvcursor_add(ptv, hf_wow_number_of_characters_on_realm, 1, ENC_LITTLE_ENDIAN);
                            ptvcursor_add(ptv, hf_wow_realm_category, 1, ENC_LITTLE_ENDIAN);
                            ptvcursor_add(ptv, hf_wow_realm_id, 1, ENC_LITTLE_ENDIAN);
                            ptvcursor_pop_subtree(ptv);
                        }
                        ptvcursor_add(ptv, hf_wow_footer_padding, 2, ENC_LITTLE_ENDIAN);
                    }
                    else {
                        ptvcursor_add(ptv, hf_wow_padding, 4, ENC_LITTLE_ENDIAN);
                    }
                break;
                case 5:
                    if (WOW_SERVER_TO_CLIENT) {
                        ptvcursor_add(ptv, hf_wow_size, 2, ENC_LITTLE_ENDIAN);
                        ptvcursor_add(ptv, hf_wow_header_padding, 4, ENC_LITTLE_ENDIAN);
                        ptvcursor_add_ret_uint(ptv, hf_wow_number_of_realms, 1, ENC_LITTLE_ENDIAN, &number_of_realms);
                        for (guint32 i1 = 0; i1 < number_of_realms; ++i1) {
                            ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Realm %i", i1);
                            ptvcursor_add(ptv, hf_wow_realm_type, 1, ENC_LITTLE_ENDIAN);
                            ptvcursor_add(ptv, hf_wow_locked, 1, ENC_NA);
                            ptvcursor_add(ptv, hf_wow_realm_flag, 1, ENC_LITTLE_ENDIAN);
                            add_cstring(ptv, &hf_wow_name);
                            add_cstring(ptv, &hf_wow_address);
                            ptvcursor_add(ptv, hf_wow_population, 4, ENC_LITTLE_ENDIAN);
                            ptvcursor_add(ptv, hf_wow_number_of_characters_on_realm, 1, ENC_LITTLE_ENDIAN);
                            ptvcursor_add(ptv, hf_wow_realm_category, 1, ENC_LITTLE_ENDIAN);
                            ptvcursor_add(ptv, hf_wow_realm_id, 1, ENC_LITTLE_ENDIAN);
                            ptvcursor_pop_subtree(ptv);
                        }
                        ptvcursor_add(ptv, hf_wow_footer_padding, 2, ENC_LITTLE_ENDIAN);
                    }
                    else {
                        ptvcursor_add(ptv, hf_wow_padding, 4, ENC_LITTLE_ENDIAN);
                    }
                break;
                case 6:
                case 7:
                    if (WOW_SERVER_TO_CLIENT) {
                        ptvcursor_add(ptv, hf_wow_size, 2, ENC_LITTLE_ENDIAN);
                        ptvcursor_add(ptv, hf_wow_header_padding, 4, ENC_LITTLE_ENDIAN);
                        ptvcursor_add_ret_uint(ptv, hf_wow_number_of_realms, 2, ENC_LITTLE_ENDIAN, &number_of_realms);
                        for (guint32 i1 = 0; i1 < number_of_realms; ++i1) {
                            ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Realm %i", i1);
                            ptvcursor_add(ptv, hf_wow_realm_type, 1, ENC_LITTLE_ENDIAN);
                            ptvcursor_add(ptv, hf_wow_locked, 1, ENC_NA);
                            ptvcursor_add(ptv, hf_wow_realm_flag, 1, ENC_LITTLE_ENDIAN);
                            add_cstring(ptv, &hf_wow_name);
                            add_cstring(ptv, &hf_wow_address);
                            ptvcursor_add(ptv, hf_wow_population, 4, ENC_LITTLE_ENDIAN);
                            ptvcursor_add(ptv, hf_wow_number_of_characters_on_realm, 1, ENC_LITTLE_ENDIAN);
                            ptvcursor_add(ptv, hf_wow_realm_category, 1, ENC_LITTLE_ENDIAN);
                            ptvcursor_add(ptv, hf_wow_realm_id, 1, ENC_LITTLE_ENDIAN);
                            ptvcursor_pop_subtree(ptv);
                        }
                        ptvcursor_add(ptv, hf_wow_footer_padding, 2, ENC_LITTLE_ENDIAN);
                    }
                    else {
                        ptvcursor_add(ptv, hf_wow_padding, 4, ENC_LITTLE_ENDIAN);
                    }
                break;
                case 8:
                    if (WOW_SERVER_TO_CLIENT) {
                        ptvcursor_add(ptv, hf_wow_size, 2, ENC_LITTLE_ENDIAN);
                        ptvcursor_add(ptv, hf_wow_header_padding, 4, ENC_LITTLE_ENDIAN);
                        ptvcursor_add_ret_uint(ptv, hf_wow_number_of_realms, 2, ENC_LITTLE_ENDIAN, &number_of_realms);
                        for (guint32 i1 = 0; i1 < number_of_realms; ++i1) {
                            ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Realm %i", i1);
                            ptvcursor_add(ptv, hf_wow_realm_type, 1, ENC_LITTLE_ENDIAN);
                            ptvcursor_add(ptv, hf_wow_locked, 1, ENC_NA);
                            ptvcursor_add_ret_uint(ptv, hf_wow_realm_flag, 1, ENC_LITTLE_ENDIAN, &flag);
                            add_cstring(ptv, &hf_wow_name);
                            add_cstring(ptv, &hf_wow_address);
                            ptvcursor_add(ptv, hf_wow_population, 4, ENC_LITTLE_ENDIAN);
                            ptvcursor_add(ptv, hf_wow_number_of_characters_on_realm, 1, ENC_LITTLE_ENDIAN);
                            ptvcursor_add(ptv, hf_wow_realm_category, 1, ENC_LITTLE_ENDIAN);
                            ptvcursor_add(ptv, hf_wow_realm_id, 1, ENC_LITTLE_ENDIAN);
                            if (flag & REALM_FLAG_SPECIFY_BUILD) {
                                ptvcursor_add_text_with_subtree(ptv, SUBTREE_UNDEFINED_LENGTH, ett_message, "Version");
                                ptvcursor_add(ptv, hf_wow_major, 1, ENC_LITTLE_ENDIAN);
                                ptvcursor_add(ptv, hf_wow_minor, 1, ENC_LITTLE_ENDIAN);
                                ptvcursor_add(ptv, hf_wow_patch, 1, ENC_LITTLE_ENDIAN);
                                ptvcursor_add(ptv, hf_wow_build, 2, ENC_LITTLE_ENDIAN);
                                ptvcursor_pop_subtree(ptv);
                            }
                            ptvcursor_pop_subtree(ptv);
                        }
                        ptvcursor_add(ptv, hf_wow_footer_padding, 2, ENC_LITTLE_ENDIAN);
                    }
                    else {
                        ptvcursor_add(ptv, hf_wow_padding, 4, ENC_LITTLE_ENDIAN);
                    }
                break;
            }
            break;
        case CMD_SURVEY_RESULT:
            ptvcursor_add(ptv, hf_wow_survey_id, 4, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_wow_error, 1, ENC_LITTLE_ENDIAN);
            ptvcursor_add_ret_uint(ptv, hf_wow_compressed_data_length, 2, ENC_LITTLE_ENDIAN, &compressed_data_length);
            ptvcursor_add(ptv, hf_wow_data, compressed_data_length, ENC_NA);
            break;
        case CMD_XFER_DATA:
            ptvcursor_add_ret_uint(ptv, hf_wow_size, 2, ENC_LITTLE_ENDIAN, &size);
            ptvcursor_add(ptv, hf_wow_data, size, ENC_NA);
            break;
        case CMD_XFER_INITIATE:
            add_string(ptv, &hf_wow_filename);
            ptvcursor_add(ptv, hf_wow_file_size, 8, ENC_LITTLE_ENDIAN);
            ptvcursor_add(ptv, hf_wow_file_md, 16, ENC_NA);
            break;
        case CMD_XFER_RESUME:
            ptvcursor_add(ptv, hf_wow_offset, 8, ENC_LITTLE_ENDIAN);
            break;

        default:
            break;
    }
