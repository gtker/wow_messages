use std::io::{Read, Write};

use crate::vanilla::TEnum;

/// Auto generated from the original `wowm` in file [`wow_message_parser/tests/impl_levels.wowm:230`](https://github.com/gtker/wow_messages/tree/main/wow_message_parser/tests/impl_levels.wowm#L230):
/// ```text
/// struct IfEdgeCases {
///     TEnum t;
///     if (t == ZERO
///         || t == ONE
///         || t == TWO) {
///         u8 basic1;
///     }
///     else if (t == THREE
///         || t == FOUR) {
///         u8 basic3;
///     }
///     else if (t == FIVE
///         || t == SIX) {
///         u8 basic5;
///     }
///     else {
///         u8 rest;
///     }
/// }
/// ```
#[derive(Debug, Clone, Copy, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub enum IfEdgeCases {
    Zero {
        basic1: u8,
    },
    One {
        basic1: u8,
    },
    Two {
        basic1: u8,
    },
    Three {
        basic3: u8,
    },
    Four {
        basic3: u8,
    },
    Five {
        basic5: u8,
    },
    Six {
        basic5: u8,
    },
    Rest {
        rest: u8,
    },
}

impl IfEdgeCases {
    pub(crate) fn write_into_vec(&self, mut w: impl Write) -> Result<(), std::io::Error> {
        // t: TEnum
        w.write_all(&(self.as_int().to_le_bytes()))?;

        match &self {
            IfEdgeCases::Zero {
                basic1,
            } => {
                // basic1: u8
                w.write_all(&basic1.to_le_bytes())?;

            }
            IfEdgeCases::One {
                basic1,
            } => {
                // basic1: u8
                w.write_all(&basic1.to_le_bytes())?;

            }
            IfEdgeCases::Two {
                basic1,
            } => {
                // basic1: u8
                w.write_all(&basic1.to_le_bytes())?;

            }
            IfEdgeCases::Three {
                basic3,
            } => {
                // basic3: u8
                w.write_all(&basic3.to_le_bytes())?;

            }
            IfEdgeCases::Four {
                basic3,
            } => {
                // basic3: u8
                w.write_all(&basic3.to_le_bytes())?;

            }
            IfEdgeCases::Five {
                basic5,
            } => {
                // basic5: u8
                w.write_all(&basic5.to_le_bytes())?;

            }
            IfEdgeCases::Six {
                basic5,
            } => {
                // basic5: u8
                w.write_all(&basic5.to_le_bytes())?;

            }
            IfEdgeCases::Rest {
                rest,
            } => {
                // rest: u8
                w.write_all(&rest.to_le_bytes())?;

            }
        }

        Ok(())
    }
}

impl IfEdgeCases {
    pub(crate) fn read<R: std::io::Read>(mut r: R) -> Result<Self, crate::errors::ParseErrorKind> {
        // t: TEnum
        let t = crate::util::read_u8_le(&mut r)?.try_into()?;

        let t_if = match t {
            TEnum::Zero => {
                // basic1: u8
                let basic1 = crate::util::read_u8_le(&mut r)?;

                IfEdgeCases::Zero {
                    basic1,
                }
            }
            TEnum::One => {
                // basic1: u8
                let basic1 = crate::util::read_u8_le(&mut r)?;

                IfEdgeCases::One {
                    basic1,
                }
            }
            TEnum::Two => {
                // basic1: u8
                let basic1 = crate::util::read_u8_le(&mut r)?;

                IfEdgeCases::Two {
                    basic1,
                }
            }
            TEnum::Three => {
                // basic3: u8
                let basic3 = crate::util::read_u8_le(&mut r)?;

                IfEdgeCases::Three {
                    basic3,
                }
            }
            TEnum::Four => {
                // basic3: u8
                let basic3 = crate::util::read_u8_le(&mut r)?;

                IfEdgeCases::Four {
                    basic3,
                }
            }
            TEnum::Five => {
                // basic5: u8
                let basic5 = crate::util::read_u8_le(&mut r)?;

                IfEdgeCases::Five {
                    basic5,
                }
            }
            TEnum::Six => {
                // basic5: u8
                let basic5 = crate::util::read_u8_le(&mut r)?;

                IfEdgeCases::Six {
                    basic5,
                }
            }
            TEnum::Rest => {
                // rest: u8
                let rest = crate::util::read_u8_le(&mut r)?;

                IfEdgeCases::Rest {
                    rest,
                }
            }
        };

        Ok(t_if)
    }

}

impl Default for IfEdgeCases {
    fn default() -> Self {
        // First enumerator without any fields
        Self::Zero {
            basic1: Default::default(),
        }
    }
}

impl IfEdgeCases {
    pub(crate) const fn as_int(&self) -> u8 {
        match self {
            Self::Zero { .. } => 0,
            Self::One { .. } => 1,
            Self::Two { .. } => 2,
            Self::Three { .. } => 3,
            Self::Four { .. } => 4,
            Self::Five { .. } => 5,
            Self::Six { .. } => 6,
            Self::Rest { .. } => 7,
        }
    }

}

impl std::fmt::Display for IfEdgeCases {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Zero{ .. } => f.write_str("Zero"),
            Self::One{ .. } => f.write_str("One"),
            Self::Two{ .. } => f.write_str("Two"),
            Self::Three{ .. } => f.write_str("Three"),
            Self::Four{ .. } => f.write_str("Four"),
            Self::Five{ .. } => f.write_str("Five"),
            Self::Six{ .. } => f.write_str("Six"),
            Self::Rest{ .. } => f.write_str("Rest"),
        }
    }
}

